
dcmaxon_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080072d8  080072d8  000082d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  08007784  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000238  240001f8  0800797c  000091f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000430  0800797c  00009430  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000091f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e473  00000000  00000000  00009226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001eb2  00000000  00000000  00017699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bc8  00000000  00000000  00019550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008db  00000000  00000000  0001a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003964b  00000000  00000000  0001a9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e194  00000000  00000000  0005403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171b7e  00000000  00000000  000621d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3d50  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f4c  00000000  00000000  001d3d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001d7ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080072c0 	.word	0x080072c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	080072c0 	.word	0x080072c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <main>:
static void MX_FDCAN1_Init(void);
void Error_Handler(void);

FDCAN_HandleTypeDef hfdcan1;
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	/* Sistem başlatma */
	printf("Main start...\n");
 8000396:	4824      	ldr	r0, [pc, #144]	@ (8000428 <main+0x98>)
 8000398:	f005 f83c 	bl	8005414 <puts>
	HAL_Init();
 800039c:	f000 fe16 	bl	8000fcc <HAL_Init>
	SystemClock_Config();
 80003a0:	f000 f852 	bl	8000448 <SystemClock_Config>
	MX_GPIO_Init();
 80003a4:	f000 f934 	bl	8000610 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80003a8:	f000 f8ce 	bl	8000548 <MX_FDCAN1_Init>

	/* FDCAN'ı başlat */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80003ac:	481f      	ldr	r0, [pc, #124]	@ (800042c <main+0x9c>)
 80003ae:	f001 f991 	bl	80016d4 <HAL_FDCAN_Start>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <main+0x2c>
	{
		Error_Handler(); // FDCAN başlatma hatası
 80003b8:	f000 f95a 	bl	8000670 <Error_Handler>
	}

	/* FDCAN RX interrupt'ını etkinleştir */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003bc:	2200      	movs	r2, #0
 80003be:	2101      	movs	r1, #1
 80003c0:	481a      	ldr	r0, [pc, #104]	@ (800042c <main+0x9c>)
 80003c2:	f001 fb79 	bl	8001ab8 <HAL_FDCAN_ActivateNotification>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <main+0x40>
	{
		Error_Handler(); // FDCAN interrupt hatası
 80003cc:	f000 f950 	bl	8000670 <Error_Handler>
	}

	uint8_t controller_id = 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	71fb      	strb	r3, [r7, #7]
	v_des=5;
 80003d4:	4b16      	ldr	r3, [pc, #88]	@ (8000430 <main+0xa0>)
 80003d6:	4a17      	ldr	r2, [pc, #92]	@ (8000434 <main+0xa4>)
 80003d8:	601a      	str	r2, [r3, #0]

	enter_motor_control_mode(controller_id, &hfdcan1);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4913      	ldr	r1, [pc, #76]	@ (800042c <main+0x9c>)
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fbcc 	bl	8000b7c <enter_motor_control_mode>

	while (1)
	{
		/* RPM komutunu FDCAN üzerinden gönder */
		pack_cmd(p_des, v_des, kp, kd, t_ff, &hfdcan1);
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <main+0xa8>)
 80003e6:	edd3 7a00 	vldr	s15, [r3]
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <main+0xa0>)
 80003ec:	ed93 7a00 	vldr	s14, [r3]
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <main+0xac>)
 80003f2:	edd3 6a00 	vldr	s13, [r3]
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <main+0xb0>)
 80003f8:	ed93 6a00 	vldr	s12, [r3]
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <main+0xb4>)
 80003fe:	edd3 5a00 	vldr	s11, [r3]
 8000402:	480a      	ldr	r0, [pc, #40]	@ (800042c <main+0x9c>)
 8000404:	eeb0 2a65 	vmov.f32	s4, s11
 8000408:	eef0 1a46 	vmov.f32	s3, s12
 800040c:	eeb0 1a66 	vmov.f32	s2, s13
 8000410:	eef0 0a47 	vmov.f32	s1, s14
 8000414:	eeb0 0a67 	vmov.f32	s0, s15
 8000418:	f000 fc12 	bl	8000c40 <pack_cmd>
		HAL_Delay(100);
 800041c:	2064      	movs	r0, #100	@ 0x64
 800041e:	f000 fe67 	bl	80010f0 <HAL_Delay>
		pack_cmd(p_des, v_des, kp, kd, t_ff, &hfdcan1);
 8000422:	bf00      	nop
 8000424:	e7de      	b.n	80003e4 <main+0x54>
 8000426:	bf00      	nop
 8000428:	080072d8 	.word	0x080072d8
 800042c:	24000214 	.word	0x24000214
 8000430:	240002d0 	.word	0x240002d0
 8000434:	40a00000 	.word	0x40a00000
 8000438:	240002cc 	.word	0x240002cc
 800043c:	240002d4 	.word	0x240002d4
 8000440:	240002d8 	.word	0x240002d8
 8000444:	240002dc 	.word	0x240002dc

08000448 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b09c      	sub	sp, #112	@ 0x70
 800044c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000452:	224c      	movs	r2, #76	@ 0x4c
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f005 f8bc 	bl	80055d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f005 f8b6 	bl	80055d4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000468:	2002      	movs	r0, #2
 800046a:	f001 ff53 	bl	8002314 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	4b33      	ldr	r3, [pc, #204]	@ (8000540 <SystemClock_Config+0xf8>)
 8000474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000476:	4a32      	ldr	r2, [pc, #200]	@ (8000540 <SystemClock_Config+0xf8>)
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800047e:	4b30      	ldr	r3, [pc, #192]	@ (8000540 <SystemClock_Config+0xf8>)
 8000480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	4b2e      	ldr	r3, [pc, #184]	@ (8000544 <SystemClock_Config+0xfc>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000490:	4a2c      	ldr	r2, [pc, #176]	@ (8000544 <SystemClock_Config+0xfc>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <SystemClock_Config+0xfc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004a4:	bf00      	nop
 80004a6:	4b27      	ldr	r3, [pc, #156]	@ (8000544 <SystemClock_Config+0xfc>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004b2:	d1f8      	bne.n	80004a6 <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004b4:	2303      	movs	r3, #3
 80004b6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004be:	2301      	movs	r3, #1
 80004c0:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	2340      	movs	r3, #64	@ 0x40
 80004c4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	2302      	movs	r3, #2
 80004c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ca:	2302      	movs	r3, #2
 80004cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80004d2:	2318      	movs	r3, #24
 80004d4:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80004da:	2304      	movs	r3, #4
 80004dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80004de:	2302      	movs	r3, #2
 80004e0:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004e2:	230c      	movs	r3, #12
 80004e4:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 ff48 	bl	8002388 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80004fe:	f000 f8b7 	bl	8000670 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	233f      	movs	r3, #63	@ 0x3f
 8000504:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000516:	2340      	movs	r3, #64	@ 0x40
 8000518:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2101      	movs	r1, #1
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fb88 	bl	8002c3c <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0xee>
	{
		Error_Handler();
 8000532:	f000 f89d 	bl	8000670 <Error_Handler>
	}
}
 8000536:	bf00      	nop
 8000538:	3770      	adds	r7, #112	@ 0x70
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	58000400 	.word	0x58000400
 8000544:	58024800 	.word	0x58024800

08000548 <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	hfdcan1.Instance = FDCAN1;
 800054c:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 800054e:	4a2f      	ldr	r2, [pc, #188]	@ (800060c <MX_FDCAN1_Init+0xc4>)
 8000550:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000552:	4b2d      	ldr	r3, [pc, #180]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000558:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 800055e:	4b2a      	ldr	r3, [pc, #168]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000560:	2200      	movs	r2, #0
 8000562:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000566:	2200      	movs	r2, #0
 8000568:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 800056a:	4b27      	ldr	r3, [pc, #156]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 800056c:	2200      	movs	r2, #0
 800056e:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000572:	2210      	movs	r2, #16
 8000574:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000576:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000578:	2201      	movs	r2, #1
 800057a:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 800057c:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 800057e:	2202      	movs	r2, #2
 8000580:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000584:	2202      	movs	r2, #2
 8000586:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 800058a:	2201      	movs	r2, #1
 800058c:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000590:	2201      	movs	r2, #1
 8000592:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 8000596:	2201      	movs	r2, #1
 8000598:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 800059c:	2201      	movs	r2, #1
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 80005ac:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <MX_FDCAN1_Init+0xc0>)
 80005f6:	f000 fe8f 	bl	8001318 <HAL_FDCAN_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_FDCAN1_Init+0xbc>
	{
		Error_Handler();
 8000600:	f000 f836 	bl	8000670 <Error_Handler>
	}
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	24000214 	.word	0x24000214
 800060c:	4000a000 	.word	0x4000a000

08000610 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

	/* FDCAN1 pinlerini (PD0: RX, PD1: TX) yapılandır */
	__HAL_RCC_GPIOD_CLK_ENABLE();  // GPIOD için saat aktif et
 8000624:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <MX_GPIO_Init+0x58>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062a:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x58>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_GPIO_Init+0x58>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000642:	2303      	movs	r3, #3
 8000644:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;  // FDCAN1 pin alternatifi
 8000652:	2309      	movs	r3, #9
 8000654:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_GPIO_Init+0x5c>)
 800065c:	f001 fcaa 	bl	8001fb4 <HAL_GPIO_Init>
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58024400 	.word	0x58024400
 800066c:	58020c00 	.word	0x58020c00

08000670 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <Error_Handler+0x8>

0800067c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_MspInit+0x30>)
 8000684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000688:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <HAL_MspInit+0x30>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_MspInit+0x30>)
 8000694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	58024400 	.word	0x58024400

080006b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0ba      	sub	sp, #232	@ 0xe8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	22c0      	movs	r2, #192	@ 0xc0
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 ff7f 	bl	80055d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <HAL_FDCAN_MspInit+0xc8>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d146      	bne.n	800076e <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80006ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fdcf 	bl	800329c <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000704:	f7ff ffb4 	bl	8000670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_FDCAN_MspInit+0xcc>)
 800070a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800070e:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_FDCAN_MspInit+0xcc>)
 800071a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800071e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	4a13      	ldr	r2, [pc, #76]	@ (800077c <HAL_FDCAN_MspInit+0xcc>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	f003 0308 	and.w	r3, r3, #8
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000744:	2303      	movs	r3, #3
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800075c:	2309      	movs	r3, #9
 800075e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_FDCAN_MspInit+0xd0>)
 800076a:	f001 fc23 	bl	8001fb4 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800076e:	bf00      	nop
 8000770:	37e8      	adds	r7, #232	@ 0xe8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	4000a000 	.word	0x4000a000
 800077c:	58024400 	.word	0x58024400
 8000780:	58020c00 	.word	0x58020c00

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 fc69 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
	printf("Interrupt is triggered...\n");
 8000806:	4809      	ldr	r0, [pc, #36]	@ (800082c <FDCAN1_IT0_IRQHandler+0x2c>)
 8000808:	f004 fe04 	bl	8005414 <puts>
    FDCAN_RxHeaderTypeDef rx_msg;

    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_msg, msg) == HAL_OK)
 800080c:	463a      	mov	r2, r7
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <FDCAN1_IT0_IRQHandler+0x30>)
 8000810:	2140      	movs	r1, #64	@ 0x40
 8000812:	4808      	ldr	r0, [pc, #32]	@ (8000834 <FDCAN1_IT0_IRQHandler+0x34>)
 8000814:	f000 ffe4 	bl	80017e0 <HAL_FDCAN_GetRxMessage>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <FDCAN1_IT0_IRQHandler+0x22>
    {
        // Motor verisini al ve güncelle
    	unpack_reply();
 800081e:	f000 fb2f 	bl	8000e80 <unpack_reply>
    }
}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	080072e8 	.word	0x080072e8
 8000830:	240002c0 	.word	0x240002c0
 8000834:	24000214 	.word	0x24000214

08000838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return 1;
 800083c:	2301      	movs	r3, #1
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <_kill>:

int _kill(int pid, int sig)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000852:	f004 ff11 	bl	8005678 <__errno>
 8000856:	4603      	mov	r3, r0
 8000858:	2216      	movs	r2, #22
 800085a:	601a      	str	r2, [r3, #0]
  return -1;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_exit>:

void _exit (int status)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ffe7 	bl	8000848 <_kill>
  while (1) {}    /* Make sure we hang here */
 800087a:	bf00      	nop
 800087c:	e7fd      	b.n	800087a <_exit+0x12>

0800087e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e00a      	b.n	80008a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000890:	f3af 8000 	nop.w
 8000894:	4601      	mov	r1, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	60ba      	str	r2, [r7, #8]
 800089c:	b2ca      	uxtb	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf0      	blt.n	8000890 <_read+0x12>
  }

  return len;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e009      	b.n	80008de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	60ba      	str	r2, [r7, #8]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3301      	adds	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dbf1      	blt.n	80008ca <_write+0x12>
  }
  return len;
 80008e6:	687b      	ldr	r3, [r7, #4]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_close>:

int _close(int file)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000918:	605a      	str	r2, [r3, #4]
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <_isatty>:

int _isatty(int file)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f004 fe76 	bl	8005678 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24080000 	.word	0x24080000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	240002b4 	.word	0x240002b4
 80009c0:	24000430 	.word	0x24000430

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <SystemInit+0xe4>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a36      	ldr	r2, [pc, #216]	@ (8000aa8 <SystemInit+0xe4>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d8:	4b34      	ldr	r3, [pc, #208]	@ (8000aac <SystemInit+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d807      	bhi.n	80009f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e4:	4b31      	ldr	r3, [pc, #196]	@ (8000aac <SystemInit+0xe8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 030f 	bic.w	r3, r3, #15
 80009ec:	4a2f      	ldr	r2, [pc, #188]	@ (8000aac <SystemInit+0xe8>)
 80009ee:	f043 0307 	orr.w	r3, r3, #7
 80009f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <SystemInit+0xec>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab0 <SystemInit+0xec>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <SystemInit+0xec>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab0 <SystemInit+0xec>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4929      	ldr	r1, [pc, #164]	@ (8000ab0 <SystemInit+0xec>)
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <SystemInit+0xf0>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <SystemInit+0xe8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a1e:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <SystemInit+0xe8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f023 030f 	bic.w	r3, r3, #15
 8000a26:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <SystemInit+0xe8>)
 8000a28:	f043 0307 	orr.w	r3, r3, #7
 8000a2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <SystemInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <SystemInit+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <SystemInit+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <SystemInit+0xec>)
 8000a42:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <SystemInit+0xf4>)
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <SystemInit+0xec>)
 8000a48:	4a1c      	ldr	r2, [pc, #112]	@ (8000abc <SystemInit+0xf8>)
 8000a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <SystemInit+0xec>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <SystemInit+0xfc>)
 8000a50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <SystemInit+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <SystemInit+0xec>)
 8000a5a:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <SystemInit+0xfc>)
 8000a5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <SystemInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <SystemInit+0xec>)
 8000a66:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <SystemInit+0xfc>)
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <SystemInit+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <SystemInit+0xec>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <SystemInit+0xec>)
 8000a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <SystemInit+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <SystemInit+0x100>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <SystemInit+0x104>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a8e:	d202      	bcs.n	8000a96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <SystemInit+0x108>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <SystemInit+0x10c>)
 8000a98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	52002000 	.word	0x52002000
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ab8:	02020200 	.word	0x02020200
 8000abc:	01ff0000 	.word	0x01ff0000
 8000ac0:	01010280 	.word	0x01010280
 8000ac4:	5c001000 	.word	0x5c001000
 8000ac8:	ffff0000 	.word	0xffff0000
 8000acc:	51008108 	.word	0x51008108
 8000ad0:	52004000 	.word	0x52004000

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f7ff ff74 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f004 fdbf 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fc43 	bl	8000390 <main>
  bx  lr
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b14:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8000b18:	08007784 	.word	0x08007784
  ldr r2, =_sbss
 8000b1c:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8000b20:	24000430 	.word	0x24000430

08000b24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC3_IRQHandler>

08000b26 <comm_can_transmit_eid>:
	buffer_append_int16(buffer + send_index + send_index1, RPA, &send_index1);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index + send_index1, hfdcan1);
}

// Transmit fonksiyonu (FDCAN kullanılarak)
static void comm_can_transmit_eid(uint32_t id, uint8_t* data, uint8_t len, FDCAN_HandleTypeDef *hfdcan1) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b08e      	sub	sp, #56	@ 0x38
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4613      	mov	r3, r2
 8000b34:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d901      	bls.n	8000b40 <comm_can_transmit_eid+0x1a>
		len = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	71fb      	strb	r3, [r7, #7]
	}
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = id;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID; // Standart ID tipi
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Veri çerçevesi
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = len;           // Veri uzunluğu
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &TxHeader, data) != HAL_OK)
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	4619      	mov	r1, r3
 8000b64:	6838      	ldr	r0, [r7, #0]
 8000b66:	f000 fde0 	bl	800172a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <comm_can_transmit_eid+0x4e>
	{
		Error_Handler(); // Veri gönderme hatası
 8000b70:	f7ff fd7e 	bl	8000670 <Error_Handler>
	}
}
 8000b74:	bf00      	nop
 8000b76:	3738      	adds	r7, #56	@ 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <enter_motor_control_mode>:
 ****************************************************************************************************************
 * MIT MODE
 *****************************************************************************************************************
 */

void enter_motor_control_mode(uint8_t controller_id, FDCAN_HandleTypeDef *hfdcan1) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC}; // Motor control mode giriş mesajı
 8000b88:	4a08      	ldr	r2, [pc, #32]	@ (8000bac <enter_motor_control_mode+0x30>)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b92:	e883 0003 	stmia.w	r3, {r0, r1}
    comm_can_transmit_eid(controller_id, buffer, sizeof(buffer), hfdcan1);
 8000b96:	79f8      	ldrb	r0, [r7, #7]
 8000b98:	f107 0108 	add.w	r1, r7, #8
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	f7ff ffc1 	bl	8000b26 <comm_can_transmit_eid>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08007388 	.word	0x08007388

08000bb0 <float_to_uint>:


static int float_to_uint(float x, float x_min, float x_max, unsigned int bits)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bbe:	ed87 1a01 	vstr	s2, [r7, #4]
 8000bc2:	6038      	str	r0, [r7, #0]
	/// Converts a float to an unsigned int, given range and number of bits ///
	float span = x_max- x_min;
 8000bc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd0:	edc7 7a05 	vstr	s15, [r7, #20]
	if(x < x_min) x = x_min;
 8000bd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be4:	d502      	bpl.n	8000bec <float_to_uint+0x3c>
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e00a      	b.n	8000c02 <float_to_uint+0x52>
	else if(x > x_max) x = x_max;
 8000bec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfc:	dd01      	ble.n	8000c02 <float_to_uint+0x52>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]
	return (int) ((x- x_min)*((float)((1<<bits)/span)));
 8000c02:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c0e:	2201      	movs	r2, #1
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000c1e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000c22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2e:	ee17 3a90 	vmov	r3, s15
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <pack_cmd>:


/*
 *  Sends routine code
 */
void pack_cmd(float p_des, float v_des, float kp, float kd, float t_ff, FDCAN_HandleTypeDef *hfdcan1){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	ed87 0a05 	vstr	s0, [r7, #20]
 8000c4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000c4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000c52:	edc7 1a02 	vstr	s3, [r7, #8]
 8000c56:	ed87 2a01 	vstr	s4, [r7, #4]
 8000c5a:	6038      	str	r0, [r7, #0]
	p_des = fminf(fmaxf(P_MIN, p_des), P_MAX);
 8000c5c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e54 <pack_cmd+0x214>)
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	eef0 0a67 	vmov.f32	s1, s15
 8000c66:	ed97 0a05 	vldr	s0, [r7, #20]
 8000c6a:	f006 fad3 	bl	8007214 <fmaxf>
 8000c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8000c72:	4b79      	ldr	r3, [pc, #484]	@ (8000e58 <pack_cmd+0x218>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	eef0 0a67 	vmov.f32	s1, s15
 8000c7c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c80:	f006 fae5 	bl	800724e <fminf>
 8000c84:	ed87 0a05 	vstr	s0, [r7, #20]
	v_des = fminf(fmaxf(V_MIN, v_des), V_MAX);
 8000c88:	4b74      	ldr	r3, [pc, #464]	@ (8000e5c <pack_cmd+0x21c>)
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	eef0 0a67 	vmov.f32	s1, s15
 8000c92:	ed97 0a04 	vldr	s0, [r7, #16]
 8000c96:	f006 fabd 	bl	8007214 <fmaxf>
 8000c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8000c9e:	4b70      	ldr	r3, [pc, #448]	@ (8000e60 <pack_cmd+0x220>)
 8000ca0:	edd3 7a00 	vldr	s15, [r3]
 8000ca4:	eef0 0a67 	vmov.f32	s1, s15
 8000ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8000cac:	f006 facf 	bl	800724e <fminf>
 8000cb0:	ed87 0a04 	vstr	s0, [r7, #16]
	kp =fminf(fmaxf(KP_MIN, kp), KP_MAX);
 8000cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e64 <pack_cmd+0x224>)
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
 8000cba:	eef0 0a67 	vmov.f32	s1, s15
 8000cbe:	ed97 0a03 	vldr	s0, [r7, #12]
 8000cc2:	f006 faa7 	bl	8007214 <fmaxf>
 8000cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8000cca:	4b67      	ldr	r3, [pc, #412]	@ (8000e68 <pack_cmd+0x228>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eef0 0a67 	vmov.f32	s1, s15
 8000cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8000cd8:	f006 fab9 	bl	800724e <fminf>
 8000cdc:	ed87 0a03 	vstr	s0, [r7, #12]
	kd = fminf(fmaxf(KD_MIN, kd), KD_MAX);
 8000ce0:	4b62      	ldr	r3, [pc, #392]	@ (8000e6c <pack_cmd+0x22c>)
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	eef0 0a67 	vmov.f32	s1, s15
 8000cea:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cee:	f006 fa91 	bl	8007214 <fmaxf>
 8000cf2:	eeb0 7a40 	vmov.f32	s14, s0
 8000cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8000e70 <pack_cmd+0x230>)
 8000cf8:	edd3 7a00 	vldr	s15, [r3]
 8000cfc:	eef0 0a67 	vmov.f32	s1, s15
 8000d00:	eeb0 0a47 	vmov.f32	s0, s14
 8000d04:	f006 faa3 	bl	800724e <fminf>
 8000d08:	ed87 0a02 	vstr	s0, [r7, #8]
	t_ff = fminf(fmaxf(T_MIN, t_ff), T_MAX);
 8000d0c:	4b59      	ldr	r3, [pc, #356]	@ (8000e74 <pack_cmd+0x234>)
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	eef0 0a67 	vmov.f32	s1, s15
 8000d16:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d1a:	f006 fa7b 	bl	8007214 <fmaxf>
 8000d1e:	eeb0 7a40 	vmov.f32	s14, s0
 8000d22:	4b55      	ldr	r3, [pc, #340]	@ (8000e78 <pack_cmd+0x238>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	eef0 0a67 	vmov.f32	s1, s15
 8000d2c:	eeb0 0a47 	vmov.f32	s0, s14
 8000d30:	f006 fa8d 	bl	800724e <fminf>
 8000d34:	ed87 0a01 	vstr	s0, [r7, #4]

	/// convert floats to unsigned ints ///
	int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8000d38:	4b46      	ldr	r3, [pc, #280]	@ (8000e54 <pack_cmd+0x214>)
 8000d3a:	edd3 7a00 	vldr	s15, [r3]
 8000d3e:	4b46      	ldr	r3, [pc, #280]	@ (8000e58 <pack_cmd+0x218>)
 8000d40:	ed93 7a00 	vldr	s14, [r3]
 8000d44:	2010      	movs	r0, #16
 8000d46:	eeb0 1a47 	vmov.f32	s2, s14
 8000d4a:	eef0 0a67 	vmov.f32	s1, s15
 8000d4e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000d52:	f7ff ff2d 	bl	8000bb0 <float_to_uint>
 8000d56:	62f8      	str	r0, [r7, #44]	@ 0x2c
	int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8000d58:	4b40      	ldr	r3, [pc, #256]	@ (8000e5c <pack_cmd+0x21c>)
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	4b40      	ldr	r3, [pc, #256]	@ (8000e60 <pack_cmd+0x220>)
 8000d60:	ed93 7a00 	vldr	s14, [r3]
 8000d64:	200c      	movs	r0, #12
 8000d66:	eeb0 1a47 	vmov.f32	s2, s14
 8000d6a:	eef0 0a67 	vmov.f32	s1, s15
 8000d6e:	ed97 0a04 	vldr	s0, [r7, #16]
 8000d72:	f7ff ff1d 	bl	8000bb0 <float_to_uint>
 8000d76:	62b8      	str	r0, [r7, #40]	@ 0x28
	int kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8000d78:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <pack_cmd+0x224>)
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <pack_cmd+0x228>)
 8000d80:	ed93 7a00 	vldr	s14, [r3]
 8000d84:	200c      	movs	r0, #12
 8000d86:	eeb0 1a47 	vmov.f32	s2, s14
 8000d8a:	eef0 0a67 	vmov.f32	s1, s15
 8000d8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d92:	f7ff ff0d 	bl	8000bb0 <float_to_uint>
 8000d96:	6278      	str	r0, [r7, #36]	@ 0x24
	int kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8000d98:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <pack_cmd+0x22c>)
 8000d9a:	edd3 7a00 	vldr	s15, [r3]
 8000d9e:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <pack_cmd+0x230>)
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	200c      	movs	r0, #12
 8000da6:	eeb0 1a47 	vmov.f32	s2, s14
 8000daa:	eef0 0a67 	vmov.f32	s1, s15
 8000dae:	ed97 0a02 	vldr	s0, [r7, #8]
 8000db2:	f7ff fefd 	bl	8000bb0 <float_to_uint>
 8000db6:	6238      	str	r0, [r7, #32]
	int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <pack_cmd+0x234>)
 8000dba:	edd3 7a00 	vldr	s15, [r3]
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <pack_cmd+0x238>)
 8000dc0:	ed93 7a00 	vldr	s14, [r3]
 8000dc4:	200c      	movs	r0, #12
 8000dc6:	eeb0 1a47 	vmov.f32	s2, s14
 8000dca:	eef0 0a67 	vmov.f32	s1, s15
 8000dce:	ed97 0a01 	vldr	s0, [r7, #4]
 8000dd2:	f7ff feed 	bl	8000bb0 <float_to_uint>
 8000dd6:	61f8      	str	r0, [r7, #28]

	/// pack ints into the can buffer ///
	msg[0] = p_int>>8; // Position 8 higher
 8000dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dda:	121b      	asrs	r3, r3, #8
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <pack_cmd+0x23c>)
 8000de0:	701a      	strb	r2, [r3, #0]
	msg[1] = p_int&0xFF;// Position 8 lower
 8000de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <pack_cmd+0x23c>)
 8000de8:	705a      	strb	r2, [r3, #1]
	msg[2] = v_int>>4; // Speed 8 higher
 8000dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dec:	111b      	asrs	r3, r3, #4
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <pack_cmd+0x23c>)
 8000df2:	709a      	strb	r2, [r3, #2]
	msg[3] = ((v_int&0xF)<<4)|(kp_int>>8); //Speed 4 bit lower KP 4bit higher
 8000df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfe:	121b      	asrs	r3, r3, #8
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <pack_cmd+0x23c>)
 8000e0a:	70da      	strb	r2, [r3, #3]
	msg[4] = kp_int&0xFF; // KP 8 bit lower
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <pack_cmd+0x23c>)
 8000e12:	711a      	strb	r2, [r3, #4]
	msg[5] = kd_int>>4; // Kd 8 bit higher
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	111b      	asrs	r3, r3, #4
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <pack_cmd+0x23c>)
 8000e1c:	715a      	strb	r2, [r3, #5]
	msg[6] = ((kd_int&0xF)<<4)|(kp_int>>8); //KP 4bit lower torque 4 bit higher
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	b25a      	sxtb	r2, r3
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	121b      	asrs	r3, r3, #8
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <pack_cmd+0x23c>)
 8000e34:	719a      	strb	r2, [r3, #6]
	msg[7] = t_int&0xff; // torque 4 bit lower
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <pack_cmd+0x23c>)
 8000e3c:	71da      	strb	r2, [r3, #7]
	comm_can_transmit_eid(0, msg, sizeof(msg), hfdcan1);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	220c      	movs	r2, #12
 8000e42:	490e      	ldr	r1, [pc, #56]	@ (8000e7c <pack_cmd+0x23c>)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fe6e 	bl	8000b26 <comm_can_transmit_eid>
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	@ 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000008 	.word	0x24000008
 8000e58:	2400000c 	.word	0x2400000c
 8000e5c:	24000010 	.word	0x24000010
 8000e60:	24000014 	.word	0x24000014
 8000e64:	240002b8 	.word	0x240002b8
 8000e68:	24000020 	.word	0x24000020
 8000e6c:	240002bc 	.word	0x240002bc
 8000e70:	24000024 	.word	0x24000024
 8000e74:	24000018 	.word	0x24000018
 8000e78:	2400001c 	.word	0x2400001c
 8000e7c:	240002c0 	.word	0x240002c0

08000e80 <unpack_reply>:


/*
 *  Receive routine code
 */
void unpack_reply(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
	/// unpack ints from can buffer ///
	int id = msg[0];
 8000e86:	4b2e      	ldr	r3, [pc, #184]	@ (8000f40 <unpack_reply+0xc0>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	61fb      	str	r3, [r7, #28]
	int p_int = (msg[1]<<8)|msg[2]; //Motor position data
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <unpack_reply+0xc0>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	4a2b      	ldr	r2, [pc, #172]	@ (8000f40 <unpack_reply+0xc0>)
 8000e94:	7892      	ldrb	r2, [r2, #2]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
	int v_int = (msg[3]<<4)|(msg[4]>>4); // Motor speed data
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <unpack_reply+0xc0>)
 8000e9c:	78db      	ldrb	r3, [r3, #3]
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4a27      	ldr	r2, [pc, #156]	@ (8000f40 <unpack_reply+0xc0>)
 8000ea2:	7912      	ldrb	r2, [r2, #4]
 8000ea4:	0912      	lsrs	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
	int i_int = ((msg[4]&0xF)<<8)|msg[5]; // Motor torque data
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <unpack_reply+0xc0>)
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000eb6:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <unpack_reply+0xc0>)
 8000eb8:	7952      	ldrb	r2, [r2, #5]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]

	/// convert ints to floats ///
	float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <unpack_reply+0xc4>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <unpack_reply+0xc8>)
 8000ec6:	ed93 7a00 	vldr	s14, [r3]
 8000eca:	2110      	movs	r1, #16
 8000ecc:	eef0 0a47 	vmov.f32	s1, s14
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	69b8      	ldr	r0, [r7, #24]
 8000ed6:	f000 f847 	bl	8000f68 <uint_to_float>
 8000eda:	ed87 0a03 	vstr	s0, [r7, #12]
	float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <unpack_reply+0xcc>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <unpack_reply+0xd0>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	210c      	movs	r1, #12
 8000eec:	eef0 0a47 	vmov.f32	s1, s14
 8000ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef4:	6978      	ldr	r0, [r7, #20]
 8000ef6:	f000 f837 	bl	8000f68 <uint_to_float>
 8000efa:	ed87 0a02 	vstr	s0, [r7, #8]
	float i = uint_to_float(i_int, T_MIN, T_MAX, 12);
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <unpack_reply+0xd4>)
 8000f00:	edd3 7a00 	vldr	s15, [r3]
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <unpack_reply+0xd8>)
 8000f06:	ed93 7a00 	vldr	s14, [r3]
 8000f0a:	210c      	movs	r1, #12
 8000f0c:	eef0 0a47 	vmov.f32	s1, s14
 8000f10:	eeb0 0a67 	vmov.f32	s0, s15
 8000f14:	6938      	ldr	r0, [r7, #16]
 8000f16:	f000 f827 	bl	8000f68 <uint_to_float>
 8000f1a:	ed87 0a01 	vstr	s0, [r7, #4]

	// Read the corresponding data according to the ID code
	if(id == 1){
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <unpack_reply+0xb6>
		p_des = p;
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <unpack_reply+0xdc>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6013      	str	r3, [r2, #0]
		v_des = v;
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <unpack_reply+0xe0>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	6013      	str	r3, [r2, #0]
		t_ff = i;
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <unpack_reply+0xe4>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
	}
}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	240002c0 	.word	0x240002c0
 8000f44:	24000008 	.word	0x24000008
 8000f48:	2400000c 	.word	0x2400000c
 8000f4c:	24000010 	.word	0x24000010
 8000f50:	24000014 	.word	0x24000014
 8000f54:	24000018 	.word	0x24000018
 8000f58:	2400001c 	.word	0x2400001c
 8000f5c:	240002cc 	.word	0x240002cc
 8000f60:	240002d0 	.word	0x240002d0
 8000f64:	240002dc 	.word	0x240002dc

08000f68 <uint_to_float>:


/*
 *  All numbers are converted to floating-point by the following function
 */
static float uint_to_float(int x_int, float x_min, float x_max, int bits) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f74:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  /// converts unsigned int to float, given range and number of bits ///
  float span = x_max - x_min;
 8000f7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f86:	edc7 7a05 	vstr	s15, [r7, #20]
  float offset = x_min;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
  return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fba:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f96e 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd8:	f001 ffe6 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_Init+0x68>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	f003 030f 	and.w	r3, r3, #15
 8000fe8:	4913      	ldr	r1, [pc, #76]	@ (8001038 <HAL_Init+0x6c>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_Init+0x68>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <HAL_Init+0x6c>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <HAL_Init+0x70>)
 800100e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_Init+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f814 	bl	8001044 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e002      	b.n	800102c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fb29 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58024400 	.word	0x58024400
 8001038:	080073dc 	.word	0x080073dc
 800103c:	24000004 	.word	0x24000004
 8001040:	24000000 	.word	0x24000000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_InitTick+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e021      	b.n	800109c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_InitTick+0x64>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f945 	bl	80012fe <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f91d 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_InitTick+0x68>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2400002c 	.word	0x2400002c
 80010a8:	24000000 	.word	0x24000000
 80010ac:	24000028 	.word	0x24000028

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2400002c 	.word	0x2400002c
 80010d4:	240002e0 	.word	0x240002e0

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	240002e0 	.word	0x240002e0

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2400002c 	.word	0x2400002c

08001138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <HAL_GetREVID+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0c1b      	lsrs	r3, r3, #16
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	5c001000 	.word	0x5c001000

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <__NVIC_SetPriorityGrouping+0x40>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	4313      	orrs	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <__NVIC_SetPriorityGrouping+0x40>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	05fa0000 	.word	0x05fa0000

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff47 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff5e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb2 	bl	8001270 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b098      	sub	sp, #96	@ 0x60
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001320:	4a84      	ldr	r2, [pc, #528]	@ (8001534 <HAL_FDCAN_Init+0x21c>)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4611      	mov	r1, r2
 8001328:	224c      	movs	r2, #76	@ 0x4c
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f9d1 	bl	80056d2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e1c6      	b.n	80016c8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7e      	ldr	r2, [pc, #504]	@ (8001538 <HAL_FDCAN_Init+0x220>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d106      	bne.n	8001352 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f9a2 	bl	80006b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0210 	bic.w	r2, r2, #16
 800137a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff feac 	bl	80010d8 <HAL_GetTick>
 8001380:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001382:	e014      	b.n	80013ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001384:	f7ff fea8 	bl	80010d8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d90d      	bls.n	80013ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e18c      	b.n	80016c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d0e3      	beq.n	8001384 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff fe84 	bl	80010d8 <HAL_GetTick>
 80013d0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013d2:	e014      	b.n	80013fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d4:	f7ff fe80 	bl	80010d8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90d      	bls.n	80013fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e164      	b.n	80016c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0e3      	beq.n	80013d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0202 	orr.w	r2, r2, #2
 800141a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7c1b      	ldrb	r3, [r3, #16]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001432:	619a      	str	r2, [r3, #24]
 8001434:	e007      	b.n	8001446 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001444:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7c5b      	ldrb	r3, [r3, #17]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	e007      	b.n	8001470 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800146e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7c9b      	ldrb	r3, [r3, #18]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001486:	619a      	str	r2, [r3, #24]
 8001488:	e007      	b.n	800149a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001498:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80014be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0210 	bic.w	r2, r2, #16
 80014ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d108      	bne.n	80014ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0204 	orr.w	r2, r2, #4
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e030      	b.n	800154c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d02c      	beq.n	800154c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d020      	beq.n	800153c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001508:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0210 	orr.w	r2, r2, #16
 8001518:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d114      	bne.n	800154c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0220 	orr.w	r2, r2, #32
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	e00b      	b.n	800154c <HAL_FDCAN_Init+0x234>
 8001534:	08007390 	.word	0x08007390
 8001538:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0220 	orr.w	r2, r2, #32
 800154a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	3b01      	subs	r3, #1
 8001552:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	3b01      	subs	r3, #1
 800155a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800155c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001564:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	3b01      	subs	r3, #1
 800156e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001574:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001576:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001580:	d115      	bne.n	80015ae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	3b01      	subs	r3, #1
 800158e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001590:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	3b01      	subs	r3, #1
 8001598:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800159a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a2:	3b01      	subs	r3, #1
 80015a4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015aa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d4:	4413      	add	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d011      	beq.n	80015fe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80015e2:	f023 0107 	bic.w	r1, r3, #7
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	3360      	adds	r3, #96	@ 0x60
 80015ee:	443b      	add	r3, r7
 80015f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d011      	beq.n	800162a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800160e:	f023 0107 	bic.w	r1, r3, #7
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	3360      	adds	r3, #96	@ 0x60
 800161a:	443b      	add	r3, r7
 800161c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162e:	2b00      	cmp	r3, #0
 8001630:	d012      	beq.n	8001658 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800163a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	3360      	adds	r3, #96	@ 0x60
 8001646:	443b      	add	r3, r7
 8001648:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800164c:	011a      	lsls	r2, r3, #4
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800165c:	2b00      	cmp	r3, #0
 800165e:	d012      	beq.n	8001686 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001668:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	3360      	adds	r3, #96	@ 0x60
 8001674:	443b      	add	r3, r7
 8001676:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800167a:	021a      	lsls	r2, r3, #8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <HAL_FDCAN_Init+0x3b8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d107      	bne.n	80016a0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f022 0203 	bic.w	r2, r2, #3
 800169e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fa77 	bl	8001bac <FDCAN_CalcultateRamBlockAddresses>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80016c4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3760      	adds	r7, #96	@ 0x60
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	4000a000 	.word	0x4000a000

080016d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d111      	bne.n	800170c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	e008      	b.n	800171e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001712:	f043 0204 	orr.w	r2, r3, #4
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
  }
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d141      	bne.n	80017c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800174a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001758:	f043 0220 	orr.w	r2, r3, #32
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e038      	b.n	80017d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800176e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800177c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e026      	b.n	80017d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001792:	0c1b      	lsrs	r3, r3, #16
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 fb89 	bl	8001eb8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e008      	b.n	80017d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017cc:	f043 0208 	orr.w	r2, r3, #8
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
  }
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80017f8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80017fa:	7efb      	ldrb	r3, [r7, #27]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 8149 	bne.w	8001a94 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b40      	cmp	r3, #64	@ 0x40
 8001806:	d14c      	bne.n	80018a2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001810:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800181e:	f043 0220 	orr.w	r2, r3, #32
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e13c      	b.n	8001aa6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001842:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e12a      	b.n	8001aa6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001858:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001860:	d10a      	bne.n	8001878 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800186a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800186e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001872:	d101      	bne.n	8001878 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001874:	2301      	movs	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	69f9      	ldr	r1, [r7, #28]
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	e068      	b.n	8001974 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b41      	cmp	r3, #65	@ 0x41
 80018a6:	d14c      	bne.n	8001942 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80018b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018be:	f043 0220 	orr.w	r2, r3, #32
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0ec      	b.n	8001aa6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80018d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0da      	b.n	8001aa6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80018f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d10a      	bne.n	8001918 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800190a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800190e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001912:	d101      	bne.n	8001918 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001914:	2301      	movs	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001934:	69f9      	ldr	r1, [r7, #28]
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001940:	e018      	b.n	8001974 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	d309      	bcc.n	8001960 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001952:	f043 0220 	orr.w	r2, r3, #32
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0a2      	b.n	8001aa6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0c9b      	lsrs	r3, r3, #18
 800198e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e005      	b.n	80019a4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	3304      	adds	r3, #4
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	f003 020f 	and.w	r2, r3, #15
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e1b      	lsrs	r3, r3, #24
 80019f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0fda      	lsrs	r2, r3, #31
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	e00a      	b.n	8001a30 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	441a      	add	r2, r3
 8001a20:	6839      	ldr	r1, [r7, #0]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	440b      	add	r3, r1
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d3ec      	bcc.n	8001a1a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b40      	cmp	r3, #64	@ 0x40
 8001a44:	d105      	bne.n	8001a52 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001a50:	e01e      	b.n	8001a90 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b41      	cmp	r3, #65	@ 0x41
 8001a56:	d105      	bne.n	8001a64 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001a62:	e015      	b.n	8001a90 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b1f      	cmp	r3, #31
 8001a68:	d808      	bhi.n	8001a7c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001a7a:	e009      	b.n	8001a90 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 021f 	and.w	r2, r3, #31
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e008      	b.n	8001aa6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a9a:	f043 0208 	orr.w	r2, r3, #8
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
  }
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	372c      	adds	r7, #44	@ 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	080073ec 	.word	0x080073ec

08001ab8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001aca:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d002      	beq.n	8001ad8 <HAL_FDCAN_ActivateNotification+0x20>
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d155      	bne.n	8001b84 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001af6:	e014      	b.n	8001b22 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4013      	ands	r3, r2
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d108      	bne.n	8001b1a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0202 	orr.w	r2, r2, #2
 8001b16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b18:	e003      	b.n	8001b22 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <HAL_FDCAN_ActivateNotification+0xec>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	0f9b      	lsrs	r3, r3, #30
 8001b7a:	490b      	ldr	r1, [pc, #44]	@ (8001ba8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e008      	b.n	8001b96 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b8a:	f043 0202 	orr.w	r2, r3, #2
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	3fcfffff 	.word	0x3fcfffff
 8001ba8:	4000a800 	.word	0x4000a800

08001bac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	0091      	lsls	r1, r2, #2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bdc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c02:	4b97      	ldr	r3, [pc, #604]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	0091      	lsls	r1, r2, #2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001c44:	4b86      	ldr	r3, [pc, #536]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	0091      	lsls	r1, r2, #2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c8c:	4b74      	ldr	r3, [pc, #464]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	0091      	lsls	r1, r2, #2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ca6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001cd4:	4b62      	ldr	r3, [pc, #392]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	0091      	lsls	r1, r2, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001d00:	4b57      	ldr	r3, [pc, #348]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	0091      	lsls	r1, r2, #2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d1a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	4413      	add	r3, r2
 8001d38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d42:	4b47      	ldr	r3, [pc, #284]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	0091      	lsls	r1, r2, #2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d5c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d78:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	061a      	lsls	r2, r3, #24
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d90:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001d92:	4413      	add	r3, r2
 8001d94:	009a      	lsls	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	441a      	add	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	441a      	add	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001de4:	441a      	add	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	441a      	add	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e48:	441a      	add	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d915      	bls.n	8001e88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001e5c:	e006      	b.n	8001e6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001e5e:	bf00      	nop
 8001e60:	ffff0003 	.word	0xffff0003
 8001e64:	10002b00 	.word	0x10002b00
 8001e68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e010      	b.n	8001eaa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e005      	b.n	8001e9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3f3      	bcc.n	8001e90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ed6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e00a      	b.n	8001efa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001eec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ef2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ef8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f04:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f0a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f10:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3304      	adds	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e020      	b.n	8001f92 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3303      	adds	r3, #3
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3302      	adds	r3, #2
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	440b      	add	r3, r1
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f68:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	440b      	add	r3, r1
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f76:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f80:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a06      	ldr	r2, [pc, #24]	@ (8001fb0 <FDCAN_CopyMessageToRAM+0xf8>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d3d6      	bcc.n	8001f50 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	@ 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	080073ec 	.word	0x080073ec

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fc2:	4b89      	ldr	r3, [pc, #548]	@ (80021e8 <HAL_GPIO_Init+0x234>)
 8001fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fc6:	e194      	b.n	80022f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8186 	beq.w	80022ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d005      	beq.n	8001ff8 <HAL_GPIO_Init+0x44>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d130      	bne.n	800205a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202e:	2201      	movs	r2, #1
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 0201 	and.w	r2, r3, #1
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d017      	beq.n	8002096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d123      	bne.n	80020ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	69b9      	ldr	r1, [r7, #24]
 80020e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0203 	and.w	r2, r3, #3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80e0 	beq.w	80022ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_GPIO_Init+0x238>)
 800212e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002132:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <HAL_GPIO_Init+0x238>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_GPIO_Init+0x238>)
 800213e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214a:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <HAL_GPIO_Init+0x23c>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <HAL_GPIO_Init+0x240>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d052      	beq.n	800221c <HAL_GPIO_Init+0x268>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_GPIO_Init+0x244>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d031      	beq.n	80021e2 <HAL_GPIO_Init+0x22e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1e      	ldr	r2, [pc, #120]	@ (80021fc <HAL_GPIO_Init+0x248>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <HAL_GPIO_Init+0x22a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x24c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d025      	beq.n	80021da <HAL_GPIO_Init+0x226>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <HAL_GPIO_Init+0x250>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <HAL_GPIO_Init+0x222>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_GPIO_Init+0x254>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x21e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_GPIO_Init+0x258>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x21a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_GPIO_Init+0x25c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x216>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <HAL_GPIO_Init+0x260>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x212>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_GPIO_Init+0x264>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x20e>
 80021be:	2309      	movs	r3, #9
 80021c0:	e02d      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021c2:	230a      	movs	r3, #10
 80021c4:	e02b      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021c6:	2308      	movs	r3, #8
 80021c8:	e029      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021ca:	2307      	movs	r3, #7
 80021cc:	e027      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021ce:	2306      	movs	r3, #6
 80021d0:	e025      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e023      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e021      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021da:	2303      	movs	r3, #3
 80021dc:	e01f      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021de:	2302      	movs	r3, #2
 80021e0:	e01d      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e01b      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021e6:	bf00      	nop
 80021e8:	58000080 	.word	0x58000080
 80021ec:	58024400 	.word	0x58024400
 80021f0:	58000400 	.word	0x58000400
 80021f4:	58020000 	.word	0x58020000
 80021f8:	58020400 	.word	0x58020400
 80021fc:	58020800 	.word	0x58020800
 8002200:	58020c00 	.word	0x58020c00
 8002204:	58021000 	.word	0x58021000
 8002208:	58021400 	.word	0x58021400
 800220c:	58021800 	.word	0x58021800
 8002210:	58021c00 	.word	0x58021c00
 8002214:	58022000 	.word	0x58022000
 8002218:	58022400 	.word	0x58022400
 800221c:	2300      	movs	r3, #0
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f002 0203 	and.w	r2, r2, #3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4093      	lsls	r3, r2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222e:	4938      	ldr	r1, [pc, #224]	@ (8002310 <HAL_GPIO_Init+0x35c>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3301      	adds	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f ae63 	bne.w	8001fc8 <HAL_GPIO_Init+0x14>
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3724      	adds	r7, #36	@ 0x24
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	58000400 	.word	0x58000400

08002314 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00a      	beq.n	800233e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002328:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01f      	b.n	800237a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e01d      	b.n	800237a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800233e:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	490f      	ldr	r1, [pc, #60]	@ (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800234e:	f7fe fec3 	bl	80010d8 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002354:	e009      	b.n	800236a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002356:	f7fe febf 	bl	80010d8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002364:	d901      	bls.n	800236a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002376:	d1ee      	bne.n	8002356 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	58024800 	.word	0x58024800

08002388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	@ 0x30
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f000 bc48 	b.w	8002c2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8088 	beq.w	80024ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023aa:	4b99      	ldr	r3, [pc, #612]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b4:	4b96      	ldr	r3, [pc, #600]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d007      	beq.n	80023d0 <HAL_RCC_OscConfig+0x48>
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	2b18      	cmp	r3, #24
 80023c4:	d111      	bne.n	80023ea <HAL_RCC_OscConfig+0x62>
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d06d      	beq.n	80024b8 <HAL_RCC_OscConfig+0x130>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d169      	bne.n	80024b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f000 bc21 	b.w	8002c2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x7a>
 80023f4:	4b86      	ldr	r3, [pc, #536]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a85      	ldr	r2, [pc, #532]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x9c>
 800240a:	4b81      	ldr	r3, [pc, #516]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a80      	ldr	r2, [pc, #512]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b7e      	ldr	r3, [pc, #504]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7d      	ldr	r2, [pc, #500]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xc0>
 800242e:	4b78      	ldr	r3, [pc, #480]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a77      	ldr	r2, [pc, #476]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b75      	ldr	r3, [pc, #468]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a74      	ldr	r2, [pc, #464]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd8>
 8002448:	4b71      	ldr	r3, [pc, #452]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a70      	ldr	r2, [pc, #448]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b6e      	ldr	r3, [pc, #440]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6d      	ldr	r2, [pc, #436]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fe36 	bl	80010d8 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fe32 	bl	80010d8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e3d4      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002482:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe8>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fe22 	bl	80010d8 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fe1e 	bl	80010d8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e3c0      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024aa:	4b59      	ldr	r3, [pc, #356]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x110>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80ca 	beq.w	800265c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c8:	4b51      	ldr	r3, [pc, #324]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_RCC_OscConfig+0x166>
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	d156      	bne.n	8002592 <HAL_RCC_OscConfig+0x20a>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d151      	bne.n	8002592 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ee:	4b48      	ldr	r3, [pc, #288]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x17e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e392      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002506:	4b42      	ldr	r3, [pc, #264]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 0219 	bic.w	r2, r3, #25
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	493f      	ldr	r1, [pc, #252]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fdde 	bl	80010d8 <HAL_GetTick>
 800251c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe fdda 	bl	80010d8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e37c      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002532:	4b37      	ldr	r3, [pc, #220]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	f7fe fdfb 	bl	8001138 <HAL_GetREVID>
 8002542:	4603      	mov	r3, r0
 8002544:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002548:	4293      	cmp	r3, r2
 800254a:	d817      	bhi.n	800257c <HAL_RCC_OscConfig+0x1f4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b40      	cmp	r3, #64	@ 0x40
 8002552:	d108      	bne.n	8002566 <HAL_RCC_OscConfig+0x1de>
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800255c:	4a2c      	ldr	r2, [pc, #176]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002562:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	e07a      	b.n	800265c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	031b      	lsls	r3, r3, #12
 8002574:	4926      	ldr	r1, [pc, #152]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257a:	e06f      	b.n	800265c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4921      	ldr	r1, [pc, #132]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002590:	e064      	b.n	800265c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d047      	beq.n	800262a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0219 	bic.w	r2, r3, #25
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	491a      	ldr	r1, [pc, #104]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fd94 	bl	80010d8 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe fd90 	bl	80010d8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e332      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	f7fe fdb1 	bl	8001138 <HAL_GetREVID>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025dc:	4293      	cmp	r3, r2
 80025de:	d819      	bhi.n	8002614 <HAL_RCC_OscConfig+0x28c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b40      	cmp	r3, #64	@ 0x40
 80025e6:	d108      	bne.n	80025fa <HAL_RCC_OscConfig+0x272>
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025f0:	4a07      	ldr	r2, [pc, #28]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80025f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f6:	6053      	str	r3, [r2, #4]
 80025f8:	e030      	b.n	800265c <HAL_RCC_OscConfig+0x2d4>
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	031b      	lsls	r3, r3, #12
 8002608:	4901      	ldr	r1, [pc, #4]	@ (8002610 <HAL_RCC_OscConfig+0x288>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
 800260e:	e025      	b.n	800265c <HAL_RCC_OscConfig+0x2d4>
 8002610:	58024400 	.word	0x58024400
 8002614:	4b9a      	ldr	r3, [pc, #616]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	4997      	ldr	r1, [pc, #604]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e018      	b.n	800265c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262a:	4b95      	ldr	r3, [pc, #596]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a94      	ldr	r2, [pc, #592]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fd4f 	bl	80010d8 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7fe fd4b 	bl	80010d8 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e2ed      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002650:	4b8b      	ldr	r3, [pc, #556]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a9 	beq.w	80027bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266a:	4b85      	ldr	r3, [pc, #532]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002672:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002674:	4b82      	ldr	r3, [pc, #520]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d007      	beq.n	8002690 <HAL_RCC_OscConfig+0x308>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b18      	cmp	r3, #24
 8002684:	d13a      	bne.n	80026fc <HAL_RCC_OscConfig+0x374>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d135      	bne.n	80026fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002690:	4b7b      	ldr	r3, [pc, #492]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x320>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b80      	cmp	r3, #128	@ 0x80
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2c1      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a8:	f7fe fd46 	bl	8001138 <HAL_GetREVID>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d817      	bhi.n	80026e6 <HAL_RCC_OscConfig+0x35e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x348>
 80026be:	4b70      	ldr	r3, [pc, #448]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ce:	e075      	b.n	80027bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	069b      	lsls	r3, r3, #26
 80026de:	4968      	ldr	r1, [pc, #416]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e4:	e06a      	b.n	80027bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e6:	4b66      	ldr	r3, [pc, #408]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	4962      	ldr	r1, [pc, #392]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026fa:	e05f      	b.n	80027bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d042      	beq.n	800278a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002704:	4b5e      	ldr	r3, [pc, #376]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5d      	ldr	r2, [pc, #372]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fce2 	bl	80010d8 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002718:	f7fe fcde 	bl	80010d8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e280      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800272a:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002736:	f7fe fcff 	bl	8001138 <HAL_GetREVID>
 800273a:	4603      	mov	r3, r0
 800273c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002740:	4293      	cmp	r3, r2
 8002742:	d817      	bhi.n	8002774 <HAL_RCC_OscConfig+0x3ec>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	2b20      	cmp	r3, #32
 800274a:	d108      	bne.n	800275e <HAL_RCC_OscConfig+0x3d6>
 800274c:	4b4c      	ldr	r3, [pc, #304]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002754:	4a4a      	ldr	r2, [pc, #296]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800275a:	6053      	str	r3, [r2, #4]
 800275c:	e02e      	b.n	80027bc <HAL_RCC_OscConfig+0x434>
 800275e:	4b48      	ldr	r3, [pc, #288]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	4944      	ldr	r1, [pc, #272]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
 8002772:	e023      	b.n	80027bc <HAL_RCC_OscConfig+0x434>
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	493f      	ldr	r1, [pc, #252]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
 8002788:	e018      	b.n	80027bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800278a:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a3c      	ldr	r2, [pc, #240]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fc9f 	bl	80010d8 <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800279e:	f7fe fc9b 	bl	80010d8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e23d      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b0:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d036      	beq.n	8002836 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d019      	beq.n	8002804 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fc7c 	bl	80010d8 <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe fc78 	bl	80010d8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e21a      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f6:	4b22      	ldr	r3, [pc, #136]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x45c>
 8002802:	e018      	b.n	8002836 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002804:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002808:	4a1d      	ldr	r2, [pc, #116]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fc62 	bl	80010d8 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fc5e 	bl	80010d8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e200      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d039      	beq.n	80028b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01c      	beq.n	8002884 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a0c      	ldr	r2, [pc, #48]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002854:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002856:	f7fe fc3f 	bl	80010d8 <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285e:	f7fe fc3b 	bl	80010d8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1dd      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x4d6>
 800287c:	e01b      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
 800287e:	bf00      	nop
 8002880:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002884:	4b9b      	ldr	r3, [pc, #620]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a9a      	ldr	r2, [pc, #616]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 800288a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800288e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002890:	f7fe fc22 	bl	80010d8 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002898:	f7fe fc1e 	bl	80010d8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1c0      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028aa:	4b92      	ldr	r3, [pc, #584]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8081 	beq.w	80029c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028c4:	4b8c      	ldr	r3, [pc, #560]	@ (8002af8 <HAL_RCC_OscConfig+0x770>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a8b      	ldr	r2, [pc, #556]	@ (8002af8 <HAL_RCC_OscConfig+0x770>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d0:	f7fe fc02 	bl	80010d8 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7fe fbfe 	bl	80010d8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1a0      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ea:	4b83      	ldr	r3, [pc, #524]	@ (8002af8 <HAL_RCC_OscConfig+0x770>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x584>
 80028fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a7c      	ldr	r2, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
 800290a:	e02d      	b.n	8002968 <HAL_RCC_OscConfig+0x5e0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x5a6>
 8002914:	4b77      	ldr	r3, [pc, #476]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a76      	ldr	r2, [pc, #472]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002920:	4b74      	ldr	r3, [pc, #464]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	4a73      	ldr	r2, [pc, #460]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	@ 0x70
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0x5e0>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c8>
 8002936:	4b6f      	ldr	r3, [pc, #444]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	4a6e      	ldr	r2, [pc, #440]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6713      	str	r3, [r2, #112]	@ 0x70
 8002942:	4b6c      	ldr	r3, [pc, #432]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	4a6b      	ldr	r2, [pc, #428]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6713      	str	r3, [r2, #112]	@ 0x70
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0x5e0>
 8002950:	4b68      	ldr	r3, [pc, #416]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	4a67      	ldr	r2, [pc, #412]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	@ 0x70
 800295c:	4b65      	ldr	r3, [pc, #404]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a64      	ldr	r2, [pc, #400]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fbb2 	bl	80010d8 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fbae 	bl	80010d8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e14e      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298e:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ee      	beq.n	8002978 <HAL_RCC_OscConfig+0x5f0>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fb9c 	bl	80010d8 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe fb98 	bl	80010d8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e138      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ba:	4b4e      	ldr	r3, [pc, #312]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ee      	bne.n	80029a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 812d 	beq.w	8002c2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029d0:	4b48      	ldr	r3, [pc, #288]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029d8:	2b18      	cmp	r3, #24
 80029da:	f000 80bd 	beq.w	8002b58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	f040 809e 	bne.w	8002b24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e8:	4b42      	ldr	r3, [pc, #264]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a41      	ldr	r2, [pc, #260]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 80029ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fb70 	bl	80010d8 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fb6c 	bl	80010d8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e10e      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0e:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1a:	4b36      	ldr	r3, [pc, #216]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <HAL_RCC_OscConfig+0x774>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	4931      	ldr	r1, [pc, #196]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a42:	3b01      	subs	r3, #1
 8002a44:	025b      	lsls	r3, r3, #9
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a64:	4923      	ldr	r1, [pc, #140]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a6a:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	4a21      	ldr	r2, [pc, #132]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a76:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a7a:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_RCC_OscConfig+0x778>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a82:	00d2      	lsls	r2, r2, #3
 8002a84:	491b      	ldr	r1, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f023 020c 	bic.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4917      	ldr	r1, [pc, #92]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	f023 0202 	bic.w	r2, r3, #2
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	4912      	ldr	r1, [pc, #72]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aae:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ad2:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe faf5 	bl	80010d8 <HAL_GetTick>
 8002aee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002af0:	e011      	b.n	8002b16 <HAL_RCC_OscConfig+0x78e>
 8002af2:	bf00      	nop
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58024800 	.word	0x58024800
 8002afc:	fffffc0c 	.word	0xfffffc0c
 8002b00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fae8 	bl	80010d8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e08a      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b16:	4b47      	ldr	r3, [pc, #284]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x77c>
 8002b22:	e082      	b.n	8002c2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b24:	4b43      	ldr	r3, [pc, #268]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a42      	ldr	r2, [pc, #264]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fad2 	bl	80010d8 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe face 	bl	80010d8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e070      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x7b0>
 8002b56:	e068      	b.n	8002c2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b58:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b5e:	4b35      	ldr	r3, [pc, #212]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d031      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d12a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d122      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d11a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d108      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	0e1b      	lsrs	r3, r3, #24
 8002bc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e02b      	b.n	8002c2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bd4:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd8:	08db      	lsrs	r3, r3, #3
 8002bda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d01f      	beq.n	8002c2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bf6:	f7fe fa6f 	bl	80010d8 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bfc:	bf00      	nop
 8002bfe:	f7fe fa6b 	bl	80010d8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d0f9      	beq.n	8002bfe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002c0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_RCC_OscConfig+0x8b0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c16:	00d2      	lsls	r2, r2, #3
 8002c18:	4906      	ldr	r1, [pc, #24]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <HAL_RCC_OscConfig+0x8ac>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3730      	adds	r7, #48	@ 0x30
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	58024400 	.word	0x58024400
 8002c38:	ffff0007 	.word	0xffff0007

08002c3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e19c      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b8a      	ldr	r3, [pc, #552]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b87      	ldr	r3, [pc, #540]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	4985      	ldr	r1, [pc, #532]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b83      	ldr	r3, [pc, #524]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e184      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	4b7b      	ldr	r3, [pc, #492]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c9c:	4b78      	ldr	r3, [pc, #480]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	4975      	ldr	r1, [pc, #468]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	4b70      	ldr	r3, [pc, #448]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cca:	4b6d      	ldr	r3, [pc, #436]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	496a      	ldr	r1, [pc, #424]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	4b64      	ldr	r3, [pc, #400]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d908      	bls.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cf8:	4b61      	ldr	r3, [pc, #388]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	495e      	ldr	r1, [pc, #376]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	4b59      	ldr	r3, [pc, #356]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d908      	bls.n	8002d38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d26:	4b56      	ldr	r3, [pc, #344]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4953      	ldr	r1, [pc, #332]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	4b4d      	ldr	r3, [pc, #308]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d908      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b4a      	ldr	r3, [pc, #296]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f023 020f 	bic.w	r2, r3, #15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4947      	ldr	r1, [pc, #284]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d055      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d72:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	4940      	ldr	r1, [pc, #256]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d121      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0f6      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002da4:	4b36      	ldr	r3, [pc, #216]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d115      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ea      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dbc:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0de      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d6      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ddc:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f023 0207 	bic.w	r2, r3, #7
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4925      	ldr	r1, [pc, #148]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dee:	f7fe f973 	bl	80010d8 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df6:	f7fe f96f 	bl	80010d8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0be      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d1eb      	bne.n	8002df6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d208      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	490e      	ldr	r1, [pc, #56]	@ (8002e80 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d214      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	4906      	ldr	r1, [pc, #24]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e086      	b.n	8002f8a <HAL_RCC_ClockConfig+0x34e>
 8002e7c:	52002000 	.word	0x52002000
 8002e80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	4b3f      	ldr	r3, [pc, #252]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d208      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea0:	4b3c      	ldr	r3, [pc, #240]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4939      	ldr	r1, [pc, #228]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d208      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ece:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	492e      	ldr	r1, [pc, #184]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d208      	bcs.n	8002f0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002efc:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	4922      	ldr	r1, [pc, #136]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d010      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d208      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4917      	ldr	r1, [pc, #92]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f3c:	f000 f834 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	4912      	ldr	r1, [pc, #72]	@ (8002f98 <HAL_RCC_ClockConfig+0x35c>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_RCC_ClockConfig+0x358>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4a0d      	ldr	r2, [pc, #52]	@ (8002f98 <HAL_RCC_ClockConfig+0x35c>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_RCC_ClockConfig+0x360>)
 8002f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <HAL_RCC_ClockConfig+0x364>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <HAL_RCC_ClockConfig+0x368>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f860 	bl	8001044 <HAL_InitTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	58024400 	.word	0x58024400
 8002f98:	080073dc 	.word	0x080073dc
 8002f9c:	24000004 	.word	0x24000004
 8002fa0:	24000000 	.word	0x24000000
 8002fa4:	24000028 	.word	0x24000028

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fae:	4bb3      	ldr	r3, [pc, #716]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb6:	2b18      	cmp	r3, #24
 8002fb8:	f200 8155 	bhi.w	8003266 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08003029 	.word	0x08003029
 8002fc8:	08003267 	.word	0x08003267
 8002fcc:	08003267 	.word	0x08003267
 8002fd0:	08003267 	.word	0x08003267
 8002fd4:	08003267 	.word	0x08003267
 8002fd8:	08003267 	.word	0x08003267
 8002fdc:	08003267 	.word	0x08003267
 8002fe0:	08003267 	.word	0x08003267
 8002fe4:	0800304f 	.word	0x0800304f
 8002fe8:	08003267 	.word	0x08003267
 8002fec:	08003267 	.word	0x08003267
 8002ff0:	08003267 	.word	0x08003267
 8002ff4:	08003267 	.word	0x08003267
 8002ff8:	08003267 	.word	0x08003267
 8002ffc:	08003267 	.word	0x08003267
 8003000:	08003267 	.word	0x08003267
 8003004:	08003055 	.word	0x08003055
 8003008:	08003267 	.word	0x08003267
 800300c:	08003267 	.word	0x08003267
 8003010:	08003267 	.word	0x08003267
 8003014:	08003267 	.word	0x08003267
 8003018:	08003267 	.word	0x08003267
 800301c:	08003267 	.word	0x08003267
 8003020:	08003267 	.word	0x08003267
 8003024:	0800305b 	.word	0x0800305b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003028:	4b94      	ldr	r3, [pc, #592]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003034:	4b91      	ldr	r3, [pc, #580]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	08db      	lsrs	r3, r3, #3
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	4a90      	ldr	r2, [pc, #576]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003046:	e111      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003048:	4b8d      	ldr	r3, [pc, #564]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800304a:	61bb      	str	r3, [r7, #24]
      break;
 800304c:	e10e      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800304e:	4b8d      	ldr	r3, [pc, #564]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003050:	61bb      	str	r3, [r7, #24]
      break;
 8003052:	e10b      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003054:	4b8c      	ldr	r3, [pc, #560]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003056:	61bb      	str	r3, [r7, #24]
      break;
 8003058:	e108      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800305a:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003064:	4b85      	ldr	r3, [pc, #532]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800306e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003070:	4b82      	ldr	r3, [pc, #520]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800307a:	4b80      	ldr	r3, [pc, #512]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80e1 	beq.w	8003260 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	f000 8083 	beq.w	80031ac <HAL_RCC_GetSysClockFreq+0x204>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f200 80a1 	bhi.w	80031f0 <HAL_RCC_GetSysClockFreq+0x248>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x114>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d056      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ba:	e099      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030bc:	4b6f      	ldr	r3, [pc, #444]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030c8:	4b6c      	ldr	r3, [pc, #432]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	08db      	lsrs	r3, r3, #3
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f2:	4b62      	ldr	r3, [pc, #392]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003102:	ed97 6a02 	vldr	s12, [r7, #8]
 8003106:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 800310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003122:	e087      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003290 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003136:	4b51      	ldr	r3, [pc, #324]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003146:	ed97 6a02 	vldr	s12, [r7, #8]
 800314a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 800314e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800315a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003166:	e065      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003294 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317a:	4b40      	ldr	r3, [pc, #256]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318a:	ed97 6a02 	vldr	s12, [r7, #8]
 800318e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031aa:	e043      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003298 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b2f      	ldr	r3, [pc, #188]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ee:	e021      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003294 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003202:	4b1e      	ldr	r3, [pc, #120]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003212:	ed97 6a02 	vldr	s12, [r7, #8]
 8003216:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 800321a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003232:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003234:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	0a5b      	lsrs	r3, r3, #9
 800323a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800323e:	3301      	adds	r3, #1
 8003240:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800324c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003258:	ee17 3a90 	vmov	r3, s15
 800325c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800325e:	e005      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
      break;
 8003264:	e002      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003266:	4b07      	ldr	r3, [pc, #28]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003268:	61bb      	str	r3, [r7, #24]
      break;
 800326a:	bf00      	nop
  }

  return sysclockfreq;
 800326c:	69bb      	ldr	r3, [r7, #24]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	@ 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	03d09000 	.word	0x03d09000
 8003284:	003d0900 	.word	0x003d0900
 8003288:	007a1200 	.word	0x007a1200
 800328c:	46000000 	.word	0x46000000
 8003290:	4c742400 	.word	0x4c742400
 8003294:	4a742400 	.word	0x4a742400
 8003298:	4af42400 	.word	0x4af42400

0800329c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b0ca      	sub	sp, #296	@ 0x128
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032c0:	2500      	movs	r5, #0
 80032c2:	ea54 0305 	orrs.w	r3, r4, r5
 80032c6:	d049      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032d2:	d02f      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032d8:	d828      	bhi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032de:	d01a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032e4:	d822      	bhi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ee:	d007      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032f0:	e01c      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f2:	4bb8      	ldr	r3, [pc, #736]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	4ab7      	ldr	r2, [pc, #732]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032fe:	e01a      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003304:	3308      	adds	r3, #8
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f001 f9d1 	bl	80046b0 <RCCEx_PLL2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003314:	e00f      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331a:	3328      	adds	r3, #40	@ 0x28
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fa78 	bl	8004814 <RCCEx_PLL3_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800332a:	e004      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800333e:	4ba5      	ldr	r3, [pc, #660]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003342:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800334c:	4aa1      	ldr	r2, [pc, #644]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800334e:	430b      	orrs	r3, r1
 8003350:	6513      	str	r3, [r2, #80]	@ 0x50
 8003352:	e003      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003368:	f04f 0900 	mov.w	r9, #0
 800336c:	ea58 0309 	orrs.w	r3, r8, r9
 8003370:	d047      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	2b04      	cmp	r3, #4
 800337a:	d82a      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003399 	.word	0x08003399
 8003388:	080033a7 	.word	0x080033a7
 800338c:	080033bd 	.word	0x080033bd
 8003390:	080033db 	.word	0x080033db
 8003394:	080033db 	.word	0x080033db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003398:	4b8e      	ldr	r3, [pc, #568]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	4a8d      	ldr	r2, [pc, #564]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033a4:	e01a      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	3308      	adds	r3, #8
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 f97e 	bl	80046b0 <RCCEx_PLL2_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ba:	e00f      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	3328      	adds	r3, #40	@ 0x28
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 fa25 	bl	8004814 <RCCEx_PLL3_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033d0:	e004      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e4:	4b7b      	ldr	r3, [pc, #492]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e8:	f023 0107 	bic.w	r1, r3, #7
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	4a78      	ldr	r2, [pc, #480]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80033f8:	e003      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800340e:	f04f 0b00 	mov.w	fp, #0
 8003412:	ea5a 030b 	orrs.w	r3, sl, fp
 8003416:	d04c      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003422:	d030      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003428:	d829      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800342a:	2bc0      	cmp	r3, #192	@ 0xc0
 800342c:	d02d      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800342e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003430:	d825      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003432:	2b80      	cmp	r3, #128	@ 0x80
 8003434:	d018      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d821      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d007      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003442:	e01c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003444:	4b63      	ldr	r3, [pc, #396]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	4a62      	ldr	r2, [pc, #392]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003450:	e01c      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	3308      	adds	r3, #8
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f001 f928 	bl	80046b0 <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	3328      	adds	r3, #40	@ 0x28
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f9cf 	bl	8004814 <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003484:	e002      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800348a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003494:	4b4f      	ldr	r3, [pc, #316]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a2:	4a4c      	ldr	r2, [pc, #304]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034cc:	460b      	mov	r3, r1
 80034ce:	4313      	orrs	r3, r2
 80034d0:	d053      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034de:	d035      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034e4:	d82e      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034ea:	d031      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034f0:	d828      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f6:	d01a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80034f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034fc:	d822      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003506:	d007      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003508:	e01c      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350a:	4b32      	ldr	r3, [pc, #200]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	4a31      	ldr	r2, [pc, #196]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003516:	e01c      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351c:	3308      	adds	r3, #8
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f001 f8c5 	bl	80046b0 <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800352c:	e011      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003532:	3328      	adds	r3, #40	@ 0x28
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f96c 	bl	8004814 <RCCEx_PLL3_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003542:	e006      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800354a:	e002      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800355a:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800356a:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800356c:	430b      	orrs	r3, r1
 800356e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003570:	e003      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003586:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800358a:	2300      	movs	r3, #0
 800358c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003590:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003594:	460b      	mov	r3, r1
 8003596:	4313      	orrs	r3, r2
 8003598:	d056      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035a6:	d038      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ac:	d831      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035b2:	d034      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035b8:	d82b      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035be:	d01d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035c4:	d825      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035d0:	e01f      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035d2:	bf00      	nop
 80035d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d8:	4ba2      	ldr	r3, [pc, #648]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e4:	e01c      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	3308      	adds	r3, #8
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 f85e 	bl	80046b0 <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035fa:	e011      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	3328      	adds	r3, #40	@ 0x28
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f905 	bl	8004814 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003610:	e006      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003618:	e002      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003628:	4b8e      	ldr	r3, [pc, #568]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003638:	4a8a      	ldr	r2, [pc, #552]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363a:	430b      	orrs	r3, r1
 800363c:	6593      	str	r3, [r2, #88]	@ 0x58
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800365e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d03a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	2b30      	cmp	r3, #48	@ 0x30
 8003670:	d01f      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003672:	2b30      	cmp	r3, #48	@ 0x30
 8003674:	d819      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003676:	2b20      	cmp	r3, #32
 8003678:	d00c      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d815      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d019      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d111      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003686:	4b77      	ldr	r3, [pc, #476]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	4a76      	ldr	r2, [pc, #472]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003692:	e011      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	3308      	adds	r3, #8
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f807 	bl	80046b0 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036c0:	4b68      	ldr	r3, [pc, #416]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ce:	4a65      	ldr	r2, [pc, #404]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036d4:	e003      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4313      	orrs	r3, r2
 80036fc:	d051      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003708:	d035      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800370a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800370e:	d82e      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003710:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003714:	d031      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800371a:	d828      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003720:	d01a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003726:	d822      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003730:	d007      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003732:	e01c      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003734:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	4a4a      	ldr	r2, [pc, #296]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003740:	e01c      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003746:	3308      	adds	r3, #8
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f000 ffb0 	bl	80046b0 <RCCEx_PLL2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	3328      	adds	r3, #40	@ 0x28
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f001 f857 	bl	8004814 <RCCEx_PLL3_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800376c:	e006      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003774:	e002      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800377a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003784:	4b37      	ldr	r3, [pc, #220]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003788:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	4a34      	ldr	r2, [pc, #208]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6513      	str	r3, [r2, #80]	@ 0x50
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d056      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037cc:	d033      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d2:	d82c      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037d8:	d02f      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037de:	d826      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037e4:	d02b      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037ea:	d820      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037f0:	d012      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80037f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037f6:	d81a      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d022      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d115      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003806:	3308      	adds	r3, #8
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 ff50 	bl	80046b0 <RCCEx_PLL2_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003816:	e015      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381c:	3328      	adds	r3, #40	@ 0x28
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fff7 	bl	8004814 <RCCEx_PLL3_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800382c:	e00a      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003836:	bf00      	nop
 8003838:	e004      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800384c:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800385a:	4a02      	ldr	r2, [pc, #8]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800387c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003886:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800388a:	460b      	mov	r3, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	d055      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800389c:	d033      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800389e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a2:	d82c      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a8:	d02f      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ae:	d826      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038b4:	d02b      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038ba:	d820      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c0:	d012      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c6:	d81a      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d022      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038d0:	d115      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d6:	3308      	adds	r3, #8
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fee8 	bl	80046b0 <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038e6:	e015      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	3328      	adds	r3, #40	@ 0x28
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 ff8f 	bl	8004814 <RCCEx_PLL3_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038fc:	e00a      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003906:	bf00      	nop
 8003908:	e004      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800391c:	4ba3      	ldr	r3, [pc, #652]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800392c:	4a9f      	ldr	r2, [pc, #636]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392e:	430b      	orrs	r3, r1
 8003930:	6593      	str	r3, [r2, #88]	@ 0x58
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d037      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003966:	d00e      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800396c:	d816      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003976:	d111      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b8c      	ldr	r3, [pc, #560]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	4a8b      	ldr	r2, [pc, #556]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003984:	e00f      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	3308      	adds	r3, #8
 800398c:	2101      	movs	r1, #1
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fe8e 	bl	80046b0 <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ae:	4b7f      	ldr	r3, [pc, #508]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	4a7b      	ldr	r2, [pc, #492]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039be:	430b      	orrs	r3, r1
 80039c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80039c2:	e003      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	d039      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d81c      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a0d 	.word	0x08003a0d
 8003a04:	08003a1b 	.word	0x08003a1b
 8003a08:	08003a39 	.word	0x08003a39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0c:	4b67      	ldr	r3, [pc, #412]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a18:	e00f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	3308      	adds	r3, #8
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fe44 	bl	80046b0 <RCCEx_PLL2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a42:	4b5a      	ldr	r3, [pc, #360]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	f023 0103 	bic.w	r1, r3, #3
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a50:	4a56      	ldr	r2, [pc, #344]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a52:	430b      	orrs	r3, r1
 8003a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f000 809f 	beq.w	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a82:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fb23 	bl	80010d8 <HAL_GetTick>
 8003a92:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7fd fb1e 	bl	80010d8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	@ 0x64
 8003aa6:	d903      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aae:	e005      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ed      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d179      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ac4:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ad0:	4053      	eors	r3, r2
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ada:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ae6:	4b31      	ldr	r3, [pc, #196]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	4a30      	ldr	r2, [pc, #192]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af2:	4b2e      	ldr	r3, [pc, #184]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a2d      	ldr	r2, [pc, #180]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003afe:	4a2b      	ldr	r2, [pc, #172]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b12:	d118      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fae0 	bl	80010d8 <HAL_GetTick>
 8003b18:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b1c:	e00d      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fd fadb 	bl	80010d8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d903      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b38:	e005      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0eb      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d129      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5e:	d10e      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b70:	091a      	lsrs	r2, r3, #4
 8003b72:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	4a0d      	ldr	r2, [pc, #52]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6113      	str	r3, [r2, #16]
 8003b7c:	e005      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b88:	6113      	str	r3, [r2, #16]
 8003b8a:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	4a04      	ldr	r2, [pc, #16]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba0:	e00e      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003baa:	e009      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	58024800 	.word	0x58024800
 8003bb4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f002 0301 	and.w	r3, r2, #1
 8003bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f000 8089 	beq.w	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003be8:	2b28      	cmp	r3, #40	@ 0x28
 8003bea:	d86b      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003ccd 	.word	0x08003ccd
 8003bf8:	08003cc5 	.word	0x08003cc5
 8003bfc:	08003cc5 	.word	0x08003cc5
 8003c00:	08003cc5 	.word	0x08003cc5
 8003c04:	08003cc5 	.word	0x08003cc5
 8003c08:	08003cc5 	.word	0x08003cc5
 8003c0c:	08003cc5 	.word	0x08003cc5
 8003c10:	08003cc5 	.word	0x08003cc5
 8003c14:	08003c99 	.word	0x08003c99
 8003c18:	08003cc5 	.word	0x08003cc5
 8003c1c:	08003cc5 	.word	0x08003cc5
 8003c20:	08003cc5 	.word	0x08003cc5
 8003c24:	08003cc5 	.word	0x08003cc5
 8003c28:	08003cc5 	.word	0x08003cc5
 8003c2c:	08003cc5 	.word	0x08003cc5
 8003c30:	08003cc5 	.word	0x08003cc5
 8003c34:	08003caf 	.word	0x08003caf
 8003c38:	08003cc5 	.word	0x08003cc5
 8003c3c:	08003cc5 	.word	0x08003cc5
 8003c40:	08003cc5 	.word	0x08003cc5
 8003c44:	08003cc5 	.word	0x08003cc5
 8003c48:	08003cc5 	.word	0x08003cc5
 8003c4c:	08003cc5 	.word	0x08003cc5
 8003c50:	08003cc5 	.word	0x08003cc5
 8003c54:	08003ccd 	.word	0x08003ccd
 8003c58:	08003cc5 	.word	0x08003cc5
 8003c5c:	08003cc5 	.word	0x08003cc5
 8003c60:	08003cc5 	.word	0x08003cc5
 8003c64:	08003cc5 	.word	0x08003cc5
 8003c68:	08003cc5 	.word	0x08003cc5
 8003c6c:	08003cc5 	.word	0x08003cc5
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003ccd 	.word	0x08003ccd
 8003c78:	08003cc5 	.word	0x08003cc5
 8003c7c:	08003cc5 	.word	0x08003cc5
 8003c80:	08003cc5 	.word	0x08003cc5
 8003c84:	08003cc5 	.word	0x08003cc5
 8003c88:	08003cc5 	.word	0x08003cc5
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003ccd 	.word	0x08003ccd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fd05 	bl	80046b0 <RCCEx_PLL2_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cac:	e00f      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	3328      	adds	r3, #40	@ 0x28
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fdac 	bl	8004814 <RCCEx_PLL3_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cc2:	e004      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cd6:	4bbf      	ldr	r3, [pc, #764]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce4:	4abb      	ldr	r2, [pc, #748]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f002 0302 	and.w	r3, r2, #2
 8003d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4313      	orrs	r3, r2
 8003d12:	d041      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d824      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d3d 	.word	0x08003d3d
 8003d2c:	08003d53 	.word	0x08003d53
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	3308      	adds	r3, #8
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fcb3 	bl	80046b0 <RCCEx_PLL2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d50:	e00f      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	3328      	adds	r3, #40	@ 0x28
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fd5a 	bl	8004814 <RCCEx_PLL3_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d7a:	4b96      	ldr	r3, [pc, #600]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f023 0107 	bic.w	r1, r3, #7
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d88:	4a92      	ldr	r2, [pc, #584]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 0304 	and.w	r3, r2, #4
 8003da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003da8:	2300      	movs	r3, #0
 8003daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4313      	orrs	r3, r2
 8003db6:	d044      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d825      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003de5 	.word	0x08003de5
 8003dd4:	08003dfb 	.word	0x08003dfb
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e19 	.word	0x08003e19
 8003de0:	08003e19 	.word	0x08003e19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	3308      	adds	r3, #8
 8003dea:	2101      	movs	r1, #1
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fc5f 	bl	80046b0 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003df8:	e00f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	3328      	adds	r3, #40	@ 0x28
 8003e00:	2101      	movs	r1, #1
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fd06 	bl	8004814 <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e22:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	f023 0107 	bic.w	r1, r3, #7
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e32:	4a68      	ldr	r2, [pc, #416]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e38:	e003      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f002 0320 	and.w	r3, r2, #32
 8003e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	d055      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e6e:	d033      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e74:	d82c      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d02f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e80:	d826      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e86:	d02b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e8c:	d820      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e92:	d012      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e98:	d81a      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d022      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea2:	d115      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fbff 	bl	80046b0 <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	3328      	adds	r3, #40	@ 0x28
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fca6 	bl	8004814 <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ed6:	e006      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eee:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	4a35      	ldr	r2, [pc, #212]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d058      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f3a:	d033      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f40:	d82c      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	d02f      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4c:	d826      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f52:	d02b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f58:	d820      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f64:	d81a      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d022      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fb99 	bl	80046b0 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f84:	e015      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	3328      	adds	r3, #40	@ 0x28
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fc40 	bl	8004814 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fba:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fca:	4a02      	ldr	r2, [pc, #8]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd0:	e006      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ff6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d055      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004008:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800400c:	d033      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800400e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004012:	d82c      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004018:	d02f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401e:	d826      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004020:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004024:	d02b      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004026:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800402a:	d820      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800402c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004030:	d012      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004036:	d81a      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d022      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800403c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004040:	d115      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004046:	3308      	adds	r3, #8
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fb30 	bl	80046b0 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004056:	e015      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	3328      	adds	r3, #40	@ 0x28
 800405e:	2102      	movs	r1, #2
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fbd7 	bl	8004814 <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800406c:	e00a      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004076:	bf00      	nop
 8004078:	e004      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800408c:	4ba1      	ldr	r3, [pc, #644]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004090:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800409c:	4a9d      	ldr	r2, [pc, #628]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f002 0308 	and.w	r3, r2, #8
 80040b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d01e      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	3328      	adds	r3, #40	@ 0x28
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb96 	bl	8004814 <RCCEx_PLL3_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040f4:	4b87      	ldr	r3, [pc, #540]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004104:	4a83      	ldr	r2, [pc, #524]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004106:	430b      	orrs	r3, r1
 8004108:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f002 0310 	and.w	r3, r2, #16
 8004116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004120:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004124:	460b      	mov	r3, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	d01e      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004136:	d10c      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	2102      	movs	r1, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fb67 	bl	8004814 <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004152:	4b70      	ldr	r3, [pc, #448]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004162:	4a6c      	ldr	r2, [pc, #432]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800417e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d03e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004194:	d022      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800419a:	d81b      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a4:	d00b      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041a6:	e015      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	3308      	adds	r3, #8
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fa7d 	bl	80046b0 <RCCEx_PLL2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041bc:	e00f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	3328      	adds	r3, #40	@ 0x28
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fb24 	bl	8004814 <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041f6:	4a47      	ldr	r2, [pc, #284]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004212:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004214:	2300      	movs	r3, #0
 8004216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004218:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800421c:	460b      	mov	r3, r1
 800421e:	4313      	orrs	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800422e:	d01f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004234:	d818      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800423c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004240:	d007      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004242:	e011      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4b33      	ldr	r3, [pc, #204]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800424e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004250:	e00f      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	3328      	adds	r3, #40	@ 0x28
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fada 	bl	8004814 <RCCEx_PLL3_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800427a:	4b26      	ldr	r3, [pc, #152]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428a:	4a22      	ldr	r2, [pc, #136]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800428c:	430b      	orrs	r3, r1
 800428e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004290:	e003      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80042a8:	2300      	movs	r3, #0
 80042aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80042ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042b0:	460b      	mov	r3, r1
 80042b2:	4313      	orrs	r3, r2
 80042b4:	d034      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c4:	d007      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042c6:	e011      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c8:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042d4:	e00e      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	3308      	adds	r3, #8
 80042dc:	2102      	movs	r1, #2
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f9e6 	bl	80046b0 <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004300:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430a:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800430c:	430b      	orrs	r3, r1
 800430e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004312:	bf00      	nop
 8004314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800432c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800432e:	2300      	movs	r3, #0
 8004330:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004332:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d00c      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	3328      	adds	r3, #40	@ 0x28
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa65 	bl	8004814 <RCCEx_PLL3_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004362:	663b      	str	r3, [r7, #96]	@ 0x60
 8004364:	2300      	movs	r3, #0
 8004366:	667b      	str	r3, [r7, #100]	@ 0x64
 8004368:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800436c:	460b      	mov	r3, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	d038      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437e:	d018      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004384:	d811      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438a:	d014      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800438c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004390:	d80b      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439a:	d106      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439c:	4bc3      	ldr	r3, [pc, #780]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	4ac2      	ldr	r2, [pc, #776]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043a8:	e008      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c4:	4bb9      	ldr	r3, [pc, #740]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d4:	4ab5      	ldr	r2, [pc, #724]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d6:	430b      	orrs	r3, r1
 80043d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043f2:	2300      	movs	r3, #0
 80043f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004400:	4baa      	ldr	r3, [pc, #680]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004404:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800440e:	4aa7      	ldr	r2, [pc, #668]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004420:	653b      	str	r3, [r7, #80]	@ 0x50
 8004422:	2300      	movs	r3, #0
 8004424:	657b      	str	r3, [r7, #84]	@ 0x54
 8004426:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004430:	4b9e      	ldr	r3, [pc, #632]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004440:	4a9a      	ldr	r2, [pc, #616]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004442:	430b      	orrs	r3, r1
 8004444:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004454:	2300      	movs	r3, #0
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004458:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004462:	4b92      	ldr	r3, [pc, #584]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004466:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004470:	4a8e      	ldr	r2, [pc, #568]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004482:	643b      	str	r3, [r7, #64]	@ 0x40
 8004484:	2300      	movs	r3, #0
 8004486:	647b      	str	r3, [r7, #68]	@ 0x44
 8004488:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004492:	4b86      	ldr	r3, [pc, #536]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a85      	ldr	r2, [pc, #532]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004498:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800449c:	6113      	str	r3, [r2, #16]
 800449e:	4b83      	ldr	r3, [pc, #524]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044aa:	4a80      	ldr	r2, [pc, #512]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044be:	2300      	movs	r3, #0
 80044c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044cc:	4b77      	ldr	r3, [pc, #476]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044da:	4a74      	ldr	r2, [pc, #464]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044fc:	4b6b      	ldr	r3, [pc, #428]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800450c:	4a67      	ldr	r2, [pc, #412]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	430b      	orrs	r3, r1
 8004510:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	2100      	movs	r1, #0
 800451c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004524:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d011      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	3308      	adds	r3, #8
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f8ba 	bl	80046b0 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	2100      	movs	r1, #0
 800455c:	6239      	str	r1, [r7, #32]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
 8004564:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004568:	460b      	mov	r3, r1
 800456a:	4313      	orrs	r3, r2
 800456c:	d011      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	3308      	adds	r3, #8
 8004574:	2101      	movs	r1, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f89a 	bl	80046b0 <RCCEx_PLL2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	2100      	movs	r1, #0
 800459c:	61b9      	str	r1, [r7, #24]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d011      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	3308      	adds	r3, #8
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f87a 	bl	80046b0 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	2100      	movs	r1, #0
 80045dc:	6139      	str	r1, [r7, #16]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d011      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	3328      	adds	r3, #40	@ 0x28
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f90c 	bl	8004814 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	2100      	movs	r1, #0
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d011      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	3328      	adds	r3, #40	@ 0x28
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f8ec 	bl	8004814 <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	2100      	movs	r1, #0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d011      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	3328      	adds	r3, #40	@ 0x28
 8004674:	2102      	movs	r1, #2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f8cc 	bl	8004814 <RCCEx_PLL3_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004692:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046a6:	46bd      	mov	sp, r7
 80046a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ac:	58024400 	.word	0x58024400

080046b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046be:	4b53      	ldr	r3, [pc, #332]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d101      	bne.n	80046ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e099      	b.n	8004802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046ce:	4b4f      	ldr	r3, [pc, #316]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4e      	ldr	r2, [pc, #312]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046da:	f7fc fcfd 	bl	80010d8 <HAL_GetTick>
 80046de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046e2:	f7fc fcf9 	bl	80010d8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e086      	b.n	8004802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046f4:	4b45      	ldr	r3, [pc, #276]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004700:	4b42      	ldr	r3, [pc, #264]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	493f      	ldr	r1, [pc, #252]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004710:	4313      	orrs	r3, r2
 8004712:	628b      	str	r3, [r1, #40]	@ 0x28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	3b01      	subs	r3, #1
 800471a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	3b01      	subs	r3, #1
 8004724:	025b      	lsls	r3, r3, #9
 8004726:	b29b      	uxth	r3, r3
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	3b01      	subs	r3, #1
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	3b01      	subs	r3, #1
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004744:	4931      	ldr	r1, [pc, #196]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800474a:	4b30      	ldr	r3, [pc, #192]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	492d      	ldr	r1, [pc, #180]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800475c:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	f023 0220 	bic.w	r2, r3, #32
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4928      	ldr	r1, [pc, #160]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800476a:	4313      	orrs	r3, r2
 800476c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800476e:	4b27      	ldr	r3, [pc, #156]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	4a26      	ldr	r2, [pc, #152]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004774:	f023 0310 	bic.w	r3, r3, #16
 8004778:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800477a:	4b24      	ldr	r3, [pc, #144]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800477c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800477e:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <RCCEx_PLL2_Config+0x160>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	69d2      	ldr	r2, [r2, #28]
 8004786:	00d2      	lsls	r2, r2, #3
 8004788:	4920      	ldr	r1, [pc, #128]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800478e:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004794:	f043 0310 	orr.w	r3, r3, #16
 8004798:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047a0:	4b1a      	ldr	r3, [pc, #104]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	4a19      	ldr	r2, [pc, #100]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047ac:	e00f      	b.n	80047ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047b4:	4b15      	ldr	r3, [pc, #84]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047c0:	e005      	b.n	80047ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047c2:	4b12      	ldr	r3, [pc, #72]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	4a11      	ldr	r2, [pc, #68]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047ce:	4b0f      	ldr	r3, [pc, #60]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a0e      	ldr	r2, [pc, #56]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fc fc7d 	bl	80010d8 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047e0:	e008      	b.n	80047f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047e2:	f7fc fc79 	bl	80010d8 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
 8004810:	ffff0007 	.word	0xffff0007

08004814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004822:	4b53      	ldr	r3, [pc, #332]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b03      	cmp	r3, #3
 800482c:	d101      	bne.n	8004832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e099      	b.n	8004966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004832:	4b4f      	ldr	r3, [pc, #316]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a4e      	ldr	r2, [pc, #312]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483e:	f7fc fc4b 	bl	80010d8 <HAL_GetTick>
 8004842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004844:	e008      	b.n	8004858 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004846:	f7fc fc47 	bl	80010d8 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e086      	b.n	8004966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004858:	4b45      	ldr	r3, [pc, #276]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004864:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	051b      	lsls	r3, r3, #20
 8004872:	493f      	ldr	r1, [pc, #252]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	628b      	str	r3, [r1, #40]	@ 0x28
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	3b01      	subs	r3, #1
 800487e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	3b01      	subs	r3, #1
 8004888:	025b      	lsls	r3, r3, #9
 800488a:	b29b      	uxth	r3, r3
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	3b01      	subs	r3, #1
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048a8:	4931      	ldr	r1, [pc, #196]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048ae:	4b30      	ldr	r3, [pc, #192]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	492d      	ldr	r1, [pc, #180]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4928      	ldr	r1, [pc, #160]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048d2:	4b27      	ldr	r3, [pc, #156]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e2:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <RCCEx_PLL3_Config+0x160>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	69d2      	ldr	r2, [r2, #28]
 80048ea:	00d2      	lsls	r2, r2, #3
 80048ec:	4920      	ldr	r1, [pc, #128]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80048f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004904:	4b1a      	ldr	r3, [pc, #104]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	4a19      	ldr	r2, [pc, #100]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800490a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800490e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004910:	e00f      	b.n	8004932 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d106      	bne.n	8004926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800491e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004922:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004924:	e005      	b.n	8004932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	4a11      	ldr	r2, [pc, #68]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800492c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004930:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004932:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a0e      	ldr	r2, [pc, #56]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fc fbcb 	bl	80010d8 <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004944:	e008      	b.n	8004958 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004946:	f7fc fbc7 	bl	80010d8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e006      	b.n	8004966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	ffff0007 	.word	0xffff0007

08004978 <__cvt>:
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	ed2d 8b02 	vpush	{d8}
 800497e:	eeb0 8b40 	vmov.f64	d8, d0
 8004982:	b085      	sub	sp, #20
 8004984:	4617      	mov	r7, r2
 8004986:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004988:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800498a:	ee18 2a90 	vmov	r2, s17
 800498e:	f025 0520 	bic.w	r5, r5, #32
 8004992:	2a00      	cmp	r2, #0
 8004994:	bfb6      	itet	lt
 8004996:	222d      	movlt	r2, #45	@ 0x2d
 8004998:	2200      	movge	r2, #0
 800499a:	eeb1 8b40 	vneglt.f64	d8, d0
 800499e:	2d46      	cmp	r5, #70	@ 0x46
 80049a0:	460c      	mov	r4, r1
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	d004      	beq.n	80049b0 <__cvt+0x38>
 80049a6:	2d45      	cmp	r5, #69	@ 0x45
 80049a8:	d100      	bne.n	80049ac <__cvt+0x34>
 80049aa:	3401      	adds	r4, #1
 80049ac:	2102      	movs	r1, #2
 80049ae:	e000      	b.n	80049b2 <__cvt+0x3a>
 80049b0:	2103      	movs	r1, #3
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	ab02      	add	r3, sp, #8
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4622      	mov	r2, r4
 80049bc:	4633      	mov	r3, r6
 80049be:	eeb0 0b48 	vmov.f64	d0, d8
 80049c2:	f000 ff1d 	bl	8005800 <_dtoa_r>
 80049c6:	2d47      	cmp	r5, #71	@ 0x47
 80049c8:	d114      	bne.n	80049f4 <__cvt+0x7c>
 80049ca:	07fb      	lsls	r3, r7, #31
 80049cc:	d50a      	bpl.n	80049e4 <__cvt+0x6c>
 80049ce:	1902      	adds	r2, r0, r4
 80049d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	bf08      	it	eq
 80049da:	9203      	streq	r2, [sp, #12]
 80049dc:	2130      	movs	r1, #48	@ 0x30
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d319      	bcc.n	8004a18 <__cvt+0xa0>
 80049e4:	9b03      	ldr	r3, [sp, #12]
 80049e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049e8:	1a1b      	subs	r3, r3, r0
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	b005      	add	sp, #20
 80049ee:	ecbd 8b02 	vpop	{d8}
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f4:	2d46      	cmp	r5, #70	@ 0x46
 80049f6:	eb00 0204 	add.w	r2, r0, r4
 80049fa:	d1e9      	bne.n	80049d0 <__cvt+0x58>
 80049fc:	7803      	ldrb	r3, [r0, #0]
 80049fe:	2b30      	cmp	r3, #48	@ 0x30
 8004a00:	d107      	bne.n	8004a12 <__cvt+0x9a>
 8004a02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	bf1c      	itt	ne
 8004a0c:	f1c4 0401 	rsbne	r4, r4, #1
 8004a10:	6034      	strne	r4, [r6, #0]
 8004a12:	6833      	ldr	r3, [r6, #0]
 8004a14:	441a      	add	r2, r3
 8004a16:	e7db      	b.n	80049d0 <__cvt+0x58>
 8004a18:	1c5c      	adds	r4, r3, #1
 8004a1a:	9403      	str	r4, [sp, #12]
 8004a1c:	7019      	strb	r1, [r3, #0]
 8004a1e:	e7de      	b.n	80049de <__cvt+0x66>

08004a20 <__exponent>:
 8004a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a22:	2900      	cmp	r1, #0
 8004a24:	bfba      	itte	lt
 8004a26:	4249      	neglt	r1, r1
 8004a28:	232d      	movlt	r3, #45	@ 0x2d
 8004a2a:	232b      	movge	r3, #43	@ 0x2b
 8004a2c:	2909      	cmp	r1, #9
 8004a2e:	7002      	strb	r2, [r0, #0]
 8004a30:	7043      	strb	r3, [r0, #1]
 8004a32:	dd29      	ble.n	8004a88 <__exponent+0x68>
 8004a34:	f10d 0307 	add.w	r3, sp, #7
 8004a38:	461d      	mov	r5, r3
 8004a3a:	270a      	movs	r7, #10
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a42:	fb07 1416 	mls	r4, r7, r6, r1
 8004a46:	3430      	adds	r4, #48	@ 0x30
 8004a48:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	2c63      	cmp	r4, #99	@ 0x63
 8004a50:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a54:	4631      	mov	r1, r6
 8004a56:	dcf1      	bgt.n	8004a3c <__exponent+0x1c>
 8004a58:	3130      	adds	r1, #48	@ 0x30
 8004a5a:	1e94      	subs	r4, r2, #2
 8004a5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a60:	1c41      	adds	r1, r0, #1
 8004a62:	4623      	mov	r3, r4
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	d30a      	bcc.n	8004a7e <__exponent+0x5e>
 8004a68:	f10d 0309 	add.w	r3, sp, #9
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	42ac      	cmp	r4, r5
 8004a70:	bf88      	it	hi
 8004a72:	2300      	movhi	r3, #0
 8004a74:	3302      	adds	r3, #2
 8004a76:	4403      	add	r3, r0
 8004a78:	1a18      	subs	r0, r3, r0
 8004a7a:	b003      	add	sp, #12
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a82:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a86:	e7ed      	b.n	8004a64 <__exponent+0x44>
 8004a88:	2330      	movs	r3, #48	@ 0x30
 8004a8a:	3130      	adds	r1, #48	@ 0x30
 8004a8c:	7083      	strb	r3, [r0, #2]
 8004a8e:	70c1      	strb	r1, [r0, #3]
 8004a90:	1d03      	adds	r3, r0, #4
 8004a92:	e7f1      	b.n	8004a78 <__exponent+0x58>
 8004a94:	0000      	movs	r0, r0
	...

08004a98 <_printf_float>:
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	b08d      	sub	sp, #52	@ 0x34
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	f000 fd9b 	bl	80055e4 <_localeconv_r>
 8004aae:	f8d0 b000 	ldr.w	fp, [r0]
 8004ab2:	4658      	mov	r0, fp
 8004ab4:	f7fb fc64 	bl	8000380 <strlen>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8004abc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	9005      	str	r0, [sp, #20]
 8004ac8:	3307      	adds	r3, #7
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	f103 0108 	add.w	r1, r3, #8
 8004ad2:	f8c8 1000 	str.w	r1, [r8]
 8004ad6:	ed93 0b00 	vldr	d0, [r3]
 8004ada:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004d38 <_printf_float+0x2a0>
 8004ade:	eeb0 7bc0 	vabs.f64	d7, d0
 8004ae2:	eeb4 7b46 	vcmp.f64	d7, d6
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004aee:	dd24      	ble.n	8004b3a <_printf_float+0xa2>
 8004af0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	d502      	bpl.n	8004b00 <_printf_float+0x68>
 8004afa:	232d      	movs	r3, #45	@ 0x2d
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b00:	498f      	ldr	r1, [pc, #572]	@ (8004d40 <_printf_float+0x2a8>)
 8004b02:	4b90      	ldr	r3, [pc, #576]	@ (8004d44 <_printf_float+0x2ac>)
 8004b04:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004b08:	bf8c      	ite	hi
 8004b0a:	4688      	movhi	r8, r1
 8004b0c:	4698      	movls	r8, r3
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	2303      	movs	r3, #3
 8004b14:	6123      	str	r3, [r4, #16]
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	f04f 0a00 	mov.w	sl, #0
 8004b1c:	9700      	str	r7, [sp, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b22:	4621      	mov	r1, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 f9d1 	bl	8004ecc <_printf_common>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f040 8089 	bne.w	8004c42 <_printf_float+0x1aa>
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	b00d      	add	sp, #52	@ 0x34
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3a:	eeb4 0b40 	vcmp.f64	d0, d0
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	d709      	bvc.n	8004b58 <_printf_float+0xc0>
 8004b44:	ee10 3a90 	vmov	r3, s1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bfbc      	itt	lt
 8004b4c:	232d      	movlt	r3, #45	@ 0x2d
 8004b4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b52:	497d      	ldr	r1, [pc, #500]	@ (8004d48 <_printf_float+0x2b0>)
 8004b54:	4b7d      	ldr	r3, [pc, #500]	@ (8004d4c <_printf_float+0x2b4>)
 8004b56:	e7d5      	b.n	8004b04 <_printf_float+0x6c>
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004b60:	d139      	bne.n	8004bd6 <_printf_float+0x13e>
 8004b62:	2306      	movs	r3, #6
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6022      	str	r2, [r4, #0]
 8004b6e:	9303      	str	r3, [sp, #12]
 8004b70:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004b76:	ab09      	add	r3, sp, #36	@ 0x24
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6861      	ldr	r1, [r4, #4]
 8004b7c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b80:	4628      	mov	r0, r5
 8004b82:	f7ff fef9 	bl	8004978 <__cvt>
 8004b86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	d129      	bne.n	8004be4 <_printf_float+0x14c>
 8004b90:	1cc8      	adds	r0, r1, #3
 8004b92:	db02      	blt.n	8004b9a <_printf_float+0x102>
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	4299      	cmp	r1, r3
 8004b98:	dd41      	ble.n	8004c1e <_printf_float+0x186>
 8004b9a:	f1a9 0902 	sub.w	r9, r9, #2
 8004b9e:	fa5f f989 	uxtb.w	r9, r9
 8004ba2:	3901      	subs	r1, #1
 8004ba4:	464a      	mov	r2, r9
 8004ba6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004baa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bac:	f7ff ff38 	bl	8004a20 <__exponent>
 8004bb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bb2:	1813      	adds	r3, r2, r0
 8004bb4:	2a01      	cmp	r2, #1
 8004bb6:	4682      	mov	sl, r0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	dc02      	bgt.n	8004bc2 <_printf_float+0x12a>
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	07d2      	lsls	r2, r2, #31
 8004bc0:	d501      	bpl.n	8004bc6 <_printf_float+0x12e>
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0a6      	beq.n	8004b1c <_printf_float+0x84>
 8004bce:	232d      	movs	r3, #45	@ 0x2d
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bd4:	e7a2      	b.n	8004b1c <_printf_float+0x84>
 8004bd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bda:	d1c4      	bne.n	8004b66 <_printf_float+0xce>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1c2      	bne.n	8004b66 <_printf_float+0xce>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e7bf      	b.n	8004b64 <_printf_float+0xcc>
 8004be4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004be8:	d9db      	bls.n	8004ba2 <_printf_float+0x10a>
 8004bea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004bee:	d118      	bne.n	8004c22 <_printf_float+0x18a>
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	dd0b      	ble.n	8004c0e <_printf_float+0x176>
 8004bf6:	6121      	str	r1, [r4, #16]
 8004bf8:	b913      	cbnz	r3, 8004c00 <_printf_float+0x168>
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	07d0      	lsls	r0, r2, #31
 8004bfe:	d502      	bpl.n	8004c06 <_printf_float+0x16e>
 8004c00:	3301      	adds	r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	6123      	str	r3, [r4, #16]
 8004c06:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c08:	f04f 0a00 	mov.w	sl, #0
 8004c0c:	e7db      	b.n	8004bc6 <_printf_float+0x12e>
 8004c0e:	b913      	cbnz	r3, 8004c16 <_printf_float+0x17e>
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	07d2      	lsls	r2, r2, #31
 8004c14:	d501      	bpl.n	8004c1a <_printf_float+0x182>
 8004c16:	3302      	adds	r3, #2
 8004c18:	e7f4      	b.n	8004c04 <_printf_float+0x16c>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e7f2      	b.n	8004c04 <_printf_float+0x16c>
 8004c1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c24:	4299      	cmp	r1, r3
 8004c26:	db05      	blt.n	8004c34 <_printf_float+0x19c>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	6121      	str	r1, [r4, #16]
 8004c2c:	07d8      	lsls	r0, r3, #31
 8004c2e:	d5ea      	bpl.n	8004c06 <_printf_float+0x16e>
 8004c30:	1c4b      	adds	r3, r1, #1
 8004c32:	e7e7      	b.n	8004c04 <_printf_float+0x16c>
 8004c34:	2900      	cmp	r1, #0
 8004c36:	bfd4      	ite	le
 8004c38:	f1c1 0202 	rsble	r2, r1, #2
 8004c3c:	2201      	movgt	r2, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	e7e0      	b.n	8004c04 <_printf_float+0x16c>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	055a      	lsls	r2, r3, #21
 8004c46:	d407      	bmi.n	8004c58 <_printf_float+0x1c0>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	d12a      	bne.n	8004cac <_printf_float+0x214>
 8004c56:	e76b      	b.n	8004b30 <_printf_float+0x98>
 8004c58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004c5c:	f240 80e0 	bls.w	8004e20 <_printf_float+0x388>
 8004c60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004c64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	d133      	bne.n	8004cd6 <_printf_float+0x23e>
 8004c6e:	4a38      	ldr	r2, [pc, #224]	@ (8004d50 <_printf_float+0x2b8>)
 8004c70:	2301      	movs	r3, #1
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af59 	beq.w	8004b30 <_printf_float+0x98>
 8004c7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c82:	4543      	cmp	r3, r8
 8004c84:	db02      	blt.n	8004c8c <_printf_float+0x1f4>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	07d8      	lsls	r0, r3, #31
 8004c8a:	d50f      	bpl.n	8004cac <_printf_float+0x214>
 8004c8c:	9b05      	ldr	r3, [sp, #20]
 8004c8e:	465a      	mov	r2, fp
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	f43f af4a 	beq.w	8004b30 <_printf_float+0x98>
 8004c9c:	f04f 0900 	mov.w	r9, #0
 8004ca0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ca4:	f104 0a1a 	add.w	sl, r4, #26
 8004ca8:	45c8      	cmp	r8, r9
 8004caa:	dc09      	bgt.n	8004cc0 <_printf_float+0x228>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	079b      	lsls	r3, r3, #30
 8004cb0:	f100 8107 	bmi.w	8004ec2 <_printf_float+0x42a>
 8004cb4:	68e0      	ldr	r0, [r4, #12]
 8004cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cb8:	4298      	cmp	r0, r3
 8004cba:	bfb8      	it	lt
 8004cbc:	4618      	movlt	r0, r3
 8004cbe:	e739      	b.n	8004b34 <_printf_float+0x9c>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f af30 	beq.w	8004b30 <_printf_float+0x98>
 8004cd0:	f109 0901 	add.w	r9, r9, #1
 8004cd4:	e7e8      	b.n	8004ca8 <_printf_float+0x210>
 8004cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	dc3b      	bgt.n	8004d54 <_printf_float+0x2bc>
 8004cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <_printf_float+0x2b8>)
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af22 	beq.w	8004b30 <_printf_float+0x98>
 8004cec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004cf0:	ea59 0303 	orrs.w	r3, r9, r3
 8004cf4:	d102      	bne.n	8004cfc <_printf_float+0x264>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	07d9      	lsls	r1, r3, #31
 8004cfa:	d5d7      	bpl.n	8004cac <_printf_float+0x214>
 8004cfc:	9b05      	ldr	r3, [sp, #20]
 8004cfe:	465a      	mov	r2, fp
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f af12 	beq.w	8004b30 <_printf_float+0x98>
 8004d0c:	f04f 0a00 	mov.w	sl, #0
 8004d10:	f104 0b1a 	add.w	fp, r4, #26
 8004d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d16:	425b      	negs	r3, r3
 8004d18:	4553      	cmp	r3, sl
 8004d1a:	dc01      	bgt.n	8004d20 <_printf_float+0x288>
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	e794      	b.n	8004c4a <_printf_float+0x1b2>
 8004d20:	2301      	movs	r3, #1
 8004d22:	465a      	mov	r2, fp
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f af00 	beq.w	8004b30 <_printf_float+0x98>
 8004d30:	f10a 0a01 	add.w	sl, sl, #1
 8004d34:	e7ee      	b.n	8004d14 <_printf_float+0x27c>
 8004d36:	bf00      	nop
 8004d38:	ffffffff 	.word	0xffffffff
 8004d3c:	7fefffff 	.word	0x7fefffff
 8004d40:	08007400 	.word	0x08007400
 8004d44:	080073fc 	.word	0x080073fc
 8004d48:	08007408 	.word	0x08007408
 8004d4c:	08007404 	.word	0x08007404
 8004d50:	0800740c 	.word	0x0800740c
 8004d54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d5a:	4553      	cmp	r3, sl
 8004d5c:	bfa8      	it	ge
 8004d5e:	4653      	movge	r3, sl
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	4699      	mov	r9, r3
 8004d64:	dc37      	bgt.n	8004dd6 <_printf_float+0x33e>
 8004d66:	2300      	movs	r3, #0
 8004d68:	9307      	str	r3, [sp, #28]
 8004d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d6e:	f104 021a 	add.w	r2, r4, #26
 8004d72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d74:	9907      	ldr	r1, [sp, #28]
 8004d76:	9306      	str	r3, [sp, #24]
 8004d78:	eba3 0309 	sub.w	r3, r3, r9
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	dc31      	bgt.n	8004de4 <_printf_float+0x34c>
 8004d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d82:	459a      	cmp	sl, r3
 8004d84:	dc3b      	bgt.n	8004dfe <_printf_float+0x366>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	07da      	lsls	r2, r3, #31
 8004d8a:	d438      	bmi.n	8004dfe <_printf_float+0x366>
 8004d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8e:	ebaa 0903 	sub.w	r9, sl, r3
 8004d92:	9b06      	ldr	r3, [sp, #24]
 8004d94:	ebaa 0303 	sub.w	r3, sl, r3
 8004d98:	4599      	cmp	r9, r3
 8004d9a:	bfa8      	it	ge
 8004d9c:	4699      	movge	r9, r3
 8004d9e:	f1b9 0f00 	cmp.w	r9, #0
 8004da2:	dc34      	bgt.n	8004e0e <_printf_float+0x376>
 8004da4:	f04f 0800 	mov.w	r8, #0
 8004da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dac:	f104 0b1a 	add.w	fp, r4, #26
 8004db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db2:	ebaa 0303 	sub.w	r3, sl, r3
 8004db6:	eba3 0309 	sub.w	r3, r3, r9
 8004dba:	4543      	cmp	r3, r8
 8004dbc:	f77f af76 	ble.w	8004cac <_printf_float+0x214>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	465a      	mov	r2, fp
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f aeb0 	beq.w	8004b30 <_printf_float+0x98>
 8004dd0:	f108 0801 	add.w	r8, r8, #1
 8004dd4:	e7ec      	b.n	8004db0 <_printf_float+0x318>
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	4631      	mov	r1, r6
 8004dda:	4628      	mov	r0, r5
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	d1c1      	bne.n	8004d66 <_printf_float+0x2ce>
 8004de2:	e6a5      	b.n	8004b30 <_printf_float+0x98>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	9206      	str	r2, [sp, #24]
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f ae9e 	beq.w	8004b30 <_printf_float+0x98>
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	9a06      	ldr	r2, [sp, #24]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	9307      	str	r3, [sp, #28]
 8004dfc:	e7b9      	b.n	8004d72 <_printf_float+0x2da>
 8004dfe:	9b05      	ldr	r3, [sp, #20]
 8004e00:	465a      	mov	r2, fp
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d1bf      	bne.n	8004d8c <_printf_float+0x2f4>
 8004e0c:	e690      	b.n	8004b30 <_printf_float+0x98>
 8004e0e:	9a06      	ldr	r2, [sp, #24]
 8004e10:	464b      	mov	r3, r9
 8004e12:	4442      	add	r2, r8
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1c2      	bne.n	8004da4 <_printf_float+0x30c>
 8004e1e:	e687      	b.n	8004b30 <_printf_float+0x98>
 8004e20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004e24:	f1b9 0f01 	cmp.w	r9, #1
 8004e28:	dc01      	bgt.n	8004e2e <_printf_float+0x396>
 8004e2a:	07db      	lsls	r3, r3, #31
 8004e2c:	d536      	bpl.n	8004e9c <_printf_float+0x404>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4642      	mov	r2, r8
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f43f ae79 	beq.w	8004b30 <_printf_float+0x98>
 8004e3e:	9b05      	ldr	r3, [sp, #20]
 8004e40:	465a      	mov	r2, fp
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae71 	beq.w	8004b30 <_printf_float+0x98>
 8004e4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004e52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e5e:	d018      	beq.n	8004e92 <_printf_float+0x3fa>
 8004e60:	464b      	mov	r3, r9
 8004e62:	f108 0201 	add.w	r2, r8, #1
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b8      	blx	r7
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d10c      	bne.n	8004e8a <_printf_float+0x3f2>
 8004e70:	e65e      	b.n	8004b30 <_printf_float+0x98>
 8004e72:	2301      	movs	r3, #1
 8004e74:	465a      	mov	r2, fp
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae57 	beq.w	8004b30 <_printf_float+0x98>
 8004e82:	f108 0801 	add.w	r8, r8, #1
 8004e86:	45c8      	cmp	r8, r9
 8004e88:	dbf3      	blt.n	8004e72 <_printf_float+0x3da>
 8004e8a:	4653      	mov	r3, sl
 8004e8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e90:	e6dc      	b.n	8004c4c <_printf_float+0x1b4>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	f104 0b1a 	add.w	fp, r4, #26
 8004e9a:	e7f4      	b.n	8004e86 <_printf_float+0x3ee>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	e7e1      	b.n	8004e66 <_printf_float+0x3ce>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	464a      	mov	r2, r9
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f ae3f 	beq.w	8004b30 <_printf_float+0x98>
 8004eb2:	f108 0801 	add.w	r8, r8, #1
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004eba:	1a5b      	subs	r3, r3, r1
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	dcf0      	bgt.n	8004ea2 <_printf_float+0x40a>
 8004ec0:	e6f8      	b.n	8004cb4 <_printf_float+0x21c>
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	f104 0919 	add.w	r9, r4, #25
 8004eca:	e7f4      	b.n	8004eb6 <_printf_float+0x41e>

08004ecc <_printf_common>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	4698      	mov	r8, r3
 8004ed4:	688a      	ldr	r2, [r1, #8]
 8004ed6:	690b      	ldr	r3, [r1, #16]
 8004ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bfb8      	it	lt
 8004ee0:	4613      	movlt	r3, r2
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ee8:	4607      	mov	r7, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	b10a      	cbz	r2, 8004ef2 <_printf_common+0x26>
 8004eee:	3301      	adds	r3, #1
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	0699      	lsls	r1, r3, #26
 8004ef6:	bf42      	ittt	mi
 8004ef8:	6833      	ldrmi	r3, [r6, #0]
 8004efa:	3302      	addmi	r3, #2
 8004efc:	6033      	strmi	r3, [r6, #0]
 8004efe:	6825      	ldr	r5, [r4, #0]
 8004f00:	f015 0506 	ands.w	r5, r5, #6
 8004f04:	d106      	bne.n	8004f14 <_printf_common+0x48>
 8004f06:	f104 0a19 	add.w	sl, r4, #25
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	6832      	ldr	r2, [r6, #0]
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	dc26      	bgt.n	8004f62 <_printf_common+0x96>
 8004f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	3b00      	subs	r3, #0
 8004f1c:	bf18      	it	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	0692      	lsls	r2, r2, #26
 8004f22:	d42b      	bmi.n	8004f7c <_printf_common+0xb0>
 8004f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f28:	4641      	mov	r1, r8
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c8      	blx	r9
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d01e      	beq.n	8004f70 <_printf_common+0xa4>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	6922      	ldr	r2, [r4, #16]
 8004f36:	f003 0306 	and.w	r3, r3, #6
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	bf02      	ittt	eq
 8004f3e:	68e5      	ldreq	r5, [r4, #12]
 8004f40:	6833      	ldreq	r3, [r6, #0]
 8004f42:	1aed      	subeq	r5, r5, r3
 8004f44:	68a3      	ldr	r3, [r4, #8]
 8004f46:	bf0c      	ite	eq
 8004f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f4c:	2500      	movne	r5, #0
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	bfc4      	itt	gt
 8004f52:	1a9b      	subgt	r3, r3, r2
 8004f54:	18ed      	addgt	r5, r5, r3
 8004f56:	2600      	movs	r6, #0
 8004f58:	341a      	adds	r4, #26
 8004f5a:	42b5      	cmp	r5, r6
 8004f5c:	d11a      	bne.n	8004f94 <_printf_common+0xc8>
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e008      	b.n	8004f74 <_printf_common+0xa8>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4652      	mov	r2, sl
 8004f66:	4641      	mov	r1, r8
 8004f68:	4638      	mov	r0, r7
 8004f6a:	47c8      	blx	r9
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d103      	bne.n	8004f78 <_printf_common+0xac>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	3501      	adds	r5, #1
 8004f7a:	e7c6      	b.n	8004f0a <_printf_common+0x3e>
 8004f7c:	18e1      	adds	r1, r4, r3
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	2030      	movs	r0, #48	@ 0x30
 8004f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f86:	4422      	add	r2, r4
 8004f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f90:	3302      	adds	r3, #2
 8004f92:	e7c7      	b.n	8004f24 <_printf_common+0x58>
 8004f94:	2301      	movs	r3, #1
 8004f96:	4622      	mov	r2, r4
 8004f98:	4641      	mov	r1, r8
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c8      	blx	r9
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d0e6      	beq.n	8004f70 <_printf_common+0xa4>
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7d9      	b.n	8004f5a <_printf_common+0x8e>
	...

08004fa8 <_printf_i>:
 8004fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	7e0f      	ldrb	r7, [r1, #24]
 8004fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fb0:	2f78      	cmp	r7, #120	@ 0x78
 8004fb2:	4691      	mov	r9, r2
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	469a      	mov	sl, r3
 8004fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fbe:	d807      	bhi.n	8004fd0 <_printf_i+0x28>
 8004fc0:	2f62      	cmp	r7, #98	@ 0x62
 8004fc2:	d80a      	bhi.n	8004fda <_printf_i+0x32>
 8004fc4:	2f00      	cmp	r7, #0
 8004fc6:	f000 80d1 	beq.w	800516c <_printf_i+0x1c4>
 8004fca:	2f58      	cmp	r7, #88	@ 0x58
 8004fcc:	f000 80b8 	beq.w	8005140 <_printf_i+0x198>
 8004fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fd8:	e03a      	b.n	8005050 <_printf_i+0xa8>
 8004fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fde:	2b15      	cmp	r3, #21
 8004fe0:	d8f6      	bhi.n	8004fd0 <_printf_i+0x28>
 8004fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8004fe8 <_printf_i+0x40>)
 8004fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe8:	08005041 	.word	0x08005041
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08004fd1 	.word	0x08004fd1
 8004ff4:	08004fd1 	.word	0x08004fd1
 8004ff8:	08004fd1 	.word	0x08004fd1
 8004ffc:	08004fd1 	.word	0x08004fd1
 8005000:	08005055 	.word	0x08005055
 8005004:	08004fd1 	.word	0x08004fd1
 8005008:	08004fd1 	.word	0x08004fd1
 800500c:	08004fd1 	.word	0x08004fd1
 8005010:	08004fd1 	.word	0x08004fd1
 8005014:	08005153 	.word	0x08005153
 8005018:	0800507f 	.word	0x0800507f
 800501c:	0800510d 	.word	0x0800510d
 8005020:	08004fd1 	.word	0x08004fd1
 8005024:	08004fd1 	.word	0x08004fd1
 8005028:	08005175 	.word	0x08005175
 800502c:	08004fd1 	.word	0x08004fd1
 8005030:	0800507f 	.word	0x0800507f
 8005034:	08004fd1 	.word	0x08004fd1
 8005038:	08004fd1 	.word	0x08004fd1
 800503c:	08005115 	.word	0x08005115
 8005040:	6833      	ldr	r3, [r6, #0]
 8005042:	1d1a      	adds	r2, r3, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6032      	str	r2, [r6, #0]
 8005048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800504c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005050:	2301      	movs	r3, #1
 8005052:	e09c      	b.n	800518e <_printf_i+0x1e6>
 8005054:	6833      	ldr	r3, [r6, #0]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	6031      	str	r1, [r6, #0]
 800505c:	0606      	lsls	r6, r0, #24
 800505e:	d501      	bpl.n	8005064 <_printf_i+0xbc>
 8005060:	681d      	ldr	r5, [r3, #0]
 8005062:	e003      	b.n	800506c <_printf_i+0xc4>
 8005064:	0645      	lsls	r5, r0, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0xb8>
 8005068:	f9b3 5000 	ldrsh.w	r5, [r3]
 800506c:	2d00      	cmp	r5, #0
 800506e:	da03      	bge.n	8005078 <_printf_i+0xd0>
 8005070:	232d      	movs	r3, #45	@ 0x2d
 8005072:	426d      	negs	r5, r5
 8005074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005078:	4858      	ldr	r0, [pc, #352]	@ (80051dc <_printf_i+0x234>)
 800507a:	230a      	movs	r3, #10
 800507c:	e011      	b.n	80050a2 <_printf_i+0xfa>
 800507e:	6821      	ldr	r1, [r4, #0]
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	0608      	lsls	r0, r1, #24
 8005084:	f853 5b04 	ldr.w	r5, [r3], #4
 8005088:	d402      	bmi.n	8005090 <_printf_i+0xe8>
 800508a:	0649      	lsls	r1, r1, #25
 800508c:	bf48      	it	mi
 800508e:	b2ad      	uxthmi	r5, r5
 8005090:	2f6f      	cmp	r7, #111	@ 0x6f
 8005092:	4852      	ldr	r0, [pc, #328]	@ (80051dc <_printf_i+0x234>)
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	bf14      	ite	ne
 8005098:	230a      	movne	r3, #10
 800509a:	2308      	moveq	r3, #8
 800509c:	2100      	movs	r1, #0
 800509e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050a2:	6866      	ldr	r6, [r4, #4]
 80050a4:	60a6      	str	r6, [r4, #8]
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	db05      	blt.n	80050b6 <_printf_i+0x10e>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	432e      	orrs	r6, r5
 80050ae:	f021 0104 	bic.w	r1, r1, #4
 80050b2:	6021      	str	r1, [r4, #0]
 80050b4:	d04b      	beq.n	800514e <_printf_i+0x1a6>
 80050b6:	4616      	mov	r6, r2
 80050b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050bc:	fb03 5711 	mls	r7, r3, r1, r5
 80050c0:	5dc7      	ldrb	r7, [r0, r7]
 80050c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050c6:	462f      	mov	r7, r5
 80050c8:	42bb      	cmp	r3, r7
 80050ca:	460d      	mov	r5, r1
 80050cc:	d9f4      	bls.n	80050b8 <_printf_i+0x110>
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d10b      	bne.n	80050ea <_printf_i+0x142>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	07df      	lsls	r7, r3, #31
 80050d6:	d508      	bpl.n	80050ea <_printf_i+0x142>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	6861      	ldr	r1, [r4, #4]
 80050dc:	4299      	cmp	r1, r3
 80050de:	bfde      	ittt	le
 80050e0:	2330      	movle	r3, #48	@ 0x30
 80050e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ea:	1b92      	subs	r2, r2, r6
 80050ec:	6122      	str	r2, [r4, #16]
 80050ee:	f8cd a000 	str.w	sl, [sp]
 80050f2:	464b      	mov	r3, r9
 80050f4:	aa03      	add	r2, sp, #12
 80050f6:	4621      	mov	r1, r4
 80050f8:	4640      	mov	r0, r8
 80050fa:	f7ff fee7 	bl	8004ecc <_printf_common>
 80050fe:	3001      	adds	r0, #1
 8005100:	d14a      	bne.n	8005198 <_printf_i+0x1f0>
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	b004      	add	sp, #16
 8005108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	f043 0320 	orr.w	r3, r3, #32
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	4832      	ldr	r0, [pc, #200]	@ (80051e0 <_printf_i+0x238>)
 8005116:	2778      	movs	r7, #120	@ 0x78
 8005118:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	061f      	lsls	r7, r3, #24
 8005122:	f851 5b04 	ldr.w	r5, [r1], #4
 8005126:	d402      	bmi.n	800512e <_printf_i+0x186>
 8005128:	065f      	lsls	r7, r3, #25
 800512a:	bf48      	it	mi
 800512c:	b2ad      	uxthmi	r5, r5
 800512e:	6031      	str	r1, [r6, #0]
 8005130:	07d9      	lsls	r1, r3, #31
 8005132:	bf44      	itt	mi
 8005134:	f043 0320 	orrmi.w	r3, r3, #32
 8005138:	6023      	strmi	r3, [r4, #0]
 800513a:	b11d      	cbz	r5, 8005144 <_printf_i+0x19c>
 800513c:	2310      	movs	r3, #16
 800513e:	e7ad      	b.n	800509c <_printf_i+0xf4>
 8005140:	4826      	ldr	r0, [pc, #152]	@ (80051dc <_printf_i+0x234>)
 8005142:	e7e9      	b.n	8005118 <_printf_i+0x170>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	f023 0320 	bic.w	r3, r3, #32
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	e7f6      	b.n	800513c <_printf_i+0x194>
 800514e:	4616      	mov	r6, r2
 8005150:	e7bd      	b.n	80050ce <_printf_i+0x126>
 8005152:	6833      	ldr	r3, [r6, #0]
 8005154:	6825      	ldr	r5, [r4, #0]
 8005156:	6961      	ldr	r1, [r4, #20]
 8005158:	1d18      	adds	r0, r3, #4
 800515a:	6030      	str	r0, [r6, #0]
 800515c:	062e      	lsls	r6, r5, #24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	d501      	bpl.n	8005166 <_printf_i+0x1be>
 8005162:	6019      	str	r1, [r3, #0]
 8005164:	e002      	b.n	800516c <_printf_i+0x1c4>
 8005166:	0668      	lsls	r0, r5, #25
 8005168:	d5fb      	bpl.n	8005162 <_printf_i+0x1ba>
 800516a:	8019      	strh	r1, [r3, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	4616      	mov	r6, r2
 8005172:	e7bc      	b.n	80050ee <_printf_i+0x146>
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	6032      	str	r2, [r6, #0]
 800517a:	681e      	ldr	r6, [r3, #0]
 800517c:	6862      	ldr	r2, [r4, #4]
 800517e:	2100      	movs	r1, #0
 8005180:	4630      	mov	r0, r6
 8005182:	f7fb f8ad 	bl	80002e0 <memchr>
 8005186:	b108      	cbz	r0, 800518c <_printf_i+0x1e4>
 8005188:	1b80      	subs	r0, r0, r6
 800518a:	6060      	str	r0, [r4, #4]
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	2300      	movs	r3, #0
 8005192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005196:	e7aa      	b.n	80050ee <_printf_i+0x146>
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	4632      	mov	r2, r6
 800519c:	4649      	mov	r1, r9
 800519e:	4640      	mov	r0, r8
 80051a0:	47d0      	blx	sl
 80051a2:	3001      	adds	r0, #1
 80051a4:	d0ad      	beq.n	8005102 <_printf_i+0x15a>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	079b      	lsls	r3, r3, #30
 80051aa:	d413      	bmi.n	80051d4 <_printf_i+0x22c>
 80051ac:	68e0      	ldr	r0, [r4, #12]
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	4298      	cmp	r0, r3
 80051b2:	bfb8      	it	lt
 80051b4:	4618      	movlt	r0, r3
 80051b6:	e7a6      	b.n	8005106 <_printf_i+0x15e>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4632      	mov	r2, r6
 80051bc:	4649      	mov	r1, r9
 80051be:	4640      	mov	r0, r8
 80051c0:	47d0      	blx	sl
 80051c2:	3001      	adds	r0, #1
 80051c4:	d09d      	beq.n	8005102 <_printf_i+0x15a>
 80051c6:	3501      	adds	r5, #1
 80051c8:	68e3      	ldr	r3, [r4, #12]
 80051ca:	9903      	ldr	r1, [sp, #12]
 80051cc:	1a5b      	subs	r3, r3, r1
 80051ce:	42ab      	cmp	r3, r5
 80051d0:	dcf2      	bgt.n	80051b8 <_printf_i+0x210>
 80051d2:	e7eb      	b.n	80051ac <_printf_i+0x204>
 80051d4:	2500      	movs	r5, #0
 80051d6:	f104 0619 	add.w	r6, r4, #25
 80051da:	e7f5      	b.n	80051c8 <_printf_i+0x220>
 80051dc:	0800740e 	.word	0x0800740e
 80051e0:	0800741f 	.word	0x0800741f

080051e4 <std>:
 80051e4:	2300      	movs	r3, #0
 80051e6:	b510      	push	{r4, lr}
 80051e8:	4604      	mov	r4, r0
 80051ea:	e9c0 3300 	strd	r3, r3, [r0]
 80051ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051f2:	6083      	str	r3, [r0, #8]
 80051f4:	8181      	strh	r1, [r0, #12]
 80051f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80051f8:	81c2      	strh	r2, [r0, #14]
 80051fa:	6183      	str	r3, [r0, #24]
 80051fc:	4619      	mov	r1, r3
 80051fe:	2208      	movs	r2, #8
 8005200:	305c      	adds	r0, #92	@ 0x5c
 8005202:	f000 f9e7 	bl	80055d4 <memset>
 8005206:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <std+0x58>)
 8005208:	6263      	str	r3, [r4, #36]	@ 0x24
 800520a:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <std+0x5c>)
 800520c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <std+0x60>)
 8005210:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <std+0x64>)
 8005214:	6323      	str	r3, [r4, #48]	@ 0x30
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <std+0x68>)
 8005218:	6224      	str	r4, [r4, #32]
 800521a:	429c      	cmp	r4, r3
 800521c:	d006      	beq.n	800522c <std+0x48>
 800521e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005222:	4294      	cmp	r4, r2
 8005224:	d002      	beq.n	800522c <std+0x48>
 8005226:	33d0      	adds	r3, #208	@ 0xd0
 8005228:	429c      	cmp	r4, r3
 800522a:	d105      	bne.n	8005238 <std+0x54>
 800522c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005234:	f000 ba4a 	b.w	80056cc <__retarget_lock_init_recursive>
 8005238:	bd10      	pop	{r4, pc}
 800523a:	bf00      	nop
 800523c:	08005425 	.word	0x08005425
 8005240:	08005447 	.word	0x08005447
 8005244:	0800547f 	.word	0x0800547f
 8005248:	080054a3 	.word	0x080054a3
 800524c:	240002e4 	.word	0x240002e4

08005250 <stdio_exit_handler>:
 8005250:	4a02      	ldr	r2, [pc, #8]	@ (800525c <stdio_exit_handler+0xc>)
 8005252:	4903      	ldr	r1, [pc, #12]	@ (8005260 <stdio_exit_handler+0x10>)
 8005254:	4803      	ldr	r0, [pc, #12]	@ (8005264 <stdio_exit_handler+0x14>)
 8005256:	f000 b869 	b.w	800532c <_fwalk_sglue>
 800525a:	bf00      	nop
 800525c:	24000030 	.word	0x24000030
 8005260:	08006f3d 	.word	0x08006f3d
 8005264:	24000040 	.word	0x24000040

08005268 <cleanup_stdio>:
 8005268:	6841      	ldr	r1, [r0, #4]
 800526a:	4b0c      	ldr	r3, [pc, #48]	@ (800529c <cleanup_stdio+0x34>)
 800526c:	4299      	cmp	r1, r3
 800526e:	b510      	push	{r4, lr}
 8005270:	4604      	mov	r4, r0
 8005272:	d001      	beq.n	8005278 <cleanup_stdio+0x10>
 8005274:	f001 fe62 	bl	8006f3c <_fflush_r>
 8005278:	68a1      	ldr	r1, [r4, #8]
 800527a:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <cleanup_stdio+0x38>)
 800527c:	4299      	cmp	r1, r3
 800527e:	d002      	beq.n	8005286 <cleanup_stdio+0x1e>
 8005280:	4620      	mov	r0, r4
 8005282:	f001 fe5b 	bl	8006f3c <_fflush_r>
 8005286:	68e1      	ldr	r1, [r4, #12]
 8005288:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <cleanup_stdio+0x3c>)
 800528a:	4299      	cmp	r1, r3
 800528c:	d004      	beq.n	8005298 <cleanup_stdio+0x30>
 800528e:	4620      	mov	r0, r4
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005294:	f001 be52 	b.w	8006f3c <_fflush_r>
 8005298:	bd10      	pop	{r4, pc}
 800529a:	bf00      	nop
 800529c:	240002e4 	.word	0x240002e4
 80052a0:	2400034c 	.word	0x2400034c
 80052a4:	240003b4 	.word	0x240003b4

080052a8 <global_stdio_init.part.0>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <global_stdio_init.part.0+0x30>)
 80052ac:	4c0b      	ldr	r4, [pc, #44]	@ (80052dc <global_stdio_init.part.0+0x34>)
 80052ae:	4a0c      	ldr	r2, [pc, #48]	@ (80052e0 <global_stdio_init.part.0+0x38>)
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	4620      	mov	r0, r4
 80052b4:	2200      	movs	r2, #0
 80052b6:	2104      	movs	r1, #4
 80052b8:	f7ff ff94 	bl	80051e4 <std>
 80052bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052c0:	2201      	movs	r2, #1
 80052c2:	2109      	movs	r1, #9
 80052c4:	f7ff ff8e 	bl	80051e4 <std>
 80052c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052cc:	2202      	movs	r2, #2
 80052ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d2:	2112      	movs	r1, #18
 80052d4:	f7ff bf86 	b.w	80051e4 <std>
 80052d8:	2400041c 	.word	0x2400041c
 80052dc:	240002e4 	.word	0x240002e4
 80052e0:	08005251 	.word	0x08005251

080052e4 <__sfp_lock_acquire>:
 80052e4:	4801      	ldr	r0, [pc, #4]	@ (80052ec <__sfp_lock_acquire+0x8>)
 80052e6:	f000 b9f2 	b.w	80056ce <__retarget_lock_acquire_recursive>
 80052ea:	bf00      	nop
 80052ec:	24000425 	.word	0x24000425

080052f0 <__sfp_lock_release>:
 80052f0:	4801      	ldr	r0, [pc, #4]	@ (80052f8 <__sfp_lock_release+0x8>)
 80052f2:	f000 b9ed 	b.w	80056d0 <__retarget_lock_release_recursive>
 80052f6:	bf00      	nop
 80052f8:	24000425 	.word	0x24000425

080052fc <__sinit>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4604      	mov	r4, r0
 8005300:	f7ff fff0 	bl	80052e4 <__sfp_lock_acquire>
 8005304:	6a23      	ldr	r3, [r4, #32]
 8005306:	b11b      	cbz	r3, 8005310 <__sinit+0x14>
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	f7ff bff0 	b.w	80052f0 <__sfp_lock_release>
 8005310:	4b04      	ldr	r3, [pc, #16]	@ (8005324 <__sinit+0x28>)
 8005312:	6223      	str	r3, [r4, #32]
 8005314:	4b04      	ldr	r3, [pc, #16]	@ (8005328 <__sinit+0x2c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f5      	bne.n	8005308 <__sinit+0xc>
 800531c:	f7ff ffc4 	bl	80052a8 <global_stdio_init.part.0>
 8005320:	e7f2      	b.n	8005308 <__sinit+0xc>
 8005322:	bf00      	nop
 8005324:	08005269 	.word	0x08005269
 8005328:	2400041c 	.word	0x2400041c

0800532c <_fwalk_sglue>:
 800532c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005330:	4607      	mov	r7, r0
 8005332:	4688      	mov	r8, r1
 8005334:	4614      	mov	r4, r2
 8005336:	2600      	movs	r6, #0
 8005338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800533c:	f1b9 0901 	subs.w	r9, r9, #1
 8005340:	d505      	bpl.n	800534e <_fwalk_sglue+0x22>
 8005342:	6824      	ldr	r4, [r4, #0]
 8005344:	2c00      	cmp	r4, #0
 8005346:	d1f7      	bne.n	8005338 <_fwalk_sglue+0xc>
 8005348:	4630      	mov	r0, r6
 800534a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d907      	bls.n	8005364 <_fwalk_sglue+0x38>
 8005354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005358:	3301      	adds	r3, #1
 800535a:	d003      	beq.n	8005364 <_fwalk_sglue+0x38>
 800535c:	4629      	mov	r1, r5
 800535e:	4638      	mov	r0, r7
 8005360:	47c0      	blx	r8
 8005362:	4306      	orrs	r6, r0
 8005364:	3568      	adds	r5, #104	@ 0x68
 8005366:	e7e9      	b.n	800533c <_fwalk_sglue+0x10>

08005368 <_puts_r>:
 8005368:	6a03      	ldr	r3, [r0, #32]
 800536a:	b570      	push	{r4, r5, r6, lr}
 800536c:	6884      	ldr	r4, [r0, #8]
 800536e:	4605      	mov	r5, r0
 8005370:	460e      	mov	r6, r1
 8005372:	b90b      	cbnz	r3, 8005378 <_puts_r+0x10>
 8005374:	f7ff ffc2 	bl	80052fc <__sinit>
 8005378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800537a:	07db      	lsls	r3, r3, #31
 800537c:	d405      	bmi.n	800538a <_puts_r+0x22>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	0598      	lsls	r0, r3, #22
 8005382:	d402      	bmi.n	800538a <_puts_r+0x22>
 8005384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005386:	f000 f9a2 	bl	80056ce <__retarget_lock_acquire_recursive>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	0719      	lsls	r1, r3, #28
 800538e:	d502      	bpl.n	8005396 <_puts_r+0x2e>
 8005390:	6923      	ldr	r3, [r4, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d135      	bne.n	8005402 <_puts_r+0x9a>
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 f8c5 	bl	8005528 <__swsetup_r>
 800539e:	b380      	cbz	r0, 8005402 <_puts_r+0x9a>
 80053a0:	f04f 35ff 	mov.w	r5, #4294967295
 80053a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053a6:	07da      	lsls	r2, r3, #31
 80053a8:	d405      	bmi.n	80053b6 <_puts_r+0x4e>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	059b      	lsls	r3, r3, #22
 80053ae:	d402      	bmi.n	80053b6 <_puts_r+0x4e>
 80053b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053b2:	f000 f98d 	bl	80056d0 <__retarget_lock_release_recursive>
 80053b6:	4628      	mov	r0, r5
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da04      	bge.n	80053c8 <_puts_r+0x60>
 80053be:	69a2      	ldr	r2, [r4, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	dc17      	bgt.n	80053f4 <_puts_r+0x8c>
 80053c4:	290a      	cmp	r1, #10
 80053c6:	d015      	beq.n	80053f4 <_puts_r+0x8c>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	7019      	strb	r1, [r3, #0]
 80053d0:	68a3      	ldr	r3, [r4, #8]
 80053d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053d6:	3b01      	subs	r3, #1
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	2900      	cmp	r1, #0
 80053dc:	d1ed      	bne.n	80053ba <_puts_r+0x52>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	da11      	bge.n	8005406 <_puts_r+0x9e>
 80053e2:	4622      	mov	r2, r4
 80053e4:	210a      	movs	r1, #10
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f85f 	bl	80054aa <__swbuf_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d0d7      	beq.n	80053a0 <_puts_r+0x38>
 80053f0:	250a      	movs	r5, #10
 80053f2:	e7d7      	b.n	80053a4 <_puts_r+0x3c>
 80053f4:	4622      	mov	r2, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 f857 	bl	80054aa <__swbuf_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	d1e7      	bne.n	80053d0 <_puts_r+0x68>
 8005400:	e7ce      	b.n	80053a0 <_puts_r+0x38>
 8005402:	3e01      	subs	r6, #1
 8005404:	e7e4      	b.n	80053d0 <_puts_r+0x68>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	6022      	str	r2, [r4, #0]
 800540c:	220a      	movs	r2, #10
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e7ee      	b.n	80053f0 <_puts_r+0x88>
	...

08005414 <puts>:
 8005414:	4b02      	ldr	r3, [pc, #8]	@ (8005420 <puts+0xc>)
 8005416:	4601      	mov	r1, r0
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f7ff bfa5 	b.w	8005368 <_puts_r>
 800541e:	bf00      	nop
 8005420:	2400003c 	.word	0x2400003c

08005424 <__sread>:
 8005424:	b510      	push	{r4, lr}
 8005426:	460c      	mov	r4, r1
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	f000 f900 	bl	8005630 <_read_r>
 8005430:	2800      	cmp	r0, #0
 8005432:	bfab      	itete	ge
 8005434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005436:	89a3      	ldrhlt	r3, [r4, #12]
 8005438:	181b      	addge	r3, r3, r0
 800543a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800543e:	bfac      	ite	ge
 8005440:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005442:	81a3      	strhlt	r3, [r4, #12]
 8005444:	bd10      	pop	{r4, pc}

08005446 <__swrite>:
 8005446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	461f      	mov	r7, r3
 800544c:	898b      	ldrh	r3, [r1, #12]
 800544e:	05db      	lsls	r3, r3, #23
 8005450:	4605      	mov	r5, r0
 8005452:	460c      	mov	r4, r1
 8005454:	4616      	mov	r6, r2
 8005456:	d505      	bpl.n	8005464 <__swrite+0x1e>
 8005458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545c:	2302      	movs	r3, #2
 800545e:	2200      	movs	r2, #0
 8005460:	f000 f8d4 	bl	800560c <_lseek_r>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800546a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	4632      	mov	r2, r6
 8005472:	463b      	mov	r3, r7
 8005474:	4628      	mov	r0, r5
 8005476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547a:	f000 b8eb 	b.w	8005654 <_write_r>

0800547e <__sseek>:
 800547e:	b510      	push	{r4, lr}
 8005480:	460c      	mov	r4, r1
 8005482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005486:	f000 f8c1 	bl	800560c <_lseek_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	bf15      	itete	ne
 8005490:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800549a:	81a3      	strheq	r3, [r4, #12]
 800549c:	bf18      	it	ne
 800549e:	81a3      	strhne	r3, [r4, #12]
 80054a0:	bd10      	pop	{r4, pc}

080054a2 <__sclose>:
 80054a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a6:	f000 b8a1 	b.w	80055ec <_close_r>

080054aa <__swbuf_r>:
 80054aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ac:	460e      	mov	r6, r1
 80054ae:	4614      	mov	r4, r2
 80054b0:	4605      	mov	r5, r0
 80054b2:	b118      	cbz	r0, 80054bc <__swbuf_r+0x12>
 80054b4:	6a03      	ldr	r3, [r0, #32]
 80054b6:	b90b      	cbnz	r3, 80054bc <__swbuf_r+0x12>
 80054b8:	f7ff ff20 	bl	80052fc <__sinit>
 80054bc:	69a3      	ldr	r3, [r4, #24]
 80054be:	60a3      	str	r3, [r4, #8]
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	071a      	lsls	r2, r3, #28
 80054c4:	d501      	bpl.n	80054ca <__swbuf_r+0x20>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	b943      	cbnz	r3, 80054dc <__swbuf_r+0x32>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 f82b 	bl	8005528 <__swsetup_r>
 80054d2:	b118      	cbz	r0, 80054dc <__swbuf_r+0x32>
 80054d4:	f04f 37ff 	mov.w	r7, #4294967295
 80054d8:	4638      	mov	r0, r7
 80054da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	1a98      	subs	r0, r3, r2
 80054e2:	6963      	ldr	r3, [r4, #20]
 80054e4:	b2f6      	uxtb	r6, r6
 80054e6:	4283      	cmp	r3, r0
 80054e8:	4637      	mov	r7, r6
 80054ea:	dc05      	bgt.n	80054f8 <__swbuf_r+0x4e>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4628      	mov	r0, r5
 80054f0:	f001 fd24 	bl	8006f3c <_fflush_r>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1ed      	bne.n	80054d4 <__swbuf_r+0x2a>
 80054f8:	68a3      	ldr	r3, [r4, #8]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	701e      	strb	r6, [r3, #0]
 8005506:	6962      	ldr	r2, [r4, #20]
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	d004      	beq.n	8005518 <__swbuf_r+0x6e>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	07db      	lsls	r3, r3, #31
 8005512:	d5e1      	bpl.n	80054d8 <__swbuf_r+0x2e>
 8005514:	2e0a      	cmp	r6, #10
 8005516:	d1df      	bne.n	80054d8 <__swbuf_r+0x2e>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f001 fd0e 	bl	8006f3c <_fflush_r>
 8005520:	2800      	cmp	r0, #0
 8005522:	d0d9      	beq.n	80054d8 <__swbuf_r+0x2e>
 8005524:	e7d6      	b.n	80054d4 <__swbuf_r+0x2a>
	...

08005528 <__swsetup_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <__swsetup_r+0xa8>)
 800552c:	4605      	mov	r5, r0
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	460c      	mov	r4, r1
 8005532:	b118      	cbz	r0, 800553c <__swsetup_r+0x14>
 8005534:	6a03      	ldr	r3, [r0, #32]
 8005536:	b90b      	cbnz	r3, 800553c <__swsetup_r+0x14>
 8005538:	f7ff fee0 	bl	80052fc <__sinit>
 800553c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005540:	0719      	lsls	r1, r3, #28
 8005542:	d422      	bmi.n	800558a <__swsetup_r+0x62>
 8005544:	06da      	lsls	r2, r3, #27
 8005546:	d407      	bmi.n	8005558 <__swsetup_r+0x30>
 8005548:	2209      	movs	r2, #9
 800554a:	602a      	str	r2, [r5, #0]
 800554c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	f04f 30ff 	mov.w	r0, #4294967295
 8005556:	e033      	b.n	80055c0 <__swsetup_r+0x98>
 8005558:	0758      	lsls	r0, r3, #29
 800555a:	d512      	bpl.n	8005582 <__swsetup_r+0x5a>
 800555c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800555e:	b141      	cbz	r1, 8005572 <__swsetup_r+0x4a>
 8005560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005564:	4299      	cmp	r1, r3
 8005566:	d002      	beq.n	800556e <__swsetup_r+0x46>
 8005568:	4628      	mov	r0, r5
 800556a:	f000 fea7 	bl	80062bc <_free_r>
 800556e:	2300      	movs	r3, #0
 8005570:	6363      	str	r3, [r4, #52]	@ 0x34
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	2300      	movs	r3, #0
 800557c:	6063      	str	r3, [r4, #4]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	b94b      	cbnz	r3, 80055a2 <__swsetup_r+0x7a>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005598:	d003      	beq.n	80055a2 <__swsetup_r+0x7a>
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	f001 fd1b 	bl	8006fd8 <__smakebuf_r>
 80055a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a6:	f013 0201 	ands.w	r2, r3, #1
 80055aa:	d00a      	beq.n	80055c2 <__swsetup_r+0x9a>
 80055ac:	2200      	movs	r2, #0
 80055ae:	60a2      	str	r2, [r4, #8]
 80055b0:	6962      	ldr	r2, [r4, #20]
 80055b2:	4252      	negs	r2, r2
 80055b4:	61a2      	str	r2, [r4, #24]
 80055b6:	6922      	ldr	r2, [r4, #16]
 80055b8:	b942      	cbnz	r2, 80055cc <__swsetup_r+0xa4>
 80055ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055be:	d1c5      	bne.n	800554c <__swsetup_r+0x24>
 80055c0:	bd38      	pop	{r3, r4, r5, pc}
 80055c2:	0799      	lsls	r1, r3, #30
 80055c4:	bf58      	it	pl
 80055c6:	6962      	ldrpl	r2, [r4, #20]
 80055c8:	60a2      	str	r2, [r4, #8]
 80055ca:	e7f4      	b.n	80055b6 <__swsetup_r+0x8e>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7f7      	b.n	80055c0 <__swsetup_r+0x98>
 80055d0:	2400003c 	.word	0x2400003c

080055d4 <memset>:
 80055d4:	4402      	add	r2, r0
 80055d6:	4603      	mov	r3, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <_localeconv_r>:
 80055e4:	4800      	ldr	r0, [pc, #0]	@ (80055e8 <_localeconv_r+0x4>)
 80055e6:	4770      	bx	lr
 80055e8:	2400017c 	.word	0x2400017c

080055ec <_close_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4d06      	ldr	r5, [pc, #24]	@ (8005608 <_close_r+0x1c>)
 80055f0:	2300      	movs	r3, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	f7fb f97a 	bl	80008f0 <_close>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_close_r+0x1a>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_close_r+0x1a>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	24000420 	.word	0x24000420

0800560c <_lseek_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d07      	ldr	r5, [pc, #28]	@ (800562c <_lseek_r+0x20>)
 8005610:	4604      	mov	r4, r0
 8005612:	4608      	mov	r0, r1
 8005614:	4611      	mov	r1, r2
 8005616:	2200      	movs	r2, #0
 8005618:	602a      	str	r2, [r5, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f7fb f98f 	bl	800093e <_lseek>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_lseek_r+0x1e>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_lseek_r+0x1e>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	24000420 	.word	0x24000420

08005630 <_read_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d07      	ldr	r5, [pc, #28]	@ (8005650 <_read_r+0x20>)
 8005634:	4604      	mov	r4, r0
 8005636:	4608      	mov	r0, r1
 8005638:	4611      	mov	r1, r2
 800563a:	2200      	movs	r2, #0
 800563c:	602a      	str	r2, [r5, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f7fb f91d 	bl	800087e <_read>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_read_r+0x1e>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_read_r+0x1e>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	24000420 	.word	0x24000420

08005654 <_write_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d07      	ldr	r5, [pc, #28]	@ (8005674 <_write_r+0x20>)
 8005658:	4604      	mov	r4, r0
 800565a:	4608      	mov	r0, r1
 800565c:	4611      	mov	r1, r2
 800565e:	2200      	movs	r2, #0
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f7fb f928 	bl	80008b8 <_write>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_write_r+0x1e>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_write_r+0x1e>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	24000420 	.word	0x24000420

08005678 <__errno>:
 8005678:	4b01      	ldr	r3, [pc, #4]	@ (8005680 <__errno+0x8>)
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	2400003c 	.word	0x2400003c

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	@ (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	@ (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	@ (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	@ (80056c8 <__libc_init_array+0x44>)
 8005698:	f001 fe12 	bl	80072c0 <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	0800777c 	.word	0x0800777c
 80056c0:	0800777c 	.word	0x0800777c
 80056c4:	0800777c 	.word	0x0800777c
 80056c8:	08007780 	.word	0x08007780

080056cc <__retarget_lock_init_recursive>:
 80056cc:	4770      	bx	lr

080056ce <__retarget_lock_acquire_recursive>:
 80056ce:	4770      	bx	lr

080056d0 <__retarget_lock_release_recursive>:
 80056d0:	4770      	bx	lr

080056d2 <memcpy>:
 80056d2:	440a      	add	r2, r1
 80056d4:	4291      	cmp	r1, r2
 80056d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80056da:	d100      	bne.n	80056de <memcpy+0xc>
 80056dc:	4770      	bx	lr
 80056de:	b510      	push	{r4, lr}
 80056e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e8:	4291      	cmp	r1, r2
 80056ea:	d1f9      	bne.n	80056e0 <memcpy+0xe>
 80056ec:	bd10      	pop	{r4, pc}

080056ee <quorem>:
 80056ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f2:	6903      	ldr	r3, [r0, #16]
 80056f4:	690c      	ldr	r4, [r1, #16]
 80056f6:	42a3      	cmp	r3, r4
 80056f8:	4607      	mov	r7, r0
 80056fa:	db7e      	blt.n	80057fa <quorem+0x10c>
 80056fc:	3c01      	subs	r4, #1
 80056fe:	f101 0814 	add.w	r8, r1, #20
 8005702:	00a3      	lsls	r3, r4, #2
 8005704:	f100 0514 	add.w	r5, r0, #20
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005718:	3301      	adds	r3, #1
 800571a:	429a      	cmp	r2, r3
 800571c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005720:	fbb2 f6f3 	udiv	r6, r2, r3
 8005724:	d32e      	bcc.n	8005784 <quorem+0x96>
 8005726:	f04f 0a00 	mov.w	sl, #0
 800572a:	46c4      	mov	ip, r8
 800572c:	46ae      	mov	lr, r5
 800572e:	46d3      	mov	fp, sl
 8005730:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005734:	b298      	uxth	r0, r3
 8005736:	fb06 a000 	mla	r0, r6, r0, sl
 800573a:	0c02      	lsrs	r2, r0, #16
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	fb06 2303 	mla	r3, r6, r3, r2
 8005742:	f8de 2000 	ldr.w	r2, [lr]
 8005746:	b280      	uxth	r0, r0
 8005748:	b292      	uxth	r2, r2
 800574a:	1a12      	subs	r2, r2, r0
 800574c:	445a      	add	r2, fp
 800574e:	f8de 0000 	ldr.w	r0, [lr]
 8005752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005756:	b29b      	uxth	r3, r3
 8005758:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800575c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005760:	b292      	uxth	r2, r2
 8005762:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005766:	45e1      	cmp	r9, ip
 8005768:	f84e 2b04 	str.w	r2, [lr], #4
 800576c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005770:	d2de      	bcs.n	8005730 <quorem+0x42>
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	58eb      	ldr	r3, [r5, r3]
 8005776:	b92b      	cbnz	r3, 8005784 <quorem+0x96>
 8005778:	9b01      	ldr	r3, [sp, #4]
 800577a:	3b04      	subs	r3, #4
 800577c:	429d      	cmp	r5, r3
 800577e:	461a      	mov	r2, r3
 8005780:	d32f      	bcc.n	80057e2 <quorem+0xf4>
 8005782:	613c      	str	r4, [r7, #16]
 8005784:	4638      	mov	r0, r7
 8005786:	f001 f90b 	bl	80069a0 <__mcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	db25      	blt.n	80057da <quorem+0xec>
 800578e:	4629      	mov	r1, r5
 8005790:	2000      	movs	r0, #0
 8005792:	f858 2b04 	ldr.w	r2, [r8], #4
 8005796:	f8d1 c000 	ldr.w	ip, [r1]
 800579a:	fa1f fe82 	uxth.w	lr, r2
 800579e:	fa1f f38c 	uxth.w	r3, ip
 80057a2:	eba3 030e 	sub.w	r3, r3, lr
 80057a6:	4403      	add	r3, r0
 80057a8:	0c12      	lsrs	r2, r2, #16
 80057aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80057ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057b8:	45c1      	cmp	r9, r8
 80057ba:	f841 3b04 	str.w	r3, [r1], #4
 80057be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057c2:	d2e6      	bcs.n	8005792 <quorem+0xa4>
 80057c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057cc:	b922      	cbnz	r2, 80057d8 <quorem+0xea>
 80057ce:	3b04      	subs	r3, #4
 80057d0:	429d      	cmp	r5, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	d30b      	bcc.n	80057ee <quorem+0x100>
 80057d6:	613c      	str	r4, [r7, #16]
 80057d8:	3601      	adds	r6, #1
 80057da:	4630      	mov	r0, r6
 80057dc:	b003      	add	sp, #12
 80057de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	d1cb      	bne.n	8005782 <quorem+0x94>
 80057ea:	3c01      	subs	r4, #1
 80057ec:	e7c6      	b.n	800577c <quorem+0x8e>
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	3b04      	subs	r3, #4
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	d1ef      	bne.n	80057d6 <quorem+0xe8>
 80057f6:	3c01      	subs	r4, #1
 80057f8:	e7ea      	b.n	80057d0 <quorem+0xe2>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e7ee      	b.n	80057dc <quorem+0xee>
	...

08005800 <_dtoa_r>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	ed2d 8b02 	vpush	{d8}
 8005808:	69c7      	ldr	r7, [r0, #28]
 800580a:	b091      	sub	sp, #68	@ 0x44
 800580c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005810:	ec55 4b10 	vmov	r4, r5, d0
 8005814:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005816:	9107      	str	r1, [sp, #28]
 8005818:	4681      	mov	r9, r0
 800581a:	9209      	str	r2, [sp, #36]	@ 0x24
 800581c:	930d      	str	r3, [sp, #52]	@ 0x34
 800581e:	b97f      	cbnz	r7, 8005840 <_dtoa_r+0x40>
 8005820:	2010      	movs	r0, #16
 8005822:	f000 fd95 	bl	8006350 <malloc>
 8005826:	4602      	mov	r2, r0
 8005828:	f8c9 001c 	str.w	r0, [r9, #28]
 800582c:	b920      	cbnz	r0, 8005838 <_dtoa_r+0x38>
 800582e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ab0 <_dtoa_r+0x2b0>)
 8005830:	21ef      	movs	r1, #239	@ 0xef
 8005832:	48a0      	ldr	r0, [pc, #640]	@ (8005ab4 <_dtoa_r+0x2b4>)
 8005834:	f001 fc3e 	bl	80070b4 <__assert_func>
 8005838:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800583c:	6007      	str	r7, [r0, #0]
 800583e:	60c7      	str	r7, [r0, #12]
 8005840:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	b159      	cbz	r1, 8005860 <_dtoa_r+0x60>
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	604a      	str	r2, [r1, #4]
 800584c:	2301      	movs	r3, #1
 800584e:	4093      	lsls	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
 8005852:	4648      	mov	r0, r9
 8005854:	f000 fe72 	bl	800653c <_Bfree>
 8005858:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	1e2b      	subs	r3, r5, #0
 8005862:	bfbb      	ittet	lt
 8005864:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005868:	9303      	strlt	r3, [sp, #12]
 800586a:	2300      	movge	r3, #0
 800586c:	2201      	movlt	r2, #1
 800586e:	bfac      	ite	ge
 8005870:	6033      	strge	r3, [r6, #0]
 8005872:	6032      	strlt	r2, [r6, #0]
 8005874:	4b90      	ldr	r3, [pc, #576]	@ (8005ab8 <_dtoa_r+0x2b8>)
 8005876:	9e03      	ldr	r6, [sp, #12]
 8005878:	43b3      	bics	r3, r6
 800587a:	d110      	bne.n	800589e <_dtoa_r+0x9e>
 800587c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800587e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005888:	4323      	orrs	r3, r4
 800588a:	f000 84e6 	beq.w	800625a <_dtoa_r+0xa5a>
 800588e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005890:	4f8a      	ldr	r7, [pc, #552]	@ (8005abc <_dtoa_r+0x2bc>)
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 84e8 	beq.w	8006268 <_dtoa_r+0xa68>
 8005898:	1cfb      	adds	r3, r7, #3
 800589a:	f000 bce3 	b.w	8006264 <_dtoa_r+0xa64>
 800589e:	ed9d 8b02 	vldr	d8, [sp, #8]
 80058a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80058a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058aa:	d10a      	bne.n	80058c2 <_dtoa_r+0xc2>
 80058ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80058ae:	2301      	movs	r3, #1
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80058b4:	b113      	cbz	r3, 80058bc <_dtoa_r+0xbc>
 80058b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80058b8:	4b81      	ldr	r3, [pc, #516]	@ (8005ac0 <_dtoa_r+0x2c0>)
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4f81      	ldr	r7, [pc, #516]	@ (8005ac4 <_dtoa_r+0x2c4>)
 80058be:	f000 bcd3 	b.w	8006268 <_dtoa_r+0xa68>
 80058c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80058c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80058c6:	4648      	mov	r0, r9
 80058c8:	eeb0 0b48 	vmov.f64	d0, d8
 80058cc:	f001 f918 	bl	8006b00 <__d2b>
 80058d0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80058d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058d6:	9001      	str	r0, [sp, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d045      	beq.n	8005968 <_dtoa_r+0x168>
 80058dc:	eeb0 7b48 	vmov.f64	d7, d8
 80058e0:	ee18 1a90 	vmov	r1, s17
 80058e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80058e8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80058ec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80058f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80058f4:	2500      	movs	r5, #0
 80058f6:	ee07 1a90 	vmov	s15, r1
 80058fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80058fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005a98 <_dtoa_r+0x298>
 8005902:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005906:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005aa0 <_dtoa_r+0x2a0>
 800590a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800590e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005aa8 <_dtoa_r+0x2a8>
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800591a:	eeb0 7b46 	vmov.f64	d7, d6
 800591e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005922:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005926:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800592a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592e:	ee16 8a90 	vmov	r8, s13
 8005932:	d508      	bpl.n	8005946 <_dtoa_r+0x146>
 8005934:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005938:	eeb4 6b47 	vcmp.f64	d6, d7
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	bf18      	it	ne
 8005942:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005946:	f1b8 0f16 	cmp.w	r8, #22
 800594a:	d82b      	bhi.n	80059a4 <_dtoa_r+0x1a4>
 800594c:	495e      	ldr	r1, [pc, #376]	@ (8005ac8 <_dtoa_r+0x2c8>)
 800594e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005952:	ed91 7b00 	vldr	d7, [r1]
 8005956:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595e:	d501      	bpl.n	8005964 <_dtoa_r+0x164>
 8005960:	f108 38ff 	add.w	r8, r8, #4294967295
 8005964:	2100      	movs	r1, #0
 8005966:	e01e      	b.n	80059a6 <_dtoa_r+0x1a6>
 8005968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800596a:	4413      	add	r3, r2
 800596c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005970:	2920      	cmp	r1, #32
 8005972:	bfc1      	itttt	gt
 8005974:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005978:	408e      	lslgt	r6, r1
 800597a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800597e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005982:	bfd6      	itet	le
 8005984:	f1c1 0120 	rsble	r1, r1, #32
 8005988:	4331      	orrgt	r1, r6
 800598a:	fa04 f101 	lslle.w	r1, r4, r1
 800598e:	ee07 1a90 	vmov	s15, r1
 8005992:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005996:	3b01      	subs	r3, #1
 8005998:	ee17 1a90 	vmov	r1, s15
 800599c:	2501      	movs	r5, #1
 800599e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80059a2:	e7a8      	b.n	80058f6 <_dtoa_r+0xf6>
 80059a4:	2101      	movs	r1, #1
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	1e53      	subs	r3, r2, #1
 80059aa:	9306      	str	r3, [sp, #24]
 80059ac:	bf45      	ittet	mi
 80059ae:	f1c2 0301 	rsbmi	r3, r2, #1
 80059b2:	9304      	strmi	r3, [sp, #16]
 80059b4:	2300      	movpl	r3, #0
 80059b6:	2300      	movmi	r3, #0
 80059b8:	bf4c      	ite	mi
 80059ba:	9306      	strmi	r3, [sp, #24]
 80059bc:	9304      	strpl	r3, [sp, #16]
 80059be:	f1b8 0f00 	cmp.w	r8, #0
 80059c2:	910c      	str	r1, [sp, #48]	@ 0x30
 80059c4:	db18      	blt.n	80059f8 <_dtoa_r+0x1f8>
 80059c6:	9b06      	ldr	r3, [sp, #24]
 80059c8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80059cc:	4443      	add	r3, r8
 80059ce:	9306      	str	r3, [sp, #24]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9a07      	ldr	r2, [sp, #28]
 80059d4:	2a09      	cmp	r2, #9
 80059d6:	d845      	bhi.n	8005a64 <_dtoa_r+0x264>
 80059d8:	2a05      	cmp	r2, #5
 80059da:	bfc4      	itt	gt
 80059dc:	3a04      	subgt	r2, #4
 80059de:	9207      	strgt	r2, [sp, #28]
 80059e0:	9a07      	ldr	r2, [sp, #28]
 80059e2:	f1a2 0202 	sub.w	r2, r2, #2
 80059e6:	bfcc      	ite	gt
 80059e8:	2400      	movgt	r4, #0
 80059ea:	2401      	movle	r4, #1
 80059ec:	2a03      	cmp	r2, #3
 80059ee:	d844      	bhi.n	8005a7a <_dtoa_r+0x27a>
 80059f0:	e8df f002 	tbb	[pc, r2]
 80059f4:	0b173634 	.word	0x0b173634
 80059f8:	9b04      	ldr	r3, [sp, #16]
 80059fa:	2200      	movs	r2, #0
 80059fc:	eba3 0308 	sub.w	r3, r3, r8
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	920a      	str	r2, [sp, #40]	@ 0x28
 8005a04:	f1c8 0300 	rsb	r3, r8, #0
 8005a08:	e7e3      	b.n	80059d2 <_dtoa_r+0x1d2>
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	9208      	str	r2, [sp, #32]
 8005a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a10:	eb08 0b02 	add.w	fp, r8, r2
 8005a14:	f10b 0a01 	add.w	sl, fp, #1
 8005a18:	4652      	mov	r2, sl
 8005a1a:	2a01      	cmp	r2, #1
 8005a1c:	bfb8      	it	lt
 8005a1e:	2201      	movlt	r2, #1
 8005a20:	e006      	b.n	8005a30 <_dtoa_r+0x230>
 8005a22:	2201      	movs	r2, #1
 8005a24:	9208      	str	r2, [sp, #32]
 8005a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	dd29      	ble.n	8005a80 <_dtoa_r+0x280>
 8005a2c:	4693      	mov	fp, r2
 8005a2e:	4692      	mov	sl, r2
 8005a30:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005a34:	2100      	movs	r1, #0
 8005a36:	2004      	movs	r0, #4
 8005a38:	f100 0614 	add.w	r6, r0, #20
 8005a3c:	4296      	cmp	r6, r2
 8005a3e:	d926      	bls.n	8005a8e <_dtoa_r+0x28e>
 8005a40:	6079      	str	r1, [r7, #4]
 8005a42:	4648      	mov	r0, r9
 8005a44:	9305      	str	r3, [sp, #20]
 8005a46:	f000 fd39 	bl	80064bc <_Balloc>
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d13e      	bne.n	8005ad0 <_dtoa_r+0x2d0>
 8005a52:	4b1e      	ldr	r3, [pc, #120]	@ (8005acc <_dtoa_r+0x2cc>)
 8005a54:	4602      	mov	r2, r0
 8005a56:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a5a:	e6ea      	b.n	8005832 <_dtoa_r+0x32>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	e7e1      	b.n	8005a24 <_dtoa_r+0x224>
 8005a60:	2200      	movs	r2, #0
 8005a62:	e7d3      	b.n	8005a0c <_dtoa_r+0x20c>
 8005a64:	2401      	movs	r4, #1
 8005a66:	2200      	movs	r2, #0
 8005a68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005a6c:	f04f 3bff 	mov.w	fp, #4294967295
 8005a70:	2100      	movs	r1, #0
 8005a72:	46da      	mov	sl, fp
 8005a74:	2212      	movs	r2, #18
 8005a76:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a78:	e7da      	b.n	8005a30 <_dtoa_r+0x230>
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	9208      	str	r2, [sp, #32]
 8005a7e:	e7f5      	b.n	8005a6c <_dtoa_r+0x26c>
 8005a80:	f04f 0b01 	mov.w	fp, #1
 8005a84:	46da      	mov	sl, fp
 8005a86:	465a      	mov	r2, fp
 8005a88:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005a8c:	e7d0      	b.n	8005a30 <_dtoa_r+0x230>
 8005a8e:	3101      	adds	r1, #1
 8005a90:	0040      	lsls	r0, r0, #1
 8005a92:	e7d1      	b.n	8005a38 <_dtoa_r+0x238>
 8005a94:	f3af 8000 	nop.w
 8005a98:	636f4361 	.word	0x636f4361
 8005a9c:	3fd287a7 	.word	0x3fd287a7
 8005aa0:	8b60c8b3 	.word	0x8b60c8b3
 8005aa4:	3fc68a28 	.word	0x3fc68a28
 8005aa8:	509f79fb 	.word	0x509f79fb
 8005aac:	3fd34413 	.word	0x3fd34413
 8005ab0:	0800743d 	.word	0x0800743d
 8005ab4:	08007454 	.word	0x08007454
 8005ab8:	7ff00000 	.word	0x7ff00000
 8005abc:	08007439 	.word	0x08007439
 8005ac0:	0800740d 	.word	0x0800740d
 8005ac4:	0800740c 	.word	0x0800740c
 8005ac8:	080075a8 	.word	0x080075a8
 8005acc:	080074ac 	.word	0x080074ac
 8005ad0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005ad4:	f1ba 0f0e 	cmp.w	sl, #14
 8005ad8:	6010      	str	r0, [r2, #0]
 8005ada:	d86e      	bhi.n	8005bba <_dtoa_r+0x3ba>
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	d06c      	beq.n	8005bba <_dtoa_r+0x3ba>
 8005ae0:	f1b8 0f00 	cmp.w	r8, #0
 8005ae4:	f340 80b4 	ble.w	8005c50 <_dtoa_r+0x450>
 8005ae8:	4ac8      	ldr	r2, [pc, #800]	@ (8005e0c <_dtoa_r+0x60c>)
 8005aea:	f008 010f 	and.w	r1, r8, #15
 8005aee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005af2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005af6:	ed92 7b00 	vldr	d7, [r2]
 8005afa:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005afe:	f000 809b 	beq.w	8005c38 <_dtoa_r+0x438>
 8005b02:	4ac3      	ldr	r2, [pc, #780]	@ (8005e10 <_dtoa_r+0x610>)
 8005b04:	ed92 6b08 	vldr	d6, [r2, #32]
 8005b08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005b0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005b10:	f001 010f 	and.w	r1, r1, #15
 8005b14:	2203      	movs	r2, #3
 8005b16:	48be      	ldr	r0, [pc, #760]	@ (8005e10 <_dtoa_r+0x610>)
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	f040 808f 	bne.w	8005c3c <_dtoa_r+0x43c>
 8005b1e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b22:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005b26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005b2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b30:	2900      	cmp	r1, #0
 8005b32:	f000 80b3 	beq.w	8005c9c <_dtoa_r+0x49c>
 8005b36:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005b3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b42:	f140 80ab 	bpl.w	8005c9c <_dtoa_r+0x49c>
 8005b46:	f1ba 0f00 	cmp.w	sl, #0
 8005b4a:	f000 80a7 	beq.w	8005c9c <_dtoa_r+0x49c>
 8005b4e:	f1bb 0f00 	cmp.w	fp, #0
 8005b52:	dd30      	ble.n	8005bb6 <_dtoa_r+0x3b6>
 8005b54:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005b58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b60:	f108 31ff 	add.w	r1, r8, #4294967295
 8005b64:	9105      	str	r1, [sp, #20]
 8005b66:	3201      	adds	r2, #1
 8005b68:	465c      	mov	r4, fp
 8005b6a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b6e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005b72:	ee07 2a90 	vmov	s15, r2
 8005b76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b7a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005b7e:	ee15 2a90 	vmov	r2, s11
 8005b82:	ec51 0b15 	vmov	r0, r1, d5
 8005b86:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	f040 808a 	bne.w	8005ca4 <_dtoa_r+0x4a4>
 8005b90:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005b94:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b98:	ec41 0b17 	vmov	d7, r0, r1
 8005b9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba4:	f300 826a 	bgt.w	800607c <_dtoa_r+0x87c>
 8005ba8:	eeb1 7b47 	vneg.f64	d7, d7
 8005bac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb4:	d423      	bmi.n	8005bfe <_dtoa_r+0x3fe>
 8005bb6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005bba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	f2c0 8129 	blt.w	8005e14 <_dtoa_r+0x614>
 8005bc2:	f1b8 0f0e 	cmp.w	r8, #14
 8005bc6:	f300 8125 	bgt.w	8005e14 <_dtoa_r+0x614>
 8005bca:	4b90      	ldr	r3, [pc, #576]	@ (8005e0c <_dtoa_r+0x60c>)
 8005bcc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005bd0:	ed93 6b00 	vldr	d6, [r3]
 8005bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f280 80c8 	bge.w	8005d6c <_dtoa_r+0x56c>
 8005bdc:	f1ba 0f00 	cmp.w	sl, #0
 8005be0:	f300 80c4 	bgt.w	8005d6c <_dtoa_r+0x56c>
 8005be4:	d10b      	bne.n	8005bfe <_dtoa_r+0x3fe>
 8005be6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005bea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bf2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfa:	f2c0 823c 	blt.w	8006076 <_dtoa_r+0x876>
 8005bfe:	2400      	movs	r4, #0
 8005c00:	4625      	mov	r5, r4
 8005c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c04:	43db      	mvns	r3, r3
 8005c06:	9305      	str	r3, [sp, #20]
 8005c08:	463e      	mov	r6, r7
 8005c0a:	f04f 0800 	mov.w	r8, #0
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4648      	mov	r0, r9
 8005c12:	f000 fc93 	bl	800653c <_Bfree>
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	f000 80a2 	beq.w	8005d60 <_dtoa_r+0x560>
 8005c1c:	f1b8 0f00 	cmp.w	r8, #0
 8005c20:	d005      	beq.n	8005c2e <_dtoa_r+0x42e>
 8005c22:	45a8      	cmp	r8, r5
 8005c24:	d003      	beq.n	8005c2e <_dtoa_r+0x42e>
 8005c26:	4641      	mov	r1, r8
 8005c28:	4648      	mov	r0, r9
 8005c2a:	f000 fc87 	bl	800653c <_Bfree>
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4648      	mov	r0, r9
 8005c32:	f000 fc83 	bl	800653c <_Bfree>
 8005c36:	e093      	b.n	8005d60 <_dtoa_r+0x560>
 8005c38:	2202      	movs	r2, #2
 8005c3a:	e76c      	b.n	8005b16 <_dtoa_r+0x316>
 8005c3c:	07cc      	lsls	r4, r1, #31
 8005c3e:	d504      	bpl.n	8005c4a <_dtoa_r+0x44a>
 8005c40:	ed90 6b00 	vldr	d6, [r0]
 8005c44:	3201      	adds	r2, #1
 8005c46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c4a:	1049      	asrs	r1, r1, #1
 8005c4c:	3008      	adds	r0, #8
 8005c4e:	e763      	b.n	8005b18 <_dtoa_r+0x318>
 8005c50:	d022      	beq.n	8005c98 <_dtoa_r+0x498>
 8005c52:	f1c8 0100 	rsb	r1, r8, #0
 8005c56:	4a6d      	ldr	r2, [pc, #436]	@ (8005e0c <_dtoa_r+0x60c>)
 8005c58:	f001 000f 	and.w	r0, r1, #15
 8005c5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005c60:	ed92 7b00 	vldr	d7, [r2]
 8005c64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005c68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c6c:	4868      	ldr	r0, [pc, #416]	@ (8005e10 <_dtoa_r+0x610>)
 8005c6e:	1109      	asrs	r1, r1, #4
 8005c70:	2400      	movs	r4, #0
 8005c72:	2202      	movs	r2, #2
 8005c74:	b929      	cbnz	r1, 8005c82 <_dtoa_r+0x482>
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	f43f af57 	beq.w	8005b2a <_dtoa_r+0x32a>
 8005c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c80:	e753      	b.n	8005b2a <_dtoa_r+0x32a>
 8005c82:	07ce      	lsls	r6, r1, #31
 8005c84:	d505      	bpl.n	8005c92 <_dtoa_r+0x492>
 8005c86:	ed90 6b00 	vldr	d6, [r0]
 8005c8a:	3201      	adds	r2, #1
 8005c8c:	2401      	movs	r4, #1
 8005c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c92:	1049      	asrs	r1, r1, #1
 8005c94:	3008      	adds	r0, #8
 8005c96:	e7ed      	b.n	8005c74 <_dtoa_r+0x474>
 8005c98:	2202      	movs	r2, #2
 8005c9a:	e746      	b.n	8005b2a <_dtoa_r+0x32a>
 8005c9c:	f8cd 8014 	str.w	r8, [sp, #20]
 8005ca0:	4654      	mov	r4, sl
 8005ca2:	e762      	b.n	8005b6a <_dtoa_r+0x36a>
 8005ca4:	4a59      	ldr	r2, [pc, #356]	@ (8005e0c <_dtoa_r+0x60c>)
 8005ca6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005caa:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005cae:	9a08      	ldr	r2, [sp, #32]
 8005cb0:	ec41 0b17 	vmov	d7, r0, r1
 8005cb4:	443c      	add	r4, r7
 8005cb6:	b34a      	cbz	r2, 8005d0c <_dtoa_r+0x50c>
 8005cb8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005cbc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005cc0:	463e      	mov	r6, r7
 8005cc2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005cc6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005cca:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005cce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005cd2:	ee14 2a90 	vmov	r2, s9
 8005cd6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005cda:	3230      	adds	r2, #48	@ 0x30
 8005cdc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005ce0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce8:	f806 2b01 	strb.w	r2, [r6], #1
 8005cec:	d438      	bmi.n	8005d60 <_dtoa_r+0x560>
 8005cee:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005cf2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfa:	d46e      	bmi.n	8005dda <_dtoa_r+0x5da>
 8005cfc:	42a6      	cmp	r6, r4
 8005cfe:	f43f af5a 	beq.w	8005bb6 <_dtoa_r+0x3b6>
 8005d02:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005d06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d0a:	e7e0      	b.n	8005cce <_dtoa_r+0x4ce>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	463e      	mov	r6, r7
 8005d10:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005d14:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005d18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005d1c:	ee14 2a90 	vmov	r2, s9
 8005d20:	3230      	adds	r2, #48	@ 0x30
 8005d22:	f806 2b01 	strb.w	r2, [r6], #1
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d30:	d119      	bne.n	8005d66 <_dtoa_r+0x566>
 8005d32:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005d36:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005d3a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	dc4a      	bgt.n	8005dda <_dtoa_r+0x5da>
 8005d44:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005d48:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d50:	f57f af31 	bpl.w	8005bb6 <_dtoa_r+0x3b6>
 8005d54:	460e      	mov	r6, r1
 8005d56:	3901      	subs	r1, #1
 8005d58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d5c:	2b30      	cmp	r3, #48	@ 0x30
 8005d5e:	d0f9      	beq.n	8005d54 <_dtoa_r+0x554>
 8005d60:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005d64:	e027      	b.n	8005db6 <_dtoa_r+0x5b6>
 8005d66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d6a:	e7d5      	b.n	8005d18 <_dtoa_r+0x518>
 8005d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d70:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005d74:	463e      	mov	r6, r7
 8005d76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005d7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005d7e:	ee15 3a10 	vmov	r3, s10
 8005d82:	3330      	adds	r3, #48	@ 0x30
 8005d84:	f806 3b01 	strb.w	r3, [r6], #1
 8005d88:	1bf3      	subs	r3, r6, r7
 8005d8a:	459a      	cmp	sl, r3
 8005d8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005d90:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005d94:	d132      	bne.n	8005dfc <_dtoa_r+0x5fc>
 8005d96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da2:	dc18      	bgt.n	8005dd6 <_dtoa_r+0x5d6>
 8005da4:	eeb4 7b46 	vcmp.f64	d7, d6
 8005da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dac:	d103      	bne.n	8005db6 <_dtoa_r+0x5b6>
 8005dae:	ee15 3a10 	vmov	r3, s10
 8005db2:	07db      	lsls	r3, r3, #31
 8005db4:	d40f      	bmi.n	8005dd6 <_dtoa_r+0x5d6>
 8005db6:	9901      	ldr	r1, [sp, #4]
 8005db8:	4648      	mov	r0, r9
 8005dba:	f000 fbbf 	bl	800653c <_Bfree>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005dc2:	7033      	strb	r3, [r6, #0]
 8005dc4:	f108 0301 	add.w	r3, r8, #1
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 824b 	beq.w	8006268 <_dtoa_r+0xa68>
 8005dd2:	601e      	str	r6, [r3, #0]
 8005dd4:	e248      	b.n	8006268 <_dtoa_r+0xa68>
 8005dd6:	f8cd 8014 	str.w	r8, [sp, #20]
 8005dda:	4633      	mov	r3, r6
 8005ddc:	461e      	mov	r6, r3
 8005dde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005de2:	2a39      	cmp	r2, #57	@ 0x39
 8005de4:	d106      	bne.n	8005df4 <_dtoa_r+0x5f4>
 8005de6:	429f      	cmp	r7, r3
 8005de8:	d1f8      	bne.n	8005ddc <_dtoa_r+0x5dc>
 8005dea:	9a05      	ldr	r2, [sp, #20]
 8005dec:	3201      	adds	r2, #1
 8005dee:	9205      	str	r2, [sp, #20]
 8005df0:	2230      	movs	r2, #48	@ 0x30
 8005df2:	703a      	strb	r2, [r7, #0]
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	3201      	adds	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	e7b1      	b.n	8005d60 <_dtoa_r+0x560>
 8005dfc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005e00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e08:	d1b5      	bne.n	8005d76 <_dtoa_r+0x576>
 8005e0a:	e7d4      	b.n	8005db6 <_dtoa_r+0x5b6>
 8005e0c:	080075a8 	.word	0x080075a8
 8005e10:	08007580 	.word	0x08007580
 8005e14:	9908      	ldr	r1, [sp, #32]
 8005e16:	2900      	cmp	r1, #0
 8005e18:	f000 80e9 	beq.w	8005fee <_dtoa_r+0x7ee>
 8005e1c:	9907      	ldr	r1, [sp, #28]
 8005e1e:	2901      	cmp	r1, #1
 8005e20:	f300 80cb 	bgt.w	8005fba <_dtoa_r+0x7ba>
 8005e24:	2d00      	cmp	r5, #0
 8005e26:	f000 80c4 	beq.w	8005fb2 <_dtoa_r+0x7b2>
 8005e2a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005e2e:	9e04      	ldr	r6, [sp, #16]
 8005e30:	461c      	mov	r4, r3
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	4648      	mov	r0, r9
 8005e42:	9306      	str	r3, [sp, #24]
 8005e44:	f000 fc2e 	bl	80066a4 <__i2b>
 8005e48:	9b05      	ldr	r3, [sp, #20]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	b166      	cbz	r6, 8005e68 <_dtoa_r+0x668>
 8005e4e:	9a06      	ldr	r2, [sp, #24]
 8005e50:	2a00      	cmp	r2, #0
 8005e52:	dd09      	ble.n	8005e68 <_dtoa_r+0x668>
 8005e54:	42b2      	cmp	r2, r6
 8005e56:	9904      	ldr	r1, [sp, #16]
 8005e58:	bfa8      	it	ge
 8005e5a:	4632      	movge	r2, r6
 8005e5c:	1a89      	subs	r1, r1, r2
 8005e5e:	9104      	str	r1, [sp, #16]
 8005e60:	9906      	ldr	r1, [sp, #24]
 8005e62:	1ab6      	subs	r6, r6, r2
 8005e64:	1a8a      	subs	r2, r1, r2
 8005e66:	9206      	str	r2, [sp, #24]
 8005e68:	b30b      	cbz	r3, 8005eae <_dtoa_r+0x6ae>
 8005e6a:	9a08      	ldr	r2, [sp, #32]
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	f000 80c5 	beq.w	8005ffc <_dtoa_r+0x7fc>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	f000 80bf 	beq.w	8005ff6 <_dtoa_r+0x7f6>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	4648      	mov	r0, r9
 8005e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e80:	f000 fcc8 	bl	8006814 <__pow5mult>
 8005e84:	9a01      	ldr	r2, [sp, #4]
 8005e86:	4601      	mov	r1, r0
 8005e88:	4605      	mov	r5, r0
 8005e8a:	4648      	mov	r0, r9
 8005e8c:	f000 fc20 	bl	80066d0 <__multiply>
 8005e90:	9901      	ldr	r1, [sp, #4]
 8005e92:	9005      	str	r0, [sp, #20]
 8005e94:	4648      	mov	r0, r9
 8005e96:	f000 fb51 	bl	800653c <_Bfree>
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e9c:	1b1b      	subs	r3, r3, r4
 8005e9e:	f000 80b0 	beq.w	8006002 <_dtoa_r+0x802>
 8005ea2:	9905      	ldr	r1, [sp, #20]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4648      	mov	r0, r9
 8005ea8:	f000 fcb4 	bl	8006814 <__pow5mult>
 8005eac:	9001      	str	r0, [sp, #4]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4648      	mov	r0, r9
 8005eb2:	f000 fbf7 	bl	80066a4 <__i2b>
 8005eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eb8:	4604      	mov	r4, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 81da 	beq.w	8006274 <_dtoa_r+0xa74>
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	f000 fca5 	bl	8006814 <__pow5mult>
 8005eca:	9b07      	ldr	r3, [sp, #28]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	4604      	mov	r4, r0
 8005ed0:	f300 80a0 	bgt.w	8006014 <_dtoa_r+0x814>
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 8096 	bne.w	8006008 <_dtoa_r+0x808>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	f040 8092 	bne.w	800600c <_dtoa_r+0x80c>
 8005ee8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005eec:	0d12      	lsrs	r2, r2, #20
 8005eee:	0512      	lsls	r2, r2, #20
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	f000 808d 	beq.w	8006010 <_dtoa_r+0x810>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	9304      	str	r3, [sp, #16]
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	3301      	adds	r3, #1
 8005f00:	9306      	str	r3, [sp, #24]
 8005f02:	2301      	movs	r3, #1
 8005f04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 81b9 	beq.w	8006280 <_dtoa_r+0xa80>
 8005f0e:	6922      	ldr	r2, [r4, #16]
 8005f10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005f14:	6910      	ldr	r0, [r2, #16]
 8005f16:	f000 fb79 	bl	800660c <__hi0bits>
 8005f1a:	f1c0 0020 	rsb	r0, r0, #32
 8005f1e:	9b06      	ldr	r3, [sp, #24]
 8005f20:	4418      	add	r0, r3
 8005f22:	f010 001f 	ands.w	r0, r0, #31
 8005f26:	f000 8081 	beq.w	800602c <_dtoa_r+0x82c>
 8005f2a:	f1c0 0220 	rsb	r2, r0, #32
 8005f2e:	2a04      	cmp	r2, #4
 8005f30:	dd73      	ble.n	800601a <_dtoa_r+0x81a>
 8005f32:	9b04      	ldr	r3, [sp, #16]
 8005f34:	f1c0 001c 	rsb	r0, r0, #28
 8005f38:	4403      	add	r3, r0
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	9b06      	ldr	r3, [sp, #24]
 8005f3e:	4406      	add	r6, r0
 8005f40:	4403      	add	r3, r0
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dd05      	ble.n	8005f56 <_dtoa_r+0x756>
 8005f4a:	9901      	ldr	r1, [sp, #4]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4648      	mov	r0, r9
 8005f50:	f000 fcba 	bl	80068c8 <__lshift>
 8005f54:	9001      	str	r0, [sp, #4]
 8005f56:	9b06      	ldr	r3, [sp, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dd05      	ble.n	8005f68 <_dtoa_r+0x768>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4648      	mov	r0, r9
 8005f62:	f000 fcb1 	bl	80068c8 <__lshift>
 8005f66:	4604      	mov	r4, r0
 8005f68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d060      	beq.n	8006030 <_dtoa_r+0x830>
 8005f6e:	9801      	ldr	r0, [sp, #4]
 8005f70:	4621      	mov	r1, r4
 8005f72:	f000 fd15 	bl	80069a0 <__mcmp>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	da5a      	bge.n	8006030 <_dtoa_r+0x830>
 8005f7a:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f7e:	9305      	str	r3, [sp, #20]
 8005f80:	9901      	ldr	r1, [sp, #4]
 8005f82:	2300      	movs	r3, #0
 8005f84:	220a      	movs	r2, #10
 8005f86:	4648      	mov	r0, r9
 8005f88:	f000 fafa 	bl	8006580 <__multadd>
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	9001      	str	r0, [sp, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8177 	beq.w	8006284 <_dtoa_r+0xa84>
 8005f96:	4629      	mov	r1, r5
 8005f98:	2300      	movs	r3, #0
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	4648      	mov	r0, r9
 8005f9e:	f000 faef 	bl	8006580 <__multadd>
 8005fa2:	f1bb 0f00 	cmp.w	fp, #0
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	dc6e      	bgt.n	8006088 <_dtoa_r+0x888>
 8005faa:	9b07      	ldr	r3, [sp, #28]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	dc48      	bgt.n	8006042 <_dtoa_r+0x842>
 8005fb0:	e06a      	b.n	8006088 <_dtoa_r+0x888>
 8005fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005fb8:	e739      	b.n	8005e2e <_dtoa_r+0x62e>
 8005fba:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	db07      	blt.n	8005fd2 <_dtoa_r+0x7d2>
 8005fc2:	f1ba 0f00 	cmp.w	sl, #0
 8005fc6:	eba3 0404 	sub.w	r4, r3, r4
 8005fca:	db0b      	blt.n	8005fe4 <_dtoa_r+0x7e4>
 8005fcc:	9e04      	ldr	r6, [sp, #16]
 8005fce:	4652      	mov	r2, sl
 8005fd0:	e72f      	b.n	8005e32 <_dtoa_r+0x632>
 8005fd2:	1ae2      	subs	r2, r4, r3
 8005fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fd6:	9e04      	ldr	r6, [sp, #16]
 8005fd8:	4413      	add	r3, r2
 8005fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fdc:	4652      	mov	r2, sl
 8005fde:	4623      	mov	r3, r4
 8005fe0:	2400      	movs	r4, #0
 8005fe2:	e726      	b.n	8005e32 <_dtoa_r+0x632>
 8005fe4:	9a04      	ldr	r2, [sp, #16]
 8005fe6:	eba2 060a 	sub.w	r6, r2, sl
 8005fea:	2200      	movs	r2, #0
 8005fec:	e721      	b.n	8005e32 <_dtoa_r+0x632>
 8005fee:	9e04      	ldr	r6, [sp, #16]
 8005ff0:	9d08      	ldr	r5, [sp, #32]
 8005ff2:	461c      	mov	r4, r3
 8005ff4:	e72a      	b.n	8005e4c <_dtoa_r+0x64c>
 8005ff6:	9a01      	ldr	r2, [sp, #4]
 8005ff8:	9205      	str	r2, [sp, #20]
 8005ffa:	e752      	b.n	8005ea2 <_dtoa_r+0x6a2>
 8005ffc:	9901      	ldr	r1, [sp, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	e751      	b.n	8005ea6 <_dtoa_r+0x6a6>
 8006002:	9b05      	ldr	r3, [sp, #20]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	e752      	b.n	8005eae <_dtoa_r+0x6ae>
 8006008:	2300      	movs	r3, #0
 800600a:	e77b      	b.n	8005f04 <_dtoa_r+0x704>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	e779      	b.n	8005f04 <_dtoa_r+0x704>
 8006010:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006012:	e778      	b.n	8005f06 <_dtoa_r+0x706>
 8006014:	2300      	movs	r3, #0
 8006016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006018:	e779      	b.n	8005f0e <_dtoa_r+0x70e>
 800601a:	d093      	beq.n	8005f44 <_dtoa_r+0x744>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	321c      	adds	r2, #28
 8006020:	4413      	add	r3, r2
 8006022:	9304      	str	r3, [sp, #16]
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	4416      	add	r6, r2
 8006028:	4413      	add	r3, r2
 800602a:	e78a      	b.n	8005f42 <_dtoa_r+0x742>
 800602c:	4602      	mov	r2, r0
 800602e:	e7f5      	b.n	800601c <_dtoa_r+0x81c>
 8006030:	f1ba 0f00 	cmp.w	sl, #0
 8006034:	f8cd 8014 	str.w	r8, [sp, #20]
 8006038:	46d3      	mov	fp, sl
 800603a:	dc21      	bgt.n	8006080 <_dtoa_r+0x880>
 800603c:	9b07      	ldr	r3, [sp, #28]
 800603e:	2b02      	cmp	r3, #2
 8006040:	dd1e      	ble.n	8006080 <_dtoa_r+0x880>
 8006042:	f1bb 0f00 	cmp.w	fp, #0
 8006046:	f47f addc 	bne.w	8005c02 <_dtoa_r+0x402>
 800604a:	4621      	mov	r1, r4
 800604c:	465b      	mov	r3, fp
 800604e:	2205      	movs	r2, #5
 8006050:	4648      	mov	r0, r9
 8006052:	f000 fa95 	bl	8006580 <__multadd>
 8006056:	4601      	mov	r1, r0
 8006058:	4604      	mov	r4, r0
 800605a:	9801      	ldr	r0, [sp, #4]
 800605c:	f000 fca0 	bl	80069a0 <__mcmp>
 8006060:	2800      	cmp	r0, #0
 8006062:	f77f adce 	ble.w	8005c02 <_dtoa_r+0x402>
 8006066:	463e      	mov	r6, r7
 8006068:	2331      	movs	r3, #49	@ 0x31
 800606a:	f806 3b01 	strb.w	r3, [r6], #1
 800606e:	9b05      	ldr	r3, [sp, #20]
 8006070:	3301      	adds	r3, #1
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	e5c9      	b.n	8005c0a <_dtoa_r+0x40a>
 8006076:	f8cd 8014 	str.w	r8, [sp, #20]
 800607a:	4654      	mov	r4, sl
 800607c:	4625      	mov	r5, r4
 800607e:	e7f2      	b.n	8006066 <_dtoa_r+0x866>
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8102 	beq.w	800628c <_dtoa_r+0xa8c>
 8006088:	2e00      	cmp	r6, #0
 800608a:	dd05      	ble.n	8006098 <_dtoa_r+0x898>
 800608c:	4629      	mov	r1, r5
 800608e:	4632      	mov	r2, r6
 8006090:	4648      	mov	r0, r9
 8006092:	f000 fc19 	bl	80068c8 <__lshift>
 8006096:	4605      	mov	r5, r0
 8006098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d058      	beq.n	8006150 <_dtoa_r+0x950>
 800609e:	6869      	ldr	r1, [r5, #4]
 80060a0:	4648      	mov	r0, r9
 80060a2:	f000 fa0b 	bl	80064bc <_Balloc>
 80060a6:	4606      	mov	r6, r0
 80060a8:	b928      	cbnz	r0, 80060b6 <_dtoa_r+0x8b6>
 80060aa:	4b82      	ldr	r3, [pc, #520]	@ (80062b4 <_dtoa_r+0xab4>)
 80060ac:	4602      	mov	r2, r0
 80060ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060b2:	f7ff bbbe 	b.w	8005832 <_dtoa_r+0x32>
 80060b6:	692a      	ldr	r2, [r5, #16]
 80060b8:	3202      	adds	r2, #2
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	f105 010c 	add.w	r1, r5, #12
 80060c0:	300c      	adds	r0, #12
 80060c2:	f7ff fb06 	bl	80056d2 <memcpy>
 80060c6:	2201      	movs	r2, #1
 80060c8:	4631      	mov	r1, r6
 80060ca:	4648      	mov	r0, r9
 80060cc:	f000 fbfc 	bl	80068c8 <__lshift>
 80060d0:	1c7b      	adds	r3, r7, #1
 80060d2:	9304      	str	r3, [sp, #16]
 80060d4:	eb07 030b 	add.w	r3, r7, fp
 80060d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	46a8      	mov	r8, r5
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	4605      	mov	r5, r0
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	9801      	ldr	r0, [sp, #4]
 80060ea:	4621      	mov	r1, r4
 80060ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80060f0:	f7ff fafd 	bl	80056ee <quorem>
 80060f4:	4641      	mov	r1, r8
 80060f6:	9002      	str	r0, [sp, #8]
 80060f8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80060fc:	9801      	ldr	r0, [sp, #4]
 80060fe:	f000 fc4f 	bl	80069a0 <__mcmp>
 8006102:	462a      	mov	r2, r5
 8006104:	9006      	str	r0, [sp, #24]
 8006106:	4621      	mov	r1, r4
 8006108:	4648      	mov	r0, r9
 800610a:	f000 fc65 	bl	80069d8 <__mdiff>
 800610e:	68c2      	ldr	r2, [r0, #12]
 8006110:	4606      	mov	r6, r0
 8006112:	b9fa      	cbnz	r2, 8006154 <_dtoa_r+0x954>
 8006114:	4601      	mov	r1, r0
 8006116:	9801      	ldr	r0, [sp, #4]
 8006118:	f000 fc42 	bl	80069a0 <__mcmp>
 800611c:	4602      	mov	r2, r0
 800611e:	4631      	mov	r1, r6
 8006120:	4648      	mov	r0, r9
 8006122:	920a      	str	r2, [sp, #40]	@ 0x28
 8006124:	f000 fa0a 	bl	800653c <_Bfree>
 8006128:	9b07      	ldr	r3, [sp, #28]
 800612a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800612c:	9e04      	ldr	r6, [sp, #16]
 800612e:	ea42 0103 	orr.w	r1, r2, r3
 8006132:	9b08      	ldr	r3, [sp, #32]
 8006134:	4319      	orrs	r1, r3
 8006136:	d10f      	bne.n	8006158 <_dtoa_r+0x958>
 8006138:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800613c:	d028      	beq.n	8006190 <_dtoa_r+0x990>
 800613e:	9b06      	ldr	r3, [sp, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dd02      	ble.n	800614a <_dtoa_r+0x94a>
 8006144:	9b02      	ldr	r3, [sp, #8]
 8006146:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800614a:	f88b a000 	strb.w	sl, [fp]
 800614e:	e55e      	b.n	8005c0e <_dtoa_r+0x40e>
 8006150:	4628      	mov	r0, r5
 8006152:	e7bd      	b.n	80060d0 <_dtoa_r+0x8d0>
 8006154:	2201      	movs	r2, #1
 8006156:	e7e2      	b.n	800611e <_dtoa_r+0x91e>
 8006158:	9b06      	ldr	r3, [sp, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	db04      	blt.n	8006168 <_dtoa_r+0x968>
 800615e:	9907      	ldr	r1, [sp, #28]
 8006160:	430b      	orrs	r3, r1
 8006162:	9908      	ldr	r1, [sp, #32]
 8006164:	430b      	orrs	r3, r1
 8006166:	d120      	bne.n	80061aa <_dtoa_r+0x9aa>
 8006168:	2a00      	cmp	r2, #0
 800616a:	ddee      	ble.n	800614a <_dtoa_r+0x94a>
 800616c:	9901      	ldr	r1, [sp, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	4648      	mov	r0, r9
 8006172:	f000 fba9 	bl	80068c8 <__lshift>
 8006176:	4621      	mov	r1, r4
 8006178:	9001      	str	r0, [sp, #4]
 800617a:	f000 fc11 	bl	80069a0 <__mcmp>
 800617e:	2800      	cmp	r0, #0
 8006180:	dc03      	bgt.n	800618a <_dtoa_r+0x98a>
 8006182:	d1e2      	bne.n	800614a <_dtoa_r+0x94a>
 8006184:	f01a 0f01 	tst.w	sl, #1
 8006188:	d0df      	beq.n	800614a <_dtoa_r+0x94a>
 800618a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800618e:	d1d9      	bne.n	8006144 <_dtoa_r+0x944>
 8006190:	2339      	movs	r3, #57	@ 0x39
 8006192:	f88b 3000 	strb.w	r3, [fp]
 8006196:	4633      	mov	r3, r6
 8006198:	461e      	mov	r6, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061a0:	2a39      	cmp	r2, #57	@ 0x39
 80061a2:	d052      	beq.n	800624a <_dtoa_r+0xa4a>
 80061a4:	3201      	adds	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e531      	b.n	8005c0e <_dtoa_r+0x40e>
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	dd07      	ble.n	80061be <_dtoa_r+0x9be>
 80061ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80061b2:	d0ed      	beq.n	8006190 <_dtoa_r+0x990>
 80061b4:	f10a 0301 	add.w	r3, sl, #1
 80061b8:	f88b 3000 	strb.w	r3, [fp]
 80061bc:	e527      	b.n	8005c0e <_dtoa_r+0x40e>
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d029      	beq.n	800621e <_dtoa_r+0xa1e>
 80061ca:	9901      	ldr	r1, [sp, #4]
 80061cc:	2300      	movs	r3, #0
 80061ce:	220a      	movs	r2, #10
 80061d0:	4648      	mov	r0, r9
 80061d2:	f000 f9d5 	bl	8006580 <__multadd>
 80061d6:	45a8      	cmp	r8, r5
 80061d8:	9001      	str	r0, [sp, #4]
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	f04f 020a 	mov.w	r2, #10
 80061e2:	4641      	mov	r1, r8
 80061e4:	4648      	mov	r0, r9
 80061e6:	d107      	bne.n	80061f8 <_dtoa_r+0x9f8>
 80061e8:	f000 f9ca 	bl	8006580 <__multadd>
 80061ec:	4680      	mov	r8, r0
 80061ee:	4605      	mov	r5, r0
 80061f0:	9b04      	ldr	r3, [sp, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	e776      	b.n	80060e6 <_dtoa_r+0x8e6>
 80061f8:	f000 f9c2 	bl	8006580 <__multadd>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4680      	mov	r8, r0
 8006200:	2300      	movs	r3, #0
 8006202:	220a      	movs	r2, #10
 8006204:	4648      	mov	r0, r9
 8006206:	f000 f9bb 	bl	8006580 <__multadd>
 800620a:	4605      	mov	r5, r0
 800620c:	e7f0      	b.n	80061f0 <_dtoa_r+0x9f0>
 800620e:	f1bb 0f00 	cmp.w	fp, #0
 8006212:	bfcc      	ite	gt
 8006214:	465e      	movgt	r6, fp
 8006216:	2601      	movle	r6, #1
 8006218:	443e      	add	r6, r7
 800621a:	f04f 0800 	mov.w	r8, #0
 800621e:	9901      	ldr	r1, [sp, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	4648      	mov	r0, r9
 8006224:	f000 fb50 	bl	80068c8 <__lshift>
 8006228:	4621      	mov	r1, r4
 800622a:	9001      	str	r0, [sp, #4]
 800622c:	f000 fbb8 	bl	80069a0 <__mcmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	dcb0      	bgt.n	8006196 <_dtoa_r+0x996>
 8006234:	d102      	bne.n	800623c <_dtoa_r+0xa3c>
 8006236:	f01a 0f01 	tst.w	sl, #1
 800623a:	d1ac      	bne.n	8006196 <_dtoa_r+0x996>
 800623c:	4633      	mov	r3, r6
 800623e:	461e      	mov	r6, r3
 8006240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006244:	2a30      	cmp	r2, #48	@ 0x30
 8006246:	d0fa      	beq.n	800623e <_dtoa_r+0xa3e>
 8006248:	e4e1      	b.n	8005c0e <_dtoa_r+0x40e>
 800624a:	429f      	cmp	r7, r3
 800624c:	d1a4      	bne.n	8006198 <_dtoa_r+0x998>
 800624e:	9b05      	ldr	r3, [sp, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	9305      	str	r3, [sp, #20]
 8006254:	2331      	movs	r3, #49	@ 0x31
 8006256:	703b      	strb	r3, [r7, #0]
 8006258:	e4d9      	b.n	8005c0e <_dtoa_r+0x40e>
 800625a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800625c:	4f16      	ldr	r7, [pc, #88]	@ (80062b8 <_dtoa_r+0xab8>)
 800625e:	b11b      	cbz	r3, 8006268 <_dtoa_r+0xa68>
 8006260:	f107 0308 	add.w	r3, r7, #8
 8006264:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4638      	mov	r0, r7
 800626a:	b011      	add	sp, #68	@ 0x44
 800626c:	ecbd 8b02 	vpop	{d8}
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	2b01      	cmp	r3, #1
 8006278:	f77f ae2c 	ble.w	8005ed4 <_dtoa_r+0x6d4>
 800627c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800627e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006280:	2001      	movs	r0, #1
 8006282:	e64c      	b.n	8005f1e <_dtoa_r+0x71e>
 8006284:	f1bb 0f00 	cmp.w	fp, #0
 8006288:	f77f aed8 	ble.w	800603c <_dtoa_r+0x83c>
 800628c:	463e      	mov	r6, r7
 800628e:	9801      	ldr	r0, [sp, #4]
 8006290:	4621      	mov	r1, r4
 8006292:	f7ff fa2c 	bl	80056ee <quorem>
 8006296:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800629a:	f806 ab01 	strb.w	sl, [r6], #1
 800629e:	1bf2      	subs	r2, r6, r7
 80062a0:	4593      	cmp	fp, r2
 80062a2:	ddb4      	ble.n	800620e <_dtoa_r+0xa0e>
 80062a4:	9901      	ldr	r1, [sp, #4]
 80062a6:	2300      	movs	r3, #0
 80062a8:	220a      	movs	r2, #10
 80062aa:	4648      	mov	r0, r9
 80062ac:	f000 f968 	bl	8006580 <__multadd>
 80062b0:	9001      	str	r0, [sp, #4]
 80062b2:	e7ec      	b.n	800628e <_dtoa_r+0xa8e>
 80062b4:	080074ac 	.word	0x080074ac
 80062b8:	08007430 	.word	0x08007430

080062bc <_free_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4605      	mov	r5, r0
 80062c0:	2900      	cmp	r1, #0
 80062c2:	d041      	beq.n	8006348 <_free_r+0x8c>
 80062c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c8:	1f0c      	subs	r4, r1, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bfb8      	it	lt
 80062ce:	18e4      	addlt	r4, r4, r3
 80062d0:	f000 f8e8 	bl	80064a4 <__malloc_lock>
 80062d4:	4a1d      	ldr	r2, [pc, #116]	@ (800634c <_free_r+0x90>)
 80062d6:	6813      	ldr	r3, [r2, #0]
 80062d8:	b933      	cbnz	r3, 80062e8 <_free_r+0x2c>
 80062da:	6063      	str	r3, [r4, #4]
 80062dc:	6014      	str	r4, [r2, #0]
 80062de:	4628      	mov	r0, r5
 80062e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062e4:	f000 b8e4 	b.w	80064b0 <__malloc_unlock>
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	d908      	bls.n	80062fe <_free_r+0x42>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	1821      	adds	r1, r4, r0
 80062f0:	428b      	cmp	r3, r1
 80062f2:	bf01      	itttt	eq
 80062f4:	6819      	ldreq	r1, [r3, #0]
 80062f6:	685b      	ldreq	r3, [r3, #4]
 80062f8:	1809      	addeq	r1, r1, r0
 80062fa:	6021      	streq	r1, [r4, #0]
 80062fc:	e7ed      	b.n	80062da <_free_r+0x1e>
 80062fe:	461a      	mov	r2, r3
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	b10b      	cbz	r3, 8006308 <_free_r+0x4c>
 8006304:	42a3      	cmp	r3, r4
 8006306:	d9fa      	bls.n	80062fe <_free_r+0x42>
 8006308:	6811      	ldr	r1, [r2, #0]
 800630a:	1850      	adds	r0, r2, r1
 800630c:	42a0      	cmp	r0, r4
 800630e:	d10b      	bne.n	8006328 <_free_r+0x6c>
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	4401      	add	r1, r0
 8006314:	1850      	adds	r0, r2, r1
 8006316:	4283      	cmp	r3, r0
 8006318:	6011      	str	r1, [r2, #0]
 800631a:	d1e0      	bne.n	80062de <_free_r+0x22>
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	6053      	str	r3, [r2, #4]
 8006322:	4408      	add	r0, r1
 8006324:	6010      	str	r0, [r2, #0]
 8006326:	e7da      	b.n	80062de <_free_r+0x22>
 8006328:	d902      	bls.n	8006330 <_free_r+0x74>
 800632a:	230c      	movs	r3, #12
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	e7d6      	b.n	80062de <_free_r+0x22>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	1821      	adds	r1, r4, r0
 8006334:	428b      	cmp	r3, r1
 8006336:	bf04      	itt	eq
 8006338:	6819      	ldreq	r1, [r3, #0]
 800633a:	685b      	ldreq	r3, [r3, #4]
 800633c:	6063      	str	r3, [r4, #4]
 800633e:	bf04      	itt	eq
 8006340:	1809      	addeq	r1, r1, r0
 8006342:	6021      	streq	r1, [r4, #0]
 8006344:	6054      	str	r4, [r2, #4]
 8006346:	e7ca      	b.n	80062de <_free_r+0x22>
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	bf00      	nop
 800634c:	2400042c 	.word	0x2400042c

08006350 <malloc>:
 8006350:	4b02      	ldr	r3, [pc, #8]	@ (800635c <malloc+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f000 b825 	b.w	80063a4 <_malloc_r>
 800635a:	bf00      	nop
 800635c:	2400003c 	.word	0x2400003c

08006360 <sbrk_aligned>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4e0f      	ldr	r6, [pc, #60]	@ (80063a0 <sbrk_aligned+0x40>)
 8006364:	460c      	mov	r4, r1
 8006366:	6831      	ldr	r1, [r6, #0]
 8006368:	4605      	mov	r5, r0
 800636a:	b911      	cbnz	r1, 8006372 <sbrk_aligned+0x12>
 800636c:	f000 fe92 	bl	8007094 <_sbrk_r>
 8006370:	6030      	str	r0, [r6, #0]
 8006372:	4621      	mov	r1, r4
 8006374:	4628      	mov	r0, r5
 8006376:	f000 fe8d 	bl	8007094 <_sbrk_r>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d103      	bne.n	8006386 <sbrk_aligned+0x26>
 800637e:	f04f 34ff 	mov.w	r4, #4294967295
 8006382:	4620      	mov	r0, r4
 8006384:	bd70      	pop	{r4, r5, r6, pc}
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d0f8      	beq.n	8006382 <sbrk_aligned+0x22>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4628      	mov	r0, r5
 8006394:	f000 fe7e 	bl	8007094 <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d1f2      	bne.n	8006382 <sbrk_aligned+0x22>
 800639c:	e7ef      	b.n	800637e <sbrk_aligned+0x1e>
 800639e:	bf00      	nop
 80063a0:	24000428 	.word	0x24000428

080063a4 <_malloc_r>:
 80063a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a8:	1ccd      	adds	r5, r1, #3
 80063aa:	f025 0503 	bic.w	r5, r5, #3
 80063ae:	3508      	adds	r5, #8
 80063b0:	2d0c      	cmp	r5, #12
 80063b2:	bf38      	it	cc
 80063b4:	250c      	movcc	r5, #12
 80063b6:	2d00      	cmp	r5, #0
 80063b8:	4606      	mov	r6, r0
 80063ba:	db01      	blt.n	80063c0 <_malloc_r+0x1c>
 80063bc:	42a9      	cmp	r1, r5
 80063be:	d904      	bls.n	80063ca <_malloc_r+0x26>
 80063c0:	230c      	movs	r3, #12
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	2000      	movs	r0, #0
 80063c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064a0 <_malloc_r+0xfc>
 80063ce:	f000 f869 	bl	80064a4 <__malloc_lock>
 80063d2:	f8d8 3000 	ldr.w	r3, [r8]
 80063d6:	461c      	mov	r4, r3
 80063d8:	bb44      	cbnz	r4, 800642c <_malloc_r+0x88>
 80063da:	4629      	mov	r1, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff ffbf 	bl	8006360 <sbrk_aligned>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	4604      	mov	r4, r0
 80063e6:	d158      	bne.n	800649a <_malloc_r+0xf6>
 80063e8:	f8d8 4000 	ldr.w	r4, [r8]
 80063ec:	4627      	mov	r7, r4
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	d143      	bne.n	800647a <_malloc_r+0xd6>
 80063f2:	2c00      	cmp	r4, #0
 80063f4:	d04b      	beq.n	800648e <_malloc_r+0xea>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	4639      	mov	r1, r7
 80063fa:	4630      	mov	r0, r6
 80063fc:	eb04 0903 	add.w	r9, r4, r3
 8006400:	f000 fe48 	bl	8007094 <_sbrk_r>
 8006404:	4581      	cmp	r9, r0
 8006406:	d142      	bne.n	800648e <_malloc_r+0xea>
 8006408:	6821      	ldr	r1, [r4, #0]
 800640a:	1a6d      	subs	r5, r5, r1
 800640c:	4629      	mov	r1, r5
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff ffa6 	bl	8006360 <sbrk_aligned>
 8006414:	3001      	adds	r0, #1
 8006416:	d03a      	beq.n	800648e <_malloc_r+0xea>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	442b      	add	r3, r5
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	f8d8 3000 	ldr.w	r3, [r8]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	bb62      	cbnz	r2, 8006480 <_malloc_r+0xdc>
 8006426:	f8c8 7000 	str.w	r7, [r8]
 800642a:	e00f      	b.n	800644c <_malloc_r+0xa8>
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	1b52      	subs	r2, r2, r5
 8006430:	d420      	bmi.n	8006474 <_malloc_r+0xd0>
 8006432:	2a0b      	cmp	r2, #11
 8006434:	d917      	bls.n	8006466 <_malloc_r+0xc2>
 8006436:	1961      	adds	r1, r4, r5
 8006438:	42a3      	cmp	r3, r4
 800643a:	6025      	str	r5, [r4, #0]
 800643c:	bf18      	it	ne
 800643e:	6059      	strne	r1, [r3, #4]
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	bf08      	it	eq
 8006444:	f8c8 1000 	streq.w	r1, [r8]
 8006448:	5162      	str	r2, [r4, r5]
 800644a:	604b      	str	r3, [r1, #4]
 800644c:	4630      	mov	r0, r6
 800644e:	f000 f82f 	bl	80064b0 <__malloc_unlock>
 8006452:	f104 000b 	add.w	r0, r4, #11
 8006456:	1d23      	adds	r3, r4, #4
 8006458:	f020 0007 	bic.w	r0, r0, #7
 800645c:	1ac2      	subs	r2, r0, r3
 800645e:	bf1c      	itt	ne
 8006460:	1a1b      	subne	r3, r3, r0
 8006462:	50a3      	strne	r3, [r4, r2]
 8006464:	e7af      	b.n	80063c6 <_malloc_r+0x22>
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	42a3      	cmp	r3, r4
 800646a:	bf0c      	ite	eq
 800646c:	f8c8 2000 	streq.w	r2, [r8]
 8006470:	605a      	strne	r2, [r3, #4]
 8006472:	e7eb      	b.n	800644c <_malloc_r+0xa8>
 8006474:	4623      	mov	r3, r4
 8006476:	6864      	ldr	r4, [r4, #4]
 8006478:	e7ae      	b.n	80063d8 <_malloc_r+0x34>
 800647a:	463c      	mov	r4, r7
 800647c:	687f      	ldr	r7, [r7, #4]
 800647e:	e7b6      	b.n	80063ee <_malloc_r+0x4a>
 8006480:	461a      	mov	r2, r3
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	42a3      	cmp	r3, r4
 8006486:	d1fb      	bne.n	8006480 <_malloc_r+0xdc>
 8006488:	2300      	movs	r3, #0
 800648a:	6053      	str	r3, [r2, #4]
 800648c:	e7de      	b.n	800644c <_malloc_r+0xa8>
 800648e:	230c      	movs	r3, #12
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	4630      	mov	r0, r6
 8006494:	f000 f80c 	bl	80064b0 <__malloc_unlock>
 8006498:	e794      	b.n	80063c4 <_malloc_r+0x20>
 800649a:	6005      	str	r5, [r0, #0]
 800649c:	e7d6      	b.n	800644c <_malloc_r+0xa8>
 800649e:	bf00      	nop
 80064a0:	2400042c 	.word	0x2400042c

080064a4 <__malloc_lock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	@ (80064ac <__malloc_lock+0x8>)
 80064a6:	f7ff b912 	b.w	80056ce <__retarget_lock_acquire_recursive>
 80064aa:	bf00      	nop
 80064ac:	24000424 	.word	0x24000424

080064b0 <__malloc_unlock>:
 80064b0:	4801      	ldr	r0, [pc, #4]	@ (80064b8 <__malloc_unlock+0x8>)
 80064b2:	f7ff b90d 	b.w	80056d0 <__retarget_lock_release_recursive>
 80064b6:	bf00      	nop
 80064b8:	24000424 	.word	0x24000424

080064bc <_Balloc>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	69c6      	ldr	r6, [r0, #28]
 80064c0:	4604      	mov	r4, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	b976      	cbnz	r6, 80064e4 <_Balloc+0x28>
 80064c6:	2010      	movs	r0, #16
 80064c8:	f7ff ff42 	bl	8006350 <malloc>
 80064cc:	4602      	mov	r2, r0
 80064ce:	61e0      	str	r0, [r4, #28]
 80064d0:	b920      	cbnz	r0, 80064dc <_Balloc+0x20>
 80064d2:	4b18      	ldr	r3, [pc, #96]	@ (8006534 <_Balloc+0x78>)
 80064d4:	4818      	ldr	r0, [pc, #96]	@ (8006538 <_Balloc+0x7c>)
 80064d6:	216b      	movs	r1, #107	@ 0x6b
 80064d8:	f000 fdec 	bl	80070b4 <__assert_func>
 80064dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064e0:	6006      	str	r6, [r0, #0]
 80064e2:	60c6      	str	r6, [r0, #12]
 80064e4:	69e6      	ldr	r6, [r4, #28]
 80064e6:	68f3      	ldr	r3, [r6, #12]
 80064e8:	b183      	cbz	r3, 800650c <_Balloc+0x50>
 80064ea:	69e3      	ldr	r3, [r4, #28]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064f2:	b9b8      	cbnz	r0, 8006524 <_Balloc+0x68>
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f605 	lsl.w	r6, r1, r5
 80064fa:	1d72      	adds	r2, r6, #5
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 fdf6 	bl	80070f0 <_calloc_r>
 8006504:	b160      	cbz	r0, 8006520 <_Balloc+0x64>
 8006506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800650a:	e00e      	b.n	800652a <_Balloc+0x6e>
 800650c:	2221      	movs	r2, #33	@ 0x21
 800650e:	2104      	movs	r1, #4
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fded 	bl	80070f0 <_calloc_r>
 8006516:	69e3      	ldr	r3, [r4, #28]
 8006518:	60f0      	str	r0, [r6, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e4      	bne.n	80064ea <_Balloc+0x2e>
 8006520:	2000      	movs	r0, #0
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	6802      	ldr	r2, [r0, #0]
 8006526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800652a:	2300      	movs	r3, #0
 800652c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006530:	e7f7      	b.n	8006522 <_Balloc+0x66>
 8006532:	bf00      	nop
 8006534:	0800743d 	.word	0x0800743d
 8006538:	080074bd 	.word	0x080074bd

0800653c <_Bfree>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	69c6      	ldr	r6, [r0, #28]
 8006540:	4605      	mov	r5, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b976      	cbnz	r6, 8006564 <_Bfree+0x28>
 8006546:	2010      	movs	r0, #16
 8006548:	f7ff ff02 	bl	8006350 <malloc>
 800654c:	4602      	mov	r2, r0
 800654e:	61e8      	str	r0, [r5, #28]
 8006550:	b920      	cbnz	r0, 800655c <_Bfree+0x20>
 8006552:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <_Bfree+0x3c>)
 8006554:	4809      	ldr	r0, [pc, #36]	@ (800657c <_Bfree+0x40>)
 8006556:	218f      	movs	r1, #143	@ 0x8f
 8006558:	f000 fdac 	bl	80070b4 <__assert_func>
 800655c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006560:	6006      	str	r6, [r0, #0]
 8006562:	60c6      	str	r6, [r0, #12]
 8006564:	b13c      	cbz	r4, 8006576 <_Bfree+0x3a>
 8006566:	69eb      	ldr	r3, [r5, #28]
 8006568:	6862      	ldr	r2, [r4, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006570:	6021      	str	r1, [r4, #0]
 8006572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	0800743d 	.word	0x0800743d
 800657c:	080074bd 	.word	0x080074bd

08006580 <__multadd>:
 8006580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006584:	690d      	ldr	r5, [r1, #16]
 8006586:	4607      	mov	r7, r0
 8006588:	460c      	mov	r4, r1
 800658a:	461e      	mov	r6, r3
 800658c:	f101 0c14 	add.w	ip, r1, #20
 8006590:	2000      	movs	r0, #0
 8006592:	f8dc 3000 	ldr.w	r3, [ip]
 8006596:	b299      	uxth	r1, r3
 8006598:	fb02 6101 	mla	r1, r2, r1, r6
 800659c:	0c1e      	lsrs	r6, r3, #16
 800659e:	0c0b      	lsrs	r3, r1, #16
 80065a0:	fb02 3306 	mla	r3, r2, r6, r3
 80065a4:	b289      	uxth	r1, r1
 80065a6:	3001      	adds	r0, #1
 80065a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065ac:	4285      	cmp	r5, r0
 80065ae:	f84c 1b04 	str.w	r1, [ip], #4
 80065b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065b6:	dcec      	bgt.n	8006592 <__multadd+0x12>
 80065b8:	b30e      	cbz	r6, 80065fe <__multadd+0x7e>
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	42ab      	cmp	r3, r5
 80065be:	dc19      	bgt.n	80065f4 <__multadd+0x74>
 80065c0:	6861      	ldr	r1, [r4, #4]
 80065c2:	4638      	mov	r0, r7
 80065c4:	3101      	adds	r1, #1
 80065c6:	f7ff ff79 	bl	80064bc <_Balloc>
 80065ca:	4680      	mov	r8, r0
 80065cc:	b928      	cbnz	r0, 80065da <__multadd+0x5a>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <__multadd+0x84>)
 80065d2:	480d      	ldr	r0, [pc, #52]	@ (8006608 <__multadd+0x88>)
 80065d4:	21ba      	movs	r1, #186	@ 0xba
 80065d6:	f000 fd6d 	bl	80070b4 <__assert_func>
 80065da:	6922      	ldr	r2, [r4, #16]
 80065dc:	3202      	adds	r2, #2
 80065de:	f104 010c 	add.w	r1, r4, #12
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	300c      	adds	r0, #12
 80065e6:	f7ff f874 	bl	80056d2 <memcpy>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4638      	mov	r0, r7
 80065ee:	f7ff ffa5 	bl	800653c <_Bfree>
 80065f2:	4644      	mov	r4, r8
 80065f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065f8:	3501      	adds	r5, #1
 80065fa:	615e      	str	r6, [r3, #20]
 80065fc:	6125      	str	r5, [r4, #16]
 80065fe:	4620      	mov	r0, r4
 8006600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006604:	080074ac 	.word	0x080074ac
 8006608:	080074bd 	.word	0x080074bd

0800660c <__hi0bits>:
 800660c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006610:	4603      	mov	r3, r0
 8006612:	bf36      	itet	cc
 8006614:	0403      	lslcc	r3, r0, #16
 8006616:	2000      	movcs	r0, #0
 8006618:	2010      	movcc	r0, #16
 800661a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800661e:	bf3c      	itt	cc
 8006620:	021b      	lslcc	r3, r3, #8
 8006622:	3008      	addcc	r0, #8
 8006624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006628:	bf3c      	itt	cc
 800662a:	011b      	lslcc	r3, r3, #4
 800662c:	3004      	addcc	r0, #4
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006632:	bf3c      	itt	cc
 8006634:	009b      	lslcc	r3, r3, #2
 8006636:	3002      	addcc	r0, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	db05      	blt.n	8006648 <__hi0bits+0x3c>
 800663c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006640:	f100 0001 	add.w	r0, r0, #1
 8006644:	bf08      	it	eq
 8006646:	2020      	moveq	r0, #32
 8006648:	4770      	bx	lr

0800664a <__lo0bits>:
 800664a:	6803      	ldr	r3, [r0, #0]
 800664c:	4602      	mov	r2, r0
 800664e:	f013 0007 	ands.w	r0, r3, #7
 8006652:	d00b      	beq.n	800666c <__lo0bits+0x22>
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d421      	bmi.n	800669c <__lo0bits+0x52>
 8006658:	0798      	lsls	r0, r3, #30
 800665a:	bf49      	itett	mi
 800665c:	085b      	lsrmi	r3, r3, #1
 800665e:	089b      	lsrpl	r3, r3, #2
 8006660:	2001      	movmi	r0, #1
 8006662:	6013      	strmi	r3, [r2, #0]
 8006664:	bf5c      	itt	pl
 8006666:	6013      	strpl	r3, [r2, #0]
 8006668:	2002      	movpl	r0, #2
 800666a:	4770      	bx	lr
 800666c:	b299      	uxth	r1, r3
 800666e:	b909      	cbnz	r1, 8006674 <__lo0bits+0x2a>
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	2010      	movs	r0, #16
 8006674:	b2d9      	uxtb	r1, r3
 8006676:	b909      	cbnz	r1, 800667c <__lo0bits+0x32>
 8006678:	3008      	adds	r0, #8
 800667a:	0a1b      	lsrs	r3, r3, #8
 800667c:	0719      	lsls	r1, r3, #28
 800667e:	bf04      	itt	eq
 8006680:	091b      	lsreq	r3, r3, #4
 8006682:	3004      	addeq	r0, #4
 8006684:	0799      	lsls	r1, r3, #30
 8006686:	bf04      	itt	eq
 8006688:	089b      	lsreq	r3, r3, #2
 800668a:	3002      	addeq	r0, #2
 800668c:	07d9      	lsls	r1, r3, #31
 800668e:	d403      	bmi.n	8006698 <__lo0bits+0x4e>
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	f100 0001 	add.w	r0, r0, #1
 8006696:	d003      	beq.n	80066a0 <__lo0bits+0x56>
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4770      	bx	lr
 800669c:	2000      	movs	r0, #0
 800669e:	4770      	bx	lr
 80066a0:	2020      	movs	r0, #32
 80066a2:	4770      	bx	lr

080066a4 <__i2b>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	2101      	movs	r1, #1
 80066aa:	f7ff ff07 	bl	80064bc <_Balloc>
 80066ae:	4602      	mov	r2, r0
 80066b0:	b928      	cbnz	r0, 80066be <__i2b+0x1a>
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <__i2b+0x24>)
 80066b4:	4805      	ldr	r0, [pc, #20]	@ (80066cc <__i2b+0x28>)
 80066b6:	f240 1145 	movw	r1, #325	@ 0x145
 80066ba:	f000 fcfb 	bl	80070b4 <__assert_func>
 80066be:	2301      	movs	r3, #1
 80066c0:	6144      	str	r4, [r0, #20]
 80066c2:	6103      	str	r3, [r0, #16]
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	bf00      	nop
 80066c8:	080074ac 	.word	0x080074ac
 80066cc:	080074bd 	.word	0x080074bd

080066d0 <__multiply>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	4617      	mov	r7, r2
 80066d6:	690a      	ldr	r2, [r1, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	429a      	cmp	r2, r3
 80066dc:	bfa8      	it	ge
 80066de:	463b      	movge	r3, r7
 80066e0:	4689      	mov	r9, r1
 80066e2:	bfa4      	itt	ge
 80066e4:	460f      	movge	r7, r1
 80066e6:	4699      	movge	r9, r3
 80066e8:	693d      	ldr	r5, [r7, #16]
 80066ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	eb05 060a 	add.w	r6, r5, sl
 80066f6:	42b3      	cmp	r3, r6
 80066f8:	b085      	sub	sp, #20
 80066fa:	bfb8      	it	lt
 80066fc:	3101      	addlt	r1, #1
 80066fe:	f7ff fedd 	bl	80064bc <_Balloc>
 8006702:	b930      	cbnz	r0, 8006712 <__multiply+0x42>
 8006704:	4602      	mov	r2, r0
 8006706:	4b41      	ldr	r3, [pc, #260]	@ (800680c <__multiply+0x13c>)
 8006708:	4841      	ldr	r0, [pc, #260]	@ (8006810 <__multiply+0x140>)
 800670a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800670e:	f000 fcd1 	bl	80070b4 <__assert_func>
 8006712:	f100 0414 	add.w	r4, r0, #20
 8006716:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800671a:	4623      	mov	r3, r4
 800671c:	2200      	movs	r2, #0
 800671e:	4573      	cmp	r3, lr
 8006720:	d320      	bcc.n	8006764 <__multiply+0x94>
 8006722:	f107 0814 	add.w	r8, r7, #20
 8006726:	f109 0114 	add.w	r1, r9, #20
 800672a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800672e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006732:	9302      	str	r3, [sp, #8]
 8006734:	1beb      	subs	r3, r5, r7
 8006736:	3b15      	subs	r3, #21
 8006738:	f023 0303 	bic.w	r3, r3, #3
 800673c:	3304      	adds	r3, #4
 800673e:	3715      	adds	r7, #21
 8006740:	42bd      	cmp	r5, r7
 8006742:	bf38      	it	cc
 8006744:	2304      	movcc	r3, #4
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	9103      	str	r1, [sp, #12]
 800674c:	428b      	cmp	r3, r1
 800674e:	d80c      	bhi.n	800676a <__multiply+0x9a>
 8006750:	2e00      	cmp	r6, #0
 8006752:	dd03      	ble.n	800675c <__multiply+0x8c>
 8006754:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006758:	2b00      	cmp	r3, #0
 800675a:	d055      	beq.n	8006808 <__multiply+0x138>
 800675c:	6106      	str	r6, [r0, #16]
 800675e:	b005      	add	sp, #20
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006764:	f843 2b04 	str.w	r2, [r3], #4
 8006768:	e7d9      	b.n	800671e <__multiply+0x4e>
 800676a:	f8b1 a000 	ldrh.w	sl, [r1]
 800676e:	f1ba 0f00 	cmp.w	sl, #0
 8006772:	d01f      	beq.n	80067b4 <__multiply+0xe4>
 8006774:	46c4      	mov	ip, r8
 8006776:	46a1      	mov	r9, r4
 8006778:	2700      	movs	r7, #0
 800677a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800677e:	f8d9 3000 	ldr.w	r3, [r9]
 8006782:	fa1f fb82 	uxth.w	fp, r2
 8006786:	b29b      	uxth	r3, r3
 8006788:	fb0a 330b 	mla	r3, sl, fp, r3
 800678c:	443b      	add	r3, r7
 800678e:	f8d9 7000 	ldr.w	r7, [r9]
 8006792:	0c12      	lsrs	r2, r2, #16
 8006794:	0c3f      	lsrs	r7, r7, #16
 8006796:	fb0a 7202 	mla	r2, sl, r2, r7
 800679a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067a4:	4565      	cmp	r5, ip
 80067a6:	f849 3b04 	str.w	r3, [r9], #4
 80067aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80067ae:	d8e4      	bhi.n	800677a <__multiply+0xaa>
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	50e7      	str	r7, [r4, r3]
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067ba:	3104      	adds	r1, #4
 80067bc:	f1b9 0f00 	cmp.w	r9, #0
 80067c0:	d020      	beq.n	8006804 <__multiply+0x134>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	4647      	mov	r7, r8
 80067c6:	46a4      	mov	ip, r4
 80067c8:	f04f 0a00 	mov.w	sl, #0
 80067cc:	f8b7 b000 	ldrh.w	fp, [r7]
 80067d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80067d4:	fb09 220b 	mla	r2, r9, fp, r2
 80067d8:	4452      	add	r2, sl
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067e0:	f84c 3b04 	str.w	r3, [ip], #4
 80067e4:	f857 3b04 	ldr.w	r3, [r7], #4
 80067e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067ec:	f8bc 3000 	ldrh.w	r3, [ip]
 80067f0:	fb09 330a 	mla	r3, r9, sl, r3
 80067f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80067f8:	42bd      	cmp	r5, r7
 80067fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067fe:	d8e5      	bhi.n	80067cc <__multiply+0xfc>
 8006800:	9a01      	ldr	r2, [sp, #4]
 8006802:	50a3      	str	r3, [r4, r2]
 8006804:	3404      	adds	r4, #4
 8006806:	e79f      	b.n	8006748 <__multiply+0x78>
 8006808:	3e01      	subs	r6, #1
 800680a:	e7a1      	b.n	8006750 <__multiply+0x80>
 800680c:	080074ac 	.word	0x080074ac
 8006810:	080074bd 	.word	0x080074bd

08006814 <__pow5mult>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	4615      	mov	r5, r2
 800681a:	f012 0203 	ands.w	r2, r2, #3
 800681e:	4607      	mov	r7, r0
 8006820:	460e      	mov	r6, r1
 8006822:	d007      	beq.n	8006834 <__pow5mult+0x20>
 8006824:	4c25      	ldr	r4, [pc, #148]	@ (80068bc <__pow5mult+0xa8>)
 8006826:	3a01      	subs	r2, #1
 8006828:	2300      	movs	r3, #0
 800682a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800682e:	f7ff fea7 	bl	8006580 <__multadd>
 8006832:	4606      	mov	r6, r0
 8006834:	10ad      	asrs	r5, r5, #2
 8006836:	d03d      	beq.n	80068b4 <__pow5mult+0xa0>
 8006838:	69fc      	ldr	r4, [r7, #28]
 800683a:	b97c      	cbnz	r4, 800685c <__pow5mult+0x48>
 800683c:	2010      	movs	r0, #16
 800683e:	f7ff fd87 	bl	8006350 <malloc>
 8006842:	4602      	mov	r2, r0
 8006844:	61f8      	str	r0, [r7, #28]
 8006846:	b928      	cbnz	r0, 8006854 <__pow5mult+0x40>
 8006848:	4b1d      	ldr	r3, [pc, #116]	@ (80068c0 <__pow5mult+0xac>)
 800684a:	481e      	ldr	r0, [pc, #120]	@ (80068c4 <__pow5mult+0xb0>)
 800684c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006850:	f000 fc30 	bl	80070b4 <__assert_func>
 8006854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006858:	6004      	str	r4, [r0, #0]
 800685a:	60c4      	str	r4, [r0, #12]
 800685c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006864:	b94c      	cbnz	r4, 800687a <__pow5mult+0x66>
 8006866:	f240 2171 	movw	r1, #625	@ 0x271
 800686a:	4638      	mov	r0, r7
 800686c:	f7ff ff1a 	bl	80066a4 <__i2b>
 8006870:	2300      	movs	r3, #0
 8006872:	f8c8 0008 	str.w	r0, [r8, #8]
 8006876:	4604      	mov	r4, r0
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	f04f 0900 	mov.w	r9, #0
 800687e:	07eb      	lsls	r3, r5, #31
 8006880:	d50a      	bpl.n	8006898 <__pow5mult+0x84>
 8006882:	4631      	mov	r1, r6
 8006884:	4622      	mov	r2, r4
 8006886:	4638      	mov	r0, r7
 8006888:	f7ff ff22 	bl	80066d0 <__multiply>
 800688c:	4631      	mov	r1, r6
 800688e:	4680      	mov	r8, r0
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff fe53 	bl	800653c <_Bfree>
 8006896:	4646      	mov	r6, r8
 8006898:	106d      	asrs	r5, r5, #1
 800689a:	d00b      	beq.n	80068b4 <__pow5mult+0xa0>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	b938      	cbnz	r0, 80068b0 <__pow5mult+0x9c>
 80068a0:	4622      	mov	r2, r4
 80068a2:	4621      	mov	r1, r4
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff ff13 	bl	80066d0 <__multiply>
 80068aa:	6020      	str	r0, [r4, #0]
 80068ac:	f8c0 9000 	str.w	r9, [r0]
 80068b0:	4604      	mov	r4, r0
 80068b2:	e7e4      	b.n	800687e <__pow5mult+0x6a>
 80068b4:	4630      	mov	r0, r6
 80068b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ba:	bf00      	nop
 80068bc:	08007570 	.word	0x08007570
 80068c0:	0800743d 	.word	0x0800743d
 80068c4:	080074bd 	.word	0x080074bd

080068c8 <__lshift>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	6849      	ldr	r1, [r1, #4]
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	4607      	mov	r7, r0
 80068da:	4691      	mov	r9, r2
 80068dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068e0:	f108 0601 	add.w	r6, r8, #1
 80068e4:	42b3      	cmp	r3, r6
 80068e6:	db0b      	blt.n	8006900 <__lshift+0x38>
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff fde7 	bl	80064bc <_Balloc>
 80068ee:	4605      	mov	r5, r0
 80068f0:	b948      	cbnz	r0, 8006906 <__lshift+0x3e>
 80068f2:	4602      	mov	r2, r0
 80068f4:	4b28      	ldr	r3, [pc, #160]	@ (8006998 <__lshift+0xd0>)
 80068f6:	4829      	ldr	r0, [pc, #164]	@ (800699c <__lshift+0xd4>)
 80068f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068fc:	f000 fbda 	bl	80070b4 <__assert_func>
 8006900:	3101      	adds	r1, #1
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	e7ee      	b.n	80068e4 <__lshift+0x1c>
 8006906:	2300      	movs	r3, #0
 8006908:	f100 0114 	add.w	r1, r0, #20
 800690c:	f100 0210 	add.w	r2, r0, #16
 8006910:	4618      	mov	r0, r3
 8006912:	4553      	cmp	r3, sl
 8006914:	db33      	blt.n	800697e <__lshift+0xb6>
 8006916:	6920      	ldr	r0, [r4, #16]
 8006918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800691c:	f104 0314 	add.w	r3, r4, #20
 8006920:	f019 091f 	ands.w	r9, r9, #31
 8006924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800692c:	d02b      	beq.n	8006986 <__lshift+0xbe>
 800692e:	f1c9 0e20 	rsb	lr, r9, #32
 8006932:	468a      	mov	sl, r1
 8006934:	2200      	movs	r2, #0
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	fa00 f009 	lsl.w	r0, r0, r9
 800693c:	4310      	orrs	r0, r2
 800693e:	f84a 0b04 	str.w	r0, [sl], #4
 8006942:	f853 2b04 	ldr.w	r2, [r3], #4
 8006946:	459c      	cmp	ip, r3
 8006948:	fa22 f20e 	lsr.w	r2, r2, lr
 800694c:	d8f3      	bhi.n	8006936 <__lshift+0x6e>
 800694e:	ebac 0304 	sub.w	r3, ip, r4
 8006952:	3b15      	subs	r3, #21
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	3304      	adds	r3, #4
 800695a:	f104 0015 	add.w	r0, r4, #21
 800695e:	4560      	cmp	r0, ip
 8006960:	bf88      	it	hi
 8006962:	2304      	movhi	r3, #4
 8006964:	50ca      	str	r2, [r1, r3]
 8006966:	b10a      	cbz	r2, 800696c <__lshift+0xa4>
 8006968:	f108 0602 	add.w	r6, r8, #2
 800696c:	3e01      	subs	r6, #1
 800696e:	4638      	mov	r0, r7
 8006970:	612e      	str	r6, [r5, #16]
 8006972:	4621      	mov	r1, r4
 8006974:	f7ff fde2 	bl	800653c <_Bfree>
 8006978:	4628      	mov	r0, r5
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006982:	3301      	adds	r3, #1
 8006984:	e7c5      	b.n	8006912 <__lshift+0x4a>
 8006986:	3904      	subs	r1, #4
 8006988:	f853 2b04 	ldr.w	r2, [r3], #4
 800698c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006990:	459c      	cmp	ip, r3
 8006992:	d8f9      	bhi.n	8006988 <__lshift+0xc0>
 8006994:	e7ea      	b.n	800696c <__lshift+0xa4>
 8006996:	bf00      	nop
 8006998:	080074ac 	.word	0x080074ac
 800699c:	080074bd 	.word	0x080074bd

080069a0 <__mcmp>:
 80069a0:	690a      	ldr	r2, [r1, #16]
 80069a2:	4603      	mov	r3, r0
 80069a4:	6900      	ldr	r0, [r0, #16]
 80069a6:	1a80      	subs	r0, r0, r2
 80069a8:	b530      	push	{r4, r5, lr}
 80069aa:	d10e      	bne.n	80069ca <__mcmp+0x2a>
 80069ac:	3314      	adds	r3, #20
 80069ae:	3114      	adds	r1, #20
 80069b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069c0:	4295      	cmp	r5, r2
 80069c2:	d003      	beq.n	80069cc <__mcmp+0x2c>
 80069c4:	d205      	bcs.n	80069d2 <__mcmp+0x32>
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	d3f3      	bcc.n	80069b8 <__mcmp+0x18>
 80069d0:	e7fb      	b.n	80069ca <__mcmp+0x2a>
 80069d2:	2001      	movs	r0, #1
 80069d4:	e7f9      	b.n	80069ca <__mcmp+0x2a>
	...

080069d8 <__mdiff>:
 80069d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	4689      	mov	r9, r1
 80069de:	4606      	mov	r6, r0
 80069e0:	4611      	mov	r1, r2
 80069e2:	4648      	mov	r0, r9
 80069e4:	4614      	mov	r4, r2
 80069e6:	f7ff ffdb 	bl	80069a0 <__mcmp>
 80069ea:	1e05      	subs	r5, r0, #0
 80069ec:	d112      	bne.n	8006a14 <__mdiff+0x3c>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff fd63 	bl	80064bc <_Balloc>
 80069f6:	4602      	mov	r2, r0
 80069f8:	b928      	cbnz	r0, 8006a06 <__mdiff+0x2e>
 80069fa:	4b3f      	ldr	r3, [pc, #252]	@ (8006af8 <__mdiff+0x120>)
 80069fc:	f240 2137 	movw	r1, #567	@ 0x237
 8006a00:	483e      	ldr	r0, [pc, #248]	@ (8006afc <__mdiff+0x124>)
 8006a02:	f000 fb57 	bl	80070b4 <__assert_func>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	b003      	add	sp, #12
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a14:	bfbc      	itt	lt
 8006a16:	464b      	movlt	r3, r9
 8006a18:	46a1      	movlt	r9, r4
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a20:	bfba      	itte	lt
 8006a22:	461c      	movlt	r4, r3
 8006a24:	2501      	movlt	r5, #1
 8006a26:	2500      	movge	r5, #0
 8006a28:	f7ff fd48 	bl	80064bc <_Balloc>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	b918      	cbnz	r0, 8006a38 <__mdiff+0x60>
 8006a30:	4b31      	ldr	r3, [pc, #196]	@ (8006af8 <__mdiff+0x120>)
 8006a32:	f240 2145 	movw	r1, #581	@ 0x245
 8006a36:	e7e3      	b.n	8006a00 <__mdiff+0x28>
 8006a38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a3c:	6926      	ldr	r6, [r4, #16]
 8006a3e:	60c5      	str	r5, [r0, #12]
 8006a40:	f109 0310 	add.w	r3, r9, #16
 8006a44:	f109 0514 	add.w	r5, r9, #20
 8006a48:	f104 0e14 	add.w	lr, r4, #20
 8006a4c:	f100 0b14 	add.w	fp, r0, #20
 8006a50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	46d9      	mov	r9, fp
 8006a5c:	f04f 0c00 	mov.w	ip, #0
 8006a60:	9b01      	ldr	r3, [sp, #4]
 8006a62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	fa1f f38a 	uxth.w	r3, sl
 8006a70:	4619      	mov	r1, r3
 8006a72:	b283      	uxth	r3, r0
 8006a74:	1acb      	subs	r3, r1, r3
 8006a76:	0c00      	lsrs	r0, r0, #16
 8006a78:	4463      	add	r3, ip
 8006a7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a88:	4576      	cmp	r6, lr
 8006a8a:	f849 3b04 	str.w	r3, [r9], #4
 8006a8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a92:	d8e5      	bhi.n	8006a60 <__mdiff+0x88>
 8006a94:	1b33      	subs	r3, r6, r4
 8006a96:	3b15      	subs	r3, #21
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	3415      	adds	r4, #21
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	bf38      	it	cc
 8006aa4:	2304      	movcc	r3, #4
 8006aa6:	441d      	add	r5, r3
 8006aa8:	445b      	add	r3, fp
 8006aaa:	461e      	mov	r6, r3
 8006aac:	462c      	mov	r4, r5
 8006aae:	4544      	cmp	r4, r8
 8006ab0:	d30e      	bcc.n	8006ad0 <__mdiff+0xf8>
 8006ab2:	f108 0103 	add.w	r1, r8, #3
 8006ab6:	1b49      	subs	r1, r1, r5
 8006ab8:	f021 0103 	bic.w	r1, r1, #3
 8006abc:	3d03      	subs	r5, #3
 8006abe:	45a8      	cmp	r8, r5
 8006ac0:	bf38      	it	cc
 8006ac2:	2100      	movcc	r1, #0
 8006ac4:	440b      	add	r3, r1
 8006ac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006aca:	b191      	cbz	r1, 8006af2 <__mdiff+0x11a>
 8006acc:	6117      	str	r7, [r2, #16]
 8006ace:	e79d      	b.n	8006a0c <__mdiff+0x34>
 8006ad0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ad4:	46e6      	mov	lr, ip
 8006ad6:	0c08      	lsrs	r0, r1, #16
 8006ad8:	fa1c fc81 	uxtah	ip, ip, r1
 8006adc:	4471      	add	r1, lr
 8006ade:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ae2:	b289      	uxth	r1, r1
 8006ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ae8:	f846 1b04 	str.w	r1, [r6], #4
 8006aec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006af0:	e7dd      	b.n	8006aae <__mdiff+0xd6>
 8006af2:	3f01      	subs	r7, #1
 8006af4:	e7e7      	b.n	8006ac6 <__mdiff+0xee>
 8006af6:	bf00      	nop
 8006af8:	080074ac 	.word	0x080074ac
 8006afc:	080074bd 	.word	0x080074bd

08006b00 <__d2b>:
 8006b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	460f      	mov	r7, r1
 8006b06:	2101      	movs	r1, #1
 8006b08:	ec59 8b10 	vmov	r8, r9, d0
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	f7ff fcd5 	bl	80064bc <_Balloc>
 8006b12:	4604      	mov	r4, r0
 8006b14:	b930      	cbnz	r0, 8006b24 <__d2b+0x24>
 8006b16:	4602      	mov	r2, r0
 8006b18:	4b23      	ldr	r3, [pc, #140]	@ (8006ba8 <__d2b+0xa8>)
 8006b1a:	4824      	ldr	r0, [pc, #144]	@ (8006bac <__d2b+0xac>)
 8006b1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b20:	f000 fac8 	bl	80070b4 <__assert_func>
 8006b24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b2c:	b10d      	cbz	r5, 8006b32 <__d2b+0x32>
 8006b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	f1b8 0300 	subs.w	r3, r8, #0
 8006b38:	d023      	beq.n	8006b82 <__d2b+0x82>
 8006b3a:	4668      	mov	r0, sp
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	f7ff fd84 	bl	800664a <__lo0bits>
 8006b42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b46:	b1d0      	cbz	r0, 8006b7e <__d2b+0x7e>
 8006b48:	f1c0 0320 	rsb	r3, r0, #32
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	430b      	orrs	r3, r1
 8006b52:	40c2      	lsrs	r2, r0
 8006b54:	6163      	str	r3, [r4, #20]
 8006b56:	9201      	str	r2, [sp, #4]
 8006b58:	9b01      	ldr	r3, [sp, #4]
 8006b5a:	61a3      	str	r3, [r4, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf0c      	ite	eq
 8006b60:	2201      	moveq	r2, #1
 8006b62:	2202      	movne	r2, #2
 8006b64:	6122      	str	r2, [r4, #16]
 8006b66:	b1a5      	cbz	r5, 8006b92 <__d2b+0x92>
 8006b68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b6c:	4405      	add	r5, r0
 8006b6e:	603d      	str	r5, [r7, #0]
 8006b70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b74:	6030      	str	r0, [r6, #0]
 8006b76:	4620      	mov	r0, r4
 8006b78:	b003      	add	sp, #12
 8006b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	6161      	str	r1, [r4, #20]
 8006b80:	e7ea      	b.n	8006b58 <__d2b+0x58>
 8006b82:	a801      	add	r0, sp, #4
 8006b84:	f7ff fd61 	bl	800664a <__lo0bits>
 8006b88:	9b01      	ldr	r3, [sp, #4]
 8006b8a:	6163      	str	r3, [r4, #20]
 8006b8c:	3020      	adds	r0, #32
 8006b8e:	2201      	movs	r2, #1
 8006b90:	e7e8      	b.n	8006b64 <__d2b+0x64>
 8006b92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b9a:	6038      	str	r0, [r7, #0]
 8006b9c:	6918      	ldr	r0, [r3, #16]
 8006b9e:	f7ff fd35 	bl	800660c <__hi0bits>
 8006ba2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ba6:	e7e5      	b.n	8006b74 <__d2b+0x74>
 8006ba8:	080074ac 	.word	0x080074ac
 8006bac:	080074bd 	.word	0x080074bd

08006bb0 <__sfputc_r>:
 8006bb0:	6893      	ldr	r3, [r2, #8]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	b410      	push	{r4}
 8006bb8:	6093      	str	r3, [r2, #8]
 8006bba:	da08      	bge.n	8006bce <__sfputc_r+0x1e>
 8006bbc:	6994      	ldr	r4, [r2, #24]
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	db01      	blt.n	8006bc6 <__sfputc_r+0x16>
 8006bc2:	290a      	cmp	r1, #10
 8006bc4:	d103      	bne.n	8006bce <__sfputc_r+0x1e>
 8006bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bca:	f7fe bc6e 	b.w	80054aa <__swbuf_r>
 8006bce:	6813      	ldr	r3, [r2, #0]
 8006bd0:	1c58      	adds	r0, r3, #1
 8006bd2:	6010      	str	r0, [r2, #0]
 8006bd4:	7019      	strb	r1, [r3, #0]
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <__sfputs_r>:
 8006bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be0:	4606      	mov	r6, r0
 8006be2:	460f      	mov	r7, r1
 8006be4:	4614      	mov	r4, r2
 8006be6:	18d5      	adds	r5, r2, r3
 8006be8:	42ac      	cmp	r4, r5
 8006bea:	d101      	bne.n	8006bf0 <__sfputs_r+0x12>
 8006bec:	2000      	movs	r0, #0
 8006bee:	e007      	b.n	8006c00 <__sfputs_r+0x22>
 8006bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf4:	463a      	mov	r2, r7
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7ff ffda 	bl	8006bb0 <__sfputc_r>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d1f3      	bne.n	8006be8 <__sfputs_r+0xa>
 8006c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c04 <_vfiprintf_r>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	460d      	mov	r5, r1
 8006c0a:	b09d      	sub	sp, #116	@ 0x74
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	4698      	mov	r8, r3
 8006c10:	4606      	mov	r6, r0
 8006c12:	b118      	cbz	r0, 8006c1c <_vfiprintf_r+0x18>
 8006c14:	6a03      	ldr	r3, [r0, #32]
 8006c16:	b90b      	cbnz	r3, 8006c1c <_vfiprintf_r+0x18>
 8006c18:	f7fe fb70 	bl	80052fc <__sinit>
 8006c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c1e:	07d9      	lsls	r1, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_vfiprintf_r+0x2a>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_vfiprintf_r+0x2a>
 8006c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c2a:	f7fe fd50 	bl	80056ce <__retarget_lock_acquire_recursive>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	071b      	lsls	r3, r3, #28
 8006c32:	d501      	bpl.n	8006c38 <_vfiprintf_r+0x34>
 8006c34:	692b      	ldr	r3, [r5, #16]
 8006c36:	b99b      	cbnz	r3, 8006c60 <_vfiprintf_r+0x5c>
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7fe fc74 	bl	8005528 <__swsetup_r>
 8006c40:	b170      	cbz	r0, 8006c60 <_vfiprintf_r+0x5c>
 8006c42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c44:	07dc      	lsls	r4, r3, #31
 8006c46:	d504      	bpl.n	8006c52 <_vfiprintf_r+0x4e>
 8006c48:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4c:	b01d      	add	sp, #116	@ 0x74
 8006c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c52:	89ab      	ldrh	r3, [r5, #12]
 8006c54:	0598      	lsls	r0, r3, #22
 8006c56:	d4f7      	bmi.n	8006c48 <_vfiprintf_r+0x44>
 8006c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c5a:	f7fe fd39 	bl	80056d0 <__retarget_lock_release_recursive>
 8006c5e:	e7f3      	b.n	8006c48 <_vfiprintf_r+0x44>
 8006c60:	2300      	movs	r3, #0
 8006c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c64:	2320      	movs	r3, #32
 8006c66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c6e:	2330      	movs	r3, #48	@ 0x30
 8006c70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e20 <_vfiprintf_r+0x21c>
 8006c74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c78:	f04f 0901 	mov.w	r9, #1
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	469a      	mov	sl, r3
 8006c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c84:	b10a      	cbz	r2, 8006c8a <_vfiprintf_r+0x86>
 8006c86:	2a25      	cmp	r2, #37	@ 0x25
 8006c88:	d1f9      	bne.n	8006c7e <_vfiprintf_r+0x7a>
 8006c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c8e:	d00b      	beq.n	8006ca8 <_vfiprintf_r+0xa4>
 8006c90:	465b      	mov	r3, fp
 8006c92:	4622      	mov	r2, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	4630      	mov	r0, r6
 8006c98:	f7ff ffa1 	bl	8006bde <__sfputs_r>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f000 80a7 	beq.w	8006df0 <_vfiprintf_r+0x1ec>
 8006ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ca4:	445a      	add	r2, fp
 8006ca6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 809f 	beq.w	8006df0 <_vfiprintf_r+0x1ec>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cbc:	f10a 0a01 	add.w	sl, sl, #1
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	9307      	str	r3, [sp, #28]
 8006cc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cca:	4654      	mov	r4, sl
 8006ccc:	2205      	movs	r2, #5
 8006cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd2:	4853      	ldr	r0, [pc, #332]	@ (8006e20 <_vfiprintf_r+0x21c>)
 8006cd4:	f7f9 fb04 	bl	80002e0 <memchr>
 8006cd8:	9a04      	ldr	r2, [sp, #16]
 8006cda:	b9d8      	cbnz	r0, 8006d14 <_vfiprintf_r+0x110>
 8006cdc:	06d1      	lsls	r1, r2, #27
 8006cde:	bf44      	itt	mi
 8006ce0:	2320      	movmi	r3, #32
 8006ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ce6:	0713      	lsls	r3, r2, #28
 8006ce8:	bf44      	itt	mi
 8006cea:	232b      	movmi	r3, #43	@ 0x2b
 8006cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf6:	d015      	beq.n	8006d24 <_vfiprintf_r+0x120>
 8006cf8:	9a07      	ldr	r2, [sp, #28]
 8006cfa:	4654      	mov	r4, sl
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f04f 0c0a 	mov.w	ip, #10
 8006d02:	4621      	mov	r1, r4
 8006d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d08:	3b30      	subs	r3, #48	@ 0x30
 8006d0a:	2b09      	cmp	r3, #9
 8006d0c:	d94b      	bls.n	8006da6 <_vfiprintf_r+0x1a2>
 8006d0e:	b1b0      	cbz	r0, 8006d3e <_vfiprintf_r+0x13a>
 8006d10:	9207      	str	r2, [sp, #28]
 8006d12:	e014      	b.n	8006d3e <_vfiprintf_r+0x13a>
 8006d14:	eba0 0308 	sub.w	r3, r0, r8
 8006d18:	fa09 f303 	lsl.w	r3, r9, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	46a2      	mov	sl, r4
 8006d22:	e7d2      	b.n	8006cca <_vfiprintf_r+0xc6>
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	1d19      	adds	r1, r3, #4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	9103      	str	r1, [sp, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bfbb      	ittet	lt
 8006d30:	425b      	neglt	r3, r3
 8006d32:	f042 0202 	orrlt.w	r2, r2, #2
 8006d36:	9307      	strge	r3, [sp, #28]
 8006d38:	9307      	strlt	r3, [sp, #28]
 8006d3a:	bfb8      	it	lt
 8006d3c:	9204      	strlt	r2, [sp, #16]
 8006d3e:	7823      	ldrb	r3, [r4, #0]
 8006d40:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d42:	d10a      	bne.n	8006d5a <_vfiprintf_r+0x156>
 8006d44:	7863      	ldrb	r3, [r4, #1]
 8006d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d48:	d132      	bne.n	8006db0 <_vfiprintf_r+0x1ac>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	9203      	str	r2, [sp, #12]
 8006d52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d56:	3402      	adds	r4, #2
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e30 <_vfiprintf_r+0x22c>
 8006d5e:	7821      	ldrb	r1, [r4, #0]
 8006d60:	2203      	movs	r2, #3
 8006d62:	4650      	mov	r0, sl
 8006d64:	f7f9 fabc 	bl	80002e0 <memchr>
 8006d68:	b138      	cbz	r0, 8006d7a <_vfiprintf_r+0x176>
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	eba0 000a 	sub.w	r0, r0, sl
 8006d70:	2240      	movs	r2, #64	@ 0x40
 8006d72:	4082      	lsls	r2, r0
 8006d74:	4313      	orrs	r3, r2
 8006d76:	3401      	adds	r4, #1
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7e:	4829      	ldr	r0, [pc, #164]	@ (8006e24 <_vfiprintf_r+0x220>)
 8006d80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d84:	2206      	movs	r2, #6
 8006d86:	f7f9 faab 	bl	80002e0 <memchr>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d03f      	beq.n	8006e0e <_vfiprintf_r+0x20a>
 8006d8e:	4b26      	ldr	r3, [pc, #152]	@ (8006e28 <_vfiprintf_r+0x224>)
 8006d90:	bb1b      	cbnz	r3, 8006dda <_vfiprintf_r+0x1d6>
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	3307      	adds	r3, #7
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	9303      	str	r3, [sp, #12]
 8006d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da0:	443b      	add	r3, r7
 8006da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da4:	e76a      	b.n	8006c7c <_vfiprintf_r+0x78>
 8006da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006daa:	460c      	mov	r4, r1
 8006dac:	2001      	movs	r0, #1
 8006dae:	e7a8      	b.n	8006d02 <_vfiprintf_r+0xfe>
 8006db0:	2300      	movs	r3, #0
 8006db2:	3401      	adds	r4, #1
 8006db4:	9305      	str	r3, [sp, #20]
 8006db6:	4619      	mov	r1, r3
 8006db8:	f04f 0c0a 	mov.w	ip, #10
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc2:	3a30      	subs	r2, #48	@ 0x30
 8006dc4:	2a09      	cmp	r2, #9
 8006dc6:	d903      	bls.n	8006dd0 <_vfiprintf_r+0x1cc>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0c6      	beq.n	8006d5a <_vfiprintf_r+0x156>
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	e7c4      	b.n	8006d5a <_vfiprintf_r+0x156>
 8006dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e7f0      	b.n	8006dbc <_vfiprintf_r+0x1b8>
 8006dda:	ab03      	add	r3, sp, #12
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	462a      	mov	r2, r5
 8006de0:	4b12      	ldr	r3, [pc, #72]	@ (8006e2c <_vfiprintf_r+0x228>)
 8006de2:	a904      	add	r1, sp, #16
 8006de4:	4630      	mov	r0, r6
 8006de6:	f7fd fe57 	bl	8004a98 <_printf_float>
 8006dea:	4607      	mov	r7, r0
 8006dec:	1c78      	adds	r0, r7, #1
 8006dee:	d1d6      	bne.n	8006d9e <_vfiprintf_r+0x19a>
 8006df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006df2:	07d9      	lsls	r1, r3, #31
 8006df4:	d405      	bmi.n	8006e02 <_vfiprintf_r+0x1fe>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	059a      	lsls	r2, r3, #22
 8006dfa:	d402      	bmi.n	8006e02 <_vfiprintf_r+0x1fe>
 8006dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dfe:	f7fe fc67 	bl	80056d0 <__retarget_lock_release_recursive>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	065b      	lsls	r3, r3, #25
 8006e06:	f53f af1f 	bmi.w	8006c48 <_vfiprintf_r+0x44>
 8006e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e0c:	e71e      	b.n	8006c4c <_vfiprintf_r+0x48>
 8006e0e:	ab03      	add	r3, sp, #12
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	462a      	mov	r2, r5
 8006e14:	4b05      	ldr	r3, [pc, #20]	@ (8006e2c <_vfiprintf_r+0x228>)
 8006e16:	a904      	add	r1, sp, #16
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f7fe f8c5 	bl	8004fa8 <_printf_i>
 8006e1e:	e7e4      	b.n	8006dea <_vfiprintf_r+0x1e6>
 8006e20:	08007516 	.word	0x08007516
 8006e24:	08007520 	.word	0x08007520
 8006e28:	08004a99 	.word	0x08004a99
 8006e2c:	08006bdf 	.word	0x08006bdf
 8006e30:	0800751c 	.word	0x0800751c

08006e34 <__sflush_r>:
 8006e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	0716      	lsls	r6, r2, #28
 8006e3e:	4605      	mov	r5, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	d454      	bmi.n	8006eee <__sflush_r+0xba>
 8006e44:	684b      	ldr	r3, [r1, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	dc02      	bgt.n	8006e50 <__sflush_r+0x1c>
 8006e4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd48      	ble.n	8006ee2 <__sflush_r+0xae>
 8006e50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	d045      	beq.n	8006ee2 <__sflush_r+0xae>
 8006e56:	2300      	movs	r3, #0
 8006e58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e5c:	682f      	ldr	r7, [r5, #0]
 8006e5e:	6a21      	ldr	r1, [r4, #32]
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	d030      	beq.n	8006ec6 <__sflush_r+0x92>
 8006e64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	0759      	lsls	r1, r3, #29
 8006e6a:	d505      	bpl.n	8006e78 <__sflush_r+0x44>
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e72:	b10b      	cbz	r3, 8006e78 <__sflush_r+0x44>
 8006e74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e76:	1ad2      	subs	r2, r2, r3
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e7c:	6a21      	ldr	r1, [r4, #32]
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b0      	blx	r6
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	d106      	bne.n	8006e96 <__sflush_r+0x62>
 8006e88:	6829      	ldr	r1, [r5, #0]
 8006e8a:	291d      	cmp	r1, #29
 8006e8c:	d82b      	bhi.n	8006ee6 <__sflush_r+0xb2>
 8006e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f38 <__sflush_r+0x104>)
 8006e90:	40ca      	lsrs	r2, r1
 8006e92:	07d6      	lsls	r6, r2, #31
 8006e94:	d527      	bpl.n	8006ee6 <__sflush_r+0xb2>
 8006e96:	2200      	movs	r2, #0
 8006e98:	6062      	str	r2, [r4, #4]
 8006e9a:	04d9      	lsls	r1, r3, #19
 8006e9c:	6922      	ldr	r2, [r4, #16]
 8006e9e:	6022      	str	r2, [r4, #0]
 8006ea0:	d504      	bpl.n	8006eac <__sflush_r+0x78>
 8006ea2:	1c42      	adds	r2, r0, #1
 8006ea4:	d101      	bne.n	8006eaa <__sflush_r+0x76>
 8006ea6:	682b      	ldr	r3, [r5, #0]
 8006ea8:	b903      	cbnz	r3, 8006eac <__sflush_r+0x78>
 8006eaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eae:	602f      	str	r7, [r5, #0]
 8006eb0:	b1b9      	cbz	r1, 8006ee2 <__sflush_r+0xae>
 8006eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eb6:	4299      	cmp	r1, r3
 8006eb8:	d002      	beq.n	8006ec0 <__sflush_r+0x8c>
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f7ff f9fe 	bl	80062bc <_free_r>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ec4:	e00d      	b.n	8006ee2 <__sflush_r+0xae>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b0      	blx	r6
 8006ecc:	4602      	mov	r2, r0
 8006ece:	1c50      	adds	r0, r2, #1
 8006ed0:	d1c9      	bne.n	8006e66 <__sflush_r+0x32>
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0c6      	beq.n	8006e66 <__sflush_r+0x32>
 8006ed8:	2b1d      	cmp	r3, #29
 8006eda:	d001      	beq.n	8006ee0 <__sflush_r+0xac>
 8006edc:	2b16      	cmp	r3, #22
 8006ede:	d11e      	bne.n	8006f1e <__sflush_r+0xea>
 8006ee0:	602f      	str	r7, [r5, #0]
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	e022      	b.n	8006f2c <__sflush_r+0xf8>
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eea:	b21b      	sxth	r3, r3
 8006eec:	e01b      	b.n	8006f26 <__sflush_r+0xf2>
 8006eee:	690f      	ldr	r7, [r1, #16]
 8006ef0:	2f00      	cmp	r7, #0
 8006ef2:	d0f6      	beq.n	8006ee2 <__sflush_r+0xae>
 8006ef4:	0793      	lsls	r3, r2, #30
 8006ef6:	680e      	ldr	r6, [r1, #0]
 8006ef8:	bf08      	it	eq
 8006efa:	694b      	ldreq	r3, [r1, #20]
 8006efc:	600f      	str	r7, [r1, #0]
 8006efe:	bf18      	it	ne
 8006f00:	2300      	movne	r3, #0
 8006f02:	eba6 0807 	sub.w	r8, r6, r7
 8006f06:	608b      	str	r3, [r1, #8]
 8006f08:	f1b8 0f00 	cmp.w	r8, #0
 8006f0c:	dde9      	ble.n	8006ee2 <__sflush_r+0xae>
 8006f0e:	6a21      	ldr	r1, [r4, #32]
 8006f10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f12:	4643      	mov	r3, r8
 8006f14:	463a      	mov	r2, r7
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b0      	blx	r6
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	dc08      	bgt.n	8006f30 <__sflush_r+0xfc>
 8006f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f30:	4407      	add	r7, r0
 8006f32:	eba8 0800 	sub.w	r8, r8, r0
 8006f36:	e7e7      	b.n	8006f08 <__sflush_r+0xd4>
 8006f38:	20400001 	.word	0x20400001

08006f3c <_fflush_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	690b      	ldr	r3, [r1, #16]
 8006f40:	4605      	mov	r5, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	b913      	cbnz	r3, 8006f4c <_fflush_r+0x10>
 8006f46:	2500      	movs	r5, #0
 8006f48:	4628      	mov	r0, r5
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	b118      	cbz	r0, 8006f56 <_fflush_r+0x1a>
 8006f4e:	6a03      	ldr	r3, [r0, #32]
 8006f50:	b90b      	cbnz	r3, 8006f56 <_fflush_r+0x1a>
 8006f52:	f7fe f9d3 	bl	80052fc <__sinit>
 8006f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0f3      	beq.n	8006f46 <_fflush_r+0xa>
 8006f5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f60:	07d0      	lsls	r0, r2, #31
 8006f62:	d404      	bmi.n	8006f6e <_fflush_r+0x32>
 8006f64:	0599      	lsls	r1, r3, #22
 8006f66:	d402      	bmi.n	8006f6e <_fflush_r+0x32>
 8006f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f6a:	f7fe fbb0 	bl	80056ce <__retarget_lock_acquire_recursive>
 8006f6e:	4628      	mov	r0, r5
 8006f70:	4621      	mov	r1, r4
 8006f72:	f7ff ff5f 	bl	8006e34 <__sflush_r>
 8006f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f78:	07da      	lsls	r2, r3, #31
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	d4e4      	bmi.n	8006f48 <_fflush_r+0xc>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	059b      	lsls	r3, r3, #22
 8006f82:	d4e1      	bmi.n	8006f48 <_fflush_r+0xc>
 8006f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f86:	f7fe fba3 	bl	80056d0 <__retarget_lock_release_recursive>
 8006f8a:	e7dd      	b.n	8006f48 <_fflush_r+0xc>

08006f8c <__swhatbuf_r>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	460c      	mov	r4, r1
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	2900      	cmp	r1, #0
 8006f96:	b096      	sub	sp, #88	@ 0x58
 8006f98:	4615      	mov	r5, r2
 8006f9a:	461e      	mov	r6, r3
 8006f9c:	da0d      	bge.n	8006fba <__swhatbuf_r+0x2e>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	bf14      	ite	ne
 8006faa:	2340      	movne	r3, #64	@ 0x40
 8006fac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	6031      	str	r1, [r6, #0]
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	b016      	add	sp, #88	@ 0x58
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
 8006fba:	466a      	mov	r2, sp
 8006fbc:	f000 f848 	bl	8007050 <_fstat_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	dbec      	blt.n	8006f9e <__swhatbuf_r+0x12>
 8006fc4:	9901      	ldr	r1, [sp, #4]
 8006fc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fce:	4259      	negs	r1, r3
 8006fd0:	4159      	adcs	r1, r3
 8006fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd6:	e7eb      	b.n	8006fb0 <__swhatbuf_r+0x24>

08006fd8 <__smakebuf_r>:
 8006fd8:	898b      	ldrh	r3, [r1, #12]
 8006fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fdc:	079d      	lsls	r5, r3, #30
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	d507      	bpl.n	8006ff4 <__smakebuf_r+0x1c>
 8006fe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	2301      	movs	r3, #1
 8006fee:	6163      	str	r3, [r4, #20]
 8006ff0:	b003      	add	sp, #12
 8006ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff4:	ab01      	add	r3, sp, #4
 8006ff6:	466a      	mov	r2, sp
 8006ff8:	f7ff ffc8 	bl	8006f8c <__swhatbuf_r>
 8006ffc:	9f00      	ldr	r7, [sp, #0]
 8006ffe:	4605      	mov	r5, r0
 8007000:	4639      	mov	r1, r7
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff f9ce 	bl	80063a4 <_malloc_r>
 8007008:	b948      	cbnz	r0, 800701e <__smakebuf_r+0x46>
 800700a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700e:	059a      	lsls	r2, r3, #22
 8007010:	d4ee      	bmi.n	8006ff0 <__smakebuf_r+0x18>
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	f043 0302 	orr.w	r3, r3, #2
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	e7e2      	b.n	8006fe4 <__smakebuf_r+0xc>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	6020      	str	r0, [r4, #0]
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800702e:	b15b      	cbz	r3, 8007048 <__smakebuf_r+0x70>
 8007030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007034:	4630      	mov	r0, r6
 8007036:	f000 f81d 	bl	8007074 <_isatty_r>
 800703a:	b128      	cbz	r0, 8007048 <__smakebuf_r+0x70>
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	431d      	orrs	r5, r3
 800704c:	81a5      	strh	r5, [r4, #12]
 800704e:	e7cf      	b.n	8006ff0 <__smakebuf_r+0x18>

08007050 <_fstat_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d07      	ldr	r5, [pc, #28]	@ (8007070 <_fstat_r+0x20>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	f7f9 fc53 	bl	8000908 <_fstat>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d102      	bne.n	800706c <_fstat_r+0x1c>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b103      	cbz	r3, 800706c <_fstat_r+0x1c>
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	bd38      	pop	{r3, r4, r5, pc}
 800706e:	bf00      	nop
 8007070:	24000420 	.word	0x24000420

08007074 <_isatty_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	@ (8007090 <_isatty_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7f9 fc52 	bl	8000928 <_isatty>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_isatty_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_isatty_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	24000420 	.word	0x24000420

08007094 <_sbrk_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d06      	ldr	r5, [pc, #24]	@ (80070b0 <_sbrk_r+0x1c>)
 8007098:	2300      	movs	r3, #0
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7f9 fc5a 	bl	8000958 <_sbrk>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_sbrk_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_sbrk_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	24000420 	.word	0x24000420

080070b4 <__assert_func>:
 80070b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070b6:	4614      	mov	r4, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <__assert_func+0x2c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4605      	mov	r5, r0
 80070c0:	68d8      	ldr	r0, [r3, #12]
 80070c2:	b14c      	cbz	r4, 80070d8 <__assert_func+0x24>
 80070c4:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <__assert_func+0x30>)
 80070c6:	9100      	str	r1, [sp, #0]
 80070c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070cc:	4906      	ldr	r1, [pc, #24]	@ (80070e8 <__assert_func+0x34>)
 80070ce:	462b      	mov	r3, r5
 80070d0:	f000 f842 	bl	8007158 <fiprintf>
 80070d4:	f000 f852 	bl	800717c <abort>
 80070d8:	4b04      	ldr	r3, [pc, #16]	@ (80070ec <__assert_func+0x38>)
 80070da:	461c      	mov	r4, r3
 80070dc:	e7f3      	b.n	80070c6 <__assert_func+0x12>
 80070de:	bf00      	nop
 80070e0:	2400003c 	.word	0x2400003c
 80070e4:	08007531 	.word	0x08007531
 80070e8:	0800753e 	.word	0x0800753e
 80070ec:	0800756c 	.word	0x0800756c

080070f0 <_calloc_r>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	fba1 5402 	umull	r5, r4, r1, r2
 80070f6:	b934      	cbnz	r4, 8007106 <_calloc_r+0x16>
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7ff f953 	bl	80063a4 <_malloc_r>
 80070fe:	4606      	mov	r6, r0
 8007100:	b928      	cbnz	r0, 800710e <_calloc_r+0x1e>
 8007102:	4630      	mov	r0, r6
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	220c      	movs	r2, #12
 8007108:	6002      	str	r2, [r0, #0]
 800710a:	2600      	movs	r6, #0
 800710c:	e7f9      	b.n	8007102 <_calloc_r+0x12>
 800710e:	462a      	mov	r2, r5
 8007110:	4621      	mov	r1, r4
 8007112:	f7fe fa5f 	bl	80055d4 <memset>
 8007116:	e7f4      	b.n	8007102 <_calloc_r+0x12>

08007118 <__ascii_mbtowc>:
 8007118:	b082      	sub	sp, #8
 800711a:	b901      	cbnz	r1, 800711e <__ascii_mbtowc+0x6>
 800711c:	a901      	add	r1, sp, #4
 800711e:	b142      	cbz	r2, 8007132 <__ascii_mbtowc+0x1a>
 8007120:	b14b      	cbz	r3, 8007136 <__ascii_mbtowc+0x1e>
 8007122:	7813      	ldrb	r3, [r2, #0]
 8007124:	600b      	str	r3, [r1, #0]
 8007126:	7812      	ldrb	r2, [r2, #0]
 8007128:	1e10      	subs	r0, r2, #0
 800712a:	bf18      	it	ne
 800712c:	2001      	movne	r0, #1
 800712e:	b002      	add	sp, #8
 8007130:	4770      	bx	lr
 8007132:	4610      	mov	r0, r2
 8007134:	e7fb      	b.n	800712e <__ascii_mbtowc+0x16>
 8007136:	f06f 0001 	mvn.w	r0, #1
 800713a:	e7f8      	b.n	800712e <__ascii_mbtowc+0x16>

0800713c <__ascii_wctomb>:
 800713c:	4603      	mov	r3, r0
 800713e:	4608      	mov	r0, r1
 8007140:	b141      	cbz	r1, 8007154 <__ascii_wctomb+0x18>
 8007142:	2aff      	cmp	r2, #255	@ 0xff
 8007144:	d904      	bls.n	8007150 <__ascii_wctomb+0x14>
 8007146:	228a      	movs	r2, #138	@ 0x8a
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	4770      	bx	lr
 8007150:	700a      	strb	r2, [r1, #0]
 8007152:	2001      	movs	r0, #1
 8007154:	4770      	bx	lr
	...

08007158 <fiprintf>:
 8007158:	b40e      	push	{r1, r2, r3}
 800715a:	b503      	push	{r0, r1, lr}
 800715c:	4601      	mov	r1, r0
 800715e:	ab03      	add	r3, sp, #12
 8007160:	4805      	ldr	r0, [pc, #20]	@ (8007178 <fiprintf+0x20>)
 8007162:	f853 2b04 	ldr.w	r2, [r3], #4
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f7ff fd4b 	bl	8006c04 <_vfiprintf_r>
 800716e:	b002      	add	sp, #8
 8007170:	f85d eb04 	ldr.w	lr, [sp], #4
 8007174:	b003      	add	sp, #12
 8007176:	4770      	bx	lr
 8007178:	2400003c 	.word	0x2400003c

0800717c <abort>:
 800717c:	b508      	push	{r3, lr}
 800717e:	2006      	movs	r0, #6
 8007180:	f000 f82c 	bl	80071dc <raise>
 8007184:	2001      	movs	r0, #1
 8007186:	f7f9 fb6f 	bl	8000868 <_exit>

0800718a <_raise_r>:
 800718a:	291f      	cmp	r1, #31
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4605      	mov	r5, r0
 8007190:	460c      	mov	r4, r1
 8007192:	d904      	bls.n	800719e <_raise_r+0x14>
 8007194:	2316      	movs	r3, #22
 8007196:	6003      	str	r3, [r0, #0]
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	bd38      	pop	{r3, r4, r5, pc}
 800719e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071a0:	b112      	cbz	r2, 80071a8 <_raise_r+0x1e>
 80071a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071a6:	b94b      	cbnz	r3, 80071bc <_raise_r+0x32>
 80071a8:	4628      	mov	r0, r5
 80071aa:	f000 f831 	bl	8007210 <_getpid_r>
 80071ae:	4622      	mov	r2, r4
 80071b0:	4601      	mov	r1, r0
 80071b2:	4628      	mov	r0, r5
 80071b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b8:	f000 b818 	b.w	80071ec <_kill_r>
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d00a      	beq.n	80071d6 <_raise_r+0x4c>
 80071c0:	1c59      	adds	r1, r3, #1
 80071c2:	d103      	bne.n	80071cc <_raise_r+0x42>
 80071c4:	2316      	movs	r3, #22
 80071c6:	6003      	str	r3, [r0, #0]
 80071c8:	2001      	movs	r0, #1
 80071ca:	e7e7      	b.n	800719c <_raise_r+0x12>
 80071cc:	2100      	movs	r1, #0
 80071ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071d2:	4620      	mov	r0, r4
 80071d4:	4798      	blx	r3
 80071d6:	2000      	movs	r0, #0
 80071d8:	e7e0      	b.n	800719c <_raise_r+0x12>
	...

080071dc <raise>:
 80071dc:	4b02      	ldr	r3, [pc, #8]	@ (80071e8 <raise+0xc>)
 80071de:	4601      	mov	r1, r0
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	f7ff bfd2 	b.w	800718a <_raise_r>
 80071e6:	bf00      	nop
 80071e8:	2400003c 	.word	0x2400003c

080071ec <_kill_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	@ (800720c <_kill_r+0x20>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	f7f9 fb25 	bl	8000848 <_kill>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d102      	bne.n	8007208 <_kill_r+0x1c>
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	b103      	cbz	r3, 8007208 <_kill_r+0x1c>
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	24000420 	.word	0x24000420

08007210 <_getpid_r>:
 8007210:	f7f9 bb12 	b.w	8000838 <_getpid>

08007214 <fmaxf>:
 8007214:	b508      	push	{r3, lr}
 8007216:	ed2d 8b02 	vpush	{d8}
 800721a:	eeb0 8a40 	vmov.f32	s16, s0
 800721e:	eef0 8a60 	vmov.f32	s17, s1
 8007222:	f000 f831 	bl	8007288 <__fpclassifyf>
 8007226:	b930      	cbnz	r0, 8007236 <fmaxf+0x22>
 8007228:	eeb0 8a68 	vmov.f32	s16, s17
 800722c:	eeb0 0a48 	vmov.f32	s0, s16
 8007230:	ecbd 8b02 	vpop	{d8}
 8007234:	bd08      	pop	{r3, pc}
 8007236:	eeb0 0a68 	vmov.f32	s0, s17
 800723a:	f000 f825 	bl	8007288 <__fpclassifyf>
 800723e:	2800      	cmp	r0, #0
 8007240:	d0f4      	beq.n	800722c <fmaxf+0x18>
 8007242:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724a:	dded      	ble.n	8007228 <fmaxf+0x14>
 800724c:	e7ee      	b.n	800722c <fmaxf+0x18>

0800724e <fminf>:
 800724e:	b508      	push	{r3, lr}
 8007250:	ed2d 8b02 	vpush	{d8}
 8007254:	eeb0 8a40 	vmov.f32	s16, s0
 8007258:	eef0 8a60 	vmov.f32	s17, s1
 800725c:	f000 f814 	bl	8007288 <__fpclassifyf>
 8007260:	b930      	cbnz	r0, 8007270 <fminf+0x22>
 8007262:	eeb0 8a68 	vmov.f32	s16, s17
 8007266:	eeb0 0a48 	vmov.f32	s0, s16
 800726a:	ecbd 8b02 	vpop	{d8}
 800726e:	bd08      	pop	{r3, pc}
 8007270:	eeb0 0a68 	vmov.f32	s0, s17
 8007274:	f000 f808 	bl	8007288 <__fpclassifyf>
 8007278:	2800      	cmp	r0, #0
 800727a:	d0f4      	beq.n	8007266 <fminf+0x18>
 800727c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007284:	d5ed      	bpl.n	8007262 <fminf+0x14>
 8007286:	e7ee      	b.n	8007266 <fminf+0x18>

08007288 <__fpclassifyf>:
 8007288:	ee10 3a10 	vmov	r3, s0
 800728c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8007290:	d00d      	beq.n	80072ae <__fpclassifyf+0x26>
 8007292:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8007296:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800729a:	d30a      	bcc.n	80072b2 <__fpclassifyf+0x2a>
 800729c:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <__fpclassifyf+0x34>)
 800729e:	1e42      	subs	r2, r0, #1
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d908      	bls.n	80072b6 <__fpclassifyf+0x2e>
 80072a4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80072a8:	4258      	negs	r0, r3
 80072aa:	4158      	adcs	r0, r3
 80072ac:	4770      	bx	lr
 80072ae:	2002      	movs	r0, #2
 80072b0:	4770      	bx	lr
 80072b2:	2004      	movs	r0, #4
 80072b4:	4770      	bx	lr
 80072b6:	2003      	movs	r0, #3
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	007ffffe 	.word	0x007ffffe

080072c0 <_init>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr

080072cc <_fini>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	bf00      	nop
 80072d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d2:	bc08      	pop	{r3}
 80072d4:	469e      	mov	lr, r3
 80072d6:	4770      	bx	lr
