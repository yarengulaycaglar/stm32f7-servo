
dcmaxon_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080077f0  080077f0  000087f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c74  08007c74  00008c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007c78  08007c78  00008c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000204  24000000  08007c7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000022c  24000204  08007e80  00009204  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000430  08007e80  00009430  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e806  00000000  00000000  00009232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e99  00000000  00000000  00017a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  000198d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008e2  00000000  00000000  0001a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003964b  00000000  00000000  0001ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e177  00000000  00000000  000543d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171b72  00000000  00000000  0006254c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d40be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ecc  00000000  00000000  001d4104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001d7fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080077d4 	.word	0x080077d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	080077d4 	.word	0x080077d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <main>:
static void MX_FDCAN1_Init(void);
void Error_Handler(void);

FDCAN_HandleTypeDef hfdcan1;
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	/* Sistem başlatma */
	printf("Main start...\n");
 8000396:	481a      	ldr	r0, [pc, #104]	@ (8000400 <main+0x70>)
 8000398:	f005 fb1c 	bl	80059d4 <puts>
	HAL_Init();
 800039c:	f000 fdc2 	bl	8000f24 <HAL_Init>
	SystemClock_Config();
 80003a0:	f000 f83c 	bl	800041c <SystemClock_Config>
	MX_GPIO_Init();
 80003a4:	f000 f92e 	bl	8000604 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80003a8:	f000 f8b8 	bl	800051c <MX_FDCAN1_Init>

	uint8_t controller_id = 1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	71fb      	strb	r3, [r7, #7]

	enter_motor_control_mode(controller_id, &hfdcan1);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4914      	ldr	r1, [pc, #80]	@ (8000404 <main+0x74>)
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fbf9 	bl	8000bac <enter_motor_control_mode>

	while (1)
	{
		/* RPM komutunu FDCAN üzerinden gönder */
		pack_cmd(controller_id,p_des, v_des, kp, kd, t_ff, &hfdcan1);
 80003ba:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <main+0x78>)
 80003bc:	edd3 7a00 	vldr	s15, [r3]
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <main+0x7c>)
 80003c2:	ed93 7a00 	vldr	s14, [r3]
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <main+0x80>)
 80003c8:	edd3 6a00 	vldr	s13, [r3]
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <main+0x84>)
 80003ce:	ed93 6a00 	vldr	s12, [r3]
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <main+0x88>)
 80003d4:	edd3 5a00 	vldr	s11, [r3]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	490a      	ldr	r1, [pc, #40]	@ (8000404 <main+0x74>)
 80003dc:	eeb0 2a65 	vmov.f32	s4, s11
 80003e0:	eef0 1a46 	vmov.f32	s3, s12
 80003e4:	eeb0 1a66 	vmov.f32	s2, s13
 80003e8:	eef0 0a47 	vmov.f32	s1, s14
 80003ec:	eeb0 0a67 	vmov.f32	s0, s15
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fc3d 	bl	8000c70 <pack_cmd>
		HAL_Delay(100);
 80003f6:	2064      	movs	r0, #100	@ 0x64
 80003f8:	f000 fe26 	bl	8001048 <HAL_Delay>
		pack_cmd(controller_id,p_des, v_des, kp, kd, t_ff, &hfdcan1);
 80003fc:	bf00      	nop
 80003fe:	e7dc      	b.n	80003ba <main+0x2a>
 8000400:	080077f0 	.word	0x080077f0
 8000404:	24000220 	.word	0x24000220
 8000408:	240002d8 	.word	0x240002d8
 800040c:	240002dc 	.word	0x240002dc
 8000410:	24000028 	.word	0x24000028
 8000414:	2400002c 	.word	0x2400002c
 8000418:	24000030 	.word	0x24000030

0800041c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b09c      	sub	sp, #112	@ 0x70
 8000420:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000426:	224c      	movs	r2, #76	@ 0x4c
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f005 fbb2 	bl	8005b94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2220      	movs	r2, #32
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f005 fbac 	bl	8005b94 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800043c:	2002      	movs	r0, #2
 800043e:	f002 fa4b 	bl	80028d8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <SystemClock_Config+0xf8>)
 8000448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800044a:	4a32      	ldr	r2, [pc, #200]	@ (8000514 <SystemClock_Config+0xf8>)
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000452:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <SystemClock_Config+0xf8>)
 8000454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <SystemClock_Config+0xfc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000464:	4a2c      	ldr	r2, [pc, #176]	@ (8000518 <SystemClock_Config+0xfc>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b2a      	ldr	r3, [pc, #168]	@ (8000518 <SystemClock_Config+0xfc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000478:	bf00      	nop
 800047a:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <SystemClock_Config+0xfc>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000486:	d1f8      	bne.n	800047a <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000488:	2303      	movs	r3, #3
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800048c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000490:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000492:	2301      	movs	r3, #1
 8000494:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	2340      	movs	r3, #64	@ 0x40
 8000498:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	2302      	movs	r3, #2
 80004a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80004a6:	2318      	movs	r3, #24
 80004a8:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80004aa:	2302      	movs	r3, #2
 80004ac:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ae:	2304      	movs	r3, #4
 80004b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004b6:	230c      	movs	r3, #12
 80004b8:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fa40 	bl	800294c <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80004d2:	f000 f8d9 	bl	8000688 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	233f      	movs	r3, #63	@ 0x3f
 80004d8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ea:	2340      	movs	r3, #64	@ 0x40
 80004ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fe80 	bl	8003200 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0xee>
	{
		Error_Handler();
 8000506:	f000 f8bf 	bl	8000688 <Error_Handler>
	}
}
 800050a:	bf00      	nop
 800050c:	3770      	adds	r7, #112	@ 0x70
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	58000400 	.word	0x58000400
 8000518:	58024800 	.word	0x58024800

0800051c <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	hfdcan1.Instance = FDCAN1;
 8000520:	4b36      	ldr	r3, [pc, #216]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000522:	4a37      	ldr	r2, [pc, #220]	@ (8000600 <MX_FDCAN1_Init+0xe4>)
 8000524:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000526:	4b35      	ldr	r3, [pc, #212]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052c:	4b33      	ldr	r3, [pc, #204]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000532:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000534:	2200      	movs	r2, #0
 8000536:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000538:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800053a:	2200      	movs	r2, #0
 800053c:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 800053e:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000540:	2200      	movs	r2, #0
 8000542:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000544:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000546:	2210      	movs	r2, #16
 8000548:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800054c:	2201      	movs	r2, #1
 800054e:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000550:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000552:	2202      	movs	r2, #2
 8000554:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000556:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000558:	2202      	movs	r2, #2
 800055a:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 800055c:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800055e:	2201      	movs	r2, #1
 8000560:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000562:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000564:	2201      	movs	r2, #1
 8000566:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800056a:	2201      	movs	r2, #1
 800056c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 800056e:	4b23      	ldr	r3, [pc, #140]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000570:	2201      	movs	r2, #1
 8000572:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 800057a:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800057c:	2200      	movs	r2, #0
 800057e:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000582:	2200      	movs	r2, #0
 8000584:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000586:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000588:	2200      	movs	r2, #0
 800058a:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800058e:	2204      	movs	r2, #4
 8000590:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000592:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 8000594:	2200      	movs	r2, #0
 8000596:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 800059a:	2204      	movs	r2, #4
 800059c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005ca:	f000 fe7d 	bl	80012c8 <HAL_FDCAN_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_FDCAN1_Init+0xbc>
	{
		Error_Handler();
 80005d4:	f000 f858 	bl	8000688 <Error_Handler>
	}

	/* FDCAN RX interrupt'ını etkinleştir */
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2101      	movs	r1, #1
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005de:	f001 fa43 	bl	8001a68 <HAL_FDCAN_ActivateNotification>

	// Enable interrupts
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80005e2:	2013      	movs	r0, #19
 80005e4:	f000 fe55 	bl	8001292 <HAL_NVIC_EnableIRQ>

	/* FDCAN'ı başlat */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <MX_FDCAN1_Init+0xe0>)
 80005ea:	f001 f84b 	bl	8001684 <HAL_FDCAN_Start>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_FDCAN1_Init+0xdc>
	{
		Error_Handler(); // FDCAN başlatma hatası
 80005f4:	f000 f848 	bl	8000688 <Error_Handler>
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	24000220 	.word	0x24000220
 8000600:	4000a000 	.word	0x4000a000

08000604 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

	/* FDCAN1 pinlerini (PD0: RX, PD1: TX) yapılandır */
	__HAL_RCC_GPIOD_CLK_ENABLE();  // GPIOD için saat aktif et
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_GPIO_Init+0x7c>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_GPIO_Init+0x7c>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_GPIO_Init+0x7c>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_FDCAN_CLK_ENABLE();
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_GPIO_Init+0x7c>)
 800063a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800063e:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <MX_GPIO_Init+0x7c>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <MX_GPIO_Init+0x7c>)
 800064a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800064e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000656:	2303      	movs	r3, #3
 8000658:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;  // FDCAN1 pin alternatifi
 8000666:	2309      	movs	r3, #9
 8000668:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_GPIO_Init+0x80>)
 8000672:	f001 ff81 	bl	8002578 <HAL_GPIO_Init>
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	58024400 	.word	0x58024400
 8000684:	58020c00 	.word	0x58020c00

08000688 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Error_Handler+0x8>

08000694 <HAL_FDCAN_RxFifo0Callback>:
	}
}

// HAL callback fonksiyonu
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	@ 0x30
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rx_msg;

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_msg, msg) == HAL_OK)
 800069e:	f107 0208 	add.w	r2, r7, #8
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f001 f872 	bl	8001790 <HAL_FDCAN_GetRxMessage>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <HAL_FDCAN_RxFifo0Callback+0x22>
	{
		// Mesaj başarıyla alındı
		unpack_reply();
 80006b2:	f000 fb91 	bl	8000dd8 <unpack_reply>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	240002cc 	.word	0x240002cc

080006c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_MspInit+0x30>)
 80006cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006d0:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <HAL_MspInit+0x30>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <HAL_MspInit+0x30>)
 80006dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	58024400 	.word	0x58024400

080006f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0ba      	sub	sp, #232	@ 0xe8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	22c0      	movs	r2, #192	@ 0xc0
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f005 fa3b 	bl	8005b94 <memset>
  if(hfdcan->Instance==FDCAN1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a27      	ldr	r2, [pc, #156]	@ (80007c0 <HAL_FDCAN_MspInit+0xc8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d146      	bne.n	80007b6 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000728:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800072c:	f04f 0300 	mov.w	r3, #0
 8000730:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000734:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000738:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f88d 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800074c:	f7ff ff9c 	bl	8000688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000750:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <HAL_FDCAN_MspInit+0xcc>)
 8000752:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000756:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <HAL_FDCAN_MspInit+0xcc>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800075c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <HAL_FDCAN_MspInit+0xcc>)
 8000762:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_FDCAN_MspInit+0xcc>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000774:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <HAL_FDCAN_MspInit+0xcc>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HAL_FDCAN_MspInit+0xcc>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800078c:	2303      	movs	r3, #3
 800078e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007a4:	2309      	movs	r3, #9
 80007a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <HAL_FDCAN_MspInit+0xd0>)
 80007b2:	f001 fee1 	bl	8002578 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80007b6:	bf00      	nop
 80007b8:	37e8      	adds	r7, #232	@ 0xe8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	4000a000 	.word	0x4000a000
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58020c00 	.word	0x58020c00

080007cc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <NMI_Handler+0x4>

080007d4 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <MemManage_Handler+0x4>

080007e4 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000822:	f000 fbf1 	bl	8001008 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}

0800082a <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

	/* USER CODE END TIM2_IRQn 0 */
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan1); // HAL olaylarını işle
 800084c:	4802      	ldr	r0, [pc, #8]	@ (8000858 <FDCAN1_IT0_IRQHandler+0x10>)
 800084e:	f001 f985 	bl	8001b5c <HAL_FDCAN_IRQHandler>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	24000220 	.word	0x24000220

0800085c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_kill>:

int _kill(int pid, int sig)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000876:	f005 f9df 	bl	8005c38 <__errno>
 800087a:	4603      	mov	r3, r0
 800087c:	2216      	movs	r2, #22
 800087e:	601a      	str	r2, [r3, #0]
  return -1;
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_exit>:

void _exit (int status)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ffe7 	bl	800086c <_kill>
  while (1) {}    /* Make sure we hang here */
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <_exit+0x12>

080008a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e00a      	b.n	80008ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b4:	f3af 8000 	nop.w
 80008b8:	4601      	mov	r1, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	60ba      	str	r2, [r7, #8]
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbf0      	blt.n	80008b4 <_read+0x12>
  }

  return len;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e009      	b.n	8000902 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbf1      	blt.n	80008ee <_write+0x12>
  }
  return len;
 800090a:	687b      	ldr	r3, [r7, #4]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_close>:

int _close(int file)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800093c:	605a      	str	r2, [r3, #4]
  return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_isatty>:

int _isatty(int file)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000962:	b480      	push	{r7}
 8000964:	b085      	sub	sp, #20
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f005 f944 	bl	8005c38 <__errno>
 80009b0:	4603      	mov	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24080000 	.word	0x24080000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	240002c0 	.word	0x240002c0
 80009e4:	24000430 	.word	0x24000430

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009ec:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <SystemInit+0xe4>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a36      	ldr	r2, [pc, #216]	@ (8000acc <SystemInit+0xe4>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009fc:	4b34      	ldr	r3, [pc, #208]	@ (8000ad0 <SystemInit+0xe8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	2b06      	cmp	r3, #6
 8000a06:	d807      	bhi.n	8000a18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a08:	4b31      	ldr	r3, [pc, #196]	@ (8000ad0 <SystemInit+0xe8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 030f 	bic.w	r3, r3, #15
 8000a10:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad0 <SystemInit+0xe8>)
 8000a12:	f043 0307 	orr.w	r3, r3, #7
 8000a16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <SystemInit+0xec>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <SystemInit+0xec>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <SystemInit+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <SystemInit+0xec>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4929      	ldr	r1, [pc, #164]	@ (8000ad4 <SystemInit+0xec>)
 8000a30:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <SystemInit+0xf0>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a36:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <SystemInit+0xe8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d007      	beq.n	8000a52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a42:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <SystemInit+0xe8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f023 030f 	bic.w	r3, r3, #15
 8000a4a:	4a21      	ldr	r2, [pc, #132]	@ (8000ad0 <SystemInit+0xe8>)
 8000a4c:	f043 0307 	orr.w	r3, r3, #7
 8000a50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <SystemInit+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <SystemInit+0xec>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <SystemInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad4 <SystemInit+0xec>)
 8000a66:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <SystemInit+0xf4>)
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <SystemInit+0xec>)
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <SystemInit+0xf8>)
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <SystemInit+0xec>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae4 <SystemInit+0xfc>)
 8000a74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <SystemInit+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <SystemInit+0xec>)
 8000a7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <SystemInit+0xfc>)
 8000a80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <SystemInit+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <SystemInit+0xec>)
 8000a8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ae4 <SystemInit+0xfc>)
 8000a8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <SystemInit+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <SystemInit+0xec>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <SystemInit+0xec>)
 8000a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <SystemInit+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <SystemInit+0x100>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <SystemInit+0x104>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ab2:	d202      	bcs.n	8000aba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <SystemInit+0x108>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <SystemInit+0x10c>)
 8000abc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ac0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	52002000 	.word	0x52002000
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000adc:	02020200 	.word	0x02020200
 8000ae0:	01ff0000 	.word	0x01ff0000
 8000ae4:	01010280 	.word	0x01010280
 8000ae8:	5c001000 	.word	0x5c001000
 8000aec:	ffff0000 	.word	0xffff0000
 8000af0:	51008108 	.word	0x51008108
 8000af4:	52004000 	.word	0x52004000

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000afc:	f7ff ff74 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f005 f88d 	bl	8005c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fc31 	bl	8000390 <main>
  bx  lr
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b38:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8000b3c:	08007c7c 	.word	0x08007c7c
  ldr r2, =_sbss
 8000b40:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 8000b44:	24000430 	.word	0x24000430

08000b48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC3_IRQHandler>

08000b4a <comm_can_transmit_eid>:
	buffer_append_int16(buffer + send_index + send_index1, RPA, &send_index1);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index + send_index1, hfdcan1);
}

// Transmit fonksiyonu (FDCAN kullanılarak)
static void comm_can_transmit_eid(uint32_t id, uint8_t* data, uint8_t len, FDCAN_HandleTypeDef *hfdcan1) {
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b08e      	sub	sp, #56	@ 0x38
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4613      	mov	r3, r2
 8000b58:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d901      	bls.n	8000b64 <comm_can_transmit_eid+0x1a>
		len = 8;
 8000b60:	2308      	movs	r3, #8
 8000b62:	71fb      	strb	r3, [r7, #7]
	}
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = id;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID; // Standart ID tipi
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Veri çerçevesi
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = (len << 16); // Veri uzunluğu
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	041b      	lsls	r3, r3, #16
 8000b74:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8000b76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.MessageMarker = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &TxHeader, data) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	4619      	mov	r1, r3
 8000b94:	6838      	ldr	r0, [r7, #0]
 8000b96:	f000 fda0 	bl	80016da <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <comm_can_transmit_eid+0x5a>
	{
		Error_Handler(); // Veri gönderme hatası
 8000ba0:	f7ff fd72 	bl	8000688 <Error_Handler>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3738      	adds	r7, #56	@ 0x38
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <enter_motor_control_mode>:
 ****************************************************************************************************************
 * MIT MODE
 *****************************************************************************************************************
 */

void enter_motor_control_mode(uint8_t controller_id, FDCAN_HandleTypeDef *hfdcan1) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC}; // Motor control mode giriş mesajı
 8000bb8:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <enter_motor_control_mode+0x30>)
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc2:	e883 0003 	stmia.w	r3, {r0, r1}
    comm_can_transmit_eid(controller_id, buffer, sizeof(buffer), hfdcan1);
 8000bc6:	79f8      	ldrb	r0, [r7, #7]
 8000bc8:	f107 0108 	add.w	r1, r7, #8
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2208      	movs	r2, #8
 8000bd0:	f7ff ffbb 	bl	8000b4a <comm_can_transmit_eid>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08007884 	.word	0x08007884

08000be0 <float_to_uint>:


static int float_to_uint(float x, float x_min, float x_max, unsigned int bits)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bea:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bee:	ed87 1a01 	vstr	s2, [r7, #4]
 8000bf2:	6038      	str	r0, [r7, #0]
	/// Converts a float to an unsigned int, given range and number of bits ///
	float span = x_max- x_min;
 8000bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c00:	edc7 7a05 	vstr	s15, [r7, #20]
	if(x < x_min) x = x_min;
 8000c04:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	d502      	bpl.n	8000c1c <float_to_uint+0x3c>
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	e00a      	b.n	8000c32 <float_to_uint+0x52>
	else if(x > x_max) x = x_max;
 8000c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2c:	dd01      	ble.n	8000c32 <float_to_uint+0x52>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
	return (int) ((x- x_min)*((float)((1<<bits)/span)));
 8000c32:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c3e:	2201      	movs	r2, #1
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000c4e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000c52:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5e:	ee17 3a90 	vmov	r3, s15
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <pack_cmd>:


/*
 *  Sends routine code
 */
void pack_cmd(uint8_t controller_id, float p_des, float v_des, float kp, float kd, float t_ff, FDCAN_HandleTypeDef *hfdcan1){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	@ 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	ed87 0a06 	vstr	s0, [r7, #24]
 8000c7c:	edc7 0a05 	vstr	s1, [r7, #20]
 8000c80:	ed87 1a04 	vstr	s2, [r7, #16]
 8000c84:	edc7 1a03 	vstr	s3, [r7, #12]
 8000c88:	ed87 2a02 	vstr	s4, [r7, #8]
 8000c8c:	6079      	str	r1, [r7, #4]
 8000c8e:	77fb      	strb	r3, [r7, #31]
	/// convert floats to unsigned ints ///
	int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8000c90:	4b46      	ldr	r3, [pc, #280]	@ (8000dac <pack_cmd+0x13c>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <pack_cmd+0x140>)
 8000c98:	ed93 7a00 	vldr	s14, [r3]
 8000c9c:	2010      	movs	r0, #16
 8000c9e:	eeb0 1a47 	vmov.f32	s2, s14
 8000ca2:	eef0 0a67 	vmov.f32	s1, s15
 8000ca6:	ed97 0a06 	vldr	s0, [r7, #24]
 8000caa:	f7ff ff99 	bl	8000be0 <float_to_uint>
 8000cae:	6378      	str	r0, [r7, #52]	@ 0x34
	int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8000cb0:	4b40      	ldr	r3, [pc, #256]	@ (8000db4 <pack_cmd+0x144>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	4b40      	ldr	r3, [pc, #256]	@ (8000db8 <pack_cmd+0x148>)
 8000cb8:	ed93 7a00 	vldr	s14, [r3]
 8000cbc:	200c      	movs	r0, #12
 8000cbe:	eeb0 1a47 	vmov.f32	s2, s14
 8000cc2:	eef0 0a67 	vmov.f32	s1, s15
 8000cc6:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cca:	f7ff ff89 	bl	8000be0 <float_to_uint>
 8000cce:	6338      	str	r0, [r7, #48]	@ 0x30
	int kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dbc <pack_cmd+0x14c>)
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc0 <pack_cmd+0x150>)
 8000cd8:	ed93 7a00 	vldr	s14, [r3]
 8000cdc:	200c      	movs	r0, #12
 8000cde:	eeb0 1a47 	vmov.f32	s2, s14
 8000ce2:	eef0 0a67 	vmov.f32	s1, s15
 8000ce6:	ed97 0a04 	vldr	s0, [r7, #16]
 8000cea:	f7ff ff79 	bl	8000be0 <float_to_uint>
 8000cee:	62f8      	str	r0, [r7, #44]	@ 0x2c
	int kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8000cf0:	4b34      	ldr	r3, [pc, #208]	@ (8000dc4 <pack_cmd+0x154>)
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
 8000cf6:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <pack_cmd+0x158>)
 8000cf8:	ed93 7a00 	vldr	s14, [r3]
 8000cfc:	200c      	movs	r0, #12
 8000cfe:	eeb0 1a47 	vmov.f32	s2, s14
 8000d02:	eef0 0a67 	vmov.f32	s1, s15
 8000d06:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d0a:	f7ff ff69 	bl	8000be0 <float_to_uint>
 8000d0e:	62b8      	str	r0, [r7, #40]	@ 0x28
	int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8000d10:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <pack_cmd+0x15c>)
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <pack_cmd+0x160>)
 8000d18:	ed93 7a00 	vldr	s14, [r3]
 8000d1c:	200c      	movs	r0, #12
 8000d1e:	eeb0 1a47 	vmov.f32	s2, s14
 8000d22:	eef0 0a67 	vmov.f32	s1, s15
 8000d26:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d2a:	f7ff ff59 	bl	8000be0 <float_to_uint>
 8000d2e:	6278      	str	r0, [r7, #36]	@ 0x24

	/// pack ints into the can buffer ///
	msg[0] = p_int>>8; // Position 8 higher
 8000d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d32:	121b      	asrs	r3, r3, #8
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <pack_cmd+0x164>)
 8000d38:	701a      	strb	r2, [r3, #0]
	msg[1] = p_int&0xFF;// Position 8 lower
 8000d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <pack_cmd+0x164>)
 8000d40:	705a      	strb	r2, [r3, #1]
	msg[2] = v_int>>4; // Speed 8 higher
 8000d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d44:	111b      	asrs	r3, r3, #4
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <pack_cmd+0x164>)
 8000d4a:	709a      	strb	r2, [r3, #2]
	msg[3] = ((v_int&0xF)<<4)|(kp_int>>8); //Speed 4 bit lower KP 4bit higher
 8000d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d56:	121b      	asrs	r3, r3, #8
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <pack_cmd+0x164>)
 8000d62:	70da      	strb	r2, [r3, #3]
	msg[4] = kp_int&0xFF; // KP 8 bit lower
 8000d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <pack_cmd+0x164>)
 8000d6a:	711a      	strb	r2, [r3, #4]
	msg[5] = kd_int>>4; // Kd 8 bit higher
 8000d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6e:	111b      	asrs	r3, r3, #4
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <pack_cmd+0x164>)
 8000d74:	715a      	strb	r2, [r3, #5]
	msg[6] = ((kd_int&0xF)<<4)|(t_int>>8); //KP 4bit lower torque 4 bit higher
 8000d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	121b      	asrs	r3, r3, #8
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <pack_cmd+0x164>)
 8000d8c:	719a      	strb	r2, [r3, #6]
	msg[7] = t_int&0xff; // torque 4 bit lower
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <pack_cmd+0x164>)
 8000d94:	71da      	strb	r2, [r3, #7]
	comm_can_transmit_eid(controller_id, msg, sizeof(msg), hfdcan1);
 8000d96:	7ff8      	ldrb	r0, [r7, #31]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <pack_cmd+0x164>)
 8000d9e:	f7ff fed4 	bl	8000b4a <comm_can_transmit_eid>
}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	@ 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000008 	.word	0x24000008
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	24000010 	.word	0x24000010
 8000db8:	24000014 	.word	0x24000014
 8000dbc:	240002c4 	.word	0x240002c4
 8000dc0:	24000020 	.word	0x24000020
 8000dc4:	240002c8 	.word	0x240002c8
 8000dc8:	24000024 	.word	0x24000024
 8000dcc:	24000018 	.word	0x24000018
 8000dd0:	2400001c 	.word	0x2400001c
 8000dd4:	240002cc 	.word	0x240002cc

08000dd8 <unpack_reply>:


/*
 *  Receive routine code
 */
void unpack_reply(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
	/// unpack ints from can buffer ///
	int id = msg[0];
 8000dde:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <unpack_reply+0xc0>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	61fb      	str	r3, [r7, #28]
	int p_int = (msg[1]<<8)|msg[2]; //Motor position data
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <unpack_reply+0xc0>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	4a2b      	ldr	r2, [pc, #172]	@ (8000e98 <unpack_reply+0xc0>)
 8000dec:	7892      	ldrb	r2, [r2, #2]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
	int v_int = (msg[3]<<4)|(msg[4]>>4); // Motor speed data
 8000df2:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <unpack_reply+0xc0>)
 8000df4:	78db      	ldrb	r3, [r3, #3]
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4a27      	ldr	r2, [pc, #156]	@ (8000e98 <unpack_reply+0xc0>)
 8000dfa:	7912      	ldrb	r2, [r2, #4]
 8000dfc:	0912      	lsrs	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	4313      	orrs	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]
	int i_int = ((msg[4]&0xF)<<8)|msg[5]; // Motor torque data
 8000e04:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <unpack_reply+0xc0>)
 8000e06:	791b      	ldrb	r3, [r3, #4]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e0e:	4a22      	ldr	r2, [pc, #136]	@ (8000e98 <unpack_reply+0xc0>)
 8000e10:	7952      	ldrb	r2, [r2, #5]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]

	/// convert ints to floats ///
	float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8000e16:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <unpack_reply+0xc4>)
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <unpack_reply+0xc8>)
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	2110      	movs	r1, #16
 8000e24:	eef0 0a47 	vmov.f32	s1, s14
 8000e28:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2c:	69b8      	ldr	r0, [r7, #24]
 8000e2e:	f000 f847 	bl	8000ec0 <uint_to_float>
 8000e32:	ed87 0a03 	vstr	s0, [r7, #12]
	float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <unpack_reply+0xcc>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <unpack_reply+0xd0>)
 8000e3e:	ed93 7a00 	vldr	s14, [r3]
 8000e42:	210c      	movs	r1, #12
 8000e44:	eef0 0a47 	vmov.f32	s1, s14
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f000 f837 	bl	8000ec0 <uint_to_float>
 8000e52:	ed87 0a02 	vstr	s0, [r7, #8]
	float i = uint_to_float(i_int, T_MIN, T_MAX, 12);
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <unpack_reply+0xd4>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <unpack_reply+0xd8>)
 8000e5e:	ed93 7a00 	vldr	s14, [r3]
 8000e62:	210c      	movs	r1, #12
 8000e64:	eef0 0a47 	vmov.f32	s1, s14
 8000e68:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6c:	6938      	ldr	r0, [r7, #16]
 8000e6e:	f000 f827 	bl	8000ec0 <uint_to_float>
 8000e72:	ed87 0a01 	vstr	s0, [r7, #4]

	// Read the corresponding data according to the ID code
	if(id == 1){
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <unpack_reply+0xb6>
		p_des = p;
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <unpack_reply+0xdc>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6013      	str	r3, [r2, #0]
		v_des = v;
 8000e82:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <unpack_reply+0xe0>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	6013      	str	r3, [r2, #0]
		t_ff = i;
 8000e88:	4a0c      	ldr	r2, [pc, #48]	@ (8000ebc <unpack_reply+0xe4>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	240002cc 	.word	0x240002cc
 8000e9c:	24000008 	.word	0x24000008
 8000ea0:	2400000c 	.word	0x2400000c
 8000ea4:	24000010 	.word	0x24000010
 8000ea8:	24000014 	.word	0x24000014
 8000eac:	24000018 	.word	0x24000018
 8000eb0:	2400001c 	.word	0x2400001c
 8000eb4:	240002d8 	.word	0x240002d8
 8000eb8:	240002dc 	.word	0x240002dc
 8000ebc:	24000030 	.word	0x24000030

08000ec0 <uint_to_float>:


/*
 *  All numbers are converted to floating-point by the following function
 */
static float uint_to_float(int x_int, float x_min, float x_max, int bits) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ecc:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /// converts unsigned int to float, given range and number of bits ///
  float span = x_max - x_min;
 8000ed2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ede:	edc7 7a05 	vstr	s15, [r7, #20]
  float offset = x_min;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
  return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ef8:	2201      	movs	r2, #1
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f000 f98c 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f30:	f002 fb1c 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8000f34:	4602      	mov	r2, r0
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_Init+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	4913      	ldr	r1, [pc, #76]	@ (8000f90 <HAL_Init+0x6c>)
 8000f42:	5ccb      	ldrb	r3, [r1, r3]
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_Init+0x68>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_Init+0x6c>)
 8000f58:	5cd3      	ldrb	r3, [r2, r3]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <HAL_Init+0x70>)
 8000f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f68:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <HAL_Init+0x74>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f814 	bl	8000f9c <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e002      	b.n	8000f84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7e:	f7ff fba1 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	080078d8 	.word	0x080078d8
 8000f94:	24000004 	.word	0x24000004
 8000f98:	24000000 	.word	0x24000000

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_InitTick+0x60>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e021      	b.n	8000ff4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <HAL_InitTick+0x64>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_InitTick+0x60>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f971 	bl	80012ae <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f93b 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <HAL_InitTick+0x68>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	24000038 	.word	0x24000038
 8001000:	24000000 	.word	0x24000000
 8001004:	24000034 	.word	0x24000034

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	24000038 	.word	0x24000038
 800102c:	240002e0 	.word	0x240002e0

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	240002e0 	.word	0x240002e0

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000038 	.word	0x24000038

08001090 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetREVID+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0c1b      	lsrs	r3, r3, #16
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	5c001000 	.word	0x5c001000

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x40>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	05fa0000 	.word	0x05fa0000

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	@ (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff40 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff33 	bl	800110c <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa4 	bl	8001204 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b098      	sub	sp, #96	@ 0x60
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80012d0:	4a84      	ldr	r2, [pc, #528]	@ (80014e4 <HAL_FDCAN_Init+0x21c>)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4611      	mov	r1, r2
 80012d8:	224c      	movs	r2, #76	@ 0x4c
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fcd9 	bl	8005c92 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1c6      	b.n	8001678 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7e      	ldr	r2, [pc, #504]	@ (80014e8 <HAL_FDCAN_Init+0x220>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d106      	bne.n	8001302 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80012fc:	461a      	mov	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff f9ee 	bl	80006f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0210 	bic.w	r2, r2, #16
 800132a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff fe80 	bl	8001030 <HAL_GetTick>
 8001330:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001332:	e014      	b.n	800135e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001334:	f7ff fe7c 	bl	8001030 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b0a      	cmp	r3, #10
 8001340:	d90d      	bls.n	800135e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001348:	f043 0201 	orr.w	r2, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e18c      	b.n	8001678 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b08      	cmp	r3, #8
 800136a:	d0e3      	beq.n	8001334 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff fe58 	bl	8001030 <HAL_GetTick>
 8001380:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001382:	e014      	b.n	80013ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001384:	f7ff fe54 	bl	8001030 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d90d      	bls.n	80013ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e164      	b.n	8001678 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0e3      	beq.n	8001384 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0202 	orr.w	r2, r2, #2
 80013ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7c1b      	ldrb	r3, [r3, #16]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	e007      	b.n	80013f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7c5b      	ldrb	r3, [r3, #17]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800140c:	619a      	str	r2, [r3, #24]
 800140e:	e007      	b.n	8001420 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800141e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7c9b      	ldrb	r3, [r3, #18]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d108      	bne.n	800143a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	e007      	b.n	800144a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699a      	ldr	r2, [r3, #24]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001448:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800146e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0210 	bic.w	r2, r2, #16
 800147e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0204 	orr.w	r2, r2, #4
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	e030      	b.n	80014fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02c      	beq.n	80014fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d020      	beq.n	80014ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699a      	ldr	r2, [r3, #24]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0210 	orr.w	r2, r2, #16
 80014c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d114      	bne.n	80014fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	619a      	str	r2, [r3, #24]
 80014e2:	e00b      	b.n	80014fc <HAL_FDCAN_Init+0x234>
 80014e4:	0800788c 	.word	0x0800788c
 80014e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	3b01      	subs	r3, #1
 8001502:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	3b01      	subs	r3, #1
 800150a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800150c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001514:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	3b01      	subs	r3, #1
 800151e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001524:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001526:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001530:	d115      	bne.n	800155e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001536:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153c:	3b01      	subs	r3, #1
 800153e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001540:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	3b01      	subs	r3, #1
 8001548:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800154a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	3b01      	subs	r3, #1
 8001554:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800155a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800155c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001584:	4413      	add	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d011      	beq.n	80015ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001592:	f023 0107 	bic.w	r1, r3, #7
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3360      	adds	r3, #96	@ 0x60
 800159e:	443b      	add	r3, r7
 80015a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d011      	beq.n	80015da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80015be:	f023 0107 	bic.w	r1, r3, #7
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	3360      	adds	r3, #96	@ 0x60
 80015ca:	443b      	add	r3, r7
 80015cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d012      	beq.n	8001608 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80015ea:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	3360      	adds	r3, #96	@ 0x60
 80015f6:	443b      	add	r3, r7
 80015f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80015fc:	011a      	lsls	r2, r3, #4
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160c:	2b00      	cmp	r3, #0
 800160e:	d012      	beq.n	8001636 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001618:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	3360      	adds	r3, #96	@ 0x60
 8001624:	443b      	add	r3, r7
 8001626:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800162a:	021a      	lsls	r2, r3, #8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <HAL_FDCAN_Init+0x3b8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d107      	bne.n	8001650 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f022 0203 	bic.w	r2, r2, #3
 800164e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fd81 	bl	8002170 <FDCAN_CalcultateRamBlockAddresses>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001674:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001678:	4618      	mov	r0, r3
 800167a:	3760      	adds	r7, #96	@ 0x60
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	4000a000 	.word	0x4000a000

08001684 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d111      	bne.n	80016bc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e008      	b.n	80016ce <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016c2:	f043 0204 	orr.w	r2, r3, #4
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d141      	bne.n	8001776 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016fa:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e038      	b.n	8001788 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800171e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800172c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e026      	b.n	8001788 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001742:	0c1b      	lsrs	r3, r3, #16
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fe93 	bl	800247c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2101      	movs	r1, #1
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001766:	2201      	movs	r2, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e008      	b.n	8001788 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800177c:	f043 0208 	orr.w	r2, r3, #8
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001790:	b480      	push	{r7}
 8001792:	b08b      	sub	sp, #44	@ 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80017a8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80017aa:	7efb      	ldrb	r3, [r7, #27]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	f040 8149 	bne.w	8001a44 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b40      	cmp	r3, #64	@ 0x40
 80017b6:	d14c      	bne.n	8001852 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017ce:	f043 0220 	orr.w	r2, r3, #32
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e13c      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e12a      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001810:	d10a      	bne.n	8001828 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800181a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800181e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001822:	d101      	bne.n	8001828 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001824:	2301      	movs	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	69f9      	ldr	r1, [r7, #28]
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e068      	b.n	8001924 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b41      	cmp	r3, #65	@ 0x41
 8001856:	d14c      	bne.n	80018f2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001860:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800186e:	f043 0220 	orr.w	r2, r3, #32
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0ec      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001892:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0da      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80018a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d10a      	bne.n	80018c8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80018ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018c2:	d101      	bne.n	80018c8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e4:	69f9      	ldr	r1, [r7, #28]
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f0:	e018      	b.n	8001924 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d309      	bcc.n	8001910 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001902:	f043 0220 	orr.w	r2, r3, #32
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0a2      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e005      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	3304      	adds	r3, #4
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 020f 	and.w	r2, r3, #15
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e1b      	lsrs	r3, r3, #24
 80019a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0fda      	lsrs	r2, r3, #31
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	3304      	adds	r3, #4
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	e00a      	b.n	80019e0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	441a      	add	r2, r3
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	440b      	add	r3, r1
 80019d6:	7812      	ldrb	r2, [r2, #0]
 80019d8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	3301      	adds	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a64 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	461a      	mov	r2, r3
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d3ec      	bcc.n	80019ca <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b40      	cmp	r3, #64	@ 0x40
 80019f4:	d105      	bne.n	8001a02 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001a00:	e01e      	b.n	8001a40 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b41      	cmp	r3, #65	@ 0x41
 8001a06:	d105      	bne.n	8001a14 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001a12:	e015      	b.n	8001a40 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b1f      	cmp	r3, #31
 8001a18:	d808      	bhi.n	8001a2c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001a2a:	e009      	b.n	8001a40 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f003 021f 	and.w	r2, r3, #31
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e008      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a4a:	f043 0208 	orr.w	r2, r3, #8
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	372c      	adds	r7, #44	@ 0x2c
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	080078e8 	.word	0x080078e8

08001a68 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a7a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d002      	beq.n	8001a88 <HAL_FDCAN_ActivateNotification+0x20>
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d155      	bne.n	8001b34 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aa6:	e014      	b.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d108      	bne.n	8001aca <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0202 	orr.w	r2, r2, #2
 8001ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ac8:	e003      	b.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_FDCAN_ActivateNotification+0xec>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0f9b      	lsrs	r3, r3, #30
 8001b2a:	490b      	ldr	r1, [pc, #44]	@ (8001b58 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e008      	b.n	8001b46 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b3a:	f043 0202 	orr.w	r2, r3, #2
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	3fcfffff 	.word	0x3fcfffff
 8001b58:	4000a800 	.word	0x4000a800

08001b5c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b096      	sub	sp, #88	@ 0x58
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001b64:	4b9a      	ldr	r3, [pc, #616]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	079b      	lsls	r3, r3, #30
 8001b6a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001b6c:	4b98      	ldr	r3, [pc, #608]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	079b      	lsls	r3, r3, #30
 8001b72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b74:	4013      	ands	r3, r2
 8001b76:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b7e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001b82:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8001bca:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bde:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001be2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bec:	4013      	ands	r3, r2
 8001bee:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c20:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c22:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa54 	bl	80020d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c30:	0a9b      	lsrs	r3, r3, #10
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d01d      	beq.n	8001c76 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c3c:	0a9b      	lsrs	r3, r3, #10
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d017      	beq.n	8001c76 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c66:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c68:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fa07 	bl	8002084 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00d      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c82:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <HAL_FDCAN_IRQHandler+0x278>)
 8001c84:	400b      	ands	r3, r1
 8001c86:	6513      	str	r3, [r2, #80]	@ 0x50
 8001c88:	4a51      	ldr	r2, [pc, #324]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8c:	0f9b      	lsrs	r3, r3, #30
 8001c8e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001c90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f9c0 	bl	8002018 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd4 <HAL_FDCAN_IRQHandler+0x278>)
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	6513      	str	r3, [r2, #80]	@ 0x50
 8001caa:	4a49      	ldr	r2, [pc, #292]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cae:	0f9b      	lsrs	r3, r3, #30
 8001cb0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001cb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f9ba 	bl	800202e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_FDCAN_IRQHandler+0x278>)
 8001cc8:	400b      	ands	r3, r1
 8001cca:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ccc:	4a40      	ldr	r2, [pc, #256]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cd0:	0f9b      	lsrs	r3, r3, #30
 8001cd2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001cd4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fcdc 	bl	8000694 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00d      	beq.n	8001cfe <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_FDCAN_IRQHandler+0x278>)
 8001cea:	400b      	ands	r3, r1
 8001cec:	6513      	str	r3, [r2, #80]	@ 0x50
 8001cee:	4a38      	ldr	r2, [pc, #224]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cf2:	0f9b      	lsrs	r3, r3, #30
 8001cf4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001cf6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f9a3 	bl	8002044 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d00:	0adb      	lsrs	r3, r3, #11
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0c:	0adb      	lsrs	r3, r3, #11
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d20:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f997 	bl	800205a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01d      	beq.n	8001d74 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d017      	beq.n	8001d74 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d4c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d58:	4013      	ands	r3, r2
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d64:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f97d 	bl	800206e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d76:	0cdb      	lsrs	r3, r3, #19
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d82:	0cdb      	lsrs	r3, r3, #19
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d94:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f97c 	bl	800209a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d010      	beq.n	8001ddc <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dc4:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <HAL_FDCAN_IRQHandler+0x274>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	e004      	b.n	8001dd8 <HAL_FDCAN_IRQHandler+0x27c>
 8001dce:	bf00      	nop
 8001dd0:	4000a800 	.word	0x4000a800
 8001dd4:	3fcfffff 	.word	0x3fcfffff
 8001dd8:	f000 f969 	bl	80020ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dde:	0c9b      	lsrs	r3, r3, #18
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dea:	0c9b      	lsrs	r3, r3, #18
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dfc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dfe:	4b83      	ldr	r3, [pc, #524]	@ (800200c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f95c 	bl	80020c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e0c:	0c5b      	lsrs	r3, r3, #17
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d015      	beq.n	8001e42 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e18:	0c5b      	lsrs	r3, r3, #17
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00f      	beq.n	8001e42 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e2c:	4b77      	ldr	r3, [pc, #476]	@ (800200c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e4e:	4b70      	ldr	r3, [pc, #448]	@ (8002010 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001e50:	400b      	ands	r3, r1
 8001e52:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e54:	4a6d      	ldr	r2, [pc, #436]	@ (800200c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	0f9b      	lsrs	r3, r3, #30
 8001e5a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f94d 	bl	80020fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d011      	beq.n	8001e8e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001e70:	4b67      	ldr	r3, [pc, #412]	@ (8002010 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001e72:	400b      	ands	r3, r1
 8001e74:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e76:	4a65      	ldr	r2, [pc, #404]	@ (800200c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e7a:	0f9b      	lsrs	r3, r3, #30
 8001e7c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a60      	ldr	r2, [pc, #384]	@ (8002014 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f040 80ac 	bne.w	8001ff2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a4 	beq.w	8001ff2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eee:	4013      	ands	r3, r2
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8001efc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	4013      	ands	r3, r2
 8001f08:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8001f14:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f3e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8e6 	bl	8002114 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f54:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8e6 	bl	800212a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d01a      	beq.n	8001fa0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d014      	beq.n	8001fa0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f8c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8d0 	bl	8002140 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8d1 	bl	8002158 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f874 	bl	80020ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002002:	bf00      	nop
 8002004:	3758      	adds	r7, #88	@ 0x58
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	4000a800 	.word	0x4000a800
 8002010:	3fcfffff 	.word	0x3fcfffff
 8002014:	4000a000 	.word	0x4000a000

08002018 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002186:	4ba7      	ldr	r3, [pc, #668]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002188:	4013      	ands	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	0091      	lsls	r1, r2, #2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	430b      	orrs	r3, r1
 8002194:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	4413      	add	r3, r2
 80021bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021c6:	4b97      	ldr	r3, [pc, #604]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	0091      	lsls	r1, r2, #2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002208:	4b86      	ldr	r3, [pc, #536]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800220a:	4013      	ands	r3, r2
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	0091      	lsls	r1, r2, #2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002222:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4413      	add	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002250:	4b74      	ldr	r3, [pc, #464]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002252:	4013      	ands	r3, r2
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	0091      	lsls	r1, r2, #2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800226a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002272:	041a      	lsls	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002298:	4b62      	ldr	r3, [pc, #392]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800229a:	4013      	ands	r3, r2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	0091      	lsls	r1, r2, #2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4413      	add	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80022c4:	4b57      	ldr	r3, [pc, #348]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	0091      	lsls	r1, r2, #2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022de:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	4413      	add	r3, r2
 80022fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002306:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002308:	4013      	ands	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	0091      	lsls	r1, r2, #2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	430b      	orrs	r3, r1
 8002314:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002320:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800233c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002344:	061a      	lsls	r2, r3, #24
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002354:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002356:	4413      	add	r3, r2
 8002358:	009a      	lsls	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	441a      	add	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002390:	441a      	add	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241a:	4a04      	ldr	r2, [pc, #16]	@ (800242c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d915      	bls.n	800244c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002420:	e006      	b.n	8002430 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002422:	bf00      	nop
 8002424:	ffff0003 	.word	0xffff0003
 8002428:	10002b00 	.word	0x10002b00
 800242c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002436:	f043 0220 	orr.w	r2, r3, #32
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e010      	b.n	800246e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e005      	b.n	8002460 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3304      	adds	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3f3      	bcc.n	8002454 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800249a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e00a      	b.n	80024be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80024b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80024b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80024ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80024d4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	3304      	adds	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	3304      	adds	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e020      	b.n	8002556 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3303      	adds	r3, #3
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3302      	adds	r3, #2
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	440b      	add	r3, r1
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800252c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	440b      	add	r3, r1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800253a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	440a      	add	r2, r1
 8002542:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002544:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	3304      	adds	r3, #4
 800254e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3304      	adds	r3, #4
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4a06      	ldr	r2, [pc, #24]	@ (8002574 <FDCAN_CopyMessageToRAM+0xf8>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	461a      	mov	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4293      	cmp	r3, r2
 8002564:	d3d6      	bcc.n	8002514 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	3724      	adds	r7, #36	@ 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	080078e8 	.word	0x080078e8

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	@ 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002586:	4b89      	ldr	r3, [pc, #548]	@ (80027ac <HAL_GPIO_Init+0x234>)
 8002588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800258a:	e194      	b.n	80028b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8186 	beq.w	80028b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <HAL_GPIO_Init+0x44>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d130      	bne.n	800261e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f2:	2201      	movs	r2, #1
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 0201 	and.w	r2, r3, #1
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b03      	cmp	r3, #3
 8002628:	d017      	beq.n	800265a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d123      	bne.n	80026ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0203 	and.w	r2, r3, #3
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80e0 	beq.w	80028b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f0:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <HAL_GPIO_Init+0x238>)
 80026f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026f6:	4a2e      	ldr	r2, [pc, #184]	@ (80027b0 <HAL_GPIO_Init+0x238>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <HAL_GPIO_Init+0x238>)
 8002702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270e:	4a29      	ldr	r2, [pc, #164]	@ (80027b4 <HAL_GPIO_Init+0x23c>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <HAL_GPIO_Init+0x240>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d052      	beq.n	80027e0 <HAL_GPIO_Init+0x268>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <HAL_GPIO_Init+0x244>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_GPIO_Init+0x22e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <HAL_GPIO_Init+0x248>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <HAL_GPIO_Init+0x22a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_GPIO_Init+0x24c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d025      	beq.n	800279e <HAL_GPIO_Init+0x226>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <HAL_GPIO_Init+0x250>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_Init+0x222>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <HAL_GPIO_Init+0x254>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x21e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <HAL_GPIO_Init+0x258>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x21a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_GPIO_Init+0x25c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x216>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <HAL_GPIO_Init+0x260>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x212>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <HAL_GPIO_Init+0x264>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x20e>
 8002782:	2309      	movs	r3, #9
 8002784:	e02d      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 8002786:	230a      	movs	r3, #10
 8002788:	e02b      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 800278a:	2308      	movs	r3, #8
 800278c:	e029      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 800278e:	2307      	movs	r3, #7
 8002790:	e027      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 8002792:	2306      	movs	r3, #6
 8002794:	e025      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 8002796:	2305      	movs	r3, #5
 8002798:	e023      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 800279a:	2304      	movs	r3, #4
 800279c:	e021      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 800279e:	2303      	movs	r3, #3
 80027a0:	e01f      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e01d      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e01b      	b.n	80027e2 <HAL_GPIO_Init+0x26a>
 80027aa:	bf00      	nop
 80027ac:	58000080 	.word	0x58000080
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58000400 	.word	0x58000400
 80027b8:	58020000 	.word	0x58020000
 80027bc:	58020400 	.word	0x58020400
 80027c0:	58020800 	.word	0x58020800
 80027c4:	58020c00 	.word	0x58020c00
 80027c8:	58021000 	.word	0x58021000
 80027cc:	58021400 	.word	0x58021400
 80027d0:	58021800 	.word	0x58021800
 80027d4:	58021c00 	.word	0x58021c00
 80027d8:	58022000 	.word	0x58022000
 80027dc:	58022400 	.word	0x58022400
 80027e0:	2300      	movs	r3, #0
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	4093      	lsls	r3, r2
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f2:	4938      	ldr	r1, [pc, #224]	@ (80028d4 <HAL_GPIO_Init+0x35c>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	3301      	adds	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f ae63 	bne.w	800258c <HAL_GPIO_Init+0x14>
  }
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	3724      	adds	r7, #36	@ 0x24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	58000400 	.word	0x58000400

080028d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_PWREx_ConfigSupply+0x70>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d00a      	beq.n	8002902 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028ec:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <HAL_PWREx_ConfigSupply+0x70>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e01f      	b.n	800293e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e01d      	b.n	800293e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002902:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_PWREx_ConfigSupply+0x70>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 0207 	bic.w	r2, r3, #7
 800290a:	490f      	ldr	r1, [pc, #60]	@ (8002948 <HAL_PWREx_ConfigSupply+0x70>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002912:	f7fe fb8d 	bl	8001030 <HAL_GetTick>
 8002916:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002918:	e009      	b.n	800292e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800291a:	f7fe fb89 	bl	8001030 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002928:	d901      	bls.n	800292e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e007      	b.n	800293e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_PWREx_ConfigSupply+0x70>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293a:	d1ee      	bne.n	800291a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	58024800 	.word	0x58024800

0800294c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	@ 0x30
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f000 bc48 	b.w	80031f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8088 	beq.w	8002a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296e:	4b99      	ldr	r3, [pc, #612]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002978:	4b96      	ldr	r3, [pc, #600]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002980:	2b10      	cmp	r3, #16
 8002982:	d007      	beq.n	8002994 <HAL_RCC_OscConfig+0x48>
 8002984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002986:	2b18      	cmp	r3, #24
 8002988:	d111      	bne.n	80029ae <HAL_RCC_OscConfig+0x62>
 800298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	4b8f      	ldr	r3, [pc, #572]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d06d      	beq.n	8002a7c <HAL_RCC_OscConfig+0x130>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d169      	bne.n	8002a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f000 bc21 	b.w	80031f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7a>
 80029b8:	4b86      	ldr	r3, [pc, #536]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a85      	ldr	r2, [pc, #532]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e02e      	b.n	8002a24 <HAL_RCC_OscConfig+0xd8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x9c>
 80029ce:	4b81      	ldr	r3, [pc, #516]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a80      	ldr	r2, [pc, #512]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xd8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0xc0>
 80029f2:	4b78      	ldr	r3, [pc, #480]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a77      	ldr	r2, [pc, #476]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a74      	ldr	r2, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xd8>
 8002a0c:	4b71      	ldr	r3, [pc, #452]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a70      	ldr	r2, [pc, #448]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b6e      	ldr	r3, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fb00 	bl	8001030 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fafc 	bl	8001030 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e3d4      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a46:	4b63      	ldr	r3, [pc, #396]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xe8>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe faec 	bl	8001030 <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fae8 	bl	8001030 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e3c0      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a6e:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x110>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80ca 	beq.w	8002c20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8c:	4b51      	ldr	r3, [pc, #324]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a96:	4b4f      	ldr	r3, [pc, #316]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x166>
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2b18      	cmp	r3, #24
 8002aa6:	d156      	bne.n	8002b56 <HAL_RCC_OscConfig+0x20a>
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d151      	bne.n	8002b56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab2:	4b48      	ldr	r3, [pc, #288]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x17e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e392      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aca:	4b42      	ldr	r3, [pc, #264]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0219 	bic.w	r2, r3, #25
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	493f      	ldr	r1, [pc, #252]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe faa8 	bl	8001030 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fe faa4 	bl	8001030 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e37c      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	f7fe fac5 	bl	8001090 <HAL_GetREVID>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d817      	bhi.n	8002b40 <HAL_RCC_OscConfig+0x1f4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d108      	bne.n	8002b2a <HAL_RCC_OscConfig+0x1de>
 8002b18:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b20:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b28:	e07a      	b.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	031b      	lsls	r3, r3, #12
 8002b38:	4926      	ldr	r1, [pc, #152]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3e:	e06f      	b.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	4921      	ldr	r1, [pc, #132]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b54:	e064      	b.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d047      	beq.n	8002bee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0219 	bic.w	r2, r3, #25
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	491a      	ldr	r1, [pc, #104]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fa5e 	bl	8001030 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe fa5a 	bl	8001030 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e332      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b8a:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	f7fe fa7b 	bl	8001090 <HAL_GetREVID>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d819      	bhi.n	8002bd8 <HAL_RCC_OscConfig+0x28c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d108      	bne.n	8002bbe <HAL_RCC_OscConfig+0x272>
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bba:	6053      	str	r3, [r2, #4]
 8002bbc:	e030      	b.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	031b      	lsls	r3, r3, #12
 8002bcc:	4901      	ldr	r1, [pc, #4]	@ (8002bd4 <HAL_RCC_OscConfig+0x288>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
 8002bd2:	e025      	b.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	4b9a      	ldr	r3, [pc, #616]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4997      	ldr	r1, [pc, #604]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
 8002bec:	e018      	b.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bee:	4b95      	ldr	r3, [pc, #596]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a94      	ldr	r2, [pc, #592]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fa19 	bl	8001030 <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe fa15 	bl	8001030 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e2ed      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c14:	4b8b      	ldr	r3, [pc, #556]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a9 	beq.w	8002d80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b85      	ldr	r3, [pc, #532]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c38:	4b82      	ldr	r3, [pc, #520]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d007      	beq.n	8002c54 <HAL_RCC_OscConfig+0x308>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b18      	cmp	r3, #24
 8002c48:	d13a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x374>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d135      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c54:	4b7b      	ldr	r3, [pc, #492]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_OscConfig+0x320>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b80      	cmp	r3, #128	@ 0x80
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e2c1      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c6c:	f7fe fa10 	bl	8001090 <HAL_GetREVID>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d817      	bhi.n	8002caa <HAL_RCC_OscConfig+0x35e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_OscConfig+0x348>
 8002c82:	4b70      	ldr	r3, [pc, #448]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c92:	e075      	b.n	8002d80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c94:	4b6b      	ldr	r3, [pc, #428]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	069b      	lsls	r3, r3, #26
 8002ca2:	4968      	ldr	r1, [pc, #416]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca8:	e06a      	b.n	8002d80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002caa:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	061b      	lsls	r3, r3, #24
 8002cb8:	4962      	ldr	r1, [pc, #392]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cbe:	e05f      	b.n	8002d80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d042      	beq.n	8002d4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f9ac 	bl	8001030 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cdc:	f7fe f9a8 	bl	8001030 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e280      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cee:	4b55      	ldr	r3, [pc, #340]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cfa:	f7fe f9c9 	bl	8001090 <HAL_GetREVID>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d817      	bhi.n	8002d38 <HAL_RCC_OscConfig+0x3ec>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d108      	bne.n	8002d22 <HAL_RCC_OscConfig+0x3d6>
 8002d10:	4b4c      	ldr	r3, [pc, #304]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d18:	4a4a      	ldr	r2, [pc, #296]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d1e:	6053      	str	r3, [r2, #4]
 8002d20:	e02e      	b.n	8002d80 <HAL_RCC_OscConfig+0x434>
 8002d22:	4b48      	ldr	r3, [pc, #288]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	4944      	ldr	r1, [pc, #272]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
 8002d36:	e023      	b.n	8002d80 <HAL_RCC_OscConfig+0x434>
 8002d38:	4b42      	ldr	r3, [pc, #264]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	493f      	ldr	r1, [pc, #252]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
 8002d4c:	e018      	b.n	8002d80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3c      	ldr	r2, [pc, #240]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f969 	bl	8001030 <HAL_GetTick>
 8002d5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d62:	f7fe f965 	bl	8001030 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e23d      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d74:	4b33      	ldr	r3, [pc, #204]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d036      	beq.n	8002dfa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d019      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d94:	4b2b      	ldr	r3, [pc, #172]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d98:	4a2a      	ldr	r2, [pc, #168]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe f946 	bl	8001030 <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe f942 	bl	8001030 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e21a      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dba:	4b22      	ldr	r3, [pc, #136]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x45c>
 8002dc6:	e018      	b.n	8002dfa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f92c 	bl	8001030 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe f928 	bl	8001030 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e200      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d039      	beq.n	8002e7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a0c      	ldr	r2, [pc, #48]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe f909 	bl	8001030 <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e22:	f7fe f905 	bl	8001030 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1dd      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4d6>
 8002e40:	e01b      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
 8002e42:	bf00      	nop
 8002e44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e48:	4b9b      	ldr	r3, [pc, #620]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a9a      	ldr	r2, [pc, #616]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e54:	f7fe f8ec 	bl	8001030 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5c:	f7fe f8e8 	bl	8001030 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1c0      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e6e:	4b92      	ldr	r3, [pc, #584]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8081 	beq.w	8002f8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e88:	4b8c      	ldr	r3, [pc, #560]	@ (80030bc <HAL_RCC_OscConfig+0x770>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a8b      	ldr	r2, [pc, #556]	@ (80030bc <HAL_RCC_OscConfig+0x770>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e94:	f7fe f8cc 	bl	8001030 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fe f8c8 	bl	8001030 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	@ 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1a0      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eae:	4b83      	ldr	r3, [pc, #524]	@ (80030bc <HAL_RCC_OscConfig+0x770>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x584>
 8002ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ece:	e02d      	b.n	8002f2c <HAL_RCC_OscConfig+0x5e0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5a6>
 8002ed8:	4b77      	ldr	r3, [pc, #476]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002edc:	4a76      	ldr	r2, [pc, #472]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee4:	4b74      	ldr	r3, [pc, #464]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee8:	4a73      	ldr	r2, [pc, #460]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef0:	e01c      	b.n	8002f2c <HAL_RCC_OscConfig+0x5e0>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c8>
 8002efa:	4b6f      	ldr	r3, [pc, #444]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	4a6e      	ldr	r2, [pc, #440]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f06:	4b6c      	ldr	r3, [pc, #432]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x5e0>
 8002f14:	4b68      	ldr	r3, [pc, #416]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f18:	4a67      	ldr	r2, [pc, #412]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f20:	4b65      	ldr	r3, [pc, #404]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f24:	4a64      	ldr	r2, [pc, #400]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe f87c 	bl	8001030 <HAL_GetTick>
 8002f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f878 	bl	8001030 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e14e      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f52:	4b59      	ldr	r3, [pc, #356]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ee      	beq.n	8002f3c <HAL_RCC_OscConfig+0x5f0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f866 	bl	8001030 <HAL_GetTick>
 8002f64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe f862 	bl	8001030 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e138      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ee      	bne.n	8002f68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 812d 	beq.w	80031ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f94:	4b48      	ldr	r3, [pc, #288]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f9c:	2b18      	cmp	r3, #24
 8002f9e:	f000 80bd 	beq.w	800311c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	f040 809e 	bne.w	80030e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b42      	ldr	r3, [pc, #264]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a41      	ldr	r2, [pc, #260]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f83a 	bl	8001030 <HAL_GetTick>
 8002fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe f836 	bl	8001030 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e10e      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fd2:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fde:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe2:	4b37      	ldr	r3, [pc, #220]	@ (80030c0 <HAL_RCC_OscConfig+0x774>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4931      	ldr	r1, [pc, #196]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	3b01      	subs	r3, #1
 8003008:	025b      	lsls	r3, r3, #9
 800300a:	b29b      	uxth	r3, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	3b01      	subs	r3, #1
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	3b01      	subs	r3, #1
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003028:	4923      	ldr	r1, [pc, #140]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800303c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303e:	4b21      	ldr	r3, [pc, #132]	@ (80030c4 <HAL_RCC_OscConfig+0x778>)
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003046:	00d2      	lsls	r2, r2, #3
 8003048:	491b      	ldr	r1, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	f023 020c 	bic.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	4917      	ldr	r1, [pc, #92]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003060:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	f023 0202 	bic.w	r2, r3, #2
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	4912      	ldr	r1, [pc, #72]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	4a10      	ldr	r2, [pc, #64]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	4a07      	ldr	r2, [pc, #28]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fd ffbf 	bl	8001030 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b4:	e011      	b.n	80030da <HAL_RCC_OscConfig+0x78e>
 80030b6:	bf00      	nop
 80030b8:	58024400 	.word	0x58024400
 80030bc:	58024800 	.word	0x58024800
 80030c0:	fffffc0c 	.word	0xfffffc0c
 80030c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd ffb2 	bl	8001030 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e08a      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030da:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x77c>
 80030e6:	e082      	b.n	80031ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b43      	ldr	r3, [pc, #268]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a42      	ldr	r2, [pc, #264]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fd ff9c 	bl	8001030 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd ff98 	bl	8001030 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e070      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800310e:	4b3a      	ldr	r3, [pc, #232]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x7b0>
 800311a:	e068      	b.n	80031ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800311c:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003122:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	2b01      	cmp	r3, #1
 800312e:	d031      	beq.n	8003194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d12a      	bne.n	8003194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d122      	bne.n	8003194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d11a      	bne.n	8003194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0a5b      	lsrs	r3, r3, #9
 8003162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800316a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d111      	bne.n	8003194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	0e1b      	lsrs	r3, r3, #24
 8003186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e02b      	b.n	80031f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003198:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 800319a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d01f      	beq.n	80031ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031ae:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	4a11      	ldr	r2, [pc, #68]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ba:	f7fd ff39 	bl	8001030 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031c0:	bf00      	nop
 80031c2:	f7fd ff35 	bl	8001030 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d0f9      	beq.n	80031c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80031d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <HAL_RCC_OscConfig+0x8b0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031da:	00d2      	lsls	r2, r2, #3
 80031dc:	4906      	ldr	r1, [pc, #24]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <HAL_RCC_OscConfig+0x8ac>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3730      	adds	r7, #48	@ 0x30
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	58024400 	.word	0x58024400
 80031fc:	ffff0007 	.word	0xffff0007

08003200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e19c      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b8a      	ldr	r3, [pc, #552]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d910      	bls.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b87      	ldr	r3, [pc, #540]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 020f 	bic.w	r2, r3, #15
 800322a:	4985      	ldr	r1, [pc, #532]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b83      	ldr	r3, [pc, #524]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e184      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	4b7b      	ldr	r3, [pc, #492]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003260:	4b78      	ldr	r3, [pc, #480]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	4975      	ldr	r1, [pc, #468]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 800326e:	4313      	orrs	r3, r2
 8003270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d010      	beq.n	80032a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	4b70      	ldr	r3, [pc, #448]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800328a:	429a      	cmp	r2, r3
 800328c:	d908      	bls.n	80032a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800328e:	4b6d      	ldr	r3, [pc, #436]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	496a      	ldr	r1, [pc, #424]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 800329c:	4313      	orrs	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	4b64      	ldr	r3, [pc, #400]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d908      	bls.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032bc:	4b61      	ldr	r3, [pc, #388]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	495e      	ldr	r1, [pc, #376]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	4b59      	ldr	r3, [pc, #356]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032ea:	4b56      	ldr	r3, [pc, #344]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4953      	ldr	r1, [pc, #332]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4b4d      	ldr	r3, [pc, #308]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	429a      	cmp	r2, r3
 8003316:	d908      	bls.n	800332a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f023 020f 	bic.w	r2, r3, #15
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4947      	ldr	r1, [pc, #284]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003326:	4313      	orrs	r3, r2
 8003328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d055      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003336:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4940      	ldr	r1, [pc, #256]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003344:	4313      	orrs	r3, r2
 8003346:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d107      	bne.n	8003360 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003350:	4b3c      	ldr	r3, [pc, #240]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d121      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0f6      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003368:	4b36      	ldr	r3, [pc, #216]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d115      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0ea      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003380:	4b30      	ldr	r3, [pc, #192]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0de      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0d6      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f023 0207 	bic.w	r2, r3, #7
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4925      	ldr	r1, [pc, #148]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b2:	f7fd fe3d 	bl	8001030 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ba:	f7fd fe39 	bl	8001030 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0be      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	429a      	cmp	r2, r3
 80033e0:	d1eb      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d208      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fe:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f023 020f 	bic.w	r2, r3, #15
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	490e      	ldr	r1, [pc, #56]	@ (8003444 <HAL_RCC_ClockConfig+0x244>)
 800340c:	4313      	orrs	r3, r2
 800340e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d214      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	4906      	ldr	r1, [pc, #24]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <HAL_RCC_ClockConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e086      	b.n	800354e <HAL_RCC_ClockConfig+0x34e>
 8003440:	52002000 	.word	0x52002000
 8003444:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	4b3f      	ldr	r3, [pc, #252]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003460:	429a      	cmp	r2, r3
 8003462:	d208      	bcs.n	8003476 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003464:	4b3c      	ldr	r3, [pc, #240]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4939      	ldr	r1, [pc, #228]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 8003472:	4313      	orrs	r3, r2
 8003474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	4b34      	ldr	r3, [pc, #208]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800348e:	429a      	cmp	r2, r3
 8003490:	d208      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003492:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	492e      	ldr	r1, [pc, #184]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	4b28      	ldr	r3, [pc, #160]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034bc:	429a      	cmp	r2, r3
 80034be:	d208      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034c0:	4b25      	ldr	r3, [pc, #148]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4922      	ldr	r1, [pc, #136]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d208      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	4917      	ldr	r1, [pc, #92]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003500:	f000 f834 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	4912      	ldr	r1, [pc, #72]	@ (800355c <HAL_RCC_ClockConfig+0x35c>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800351e:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_RCC_ClockConfig+0x358>)
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <HAL_RCC_ClockConfig+0x35c>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <HAL_RCC_ClockConfig+0x360>)
 8003536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003538:	4a0a      	ldr	r2, [pc, #40]	@ (8003564 <HAL_RCC_ClockConfig+0x364>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_ClockConfig+0x368>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fd2a 	bl	8000f9c <HAL_InitTick>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
 800355c:	080078d8 	.word	0x080078d8
 8003560:	24000004 	.word	0x24000004
 8003564:	24000000 	.word	0x24000000
 8003568:	24000034 	.word	0x24000034

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	@ 0x24
 8003570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003572:	4bb3      	ldr	r3, [pc, #716]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800357a:	2b18      	cmp	r3, #24
 800357c:	f200 8155 	bhi.w	800382a <HAL_RCC_GetSysClockFreq+0x2be>
 8003580:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	080035ed 	.word	0x080035ed
 800358c:	0800382b 	.word	0x0800382b
 8003590:	0800382b 	.word	0x0800382b
 8003594:	0800382b 	.word	0x0800382b
 8003598:	0800382b 	.word	0x0800382b
 800359c:	0800382b 	.word	0x0800382b
 80035a0:	0800382b 	.word	0x0800382b
 80035a4:	0800382b 	.word	0x0800382b
 80035a8:	08003613 	.word	0x08003613
 80035ac:	0800382b 	.word	0x0800382b
 80035b0:	0800382b 	.word	0x0800382b
 80035b4:	0800382b 	.word	0x0800382b
 80035b8:	0800382b 	.word	0x0800382b
 80035bc:	0800382b 	.word	0x0800382b
 80035c0:	0800382b 	.word	0x0800382b
 80035c4:	0800382b 	.word	0x0800382b
 80035c8:	08003619 	.word	0x08003619
 80035cc:	0800382b 	.word	0x0800382b
 80035d0:	0800382b 	.word	0x0800382b
 80035d4:	0800382b 	.word	0x0800382b
 80035d8:	0800382b 	.word	0x0800382b
 80035dc:	0800382b 	.word	0x0800382b
 80035e0:	0800382b 	.word	0x0800382b
 80035e4:	0800382b 	.word	0x0800382b
 80035e8:	0800361f 	.word	0x0800361f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ec:	4b94      	ldr	r3, [pc, #592]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035f8:	4b91      	ldr	r3, [pc, #580]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	4a90      	ldr	r2, [pc, #576]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800360a:	e111      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800360c:	4b8d      	ldr	r3, [pc, #564]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800360e:	61bb      	str	r3, [r7, #24]
      break;
 8003610:	e10e      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003612:	4b8d      	ldr	r3, [pc, #564]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003614:	61bb      	str	r3, [r7, #24]
      break;
 8003616:	e10b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003618:	4b8c      	ldr	r3, [pc, #560]	@ (800384c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800361a:	61bb      	str	r3, [r7, #24]
      break;
 800361c:	e108      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800361e:	4b88      	ldr	r3, [pc, #544]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003628:	4b85      	ldr	r3, [pc, #532]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003632:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003634:	4b82      	ldr	r3, [pc, #520]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800363e:	4b80      	ldr	r3, [pc, #512]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003642:	08db      	lsrs	r3, r3, #3
 8003644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80e1 	beq.w	8003824 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b02      	cmp	r3, #2
 8003666:	f000 8083 	beq.w	8003770 <HAL_RCC_GetSysClockFreq+0x204>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b02      	cmp	r3, #2
 800366e:	f200 80a1 	bhi.w	80037b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x114>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d056      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x1c0>
 800367e:	e099      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003680:	4b6f      	ldr	r3, [pc, #444]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02d      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800368c:	4b6c      	ldr	r3, [pc, #432]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	08db      	lsrs	r3, r3, #3
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	4a6b      	ldr	r2, [pc, #428]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b6:	4b62      	ldr	r3, [pc, #392]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036e6:	e087      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003854 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fa:	4b51      	ldr	r3, [pc, #324]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370a:	ed97 6a02 	vldr	s12, [r7, #8]
 800370e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800371e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800372a:	e065      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800373a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373e:	4b40      	ldr	r3, [pc, #256]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003752:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800376e:	e043      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800385c <HAL_RCC_GetSysClockFreq+0x2f0>
 800377e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003782:	4b2f      	ldr	r3, [pc, #188]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	ed97 6a02 	vldr	s12, [r7, #8]
 8003796:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037b2:	e021      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003858 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	0a5b      	lsrs	r3, r3, #9
 80037fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003802:	3301      	adds	r3, #1
 8003804:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003810:	edd7 6a07 	vldr	s13, [r7, #28]
 8003814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381c:	ee17 3a90 	vmov	r3, s15
 8003820:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
      break;
 8003828:	e002      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800382c:	61bb      	str	r3, [r7, #24]
      break;
 800382e:	bf00      	nop
  }

  return sysclockfreq;
 8003830:	69bb      	ldr	r3, [r7, #24]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
 8003844:	03d09000 	.word	0x03d09000
 8003848:	003d0900 	.word	0x003d0900
 800384c:	007a1200 	.word	0x007a1200
 8003850:	46000000 	.word	0x46000000
 8003854:	4c742400 	.word	0x4c742400
 8003858:	4a742400 	.word	0x4a742400
 800385c:	4af42400 	.word	0x4af42400

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b0ca      	sub	sp, #296	@ 0x128
 8003866:	af00      	add	r7, sp, #0
 8003868:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003872:	2300      	movs	r3, #0
 8003874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003884:	2500      	movs	r5, #0
 8003886:	ea54 0305 	orrs.w	r3, r4, r5
 800388a:	d049      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800389c:	d828      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800389e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038a2:	d01a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038a8:	d822      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b2:	d007      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038b4:	e01c      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b6:	4bb8      	ldr	r3, [pc, #736]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	4ab7      	ldr	r2, [pc, #732]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038c2:	e01a      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	3308      	adds	r3, #8
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 f9d1 	bl	8004c74 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038d8:	e00f      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	3328      	adds	r3, #40	@ 0x28
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fa78 	bl	8004dd8 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038ee:	e004      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f6:	e000      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003902:	4ba5      	ldr	r3, [pc, #660]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003910:	4aa1      	ldr	r2, [pc, #644]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6513      	str	r3, [r2, #80]	@ 0x50
 8003916:	e003      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800392c:	f04f 0900 	mov.w	r9, #0
 8003930:	ea58 0309 	orrs.w	r3, r8, r9
 8003934:	d047      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393c:	2b04      	cmp	r3, #4
 800393e:	d82a      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003940:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800395d 	.word	0x0800395d
 800394c:	0800396b 	.word	0x0800396b
 8003950:	08003981 	.word	0x08003981
 8003954:	0800399f 	.word	0x0800399f
 8003958:	0800399f 	.word	0x0800399f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	4a8d      	ldr	r2, [pc, #564]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003968:	e01a      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3308      	adds	r3, #8
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f97e 	bl	8004c74 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800397e:	e00f      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	3328      	adds	r3, #40	@ 0x28
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fa25 	bl	8004dd8 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003994:	e004      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	f023 0107 	bic.w	r1, r3, #7
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	4a78      	ldr	r2, [pc, #480]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80039d2:	f04f 0b00 	mov.w	fp, #0
 80039d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80039da:	d04c      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e6:	d030      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ec:	d829      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80039f0:	d02d      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039f4:	d825      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039f6:	2b80      	cmp	r3, #128	@ 0x80
 80039f8:	d018      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039fa:	2b80      	cmp	r3, #128	@ 0x80
 80039fc:	d821      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d007      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a06:	e01c      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	4a62      	ldr	r2, [pc, #392]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a14:	e01c      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 f928 	bl	8004c74 <RCCEx_PLL2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	3328      	adds	r3, #40	@ 0x28
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 f9cf 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a58:	4b4f      	ldr	r3, [pc, #316]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	4a4c      	ldr	r2, [pc, #304]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d053      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aa2:	d035      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003aa4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aa8:	d82e      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003aaa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003aae:	d031      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ab0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ab4:	d828      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aba:	d01a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac0:	d822      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aca:	d007      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003acc:	e01c      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4b32      	ldr	r3, [pc, #200]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ada:	e01c      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f8c5 	bl	8004c74 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003af0:	e011      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	3328      	adds	r3, #40	@ 0x28
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f96c 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b06:	e006      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d056      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b6a:	d038      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b70:	d831      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b76:	d034      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b7c:	d82b      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b82:	d01d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b88:	d825      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b94:	e01f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4ba2      	ldr	r3, [pc, #648]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	4aa1      	ldr	r2, [pc, #644]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ba8:	e01c      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 f85e 	bl	8004c74 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bbe:	e011      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	3328      	adds	r3, #40	@ 0x28
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 f905 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bdc:	e002      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bec:	4b8e      	ldr	r3, [pc, #568]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bfc:	4a8a      	ldr	r2, [pc, #552]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003c18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c26:	460b      	mov	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	d03a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c32:	2b30      	cmp	r3, #48	@ 0x30
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c36:	2b30      	cmp	r3, #48	@ 0x30
 8003c38:	d819      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d815      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d019      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d111      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4a:	4b77      	ldr	r3, [pc, #476]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	4a76      	ldr	r2, [pc, #472]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c56:	e011      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f807 	bl	8004c74 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c84:	4b68      	ldr	r3, [pc, #416]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	4a65      	ldr	r2, [pc, #404]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003cae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d051      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ccc:	d035      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cd2:	d82e      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cd8:	d031      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003cda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cde:	d828      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce4:	d01a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cea:	d822      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf4:	d007      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cf6:	e01c      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d04:	e01c      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ffb0 	bl	8004c74 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d1a:	e011      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	3328      	adds	r3, #40	@ 0x28
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f857 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d48:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d56:	4a34      	ldr	r2, [pc, #208]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d056      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d90:	d033      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d96:	d82c      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d9c:	d02f      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003da2:	d826      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003da4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003da8:	d02b      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dae:	d820      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003db4:	d012      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003db6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dba:	d81a      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d022      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	3308      	adds	r3, #8
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ff50 	bl	8004c74 <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dda:	e015      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de0:	3328      	adds	r3, #40	@ 0x28
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fff7 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003df0:	e00a      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e004      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e1e:	4a02      	ldr	r2, [pc, #8]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e26:	bf00      	nop
 8003e28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d055      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e60:	d033      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e66:	d82c      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6c:	d02f      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e72:	d826      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e78:	d02b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e7e:	d820      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e84:	d012      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e8a:	d81a      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d022      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e94:	d115      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fee8 	bl	8004c74 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e015      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	3328      	adds	r3, #40	@ 0x28
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 ff8f 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ee0:	4ba3      	ldr	r3, [pc, #652]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ef0:	4a9f      	ldr	r2, [pc, #636]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d037      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2a:	d00e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f30:	d816      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3a:	d111      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	4a8b      	ldr	r2, [pc, #556]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f48:	e00f      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	3308      	adds	r3, #8
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fe8e 	bl	8004c74 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f72:	4b7f      	ldr	r3, [pc, #508]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f80:	4a7b      	ldr	r2, [pc, #492]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003fa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d039      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d81c      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003ffd 	.word	0x08003ffd
 8003fc4:	08003fd1 	.word	0x08003fd1
 8003fc8:	08003fdf 	.word	0x08003fdf
 8003fcc:	08003ffd 	.word	0x08003ffd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b67      	ldr	r3, [pc, #412]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a66      	ldr	r2, [pc, #408]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fe44 	bl	8004c74 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ff2:	e004      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004006:	4b5a      	ldr	r3, [pc, #360]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	f023 0103 	bic.w	r1, r3, #3
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	4a56      	ldr	r2, [pc, #344]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004016:	430b      	orrs	r3, r1
 8004018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401a:	e003      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800403a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	f000 809f 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4b4b      	ldr	r3, [pc, #300]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4a      	ldr	r2, [pc, #296]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004052:	f7fc ffed 	bl	8001030 <HAL_GetTick>
 8004056:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405a:	e00b      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fc ffe8 	bl	8001030 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b64      	cmp	r3, #100	@ 0x64
 800406a:	d903      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004074:	4b3f      	ldr	r3, [pc, #252]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ed      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004084:	2b00      	cmp	r3, #0
 8004086:	d179      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004088:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800408a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004094:	4053      	eors	r3, r2
 8004096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800409e:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b31      	ldr	r3, [pc, #196]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d6:	d118      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fc ffaa 	bl	8001030 <HAL_GetTick>
 80040dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040e0:	e00d      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fc ffa5 	bl	8001030 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040ec:	1ad2      	subs	r2, r2, r3
 80040ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d903      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0eb      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410e:	2b00      	cmp	r3, #0
 8004110:	d129      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004122:	d10e      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004134:	091a      	lsrs	r2, r3, #4
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004138:	4013      	ands	r3, r2
 800413a:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6113      	str	r3, [r2, #16]
 8004140:	e005      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004142:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004148:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800414c:	6113      	str	r3, [r2, #16]
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004150:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800415a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415e:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004160:	430b      	orrs	r3, r1
 8004162:	6713      	str	r3, [r2, #112]	@ 0x70
 8004164:	e00e      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800416e:	e009      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004170:	58024400 	.word	0x58024400
 8004174:	58024800 	.word	0x58024800
 8004178:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 0301 	and.w	r3, r2, #1
 8004190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800419a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f000 8089 	beq.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ac:	2b28      	cmp	r3, #40	@ 0x28
 80041ae:	d86b      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80041b0:	a201      	add	r2, pc, #4	@ (adr r2, 80041b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	08004291 	.word	0x08004291
 80041bc:	08004289 	.word	0x08004289
 80041c0:	08004289 	.word	0x08004289
 80041c4:	08004289 	.word	0x08004289
 80041c8:	08004289 	.word	0x08004289
 80041cc:	08004289 	.word	0x08004289
 80041d0:	08004289 	.word	0x08004289
 80041d4:	08004289 	.word	0x08004289
 80041d8:	0800425d 	.word	0x0800425d
 80041dc:	08004289 	.word	0x08004289
 80041e0:	08004289 	.word	0x08004289
 80041e4:	08004289 	.word	0x08004289
 80041e8:	08004289 	.word	0x08004289
 80041ec:	08004289 	.word	0x08004289
 80041f0:	08004289 	.word	0x08004289
 80041f4:	08004289 	.word	0x08004289
 80041f8:	08004273 	.word	0x08004273
 80041fc:	08004289 	.word	0x08004289
 8004200:	08004289 	.word	0x08004289
 8004204:	08004289 	.word	0x08004289
 8004208:	08004289 	.word	0x08004289
 800420c:	08004289 	.word	0x08004289
 8004210:	08004289 	.word	0x08004289
 8004214:	08004289 	.word	0x08004289
 8004218:	08004291 	.word	0x08004291
 800421c:	08004289 	.word	0x08004289
 8004220:	08004289 	.word	0x08004289
 8004224:	08004289 	.word	0x08004289
 8004228:	08004289 	.word	0x08004289
 800422c:	08004289 	.word	0x08004289
 8004230:	08004289 	.word	0x08004289
 8004234:	08004289 	.word	0x08004289
 8004238:	08004291 	.word	0x08004291
 800423c:	08004289 	.word	0x08004289
 8004240:	08004289 	.word	0x08004289
 8004244:	08004289 	.word	0x08004289
 8004248:	08004289 	.word	0x08004289
 800424c:	08004289 	.word	0x08004289
 8004250:	08004289 	.word	0x08004289
 8004254:	08004289 	.word	0x08004289
 8004258:	08004291 	.word	0x08004291
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	3308      	adds	r3, #8
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fd05 	bl	8004c74 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	3328      	adds	r3, #40	@ 0x28
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fdac 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800429a:	4bbf      	ldr	r3, [pc, #764]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042a8:	4abb      	ldr	r2, [pc, #748]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ae:	e003      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f002 0302 	and.w	r3, r2, #2
 80042c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80042ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d041      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d824      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80042e2:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	08004335 	.word	0x08004335
 80042ec:	08004301 	.word	0x08004301
 80042f0:	08004317 	.word	0x08004317
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
 80042fc:	08004335 	.word	0x08004335
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fcb3 	bl	8004c74 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fd5a 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800433e:	4b96      	ldr	r3, [pc, #600]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004342:	f023 0107 	bic.w	r1, r3, #7
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800434c:	4a92      	ldr	r2, [pc, #584]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6553      	str	r3, [r2, #84]	@ 0x54
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 0304 	and.w	r3, r2, #4
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004372:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d044      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004384:	2b05      	cmp	r3, #5
 8004386:	d825      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043a9 	.word	0x080043a9
 8004398:	080043bf 	.word	0x080043bf
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fc5f 	bl	8004c74 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2101      	movs	r1, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd06 	bl	8004dd8 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	f023 0107 	bic.w	r1, r3, #7
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f6:	4a68      	ldr	r2, [pc, #416]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f002 0320 	and.w	r3, r2, #32
 8004412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800441c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004420:	460b      	mov	r3, r1
 8004422:	4313      	orrs	r3, r2
 8004424:	d055      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004432:	d033      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004438:	d82c      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443e:	d02f      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004444:	d826      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004446:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800444a:	d02b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800444c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004450:	d820      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004456:	d012      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800445c:	d81a      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d022      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004466:	d115      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	3308      	adds	r3, #8
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fbff 	bl	8004c74 <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800447c:	e015      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	3328      	adds	r3, #40	@ 0x28
 8004484:	2102      	movs	r1, #2
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fca6 	bl	8004dd8 <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004492:	e00a      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449a:	e006      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800449c:	bf00      	nop
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b39      	ldr	r3, [pc, #228]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c2:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044c8:	e003      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	d058      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044fe:	d033      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004500:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004504:	d82c      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004510:	d826      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004512:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004516:	d02b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004518:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451c:	d820      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800451e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004522:	d012      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004528:	d81a      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d022      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004532:	d115      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	3308      	adds	r3, #8
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fb99 	bl	8004c74 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004548:	e015      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3328      	adds	r3, #40	@ 0x28
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fc40 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800455e:	e00a      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004566:	e006      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004568:	bf00      	nop
 800456a:	e004      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10e      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800457e:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800458e:	4a02      	ldr	r2, [pc, #8]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004590:	430b      	orrs	r3, r1
 8004592:	6593      	str	r3, [r2, #88]	@ 0x58
 8004594:	e006      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80045b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d055      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045d0:	d033      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80045d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045d6:	d82c      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045dc:	d02f      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e2:	d826      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045e8:	d02b      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045ee:	d820      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045f4:	d012      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80045f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045fa:	d81a      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d022      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004604:	d115      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3308      	adds	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fb30 	bl	8004c74 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800461a:	e015      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004620:	3328      	adds	r3, #40	@ 0x28
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fbd7 	bl	8004dd8 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004630:	e00a      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800463a:	bf00      	nop
 800463c:	e004      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004650:	4ba1      	ldr	r3, [pc, #644]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004660:	4a9d      	ldr	r2, [pc, #628]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004662:	430b      	orrs	r3, r1
 8004664:	6593      	str	r3, [r2, #88]	@ 0x58
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 0308 	and.w	r3, r2, #8
 800467c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004686:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d01e      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	3328      	adds	r3, #40	@ 0x28
 80046a4:	2102      	movs	r1, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb96 	bl	8004dd8 <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046b8:	4b87      	ldr	r3, [pc, #540]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c8:	4a83      	ldr	r2, [pc, #524]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f002 0310 	and.w	r3, r2, #16
 80046da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046de:	2300      	movs	r3, #0
 80046e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d01e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	3328      	adds	r3, #40	@ 0x28
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fb67 	bl	8004dd8 <RCCEx_PLL3_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004716:	4b70      	ldr	r3, [pc, #448]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004726:	4a6c      	ldr	r2, [pc, #432]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004728:	430b      	orrs	r3, r1
 800472a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004738:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004742:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d03e      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004758:	d022      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800475a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800475e:	d81b      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d00b      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800476a:	e015      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	3308      	adds	r3, #8
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa7d 	bl	8004c74 <RCCEx_PLL2_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004780:	e00f      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004786:	3328      	adds	r3, #40	@ 0x28
 8004788:	2102      	movs	r1, #2
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fb24 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80047a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047aa:	4b4b      	ldr	r3, [pc, #300]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047ba:	4a47      	ldr	r2, [pc, #284]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80047d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047d8:	2300      	movs	r3, #0
 80047da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047f2:	d01f      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80047f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047f8:	d818      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047fe:	d003      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004804:	d007      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004806:	e011      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004808:	4b33      	ldr	r3, [pc, #204]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	4a32      	ldr	r2, [pc, #200]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800480e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004814:	e00f      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fada 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800483e:	4b26      	ldr	r3, [pc, #152]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004842:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484e:	4a22      	ldr	r2, [pc, #136]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6553      	str	r3, [r2, #84]	@ 0x54
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800485e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800486a:	673b      	str	r3, [r7, #112]	@ 0x70
 800486c:	2300      	movs	r3, #0
 800486e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004870:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004874:	460b      	mov	r3, r1
 8004876:	4313      	orrs	r3, r2
 8004878:	d034      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d007      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800488a:	e011      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	4a11      	ldr	r2, [pc, #68]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004898:	e00e      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3308      	adds	r3, #8
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f9e6 	bl	8004c74 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ce:	4a02      	ldr	r2, [pc, #8]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048d4:	e006      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048f2:	2300      	movs	r3, #0
 80048f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d00c      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	3328      	adds	r3, #40	@ 0x28
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fa65 	bl	8004dd8 <RCCEx_PLL3_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004926:	663b      	str	r3, [r7, #96]	@ 0x60
 8004928:	2300      	movs	r3, #0
 800492a:	667b      	str	r3, [r7, #100]	@ 0x64
 800492c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d038      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800493e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004942:	d018      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004948:	d811      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800494a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494e:	d014      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004954:	d80b      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800495a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495e:	d106      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4bc3      	ldr	r3, [pc, #780]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	4ac2      	ldr	r2, [pc, #776]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004974:	e004      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800497e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004988:	4bb9      	ldr	r3, [pc, #740]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004998:	4ab5      	ldr	r2, [pc, #724]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499a:	430b      	orrs	r3, r1
 800499c:	6553      	str	r3, [r2, #84]	@ 0x54
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80049b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049b6:	2300      	movs	r3, #0
 80049b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049c4:	4baa      	ldr	r3, [pc, #680]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	4aa7      	ldr	r2, [pc, #668]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e6:	2300      	movs	r3, #0
 80049e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049ee:	460b      	mov	r3, r1
 80049f0:	4313      	orrs	r3, r2
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049f4:	4b9e      	ldr	r3, [pc, #632]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80049fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a04:	4a9a      	ldr	r2, [pc, #616]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004a16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a18:	2300      	movs	r3, #0
 8004a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a26:	4b92      	ldr	r3, [pc, #584]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a34:	4a8e      	ldr	r2, [pc, #568]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a36:	430b      	orrs	r3, r1
 8004a38:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a48:	2300      	movs	r3, #0
 8004a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a56:	4b86      	ldr	r3, [pc, #536]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	4a85      	ldr	r2, [pc, #532]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a60:	6113      	str	r3, [r2, #16]
 8004a62:	4b83      	ldr	r3, [pc, #524]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a64:	6919      	ldr	r1, [r3, #16]
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a6e:	4a80      	ldr	r2, [pc, #512]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a82:	2300      	movs	r3, #0
 8004a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a90:	4b77      	ldr	r3, [pc, #476]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9e:	4a74      	ldr	r2, [pc, #464]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad0:	4a67      	ldr	r2, [pc, #412]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f8ba 	bl	8004c74 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6239      	str	r1, [r7, #32]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d011      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	3308      	adds	r3, #8
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f89a 	bl	8004c74 <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	61b9      	str	r1, [r7, #24]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	3308      	adds	r3, #8
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f87a 	bl	8004c74 <RCCEx_PLL2_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6139      	str	r1, [r7, #16]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d011      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3328      	adds	r3, #40	@ 0x28
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f90c 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	2100      	movs	r1, #0
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d011      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf6:	3328      	adds	r3, #40	@ 0x28
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f8ec 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d011      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	3328      	adds	r3, #40	@ 0x28
 8004c38:	2102      	movs	r1, #2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f8cc 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004c56:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c70:	58024400 	.word	0x58024400

08004c74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c82:	4b53      	ldr	r3, [pc, #332]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d101      	bne.n	8004c92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e099      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c92:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9e:	f7fc f9c7 	bl	8001030 <HAL_GetTick>
 8004ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca4:	e008      	b.n	8004cb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ca6:	f7fc f9c3 	bl	8001030 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e086      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb8:	4b45      	ldr	r3, [pc, #276]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cc4:	4b42      	ldr	r3, [pc, #264]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	493f      	ldr	r1, [pc, #252]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	025b      	lsls	r3, r3, #9
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d08:	4931      	ldr	r1, [pc, #196]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d0e:	4b30      	ldr	r3, [pc, #192]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	492d      	ldr	r1, [pc, #180]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d20:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	f023 0220 	bic.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4928      	ldr	r1, [pc, #160]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d32:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	f023 0310 	bic.w	r3, r3, #16
 8004d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d3e:	4b24      	ldr	r3, [pc, #144]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <RCCEx_PLL2_Config+0x160>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	69d2      	ldr	r2, [r2, #28]
 8004d4a:	00d2      	lsls	r2, r2, #3
 8004d4c:	4920      	ldr	r1, [pc, #128]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d52:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	f043 0310 	orr.w	r3, r3, #16
 8004d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d70:	e00f      	b.n	8004d92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d78:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d84:	e005      	b.n	8004d92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d86:	4b12      	ldr	r3, [pc, #72]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fc f947 	bl	8001030 <HAL_GetTick>
 8004da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da4:	e008      	b.n	8004db8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004da6:	f7fc f943 	bl	8001030 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e006      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	ffff0007 	.word	0xffff0007

08004dd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004de6:	4b53      	ldr	r3, [pc, #332]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d101      	bne.n	8004df6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e099      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004df6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fc f915 	bl	8001030 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e0a:	f7fc f911 	bl	8001030 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e086      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e1c:	4b45      	ldr	r3, [pc, #276]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e28:	4b42      	ldr	r3, [pc, #264]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	051b      	lsls	r3, r3, #20
 8004e36:	493f      	ldr	r1, [pc, #252]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e6c:	4931      	ldr	r1, [pc, #196]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e72:	4b30      	ldr	r3, [pc, #192]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	492d      	ldr	r1, [pc, #180]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e84:	4b2b      	ldr	r3, [pc, #172]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4928      	ldr	r1, [pc, #160]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e96:	4b27      	ldr	r3, [pc, #156]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ea2:	4b24      	ldr	r3, [pc, #144]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <RCCEx_PLL3_Config+0x160>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	69d2      	ldr	r2, [r2, #28]
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	4920      	ldr	r1, [pc, #128]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	4a1e      	ldr	r2, [pc, #120]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	4a19      	ldr	r2, [pc, #100]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ed4:	e00f      	b.n	8004ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d106      	bne.n	8004eea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004edc:	4b15      	ldr	r3, [pc, #84]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ee8:	e005      	b.n	8004ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eea:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a11      	ldr	r2, [pc, #68]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fc f895 	bl	8001030 <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f08:	e008      	b.n	8004f1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f0a:	f7fc f891 	bl	8001030 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e006      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
 8004f38:	ffff0007 	.word	0xffff0007

08004f3c <__cvt>:
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	ed2d 8b02 	vpush	{d8}
 8004f42:	eeb0 8b40 	vmov.f64	d8, d0
 8004f46:	b085      	sub	sp, #20
 8004f48:	4617      	mov	r7, r2
 8004f4a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004f4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f4e:	ee18 2a90 	vmov	r2, s17
 8004f52:	f025 0520 	bic.w	r5, r5, #32
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	bfb6      	itet	lt
 8004f5a:	222d      	movlt	r2, #45	@ 0x2d
 8004f5c:	2200      	movge	r2, #0
 8004f5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004f62:	2d46      	cmp	r5, #70	@ 0x46
 8004f64:	460c      	mov	r4, r1
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	d004      	beq.n	8004f74 <__cvt+0x38>
 8004f6a:	2d45      	cmp	r5, #69	@ 0x45
 8004f6c:	d100      	bne.n	8004f70 <__cvt+0x34>
 8004f6e:	3401      	adds	r4, #1
 8004f70:	2102      	movs	r1, #2
 8004f72:	e000      	b.n	8004f76 <__cvt+0x3a>
 8004f74:	2103      	movs	r1, #3
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	ab02      	add	r3, sp, #8
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4633      	mov	r3, r6
 8004f82:	eeb0 0b48 	vmov.f64	d0, d8
 8004f86:	f000 ff1b 	bl	8005dc0 <_dtoa_r>
 8004f8a:	2d47      	cmp	r5, #71	@ 0x47
 8004f8c:	d114      	bne.n	8004fb8 <__cvt+0x7c>
 8004f8e:	07fb      	lsls	r3, r7, #31
 8004f90:	d50a      	bpl.n	8004fa8 <__cvt+0x6c>
 8004f92:	1902      	adds	r2, r0, r4
 8004f94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9c:	bf08      	it	eq
 8004f9e:	9203      	streq	r2, [sp, #12]
 8004fa0:	2130      	movs	r1, #48	@ 0x30
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d319      	bcc.n	8004fdc <__cvt+0xa0>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fac:	1a1b      	subs	r3, r3, r0
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	b005      	add	sp, #20
 8004fb2:	ecbd 8b02 	vpop	{d8}
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb8:	2d46      	cmp	r5, #70	@ 0x46
 8004fba:	eb00 0204 	add.w	r2, r0, r4
 8004fbe:	d1e9      	bne.n	8004f94 <__cvt+0x58>
 8004fc0:	7803      	ldrb	r3, [r0, #0]
 8004fc2:	2b30      	cmp	r3, #48	@ 0x30
 8004fc4:	d107      	bne.n	8004fd6 <__cvt+0x9a>
 8004fc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	bf1c      	itt	ne
 8004fd0:	f1c4 0401 	rsbne	r4, r4, #1
 8004fd4:	6034      	strne	r4, [r6, #0]
 8004fd6:	6833      	ldr	r3, [r6, #0]
 8004fd8:	441a      	add	r2, r3
 8004fda:	e7db      	b.n	8004f94 <__cvt+0x58>
 8004fdc:	1c5c      	adds	r4, r3, #1
 8004fde:	9403      	str	r4, [sp, #12]
 8004fe0:	7019      	strb	r1, [r3, #0]
 8004fe2:	e7de      	b.n	8004fa2 <__cvt+0x66>

08004fe4 <__exponent>:
 8004fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	bfba      	itte	lt
 8004fea:	4249      	neglt	r1, r1
 8004fec:	232d      	movlt	r3, #45	@ 0x2d
 8004fee:	232b      	movge	r3, #43	@ 0x2b
 8004ff0:	2909      	cmp	r1, #9
 8004ff2:	7002      	strb	r2, [r0, #0]
 8004ff4:	7043      	strb	r3, [r0, #1]
 8004ff6:	dd29      	ble.n	800504c <__exponent+0x68>
 8004ff8:	f10d 0307 	add.w	r3, sp, #7
 8004ffc:	461d      	mov	r5, r3
 8004ffe:	270a      	movs	r7, #10
 8005000:	461a      	mov	r2, r3
 8005002:	fbb1 f6f7 	udiv	r6, r1, r7
 8005006:	fb07 1416 	mls	r4, r7, r6, r1
 800500a:	3430      	adds	r4, #48	@ 0x30
 800500c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005010:	460c      	mov	r4, r1
 8005012:	2c63      	cmp	r4, #99	@ 0x63
 8005014:	f103 33ff 	add.w	r3, r3, #4294967295
 8005018:	4631      	mov	r1, r6
 800501a:	dcf1      	bgt.n	8005000 <__exponent+0x1c>
 800501c:	3130      	adds	r1, #48	@ 0x30
 800501e:	1e94      	subs	r4, r2, #2
 8005020:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005024:	1c41      	adds	r1, r0, #1
 8005026:	4623      	mov	r3, r4
 8005028:	42ab      	cmp	r3, r5
 800502a:	d30a      	bcc.n	8005042 <__exponent+0x5e>
 800502c:	f10d 0309 	add.w	r3, sp, #9
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	42ac      	cmp	r4, r5
 8005034:	bf88      	it	hi
 8005036:	2300      	movhi	r3, #0
 8005038:	3302      	adds	r3, #2
 800503a:	4403      	add	r3, r0
 800503c:	1a18      	subs	r0, r3, r0
 800503e:	b003      	add	sp, #12
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005046:	f801 6f01 	strb.w	r6, [r1, #1]!
 800504a:	e7ed      	b.n	8005028 <__exponent+0x44>
 800504c:	2330      	movs	r3, #48	@ 0x30
 800504e:	3130      	adds	r1, #48	@ 0x30
 8005050:	7083      	strb	r3, [r0, #2]
 8005052:	70c1      	strb	r1, [r0, #3]
 8005054:	1d03      	adds	r3, r0, #4
 8005056:	e7f1      	b.n	800503c <__exponent+0x58>

08005058 <_printf_float>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	b08d      	sub	sp, #52	@ 0x34
 800505e:	460c      	mov	r4, r1
 8005060:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005064:	4616      	mov	r6, r2
 8005066:	461f      	mov	r7, r3
 8005068:	4605      	mov	r5, r0
 800506a:	f000 fd9b 	bl	8005ba4 <_localeconv_r>
 800506e:	f8d0 b000 	ldr.w	fp, [r0]
 8005072:	4658      	mov	r0, fp
 8005074:	f7fb f984 	bl	8000380 <strlen>
 8005078:	2300      	movs	r3, #0
 800507a:	930a      	str	r3, [sp, #40]	@ 0x28
 800507c:	f8d8 3000 	ldr.w	r3, [r8]
 8005080:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	9005      	str	r0, [sp, #20]
 8005088:	3307      	adds	r3, #7
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	f103 0108 	add.w	r1, r3, #8
 8005092:	f8c8 1000 	str.w	r1, [r8]
 8005096:	ed93 0b00 	vldr	d0, [r3]
 800509a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80052f8 <_printf_float+0x2a0>
 800509e:	eeb0 7bc0 	vabs.f64	d7, d0
 80050a2:	eeb4 7b46 	vcmp.f64	d7, d6
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80050ae:	dd24      	ble.n	80050fa <_printf_float+0xa2>
 80050b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d502      	bpl.n	80050c0 <_printf_float+0x68>
 80050ba:	232d      	movs	r3, #45	@ 0x2d
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c0:	498f      	ldr	r1, [pc, #572]	@ (8005300 <_printf_float+0x2a8>)
 80050c2:	4b90      	ldr	r3, [pc, #576]	@ (8005304 <_printf_float+0x2ac>)
 80050c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80050c8:	bf8c      	ite	hi
 80050ca:	4688      	movhi	r8, r1
 80050cc:	4698      	movls	r8, r3
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	2303      	movs	r3, #3
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	f04f 0a00 	mov.w	sl, #0
 80050dc:	9700      	str	r7, [sp, #0]
 80050de:	4633      	mov	r3, r6
 80050e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f9d1 	bl	800548c <_printf_common>
 80050ea:	3001      	adds	r0, #1
 80050ec:	f040 8089 	bne.w	8005202 <_printf_float+0x1aa>
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	b00d      	add	sp, #52	@ 0x34
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005102:	d709      	bvc.n	8005118 <_printf_float+0xc0>
 8005104:	ee10 3a90 	vmov	r3, s1
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfbc      	itt	lt
 800510c:	232d      	movlt	r3, #45	@ 0x2d
 800510e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005112:	497d      	ldr	r1, [pc, #500]	@ (8005308 <_printf_float+0x2b0>)
 8005114:	4b7d      	ldr	r3, [pc, #500]	@ (800530c <_printf_float+0x2b4>)
 8005116:	e7d5      	b.n	80050c4 <_printf_float+0x6c>
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005120:	d139      	bne.n	8005196 <_printf_float+0x13e>
 8005122:	2306      	movs	r3, #6
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800512a:	2300      	movs	r3, #0
 800512c:	6022      	str	r2, [r4, #0]
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	ab0a      	add	r3, sp, #40	@ 0x28
 8005132:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005136:	ab09      	add	r3, sp, #36	@ 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6861      	ldr	r1, [r4, #4]
 800513c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005140:	4628      	mov	r0, r5
 8005142:	f7ff fefb 	bl	8004f3c <__cvt>
 8005146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800514a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800514c:	4680      	mov	r8, r0
 800514e:	d129      	bne.n	80051a4 <_printf_float+0x14c>
 8005150:	1cc8      	adds	r0, r1, #3
 8005152:	db02      	blt.n	800515a <_printf_float+0x102>
 8005154:	6863      	ldr	r3, [r4, #4]
 8005156:	4299      	cmp	r1, r3
 8005158:	dd41      	ble.n	80051de <_printf_float+0x186>
 800515a:	f1a9 0902 	sub.w	r9, r9, #2
 800515e:	fa5f f989 	uxtb.w	r9, r9
 8005162:	3901      	subs	r1, #1
 8005164:	464a      	mov	r2, r9
 8005166:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800516a:	9109      	str	r1, [sp, #36]	@ 0x24
 800516c:	f7ff ff3a 	bl	8004fe4 <__exponent>
 8005170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005172:	1813      	adds	r3, r2, r0
 8005174:	2a01      	cmp	r2, #1
 8005176:	4682      	mov	sl, r0
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	dc02      	bgt.n	8005182 <_printf_float+0x12a>
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	07d2      	lsls	r2, r2, #31
 8005180:	d501      	bpl.n	8005186 <_printf_float+0x12e>
 8005182:	3301      	adds	r3, #1
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0a6      	beq.n	80050dc <_printf_float+0x84>
 800518e:	232d      	movs	r3, #45	@ 0x2d
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005194:	e7a2      	b.n	80050dc <_printf_float+0x84>
 8005196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800519a:	d1c4      	bne.n	8005126 <_printf_float+0xce>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1c2      	bne.n	8005126 <_printf_float+0xce>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e7bf      	b.n	8005124 <_printf_float+0xcc>
 80051a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80051a8:	d9db      	bls.n	8005162 <_printf_float+0x10a>
 80051aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80051ae:	d118      	bne.n	80051e2 <_printf_float+0x18a>
 80051b0:	2900      	cmp	r1, #0
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	dd0b      	ble.n	80051ce <_printf_float+0x176>
 80051b6:	6121      	str	r1, [r4, #16]
 80051b8:	b913      	cbnz	r3, 80051c0 <_printf_float+0x168>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	07d0      	lsls	r0, r2, #31
 80051be:	d502      	bpl.n	80051c6 <_printf_float+0x16e>
 80051c0:	3301      	adds	r3, #1
 80051c2:	440b      	add	r3, r1
 80051c4:	6123      	str	r3, [r4, #16]
 80051c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051c8:	f04f 0a00 	mov.w	sl, #0
 80051cc:	e7db      	b.n	8005186 <_printf_float+0x12e>
 80051ce:	b913      	cbnz	r3, 80051d6 <_printf_float+0x17e>
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	07d2      	lsls	r2, r2, #31
 80051d4:	d501      	bpl.n	80051da <_printf_float+0x182>
 80051d6:	3302      	adds	r3, #2
 80051d8:	e7f4      	b.n	80051c4 <_printf_float+0x16c>
 80051da:	2301      	movs	r3, #1
 80051dc:	e7f2      	b.n	80051c4 <_printf_float+0x16c>
 80051de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80051e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e4:	4299      	cmp	r1, r3
 80051e6:	db05      	blt.n	80051f4 <_printf_float+0x19c>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	6121      	str	r1, [r4, #16]
 80051ec:	07d8      	lsls	r0, r3, #31
 80051ee:	d5ea      	bpl.n	80051c6 <_printf_float+0x16e>
 80051f0:	1c4b      	adds	r3, r1, #1
 80051f2:	e7e7      	b.n	80051c4 <_printf_float+0x16c>
 80051f4:	2900      	cmp	r1, #0
 80051f6:	bfd4      	ite	le
 80051f8:	f1c1 0202 	rsble	r2, r1, #2
 80051fc:	2201      	movgt	r2, #1
 80051fe:	4413      	add	r3, r2
 8005200:	e7e0      	b.n	80051c4 <_printf_float+0x16c>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	055a      	lsls	r2, r3, #21
 8005206:	d407      	bmi.n	8005218 <_printf_float+0x1c0>
 8005208:	6923      	ldr	r3, [r4, #16]
 800520a:	4642      	mov	r2, r8
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	d12a      	bne.n	800526c <_printf_float+0x214>
 8005216:	e76b      	b.n	80050f0 <_printf_float+0x98>
 8005218:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800521c:	f240 80e0 	bls.w	80053e0 <_printf_float+0x388>
 8005220:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	d133      	bne.n	8005296 <_printf_float+0x23e>
 800522e:	4a38      	ldr	r2, [pc, #224]	@ (8005310 <_printf_float+0x2b8>)
 8005230:	2301      	movs	r3, #1
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	f43f af59 	beq.w	80050f0 <_printf_float+0x98>
 800523e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005242:	4543      	cmp	r3, r8
 8005244:	db02      	blt.n	800524c <_printf_float+0x1f4>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	07d8      	lsls	r0, r3, #31
 800524a:	d50f      	bpl.n	800526c <_printf_float+0x214>
 800524c:	9b05      	ldr	r3, [sp, #20]
 800524e:	465a      	mov	r2, fp
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f af4a 	beq.w	80050f0 <_printf_float+0x98>
 800525c:	f04f 0900 	mov.w	r9, #0
 8005260:	f108 38ff 	add.w	r8, r8, #4294967295
 8005264:	f104 0a1a 	add.w	sl, r4, #26
 8005268:	45c8      	cmp	r8, r9
 800526a:	dc09      	bgt.n	8005280 <_printf_float+0x228>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	079b      	lsls	r3, r3, #30
 8005270:	f100 8107 	bmi.w	8005482 <_printf_float+0x42a>
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005278:	4298      	cmp	r0, r3
 800527a:	bfb8      	it	lt
 800527c:	4618      	movlt	r0, r3
 800527e:	e739      	b.n	80050f4 <_printf_float+0x9c>
 8005280:	2301      	movs	r3, #1
 8005282:	4652      	mov	r2, sl
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af30 	beq.w	80050f0 <_printf_float+0x98>
 8005290:	f109 0901 	add.w	r9, r9, #1
 8005294:	e7e8      	b.n	8005268 <_printf_float+0x210>
 8005296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	dc3b      	bgt.n	8005314 <_printf_float+0x2bc>
 800529c:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <_printf_float+0x2b8>)
 800529e:	2301      	movs	r3, #1
 80052a0:	4631      	mov	r1, r6
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	f43f af22 	beq.w	80050f0 <_printf_float+0x98>
 80052ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052b0:	ea59 0303 	orrs.w	r3, r9, r3
 80052b4:	d102      	bne.n	80052bc <_printf_float+0x264>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	07d9      	lsls	r1, r3, #31
 80052ba:	d5d7      	bpl.n	800526c <_printf_float+0x214>
 80052bc:	9b05      	ldr	r3, [sp, #20]
 80052be:	465a      	mov	r2, fp
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af12 	beq.w	80050f0 <_printf_float+0x98>
 80052cc:	f04f 0a00 	mov.w	sl, #0
 80052d0:	f104 0b1a 	add.w	fp, r4, #26
 80052d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d6:	425b      	negs	r3, r3
 80052d8:	4553      	cmp	r3, sl
 80052da:	dc01      	bgt.n	80052e0 <_printf_float+0x288>
 80052dc:	464b      	mov	r3, r9
 80052de:	e794      	b.n	800520a <_printf_float+0x1b2>
 80052e0:	2301      	movs	r3, #1
 80052e2:	465a      	mov	r2, fp
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f af00 	beq.w	80050f0 <_printf_float+0x98>
 80052f0:	f10a 0a01 	add.w	sl, sl, #1
 80052f4:	e7ee      	b.n	80052d4 <_printf_float+0x27c>
 80052f6:	bf00      	nop
 80052f8:	ffffffff 	.word	0xffffffff
 80052fc:	7fefffff 	.word	0x7fefffff
 8005300:	080078fc 	.word	0x080078fc
 8005304:	080078f8 	.word	0x080078f8
 8005308:	08007904 	.word	0x08007904
 800530c:	08007900 	.word	0x08007900
 8005310:	08007908 	.word	0x08007908
 8005314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800531a:	4553      	cmp	r3, sl
 800531c:	bfa8      	it	ge
 800531e:	4653      	movge	r3, sl
 8005320:	2b00      	cmp	r3, #0
 8005322:	4699      	mov	r9, r3
 8005324:	dc37      	bgt.n	8005396 <_printf_float+0x33e>
 8005326:	2300      	movs	r3, #0
 8005328:	9307      	str	r3, [sp, #28]
 800532a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800532e:	f104 021a 	add.w	r2, r4, #26
 8005332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005334:	9907      	ldr	r1, [sp, #28]
 8005336:	9306      	str	r3, [sp, #24]
 8005338:	eba3 0309 	sub.w	r3, r3, r9
 800533c:	428b      	cmp	r3, r1
 800533e:	dc31      	bgt.n	80053a4 <_printf_float+0x34c>
 8005340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005342:	459a      	cmp	sl, r3
 8005344:	dc3b      	bgt.n	80053be <_printf_float+0x366>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	07da      	lsls	r2, r3, #31
 800534a:	d438      	bmi.n	80053be <_printf_float+0x366>
 800534c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800534e:	ebaa 0903 	sub.w	r9, sl, r3
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	ebaa 0303 	sub.w	r3, sl, r3
 8005358:	4599      	cmp	r9, r3
 800535a:	bfa8      	it	ge
 800535c:	4699      	movge	r9, r3
 800535e:	f1b9 0f00 	cmp.w	r9, #0
 8005362:	dc34      	bgt.n	80053ce <_printf_float+0x376>
 8005364:	f04f 0800 	mov.w	r8, #0
 8005368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800536c:	f104 0b1a 	add.w	fp, r4, #26
 8005370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005372:	ebaa 0303 	sub.w	r3, sl, r3
 8005376:	eba3 0309 	sub.w	r3, r3, r9
 800537a:	4543      	cmp	r3, r8
 800537c:	f77f af76 	ble.w	800526c <_printf_float+0x214>
 8005380:	2301      	movs	r3, #1
 8005382:	465a      	mov	r2, fp
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f aeb0 	beq.w	80050f0 <_printf_float+0x98>
 8005390:	f108 0801 	add.w	r8, r8, #1
 8005394:	e7ec      	b.n	8005370 <_printf_float+0x318>
 8005396:	4642      	mov	r2, r8
 8005398:	4631      	mov	r1, r6
 800539a:	4628      	mov	r0, r5
 800539c:	47b8      	blx	r7
 800539e:	3001      	adds	r0, #1
 80053a0:	d1c1      	bne.n	8005326 <_printf_float+0x2ce>
 80053a2:	e6a5      	b.n	80050f0 <_printf_float+0x98>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	9206      	str	r2, [sp, #24]
 80053ac:	47b8      	blx	r7
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f ae9e 	beq.w	80050f0 <_printf_float+0x98>
 80053b4:	9b07      	ldr	r3, [sp, #28]
 80053b6:	9a06      	ldr	r2, [sp, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	9307      	str	r3, [sp, #28]
 80053bc:	e7b9      	b.n	8005332 <_printf_float+0x2da>
 80053be:	9b05      	ldr	r3, [sp, #20]
 80053c0:	465a      	mov	r2, fp
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1bf      	bne.n	800534c <_printf_float+0x2f4>
 80053cc:	e690      	b.n	80050f0 <_printf_float+0x98>
 80053ce:	9a06      	ldr	r2, [sp, #24]
 80053d0:	464b      	mov	r3, r9
 80053d2:	4442      	add	r2, r8
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b8      	blx	r7
 80053da:	3001      	adds	r0, #1
 80053dc:	d1c2      	bne.n	8005364 <_printf_float+0x30c>
 80053de:	e687      	b.n	80050f0 <_printf_float+0x98>
 80053e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80053e4:	f1b9 0f01 	cmp.w	r9, #1
 80053e8:	dc01      	bgt.n	80053ee <_printf_float+0x396>
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	d536      	bpl.n	800545c <_printf_float+0x404>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4642      	mov	r2, r8
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	f43f ae79 	beq.w	80050f0 <_printf_float+0x98>
 80053fe:	9b05      	ldr	r3, [sp, #20]
 8005400:	465a      	mov	r2, fp
 8005402:	4631      	mov	r1, r6
 8005404:	4628      	mov	r0, r5
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f ae71 	beq.w	80050f0 <_printf_float+0x98>
 800540e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005412:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	f109 39ff 	add.w	r9, r9, #4294967295
 800541e:	d018      	beq.n	8005452 <_printf_float+0x3fa>
 8005420:	464b      	mov	r3, r9
 8005422:	f108 0201 	add.w	r2, r8, #1
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	d10c      	bne.n	800544a <_printf_float+0x3f2>
 8005430:	e65e      	b.n	80050f0 <_printf_float+0x98>
 8005432:	2301      	movs	r3, #1
 8005434:	465a      	mov	r2, fp
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f ae57 	beq.w	80050f0 <_printf_float+0x98>
 8005442:	f108 0801 	add.w	r8, r8, #1
 8005446:	45c8      	cmp	r8, r9
 8005448:	dbf3      	blt.n	8005432 <_printf_float+0x3da>
 800544a:	4653      	mov	r3, sl
 800544c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005450:	e6dc      	b.n	800520c <_printf_float+0x1b4>
 8005452:	f04f 0800 	mov.w	r8, #0
 8005456:	f104 0b1a 	add.w	fp, r4, #26
 800545a:	e7f4      	b.n	8005446 <_printf_float+0x3ee>
 800545c:	2301      	movs	r3, #1
 800545e:	4642      	mov	r2, r8
 8005460:	e7e1      	b.n	8005426 <_printf_float+0x3ce>
 8005462:	2301      	movs	r3, #1
 8005464:	464a      	mov	r2, r9
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	f43f ae3f 	beq.w	80050f0 <_printf_float+0x98>
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800547a:	1a5b      	subs	r3, r3, r1
 800547c:	4543      	cmp	r3, r8
 800547e:	dcf0      	bgt.n	8005462 <_printf_float+0x40a>
 8005480:	e6f8      	b.n	8005274 <_printf_float+0x21c>
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	f104 0919 	add.w	r9, r4, #25
 800548a:	e7f4      	b.n	8005476 <_printf_float+0x41e>

0800548c <_printf_common>:
 800548c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	4616      	mov	r6, r2
 8005492:	4698      	mov	r8, r3
 8005494:	688a      	ldr	r2, [r1, #8]
 8005496:	690b      	ldr	r3, [r1, #16]
 8005498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800549c:	4293      	cmp	r3, r2
 800549e:	bfb8      	it	lt
 80054a0:	4613      	movlt	r3, r2
 80054a2:	6033      	str	r3, [r6, #0]
 80054a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a8:	4607      	mov	r7, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	b10a      	cbz	r2, 80054b2 <_printf_common+0x26>
 80054ae:	3301      	adds	r3, #1
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	0699      	lsls	r1, r3, #26
 80054b6:	bf42      	ittt	mi
 80054b8:	6833      	ldrmi	r3, [r6, #0]
 80054ba:	3302      	addmi	r3, #2
 80054bc:	6033      	strmi	r3, [r6, #0]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	f015 0506 	ands.w	r5, r5, #6
 80054c4:	d106      	bne.n	80054d4 <_printf_common+0x48>
 80054c6:	f104 0a19 	add.w	sl, r4, #25
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	6832      	ldr	r2, [r6, #0]
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	42ab      	cmp	r3, r5
 80054d2:	dc26      	bgt.n	8005522 <_printf_common+0x96>
 80054d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	3b00      	subs	r3, #0
 80054dc:	bf18      	it	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	0692      	lsls	r2, r2, #26
 80054e2:	d42b      	bmi.n	800553c <_printf_common+0xb0>
 80054e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e8:	4641      	mov	r1, r8
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c8      	blx	r9
 80054ee:	3001      	adds	r0, #1
 80054f0:	d01e      	beq.n	8005530 <_printf_common+0xa4>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	f003 0306 	and.w	r3, r3, #6
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	bf02      	ittt	eq
 80054fe:	68e5      	ldreq	r5, [r4, #12]
 8005500:	6833      	ldreq	r3, [r6, #0]
 8005502:	1aed      	subeq	r5, r5, r3
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	bf0c      	ite	eq
 8005508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800550c:	2500      	movne	r5, #0
 800550e:	4293      	cmp	r3, r2
 8005510:	bfc4      	itt	gt
 8005512:	1a9b      	subgt	r3, r3, r2
 8005514:	18ed      	addgt	r5, r5, r3
 8005516:	2600      	movs	r6, #0
 8005518:	341a      	adds	r4, #26
 800551a:	42b5      	cmp	r5, r6
 800551c:	d11a      	bne.n	8005554 <_printf_common+0xc8>
 800551e:	2000      	movs	r0, #0
 8005520:	e008      	b.n	8005534 <_printf_common+0xa8>
 8005522:	2301      	movs	r3, #1
 8005524:	4652      	mov	r2, sl
 8005526:	4641      	mov	r1, r8
 8005528:	4638      	mov	r0, r7
 800552a:	47c8      	blx	r9
 800552c:	3001      	adds	r0, #1
 800552e:	d103      	bne.n	8005538 <_printf_common+0xac>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005538:	3501      	adds	r5, #1
 800553a:	e7c6      	b.n	80054ca <_printf_common+0x3e>
 800553c:	18e1      	adds	r1, r4, r3
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	2030      	movs	r0, #48	@ 0x30
 8005542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005546:	4422      	add	r2, r4
 8005548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800554c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005550:	3302      	adds	r3, #2
 8005552:	e7c7      	b.n	80054e4 <_printf_common+0x58>
 8005554:	2301      	movs	r3, #1
 8005556:	4622      	mov	r2, r4
 8005558:	4641      	mov	r1, r8
 800555a:	4638      	mov	r0, r7
 800555c:	47c8      	blx	r9
 800555e:	3001      	adds	r0, #1
 8005560:	d0e6      	beq.n	8005530 <_printf_common+0xa4>
 8005562:	3601      	adds	r6, #1
 8005564:	e7d9      	b.n	800551a <_printf_common+0x8e>
	...

08005568 <_printf_i>:
 8005568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	7e0f      	ldrb	r7, [r1, #24]
 800556e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005570:	2f78      	cmp	r7, #120	@ 0x78
 8005572:	4691      	mov	r9, r2
 8005574:	4680      	mov	r8, r0
 8005576:	460c      	mov	r4, r1
 8005578:	469a      	mov	sl, r3
 800557a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800557e:	d807      	bhi.n	8005590 <_printf_i+0x28>
 8005580:	2f62      	cmp	r7, #98	@ 0x62
 8005582:	d80a      	bhi.n	800559a <_printf_i+0x32>
 8005584:	2f00      	cmp	r7, #0
 8005586:	f000 80d1 	beq.w	800572c <_printf_i+0x1c4>
 800558a:	2f58      	cmp	r7, #88	@ 0x58
 800558c:	f000 80b8 	beq.w	8005700 <_printf_i+0x198>
 8005590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005598:	e03a      	b.n	8005610 <_printf_i+0xa8>
 800559a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800559e:	2b15      	cmp	r3, #21
 80055a0:	d8f6      	bhi.n	8005590 <_printf_i+0x28>
 80055a2:	a101      	add	r1, pc, #4	@ (adr r1, 80055a8 <_printf_i+0x40>)
 80055a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a8:	08005601 	.word	0x08005601
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005591 	.word	0x08005591
 80055b4:	08005591 	.word	0x08005591
 80055b8:	08005591 	.word	0x08005591
 80055bc:	08005591 	.word	0x08005591
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005591 	.word	0x08005591
 80055c8:	08005591 	.word	0x08005591
 80055cc:	08005591 	.word	0x08005591
 80055d0:	08005591 	.word	0x08005591
 80055d4:	08005713 	.word	0x08005713
 80055d8:	0800563f 	.word	0x0800563f
 80055dc:	080056cd 	.word	0x080056cd
 80055e0:	08005591 	.word	0x08005591
 80055e4:	08005591 	.word	0x08005591
 80055e8:	08005735 	.word	0x08005735
 80055ec:	08005591 	.word	0x08005591
 80055f0:	0800563f 	.word	0x0800563f
 80055f4:	08005591 	.word	0x08005591
 80055f8:	08005591 	.word	0x08005591
 80055fc:	080056d5 	.word	0x080056d5
 8005600:	6833      	ldr	r3, [r6, #0]
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6032      	str	r2, [r6, #0]
 8005608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800560c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005610:	2301      	movs	r3, #1
 8005612:	e09c      	b.n	800574e <_printf_i+0x1e6>
 8005614:	6833      	ldr	r3, [r6, #0]
 8005616:	6820      	ldr	r0, [r4, #0]
 8005618:	1d19      	adds	r1, r3, #4
 800561a:	6031      	str	r1, [r6, #0]
 800561c:	0606      	lsls	r6, r0, #24
 800561e:	d501      	bpl.n	8005624 <_printf_i+0xbc>
 8005620:	681d      	ldr	r5, [r3, #0]
 8005622:	e003      	b.n	800562c <_printf_i+0xc4>
 8005624:	0645      	lsls	r5, r0, #25
 8005626:	d5fb      	bpl.n	8005620 <_printf_i+0xb8>
 8005628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800562c:	2d00      	cmp	r5, #0
 800562e:	da03      	bge.n	8005638 <_printf_i+0xd0>
 8005630:	232d      	movs	r3, #45	@ 0x2d
 8005632:	426d      	negs	r5, r5
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005638:	4858      	ldr	r0, [pc, #352]	@ (800579c <_printf_i+0x234>)
 800563a:	230a      	movs	r3, #10
 800563c:	e011      	b.n	8005662 <_printf_i+0xfa>
 800563e:	6821      	ldr	r1, [r4, #0]
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	0608      	lsls	r0, r1, #24
 8005644:	f853 5b04 	ldr.w	r5, [r3], #4
 8005648:	d402      	bmi.n	8005650 <_printf_i+0xe8>
 800564a:	0649      	lsls	r1, r1, #25
 800564c:	bf48      	it	mi
 800564e:	b2ad      	uxthmi	r5, r5
 8005650:	2f6f      	cmp	r7, #111	@ 0x6f
 8005652:	4852      	ldr	r0, [pc, #328]	@ (800579c <_printf_i+0x234>)
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	bf14      	ite	ne
 8005658:	230a      	movne	r3, #10
 800565a:	2308      	moveq	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005662:	6866      	ldr	r6, [r4, #4]
 8005664:	60a6      	str	r6, [r4, #8]
 8005666:	2e00      	cmp	r6, #0
 8005668:	db05      	blt.n	8005676 <_printf_i+0x10e>
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	432e      	orrs	r6, r5
 800566e:	f021 0104 	bic.w	r1, r1, #4
 8005672:	6021      	str	r1, [r4, #0]
 8005674:	d04b      	beq.n	800570e <_printf_i+0x1a6>
 8005676:	4616      	mov	r6, r2
 8005678:	fbb5 f1f3 	udiv	r1, r5, r3
 800567c:	fb03 5711 	mls	r7, r3, r1, r5
 8005680:	5dc7      	ldrb	r7, [r0, r7]
 8005682:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005686:	462f      	mov	r7, r5
 8005688:	42bb      	cmp	r3, r7
 800568a:	460d      	mov	r5, r1
 800568c:	d9f4      	bls.n	8005678 <_printf_i+0x110>
 800568e:	2b08      	cmp	r3, #8
 8005690:	d10b      	bne.n	80056aa <_printf_i+0x142>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	07df      	lsls	r7, r3, #31
 8005696:	d508      	bpl.n	80056aa <_printf_i+0x142>
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	6861      	ldr	r1, [r4, #4]
 800569c:	4299      	cmp	r1, r3
 800569e:	bfde      	ittt	le
 80056a0:	2330      	movle	r3, #48	@ 0x30
 80056a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056aa:	1b92      	subs	r2, r2, r6
 80056ac:	6122      	str	r2, [r4, #16]
 80056ae:	f8cd a000 	str.w	sl, [sp]
 80056b2:	464b      	mov	r3, r9
 80056b4:	aa03      	add	r2, sp, #12
 80056b6:	4621      	mov	r1, r4
 80056b8:	4640      	mov	r0, r8
 80056ba:	f7ff fee7 	bl	800548c <_printf_common>
 80056be:	3001      	adds	r0, #1
 80056c0:	d14a      	bne.n	8005758 <_printf_i+0x1f0>
 80056c2:	f04f 30ff 	mov.w	r0, #4294967295
 80056c6:	b004      	add	sp, #16
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	f043 0320 	orr.w	r3, r3, #32
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	4832      	ldr	r0, [pc, #200]	@ (80057a0 <_printf_i+0x238>)
 80056d6:	2778      	movs	r7, #120	@ 0x78
 80056d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	6831      	ldr	r1, [r6, #0]
 80056e0:	061f      	lsls	r7, r3, #24
 80056e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e6:	d402      	bmi.n	80056ee <_printf_i+0x186>
 80056e8:	065f      	lsls	r7, r3, #25
 80056ea:	bf48      	it	mi
 80056ec:	b2ad      	uxthmi	r5, r5
 80056ee:	6031      	str	r1, [r6, #0]
 80056f0:	07d9      	lsls	r1, r3, #31
 80056f2:	bf44      	itt	mi
 80056f4:	f043 0320 	orrmi.w	r3, r3, #32
 80056f8:	6023      	strmi	r3, [r4, #0]
 80056fa:	b11d      	cbz	r5, 8005704 <_printf_i+0x19c>
 80056fc:	2310      	movs	r3, #16
 80056fe:	e7ad      	b.n	800565c <_printf_i+0xf4>
 8005700:	4826      	ldr	r0, [pc, #152]	@ (800579c <_printf_i+0x234>)
 8005702:	e7e9      	b.n	80056d8 <_printf_i+0x170>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	f023 0320 	bic.w	r3, r3, #32
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	e7f6      	b.n	80056fc <_printf_i+0x194>
 800570e:	4616      	mov	r6, r2
 8005710:	e7bd      	b.n	800568e <_printf_i+0x126>
 8005712:	6833      	ldr	r3, [r6, #0]
 8005714:	6825      	ldr	r5, [r4, #0]
 8005716:	6961      	ldr	r1, [r4, #20]
 8005718:	1d18      	adds	r0, r3, #4
 800571a:	6030      	str	r0, [r6, #0]
 800571c:	062e      	lsls	r6, r5, #24
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	d501      	bpl.n	8005726 <_printf_i+0x1be>
 8005722:	6019      	str	r1, [r3, #0]
 8005724:	e002      	b.n	800572c <_printf_i+0x1c4>
 8005726:	0668      	lsls	r0, r5, #25
 8005728:	d5fb      	bpl.n	8005722 <_printf_i+0x1ba>
 800572a:	8019      	strh	r1, [r3, #0]
 800572c:	2300      	movs	r3, #0
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	4616      	mov	r6, r2
 8005732:	e7bc      	b.n	80056ae <_printf_i+0x146>
 8005734:	6833      	ldr	r3, [r6, #0]
 8005736:	1d1a      	adds	r2, r3, #4
 8005738:	6032      	str	r2, [r6, #0]
 800573a:	681e      	ldr	r6, [r3, #0]
 800573c:	6862      	ldr	r2, [r4, #4]
 800573e:	2100      	movs	r1, #0
 8005740:	4630      	mov	r0, r6
 8005742:	f7fa fdcd 	bl	80002e0 <memchr>
 8005746:	b108      	cbz	r0, 800574c <_printf_i+0x1e4>
 8005748:	1b80      	subs	r0, r0, r6
 800574a:	6060      	str	r0, [r4, #4]
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	2300      	movs	r3, #0
 8005752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005756:	e7aa      	b.n	80056ae <_printf_i+0x146>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	4632      	mov	r2, r6
 800575c:	4649      	mov	r1, r9
 800575e:	4640      	mov	r0, r8
 8005760:	47d0      	blx	sl
 8005762:	3001      	adds	r0, #1
 8005764:	d0ad      	beq.n	80056c2 <_printf_i+0x15a>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	079b      	lsls	r3, r3, #30
 800576a:	d413      	bmi.n	8005794 <_printf_i+0x22c>
 800576c:	68e0      	ldr	r0, [r4, #12]
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	4298      	cmp	r0, r3
 8005772:	bfb8      	it	lt
 8005774:	4618      	movlt	r0, r3
 8005776:	e7a6      	b.n	80056c6 <_printf_i+0x15e>
 8005778:	2301      	movs	r3, #1
 800577a:	4632      	mov	r2, r6
 800577c:	4649      	mov	r1, r9
 800577e:	4640      	mov	r0, r8
 8005780:	47d0      	blx	sl
 8005782:	3001      	adds	r0, #1
 8005784:	d09d      	beq.n	80056c2 <_printf_i+0x15a>
 8005786:	3501      	adds	r5, #1
 8005788:	68e3      	ldr	r3, [r4, #12]
 800578a:	9903      	ldr	r1, [sp, #12]
 800578c:	1a5b      	subs	r3, r3, r1
 800578e:	42ab      	cmp	r3, r5
 8005790:	dcf2      	bgt.n	8005778 <_printf_i+0x210>
 8005792:	e7eb      	b.n	800576c <_printf_i+0x204>
 8005794:	2500      	movs	r5, #0
 8005796:	f104 0619 	add.w	r6, r4, #25
 800579a:	e7f5      	b.n	8005788 <_printf_i+0x220>
 800579c:	0800790a 	.word	0x0800790a
 80057a0:	0800791b 	.word	0x0800791b

080057a4 <std>:
 80057a4:	2300      	movs	r3, #0
 80057a6:	b510      	push	{r4, lr}
 80057a8:	4604      	mov	r4, r0
 80057aa:	e9c0 3300 	strd	r3, r3, [r0]
 80057ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057b2:	6083      	str	r3, [r0, #8]
 80057b4:	8181      	strh	r1, [r0, #12]
 80057b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057b8:	81c2      	strh	r2, [r0, #14]
 80057ba:	6183      	str	r3, [r0, #24]
 80057bc:	4619      	mov	r1, r3
 80057be:	2208      	movs	r2, #8
 80057c0:	305c      	adds	r0, #92	@ 0x5c
 80057c2:	f000 f9e7 	bl	8005b94 <memset>
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x58>)
 80057c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <std+0x5c>)
 80057cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <std+0x60>)
 80057d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x64>)
 80057d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x68>)
 80057d8:	6224      	str	r4, [r4, #32]
 80057da:	429c      	cmp	r4, r3
 80057dc:	d006      	beq.n	80057ec <std+0x48>
 80057de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057e2:	4294      	cmp	r4, r2
 80057e4:	d002      	beq.n	80057ec <std+0x48>
 80057e6:	33d0      	adds	r3, #208	@ 0xd0
 80057e8:	429c      	cmp	r4, r3
 80057ea:	d105      	bne.n	80057f8 <std+0x54>
 80057ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f4:	f000 ba4a 	b.w	8005c8c <__retarget_lock_init_recursive>
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	bf00      	nop
 80057fc:	080059e5 	.word	0x080059e5
 8005800:	08005a07 	.word	0x08005a07
 8005804:	08005a3f 	.word	0x08005a3f
 8005808:	08005a63 	.word	0x08005a63
 800580c:	240002e4 	.word	0x240002e4

08005810 <stdio_exit_handler>:
 8005810:	4a02      	ldr	r2, [pc, #8]	@ (800581c <stdio_exit_handler+0xc>)
 8005812:	4903      	ldr	r1, [pc, #12]	@ (8005820 <stdio_exit_handler+0x10>)
 8005814:	4803      	ldr	r0, [pc, #12]	@ (8005824 <stdio_exit_handler+0x14>)
 8005816:	f000 b869 	b.w	80058ec <_fwalk_sglue>
 800581a:	bf00      	nop
 800581c:	2400003c 	.word	0x2400003c
 8005820:	080074fd 	.word	0x080074fd
 8005824:	2400004c 	.word	0x2400004c

08005828 <cleanup_stdio>:
 8005828:	6841      	ldr	r1, [r0, #4]
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <cleanup_stdio+0x34>)
 800582c:	4299      	cmp	r1, r3
 800582e:	b510      	push	{r4, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	d001      	beq.n	8005838 <cleanup_stdio+0x10>
 8005834:	f001 fe62 	bl	80074fc <_fflush_r>
 8005838:	68a1      	ldr	r1, [r4, #8]
 800583a:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <cleanup_stdio+0x38>)
 800583c:	4299      	cmp	r1, r3
 800583e:	d002      	beq.n	8005846 <cleanup_stdio+0x1e>
 8005840:	4620      	mov	r0, r4
 8005842:	f001 fe5b 	bl	80074fc <_fflush_r>
 8005846:	68e1      	ldr	r1, [r4, #12]
 8005848:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <cleanup_stdio+0x3c>)
 800584a:	4299      	cmp	r1, r3
 800584c:	d004      	beq.n	8005858 <cleanup_stdio+0x30>
 800584e:	4620      	mov	r0, r4
 8005850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005854:	f001 be52 	b.w	80074fc <_fflush_r>
 8005858:	bd10      	pop	{r4, pc}
 800585a:	bf00      	nop
 800585c:	240002e4 	.word	0x240002e4
 8005860:	2400034c 	.word	0x2400034c
 8005864:	240003b4 	.word	0x240003b4

08005868 <global_stdio_init.part.0>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <global_stdio_init.part.0+0x30>)
 800586c:	4c0b      	ldr	r4, [pc, #44]	@ (800589c <global_stdio_init.part.0+0x34>)
 800586e:	4a0c      	ldr	r2, [pc, #48]	@ (80058a0 <global_stdio_init.part.0+0x38>)
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	4620      	mov	r0, r4
 8005874:	2200      	movs	r2, #0
 8005876:	2104      	movs	r1, #4
 8005878:	f7ff ff94 	bl	80057a4 <std>
 800587c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005880:	2201      	movs	r2, #1
 8005882:	2109      	movs	r1, #9
 8005884:	f7ff ff8e 	bl	80057a4 <std>
 8005888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800588c:	2202      	movs	r2, #2
 800588e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005892:	2112      	movs	r1, #18
 8005894:	f7ff bf86 	b.w	80057a4 <std>
 8005898:	2400041c 	.word	0x2400041c
 800589c:	240002e4 	.word	0x240002e4
 80058a0:	08005811 	.word	0x08005811

080058a4 <__sfp_lock_acquire>:
 80058a4:	4801      	ldr	r0, [pc, #4]	@ (80058ac <__sfp_lock_acquire+0x8>)
 80058a6:	f000 b9f2 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 80058aa:	bf00      	nop
 80058ac:	24000425 	.word	0x24000425

080058b0 <__sfp_lock_release>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__sfp_lock_release+0x8>)
 80058b2:	f000 b9ed 	b.w	8005c90 <__retarget_lock_release_recursive>
 80058b6:	bf00      	nop
 80058b8:	24000425 	.word	0x24000425

080058bc <__sinit>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4604      	mov	r4, r0
 80058c0:	f7ff fff0 	bl	80058a4 <__sfp_lock_acquire>
 80058c4:	6a23      	ldr	r3, [r4, #32]
 80058c6:	b11b      	cbz	r3, 80058d0 <__sinit+0x14>
 80058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058cc:	f7ff bff0 	b.w	80058b0 <__sfp_lock_release>
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <__sinit+0x28>)
 80058d2:	6223      	str	r3, [r4, #32]
 80058d4:	4b04      	ldr	r3, [pc, #16]	@ (80058e8 <__sinit+0x2c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f5      	bne.n	80058c8 <__sinit+0xc>
 80058dc:	f7ff ffc4 	bl	8005868 <global_stdio_init.part.0>
 80058e0:	e7f2      	b.n	80058c8 <__sinit+0xc>
 80058e2:	bf00      	nop
 80058e4:	08005829 	.word	0x08005829
 80058e8:	2400041c 	.word	0x2400041c

080058ec <_fwalk_sglue>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	4607      	mov	r7, r0
 80058f2:	4688      	mov	r8, r1
 80058f4:	4614      	mov	r4, r2
 80058f6:	2600      	movs	r6, #0
 80058f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005900:	d505      	bpl.n	800590e <_fwalk_sglue+0x22>
 8005902:	6824      	ldr	r4, [r4, #0]
 8005904:	2c00      	cmp	r4, #0
 8005906:	d1f7      	bne.n	80058f8 <_fwalk_sglue+0xc>
 8005908:	4630      	mov	r0, r6
 800590a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d907      	bls.n	8005924 <_fwalk_sglue+0x38>
 8005914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005918:	3301      	adds	r3, #1
 800591a:	d003      	beq.n	8005924 <_fwalk_sglue+0x38>
 800591c:	4629      	mov	r1, r5
 800591e:	4638      	mov	r0, r7
 8005920:	47c0      	blx	r8
 8005922:	4306      	orrs	r6, r0
 8005924:	3568      	adds	r5, #104	@ 0x68
 8005926:	e7e9      	b.n	80058fc <_fwalk_sglue+0x10>

08005928 <_puts_r>:
 8005928:	6a03      	ldr	r3, [r0, #32]
 800592a:	b570      	push	{r4, r5, r6, lr}
 800592c:	6884      	ldr	r4, [r0, #8]
 800592e:	4605      	mov	r5, r0
 8005930:	460e      	mov	r6, r1
 8005932:	b90b      	cbnz	r3, 8005938 <_puts_r+0x10>
 8005934:	f7ff ffc2 	bl	80058bc <__sinit>
 8005938:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800593a:	07db      	lsls	r3, r3, #31
 800593c:	d405      	bmi.n	800594a <_puts_r+0x22>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	0598      	lsls	r0, r3, #22
 8005942:	d402      	bmi.n	800594a <_puts_r+0x22>
 8005944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005946:	f000 f9a2 	bl	8005c8e <__retarget_lock_acquire_recursive>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	0719      	lsls	r1, r3, #28
 800594e:	d502      	bpl.n	8005956 <_puts_r+0x2e>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d135      	bne.n	80059c2 <_puts_r+0x9a>
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 f8c5 	bl	8005ae8 <__swsetup_r>
 800595e:	b380      	cbz	r0, 80059c2 <_puts_r+0x9a>
 8005960:	f04f 35ff 	mov.w	r5, #4294967295
 8005964:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005966:	07da      	lsls	r2, r3, #31
 8005968:	d405      	bmi.n	8005976 <_puts_r+0x4e>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d402      	bmi.n	8005976 <_puts_r+0x4e>
 8005970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005972:	f000 f98d 	bl	8005c90 <__retarget_lock_release_recursive>
 8005976:	4628      	mov	r0, r5
 8005978:	bd70      	pop	{r4, r5, r6, pc}
 800597a:	2b00      	cmp	r3, #0
 800597c:	da04      	bge.n	8005988 <_puts_r+0x60>
 800597e:	69a2      	ldr	r2, [r4, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	dc17      	bgt.n	80059b4 <_puts_r+0x8c>
 8005984:	290a      	cmp	r1, #10
 8005986:	d015      	beq.n	80059b4 <_puts_r+0x8c>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	7019      	strb	r1, [r3, #0]
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005996:	3b01      	subs	r3, #1
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	2900      	cmp	r1, #0
 800599c:	d1ed      	bne.n	800597a <_puts_r+0x52>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da11      	bge.n	80059c6 <_puts_r+0x9e>
 80059a2:	4622      	mov	r2, r4
 80059a4:	210a      	movs	r1, #10
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f85f 	bl	8005a6a <__swbuf_r>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d0d7      	beq.n	8005960 <_puts_r+0x38>
 80059b0:	250a      	movs	r5, #10
 80059b2:	e7d7      	b.n	8005964 <_puts_r+0x3c>
 80059b4:	4622      	mov	r2, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f857 	bl	8005a6a <__swbuf_r>
 80059bc:	3001      	adds	r0, #1
 80059be:	d1e7      	bne.n	8005990 <_puts_r+0x68>
 80059c0:	e7ce      	b.n	8005960 <_puts_r+0x38>
 80059c2:	3e01      	subs	r6, #1
 80059c4:	e7e4      	b.n	8005990 <_puts_r+0x68>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	220a      	movs	r2, #10
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e7ee      	b.n	80059b0 <_puts_r+0x88>
	...

080059d4 <puts>:
 80059d4:	4b02      	ldr	r3, [pc, #8]	@ (80059e0 <puts+0xc>)
 80059d6:	4601      	mov	r1, r0
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f7ff bfa5 	b.w	8005928 <_puts_r>
 80059de:	bf00      	nop
 80059e0:	24000048 	.word	0x24000048

080059e4 <__sread>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	460c      	mov	r4, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	f000 f900 	bl	8005bf0 <_read_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	bfab      	itete	ge
 80059f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059f6:	89a3      	ldrhlt	r3, [r4, #12]
 80059f8:	181b      	addge	r3, r3, r0
 80059fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059fe:	bfac      	ite	ge
 8005a00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a02:	81a3      	strhlt	r3, [r4, #12]
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <__swrite>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	05db      	lsls	r3, r3, #23
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4616      	mov	r6, r2
 8005a16:	d505      	bpl.n	8005a24 <__swrite+0x1e>
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f000 f8d4 	bl	8005bcc <_lseek_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	f000 b8eb 	b.w	8005c14 <_write_r>

08005a3e <__sseek>:
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	460c      	mov	r4, r1
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 f8c1 	bl	8005bcc <_lseek_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	bf15      	itete	ne
 8005a50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a5a:	81a3      	strheq	r3, [r4, #12]
 8005a5c:	bf18      	it	ne
 8005a5e:	81a3      	strhne	r3, [r4, #12]
 8005a60:	bd10      	pop	{r4, pc}

08005a62 <__sclose>:
 8005a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a66:	f000 b8a1 	b.w	8005bac <_close_r>

08005a6a <__swbuf_r>:
 8005a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	4614      	mov	r4, r2
 8005a70:	4605      	mov	r5, r0
 8005a72:	b118      	cbz	r0, 8005a7c <__swbuf_r+0x12>
 8005a74:	6a03      	ldr	r3, [r0, #32]
 8005a76:	b90b      	cbnz	r3, 8005a7c <__swbuf_r+0x12>
 8005a78:	f7ff ff20 	bl	80058bc <__sinit>
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	071a      	lsls	r2, r3, #28
 8005a84:	d501      	bpl.n	8005a8a <__swbuf_r+0x20>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	b943      	cbnz	r3, 8005a9c <__swbuf_r+0x32>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f82b 	bl	8005ae8 <__swsetup_r>
 8005a92:	b118      	cbz	r0, 8005a9c <__swbuf_r+0x32>
 8005a94:	f04f 37ff 	mov.w	r7, #4294967295
 8005a98:	4638      	mov	r0, r7
 8005a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	6922      	ldr	r2, [r4, #16]
 8005aa0:	1a98      	subs	r0, r3, r2
 8005aa2:	6963      	ldr	r3, [r4, #20]
 8005aa4:	b2f6      	uxtb	r6, r6
 8005aa6:	4283      	cmp	r3, r0
 8005aa8:	4637      	mov	r7, r6
 8005aaa:	dc05      	bgt.n	8005ab8 <__swbuf_r+0x4e>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f001 fd24 	bl	80074fc <_fflush_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d1ed      	bne.n	8005a94 <__swbuf_r+0x2a>
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60a3      	str	r3, [r4, #8]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	701e      	strb	r6, [r3, #0]
 8005ac6:	6962      	ldr	r2, [r4, #20]
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d004      	beq.n	8005ad8 <__swbuf_r+0x6e>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	07db      	lsls	r3, r3, #31
 8005ad2:	d5e1      	bpl.n	8005a98 <__swbuf_r+0x2e>
 8005ad4:	2e0a      	cmp	r6, #10
 8005ad6:	d1df      	bne.n	8005a98 <__swbuf_r+0x2e>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f001 fd0e 	bl	80074fc <_fflush_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d0d9      	beq.n	8005a98 <__swbuf_r+0x2e>
 8005ae4:	e7d6      	b.n	8005a94 <__swbuf_r+0x2a>
	...

08005ae8 <__swsetup_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <__swsetup_r+0xa8>)
 8005aec:	4605      	mov	r5, r0
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	460c      	mov	r4, r1
 8005af2:	b118      	cbz	r0, 8005afc <__swsetup_r+0x14>
 8005af4:	6a03      	ldr	r3, [r0, #32]
 8005af6:	b90b      	cbnz	r3, 8005afc <__swsetup_r+0x14>
 8005af8:	f7ff fee0 	bl	80058bc <__sinit>
 8005afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b00:	0719      	lsls	r1, r3, #28
 8005b02:	d422      	bmi.n	8005b4a <__swsetup_r+0x62>
 8005b04:	06da      	lsls	r2, r3, #27
 8005b06:	d407      	bmi.n	8005b18 <__swsetup_r+0x30>
 8005b08:	2209      	movs	r2, #9
 8005b0a:	602a      	str	r2, [r5, #0]
 8005b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295
 8005b16:	e033      	b.n	8005b80 <__swsetup_r+0x98>
 8005b18:	0758      	lsls	r0, r3, #29
 8005b1a:	d512      	bpl.n	8005b42 <__swsetup_r+0x5a>
 8005b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b1e:	b141      	cbz	r1, 8005b32 <__swsetup_r+0x4a>
 8005b20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d002      	beq.n	8005b2e <__swsetup_r+0x46>
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 fea7 	bl	800687c <_free_r>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f043 0308 	orr.w	r3, r3, #8
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	b94b      	cbnz	r3, 8005b62 <__swsetup_r+0x7a>
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b58:	d003      	beq.n	8005b62 <__swsetup_r+0x7a>
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f001 fd1b 	bl	8007598 <__smakebuf_r>
 8005b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b66:	f013 0201 	ands.w	r2, r3, #1
 8005b6a:	d00a      	beq.n	8005b82 <__swsetup_r+0x9a>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60a2      	str	r2, [r4, #8]
 8005b70:	6962      	ldr	r2, [r4, #20]
 8005b72:	4252      	negs	r2, r2
 8005b74:	61a2      	str	r2, [r4, #24]
 8005b76:	6922      	ldr	r2, [r4, #16]
 8005b78:	b942      	cbnz	r2, 8005b8c <__swsetup_r+0xa4>
 8005b7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b7e:	d1c5      	bne.n	8005b0c <__swsetup_r+0x24>
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
 8005b82:	0799      	lsls	r1, r3, #30
 8005b84:	bf58      	it	pl
 8005b86:	6962      	ldrpl	r2, [r4, #20]
 8005b88:	60a2      	str	r2, [r4, #8]
 8005b8a:	e7f4      	b.n	8005b76 <__swsetup_r+0x8e>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7f7      	b.n	8005b80 <__swsetup_r+0x98>
 8005b90:	24000048 	.word	0x24000048

08005b94 <memset>:
 8005b94:	4402      	add	r2, r0
 8005b96:	4603      	mov	r3, r0
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memset+0xa>
 8005b9c:	4770      	bx	lr
 8005b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba2:	e7f9      	b.n	8005b98 <memset+0x4>

08005ba4 <_localeconv_r>:
 8005ba4:	4800      	ldr	r0, [pc, #0]	@ (8005ba8 <_localeconv_r+0x4>)
 8005ba6:	4770      	bx	lr
 8005ba8:	24000188 	.word	0x24000188

08005bac <_close_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d06      	ldr	r5, [pc, #24]	@ (8005bc8 <_close_r+0x1c>)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	f7fa feac 	bl	8000914 <_close>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_close_r+0x1a>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_close_r+0x1a>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	24000420 	.word	0x24000420

08005bcc <_lseek_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d07      	ldr	r5, [pc, #28]	@ (8005bec <_lseek_r+0x20>)
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f7fa fec1 	bl	8000962 <_lseek>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_lseek_r+0x1e>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_lseek_r+0x1e>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	24000420 	.word	0x24000420

08005bf0 <_read_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d07      	ldr	r5, [pc, #28]	@ (8005c10 <_read_r+0x20>)
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	602a      	str	r2, [r5, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f7fa fe4f 	bl	80008a2 <_read>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_read_r+0x1e>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_read_r+0x1e>
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	24000420 	.word	0x24000420

08005c14 <_write_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	@ (8005c34 <_write_r+0x20>)
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	602a      	str	r2, [r5, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f7fa fe5a 	bl	80008dc <_write>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_write_r+0x1e>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_write_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	24000420 	.word	0x24000420

08005c38 <__errno>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	@ (8005c40 <__errno+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	24000048 	.word	0x24000048

08005c44 <__libc_init_array>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4d0d      	ldr	r5, [pc, #52]	@ (8005c7c <__libc_init_array+0x38>)
 8005c48:	4c0d      	ldr	r4, [pc, #52]	@ (8005c80 <__libc_init_array+0x3c>)
 8005c4a:	1b64      	subs	r4, r4, r5
 8005c4c:	10a4      	asrs	r4, r4, #2
 8005c4e:	2600      	movs	r6, #0
 8005c50:	42a6      	cmp	r6, r4
 8005c52:	d109      	bne.n	8005c68 <__libc_init_array+0x24>
 8005c54:	4d0b      	ldr	r5, [pc, #44]	@ (8005c84 <__libc_init_array+0x40>)
 8005c56:	4c0c      	ldr	r4, [pc, #48]	@ (8005c88 <__libc_init_array+0x44>)
 8005c58:	f001 fdbc 	bl	80077d4 <_init>
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	2600      	movs	r6, #0
 8005c62:	42a6      	cmp	r6, r4
 8005c64:	d105      	bne.n	8005c72 <__libc_init_array+0x2e>
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6c:	4798      	blx	r3
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7ee      	b.n	8005c50 <__libc_init_array+0xc>
 8005c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c76:	4798      	blx	r3
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7f2      	b.n	8005c62 <__libc_init_array+0x1e>
 8005c7c:	08007c74 	.word	0x08007c74
 8005c80:	08007c74 	.word	0x08007c74
 8005c84:	08007c74 	.word	0x08007c74
 8005c88:	08007c78 	.word	0x08007c78

08005c8c <__retarget_lock_init_recursive>:
 8005c8c:	4770      	bx	lr

08005c8e <__retarget_lock_acquire_recursive>:
 8005c8e:	4770      	bx	lr

08005c90 <__retarget_lock_release_recursive>:
 8005c90:	4770      	bx	lr

08005c92 <memcpy>:
 8005c92:	440a      	add	r2, r1
 8005c94:	4291      	cmp	r1, r2
 8005c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c9a:	d100      	bne.n	8005c9e <memcpy+0xc>
 8005c9c:	4770      	bx	lr
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca8:	4291      	cmp	r1, r2
 8005caa:	d1f9      	bne.n	8005ca0 <memcpy+0xe>
 8005cac:	bd10      	pop	{r4, pc}

08005cae <quorem>:
 8005cae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb2:	6903      	ldr	r3, [r0, #16]
 8005cb4:	690c      	ldr	r4, [r1, #16]
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	4607      	mov	r7, r0
 8005cba:	db7e      	blt.n	8005dba <quorem+0x10c>
 8005cbc:	3c01      	subs	r4, #1
 8005cbe:	f101 0814 	add.w	r8, r1, #20
 8005cc2:	00a3      	lsls	r3, r4, #2
 8005cc4:	f100 0514 	add.w	r5, r0, #20
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ce0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ce4:	d32e      	bcc.n	8005d44 <quorem+0x96>
 8005ce6:	f04f 0a00 	mov.w	sl, #0
 8005cea:	46c4      	mov	ip, r8
 8005cec:	46ae      	mov	lr, r5
 8005cee:	46d3      	mov	fp, sl
 8005cf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cf4:	b298      	uxth	r0, r3
 8005cf6:	fb06 a000 	mla	r0, r6, r0, sl
 8005cfa:	0c02      	lsrs	r2, r0, #16
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	fb06 2303 	mla	r3, r6, r3, r2
 8005d02:	f8de 2000 	ldr.w	r2, [lr]
 8005d06:	b280      	uxth	r0, r0
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	1a12      	subs	r2, r2, r0
 8005d0c:	445a      	add	r2, fp
 8005d0e:	f8de 0000 	ldr.w	r0, [lr]
 8005d12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d20:	b292      	uxth	r2, r2
 8005d22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d26:	45e1      	cmp	r9, ip
 8005d28:	f84e 2b04 	str.w	r2, [lr], #4
 8005d2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d30:	d2de      	bcs.n	8005cf0 <quorem+0x42>
 8005d32:	9b00      	ldr	r3, [sp, #0]
 8005d34:	58eb      	ldr	r3, [r5, r3]
 8005d36:	b92b      	cbnz	r3, 8005d44 <quorem+0x96>
 8005d38:	9b01      	ldr	r3, [sp, #4]
 8005d3a:	3b04      	subs	r3, #4
 8005d3c:	429d      	cmp	r5, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	d32f      	bcc.n	8005da2 <quorem+0xf4>
 8005d42:	613c      	str	r4, [r7, #16]
 8005d44:	4638      	mov	r0, r7
 8005d46:	f001 f90b 	bl	8006f60 <__mcmp>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	db25      	blt.n	8005d9a <quorem+0xec>
 8005d4e:	4629      	mov	r1, r5
 8005d50:	2000      	movs	r0, #0
 8005d52:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d56:	f8d1 c000 	ldr.w	ip, [r1]
 8005d5a:	fa1f fe82 	uxth.w	lr, r2
 8005d5e:	fa1f f38c 	uxth.w	r3, ip
 8005d62:	eba3 030e 	sub.w	r3, r3, lr
 8005d66:	4403      	add	r3, r0
 8005d68:	0c12      	lsrs	r2, r2, #16
 8005d6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d78:	45c1      	cmp	r9, r8
 8005d7a:	f841 3b04 	str.w	r3, [r1], #4
 8005d7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d82:	d2e6      	bcs.n	8005d52 <quorem+0xa4>
 8005d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d8c:	b922      	cbnz	r2, 8005d98 <quorem+0xea>
 8005d8e:	3b04      	subs	r3, #4
 8005d90:	429d      	cmp	r5, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	d30b      	bcc.n	8005dae <quorem+0x100>
 8005d96:	613c      	str	r4, [r7, #16]
 8005d98:	3601      	adds	r6, #1
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	b003      	add	sp, #12
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	3b04      	subs	r3, #4
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d1cb      	bne.n	8005d42 <quorem+0x94>
 8005daa:	3c01      	subs	r4, #1
 8005dac:	e7c6      	b.n	8005d3c <quorem+0x8e>
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	d1ef      	bne.n	8005d96 <quorem+0xe8>
 8005db6:	3c01      	subs	r4, #1
 8005db8:	e7ea      	b.n	8005d90 <quorem+0xe2>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e7ee      	b.n	8005d9c <quorem+0xee>
	...

08005dc0 <_dtoa_r>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	ed2d 8b02 	vpush	{d8}
 8005dc8:	69c7      	ldr	r7, [r0, #28]
 8005dca:	b091      	sub	sp, #68	@ 0x44
 8005dcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005dd0:	ec55 4b10 	vmov	r4, r5, d0
 8005dd4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005dd6:	9107      	str	r1, [sp, #28]
 8005dd8:	4681      	mov	r9, r0
 8005dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ddc:	930d      	str	r3, [sp, #52]	@ 0x34
 8005dde:	b97f      	cbnz	r7, 8005e00 <_dtoa_r+0x40>
 8005de0:	2010      	movs	r0, #16
 8005de2:	f000 fd95 	bl	8006910 <malloc>
 8005de6:	4602      	mov	r2, r0
 8005de8:	f8c9 001c 	str.w	r0, [r9, #28]
 8005dec:	b920      	cbnz	r0, 8005df8 <_dtoa_r+0x38>
 8005dee:	4ba0      	ldr	r3, [pc, #640]	@ (8006070 <_dtoa_r+0x2b0>)
 8005df0:	21ef      	movs	r1, #239	@ 0xef
 8005df2:	48a0      	ldr	r0, [pc, #640]	@ (8006074 <_dtoa_r+0x2b4>)
 8005df4:	f001 fc3e 	bl	8007674 <__assert_func>
 8005df8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005dfc:	6007      	str	r7, [r0, #0]
 8005dfe:	60c7      	str	r7, [r0, #12]
 8005e00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	b159      	cbz	r1, 8005e20 <_dtoa_r+0x60>
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	604a      	str	r2, [r1, #4]
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4093      	lsls	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
 8005e12:	4648      	mov	r0, r9
 8005e14:	f000 fe72 	bl	8006afc <_Bfree>
 8005e18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	1e2b      	subs	r3, r5, #0
 8005e22:	bfbb      	ittet	lt
 8005e24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e28:	9303      	strlt	r3, [sp, #12]
 8005e2a:	2300      	movge	r3, #0
 8005e2c:	2201      	movlt	r2, #1
 8005e2e:	bfac      	ite	ge
 8005e30:	6033      	strge	r3, [r6, #0]
 8005e32:	6032      	strlt	r2, [r6, #0]
 8005e34:	4b90      	ldr	r3, [pc, #576]	@ (8006078 <_dtoa_r+0x2b8>)
 8005e36:	9e03      	ldr	r6, [sp, #12]
 8005e38:	43b3      	bics	r3, r6
 8005e3a:	d110      	bne.n	8005e5e <_dtoa_r+0x9e>
 8005e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005e48:	4323      	orrs	r3, r4
 8005e4a:	f000 84e6 	beq.w	800681a <_dtoa_r+0xa5a>
 8005e4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005e50:	4f8a      	ldr	r7, [pc, #552]	@ (800607c <_dtoa_r+0x2bc>)
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 84e8 	beq.w	8006828 <_dtoa_r+0xa68>
 8005e58:	1cfb      	adds	r3, r7, #3
 8005e5a:	f000 bce3 	b.w	8006824 <_dtoa_r+0xa64>
 8005e5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005e62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6a:	d10a      	bne.n	8005e82 <_dtoa_r+0xc2>
 8005e6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e6e:	2301      	movs	r3, #1
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005e74:	b113      	cbz	r3, 8005e7c <_dtoa_r+0xbc>
 8005e76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005e78:	4b81      	ldr	r3, [pc, #516]	@ (8006080 <_dtoa_r+0x2c0>)
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4f81      	ldr	r7, [pc, #516]	@ (8006084 <_dtoa_r+0x2c4>)
 8005e7e:	f000 bcd3 	b.w	8006828 <_dtoa_r+0xa68>
 8005e82:	aa0e      	add	r2, sp, #56	@ 0x38
 8005e84:	a90f      	add	r1, sp, #60	@ 0x3c
 8005e86:	4648      	mov	r0, r9
 8005e88:	eeb0 0b48 	vmov.f64	d0, d8
 8005e8c:	f001 f918 	bl	80070c0 <__d2b>
 8005e90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005e94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e96:	9001      	str	r0, [sp, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d045      	beq.n	8005f28 <_dtoa_r+0x168>
 8005e9c:	eeb0 7b48 	vmov.f64	d7, d8
 8005ea0:	ee18 1a90 	vmov	r1, s17
 8005ea4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005ea8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005eac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005eb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005eb4:	2500      	movs	r5, #0
 8005eb6:	ee07 1a90 	vmov	s15, r1
 8005eba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005ebe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006058 <_dtoa_r+0x298>
 8005ec2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ec6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006060 <_dtoa_r+0x2a0>
 8005eca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005ece:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006068 <_dtoa_r+0x2a8>
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005eda:	eeb0 7b46 	vmov.f64	d7, d6
 8005ede:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005ee2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005ee6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	ee16 8a90 	vmov	r8, s13
 8005ef2:	d508      	bpl.n	8005f06 <_dtoa_r+0x146>
 8005ef4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005ef8:	eeb4 6b47 	vcmp.f64	d6, d7
 8005efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f00:	bf18      	it	ne
 8005f02:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005f06:	f1b8 0f16 	cmp.w	r8, #22
 8005f0a:	d82b      	bhi.n	8005f64 <_dtoa_r+0x1a4>
 8005f0c:	495e      	ldr	r1, [pc, #376]	@ (8006088 <_dtoa_r+0x2c8>)
 8005f0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005f12:	ed91 7b00 	vldr	d7, [r1]
 8005f16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1e:	d501      	bpl.n	8005f24 <_dtoa_r+0x164>
 8005f20:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f24:	2100      	movs	r1, #0
 8005f26:	e01e      	b.n	8005f66 <_dtoa_r+0x1a6>
 8005f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005f30:	2920      	cmp	r1, #32
 8005f32:	bfc1      	itttt	gt
 8005f34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005f38:	408e      	lslgt	r6, r1
 8005f3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005f3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005f42:	bfd6      	itet	le
 8005f44:	f1c1 0120 	rsble	r1, r1, #32
 8005f48:	4331      	orrgt	r1, r6
 8005f4a:	fa04 f101 	lslle.w	r1, r4, r1
 8005f4e:	ee07 1a90 	vmov	s15, r1
 8005f52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f56:	3b01      	subs	r3, #1
 8005f58:	ee17 1a90 	vmov	r1, s15
 8005f5c:	2501      	movs	r5, #1
 8005f5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005f62:	e7a8      	b.n	8005eb6 <_dtoa_r+0xf6>
 8005f64:	2101      	movs	r1, #1
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	1e53      	subs	r3, r2, #1
 8005f6a:	9306      	str	r3, [sp, #24]
 8005f6c:	bf45      	ittet	mi
 8005f6e:	f1c2 0301 	rsbmi	r3, r2, #1
 8005f72:	9304      	strmi	r3, [sp, #16]
 8005f74:	2300      	movpl	r3, #0
 8005f76:	2300      	movmi	r3, #0
 8005f78:	bf4c      	ite	mi
 8005f7a:	9306      	strmi	r3, [sp, #24]
 8005f7c:	9304      	strpl	r3, [sp, #16]
 8005f7e:	f1b8 0f00 	cmp.w	r8, #0
 8005f82:	910c      	str	r1, [sp, #48]	@ 0x30
 8005f84:	db18      	blt.n	8005fb8 <_dtoa_r+0x1f8>
 8005f86:	9b06      	ldr	r3, [sp, #24]
 8005f88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005f8c:	4443      	add	r3, r8
 8005f8e:	9306      	str	r3, [sp, #24]
 8005f90:	2300      	movs	r3, #0
 8005f92:	9a07      	ldr	r2, [sp, #28]
 8005f94:	2a09      	cmp	r2, #9
 8005f96:	d845      	bhi.n	8006024 <_dtoa_r+0x264>
 8005f98:	2a05      	cmp	r2, #5
 8005f9a:	bfc4      	itt	gt
 8005f9c:	3a04      	subgt	r2, #4
 8005f9e:	9207      	strgt	r2, [sp, #28]
 8005fa0:	9a07      	ldr	r2, [sp, #28]
 8005fa2:	f1a2 0202 	sub.w	r2, r2, #2
 8005fa6:	bfcc      	ite	gt
 8005fa8:	2400      	movgt	r4, #0
 8005faa:	2401      	movle	r4, #1
 8005fac:	2a03      	cmp	r2, #3
 8005fae:	d844      	bhi.n	800603a <_dtoa_r+0x27a>
 8005fb0:	e8df f002 	tbb	[pc, r2]
 8005fb4:	0b173634 	.word	0x0b173634
 8005fb8:	9b04      	ldr	r3, [sp, #16]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	eba3 0308 	sub.w	r3, r3, r8
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8005fc4:	f1c8 0300 	rsb	r3, r8, #0
 8005fc8:	e7e3      	b.n	8005f92 <_dtoa_r+0x1d2>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	9208      	str	r2, [sp, #32]
 8005fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fd0:	eb08 0b02 	add.w	fp, r8, r2
 8005fd4:	f10b 0a01 	add.w	sl, fp, #1
 8005fd8:	4652      	mov	r2, sl
 8005fda:	2a01      	cmp	r2, #1
 8005fdc:	bfb8      	it	lt
 8005fde:	2201      	movlt	r2, #1
 8005fe0:	e006      	b.n	8005ff0 <_dtoa_r+0x230>
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	9208      	str	r2, [sp, #32]
 8005fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	dd29      	ble.n	8006040 <_dtoa_r+0x280>
 8005fec:	4693      	mov	fp, r2
 8005fee:	4692      	mov	sl, r2
 8005ff0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	2004      	movs	r0, #4
 8005ff8:	f100 0614 	add.w	r6, r0, #20
 8005ffc:	4296      	cmp	r6, r2
 8005ffe:	d926      	bls.n	800604e <_dtoa_r+0x28e>
 8006000:	6079      	str	r1, [r7, #4]
 8006002:	4648      	mov	r0, r9
 8006004:	9305      	str	r3, [sp, #20]
 8006006:	f000 fd39 	bl	8006a7c <_Balloc>
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	4607      	mov	r7, r0
 800600e:	2800      	cmp	r0, #0
 8006010:	d13e      	bne.n	8006090 <_dtoa_r+0x2d0>
 8006012:	4b1e      	ldr	r3, [pc, #120]	@ (800608c <_dtoa_r+0x2cc>)
 8006014:	4602      	mov	r2, r0
 8006016:	f240 11af 	movw	r1, #431	@ 0x1af
 800601a:	e6ea      	b.n	8005df2 <_dtoa_r+0x32>
 800601c:	2200      	movs	r2, #0
 800601e:	e7e1      	b.n	8005fe4 <_dtoa_r+0x224>
 8006020:	2200      	movs	r2, #0
 8006022:	e7d3      	b.n	8005fcc <_dtoa_r+0x20c>
 8006024:	2401      	movs	r4, #1
 8006026:	2200      	movs	r2, #0
 8006028:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800602c:	f04f 3bff 	mov.w	fp, #4294967295
 8006030:	2100      	movs	r1, #0
 8006032:	46da      	mov	sl, fp
 8006034:	2212      	movs	r2, #18
 8006036:	9109      	str	r1, [sp, #36]	@ 0x24
 8006038:	e7da      	b.n	8005ff0 <_dtoa_r+0x230>
 800603a:	2201      	movs	r2, #1
 800603c:	9208      	str	r2, [sp, #32]
 800603e:	e7f5      	b.n	800602c <_dtoa_r+0x26c>
 8006040:	f04f 0b01 	mov.w	fp, #1
 8006044:	46da      	mov	sl, fp
 8006046:	465a      	mov	r2, fp
 8006048:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800604c:	e7d0      	b.n	8005ff0 <_dtoa_r+0x230>
 800604e:	3101      	adds	r1, #1
 8006050:	0040      	lsls	r0, r0, #1
 8006052:	e7d1      	b.n	8005ff8 <_dtoa_r+0x238>
 8006054:	f3af 8000 	nop.w
 8006058:	636f4361 	.word	0x636f4361
 800605c:	3fd287a7 	.word	0x3fd287a7
 8006060:	8b60c8b3 	.word	0x8b60c8b3
 8006064:	3fc68a28 	.word	0x3fc68a28
 8006068:	509f79fb 	.word	0x509f79fb
 800606c:	3fd34413 	.word	0x3fd34413
 8006070:	08007939 	.word	0x08007939
 8006074:	08007950 	.word	0x08007950
 8006078:	7ff00000 	.word	0x7ff00000
 800607c:	08007935 	.word	0x08007935
 8006080:	08007909 	.word	0x08007909
 8006084:	08007908 	.word	0x08007908
 8006088:	08007aa0 	.word	0x08007aa0
 800608c:	080079a8 	.word	0x080079a8
 8006090:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8006094:	f1ba 0f0e 	cmp.w	sl, #14
 8006098:	6010      	str	r0, [r2, #0]
 800609a:	d86e      	bhi.n	800617a <_dtoa_r+0x3ba>
 800609c:	2c00      	cmp	r4, #0
 800609e:	d06c      	beq.n	800617a <_dtoa_r+0x3ba>
 80060a0:	f1b8 0f00 	cmp.w	r8, #0
 80060a4:	f340 80b4 	ble.w	8006210 <_dtoa_r+0x450>
 80060a8:	4ac8      	ldr	r2, [pc, #800]	@ (80063cc <_dtoa_r+0x60c>)
 80060aa:	f008 010f 	and.w	r1, r8, #15
 80060ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80060b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80060b6:	ed92 7b00 	vldr	d7, [r2]
 80060ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 80060be:	f000 809b 	beq.w	80061f8 <_dtoa_r+0x438>
 80060c2:	4ac3      	ldr	r2, [pc, #780]	@ (80063d0 <_dtoa_r+0x610>)
 80060c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80060c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80060cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80060d0:	f001 010f 	and.w	r1, r1, #15
 80060d4:	2203      	movs	r2, #3
 80060d6:	48be      	ldr	r0, [pc, #760]	@ (80063d0 <_dtoa_r+0x610>)
 80060d8:	2900      	cmp	r1, #0
 80060da:	f040 808f 	bne.w	80061fc <_dtoa_r+0x43c>
 80060de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80060e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80060e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80060ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060f0:	2900      	cmp	r1, #0
 80060f2:	f000 80b3 	beq.w	800625c <_dtoa_r+0x49c>
 80060f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80060fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	f140 80ab 	bpl.w	800625c <_dtoa_r+0x49c>
 8006106:	f1ba 0f00 	cmp.w	sl, #0
 800610a:	f000 80a7 	beq.w	800625c <_dtoa_r+0x49c>
 800610e:	f1bb 0f00 	cmp.w	fp, #0
 8006112:	dd30      	ble.n	8006176 <_dtoa_r+0x3b6>
 8006114:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006118:	ee27 7b06 	vmul.f64	d7, d7, d6
 800611c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006120:	f108 31ff 	add.w	r1, r8, #4294967295
 8006124:	9105      	str	r1, [sp, #20]
 8006126:	3201      	adds	r2, #1
 8006128:	465c      	mov	r4, fp
 800612a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800612e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8006132:	ee07 2a90 	vmov	s15, r2
 8006136:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800613a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800613e:	ee15 2a90 	vmov	r2, s11
 8006142:	ec51 0b15 	vmov	r0, r1, d5
 8006146:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800614a:	2c00      	cmp	r4, #0
 800614c:	f040 808a 	bne.w	8006264 <_dtoa_r+0x4a4>
 8006150:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006154:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006158:	ec41 0b17 	vmov	d7, r0, r1
 800615c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006164:	f300 826a 	bgt.w	800663c <_dtoa_r+0x87c>
 8006168:	eeb1 7b47 	vneg.f64	d7, d7
 800616c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	d423      	bmi.n	80061be <_dtoa_r+0x3fe>
 8006176:	ed8d 8b02 	vstr	d8, [sp, #8]
 800617a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800617c:	2a00      	cmp	r2, #0
 800617e:	f2c0 8129 	blt.w	80063d4 <_dtoa_r+0x614>
 8006182:	f1b8 0f0e 	cmp.w	r8, #14
 8006186:	f300 8125 	bgt.w	80063d4 <_dtoa_r+0x614>
 800618a:	4b90      	ldr	r3, [pc, #576]	@ (80063cc <_dtoa_r+0x60c>)
 800618c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006190:	ed93 6b00 	vldr	d6, [r3]
 8006194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	f280 80c8 	bge.w	800632c <_dtoa_r+0x56c>
 800619c:	f1ba 0f00 	cmp.w	sl, #0
 80061a0:	f300 80c4 	bgt.w	800632c <_dtoa_r+0x56c>
 80061a4:	d10b      	bne.n	80061be <_dtoa_r+0x3fe>
 80061a6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80061aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ba:	f2c0 823c 	blt.w	8006636 <_dtoa_r+0x876>
 80061be:	2400      	movs	r4, #0
 80061c0:	4625      	mov	r5, r4
 80061c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c4:	43db      	mvns	r3, r3
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	463e      	mov	r6, r7
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	4621      	mov	r1, r4
 80061d0:	4648      	mov	r0, r9
 80061d2:	f000 fc93 	bl	8006afc <_Bfree>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	f000 80a2 	beq.w	8006320 <_dtoa_r+0x560>
 80061dc:	f1b8 0f00 	cmp.w	r8, #0
 80061e0:	d005      	beq.n	80061ee <_dtoa_r+0x42e>
 80061e2:	45a8      	cmp	r8, r5
 80061e4:	d003      	beq.n	80061ee <_dtoa_r+0x42e>
 80061e6:	4641      	mov	r1, r8
 80061e8:	4648      	mov	r0, r9
 80061ea:	f000 fc87 	bl	8006afc <_Bfree>
 80061ee:	4629      	mov	r1, r5
 80061f0:	4648      	mov	r0, r9
 80061f2:	f000 fc83 	bl	8006afc <_Bfree>
 80061f6:	e093      	b.n	8006320 <_dtoa_r+0x560>
 80061f8:	2202      	movs	r2, #2
 80061fa:	e76c      	b.n	80060d6 <_dtoa_r+0x316>
 80061fc:	07cc      	lsls	r4, r1, #31
 80061fe:	d504      	bpl.n	800620a <_dtoa_r+0x44a>
 8006200:	ed90 6b00 	vldr	d6, [r0]
 8006204:	3201      	adds	r2, #1
 8006206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800620a:	1049      	asrs	r1, r1, #1
 800620c:	3008      	adds	r0, #8
 800620e:	e763      	b.n	80060d8 <_dtoa_r+0x318>
 8006210:	d022      	beq.n	8006258 <_dtoa_r+0x498>
 8006212:	f1c8 0100 	rsb	r1, r8, #0
 8006216:	4a6d      	ldr	r2, [pc, #436]	@ (80063cc <_dtoa_r+0x60c>)
 8006218:	f001 000f 	and.w	r0, r1, #15
 800621c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006220:	ed92 7b00 	vldr	d7, [r2]
 8006224:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800622c:	4868      	ldr	r0, [pc, #416]	@ (80063d0 <_dtoa_r+0x610>)
 800622e:	1109      	asrs	r1, r1, #4
 8006230:	2400      	movs	r4, #0
 8006232:	2202      	movs	r2, #2
 8006234:	b929      	cbnz	r1, 8006242 <_dtoa_r+0x482>
 8006236:	2c00      	cmp	r4, #0
 8006238:	f43f af57 	beq.w	80060ea <_dtoa_r+0x32a>
 800623c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006240:	e753      	b.n	80060ea <_dtoa_r+0x32a>
 8006242:	07ce      	lsls	r6, r1, #31
 8006244:	d505      	bpl.n	8006252 <_dtoa_r+0x492>
 8006246:	ed90 6b00 	vldr	d6, [r0]
 800624a:	3201      	adds	r2, #1
 800624c:	2401      	movs	r4, #1
 800624e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006252:	1049      	asrs	r1, r1, #1
 8006254:	3008      	adds	r0, #8
 8006256:	e7ed      	b.n	8006234 <_dtoa_r+0x474>
 8006258:	2202      	movs	r2, #2
 800625a:	e746      	b.n	80060ea <_dtoa_r+0x32a>
 800625c:	f8cd 8014 	str.w	r8, [sp, #20]
 8006260:	4654      	mov	r4, sl
 8006262:	e762      	b.n	800612a <_dtoa_r+0x36a>
 8006264:	4a59      	ldr	r2, [pc, #356]	@ (80063cc <_dtoa_r+0x60c>)
 8006266:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800626a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800626e:	9a08      	ldr	r2, [sp, #32]
 8006270:	ec41 0b17 	vmov	d7, r0, r1
 8006274:	443c      	add	r4, r7
 8006276:	b34a      	cbz	r2, 80062cc <_dtoa_r+0x50c>
 8006278:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800627c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8006280:	463e      	mov	r6, r7
 8006282:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006286:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800628a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800628e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006292:	ee14 2a90 	vmov	r2, s9
 8006296:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800629a:	3230      	adds	r2, #48	@ 0x30
 800629c:	ee36 6b45 	vsub.f64	d6, d6, d5
 80062a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	f806 2b01 	strb.w	r2, [r6], #1
 80062ac:	d438      	bmi.n	8006320 <_dtoa_r+0x560>
 80062ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 80062b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	d46e      	bmi.n	800639a <_dtoa_r+0x5da>
 80062bc:	42a6      	cmp	r6, r4
 80062be:	f43f af5a 	beq.w	8006176 <_dtoa_r+0x3b6>
 80062c2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80062c6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80062ca:	e7e0      	b.n	800628e <_dtoa_r+0x4ce>
 80062cc:	4621      	mov	r1, r4
 80062ce:	463e      	mov	r6, r7
 80062d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062d4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80062d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062dc:	ee14 2a90 	vmov	r2, s9
 80062e0:	3230      	adds	r2, #48	@ 0x30
 80062e2:	f806 2b01 	strb.w	r2, [r6], #1
 80062e6:	42a6      	cmp	r6, r4
 80062e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80062ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80062f0:	d119      	bne.n	8006326 <_dtoa_r+0x566>
 80062f2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80062f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80062fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80062fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006302:	dc4a      	bgt.n	800639a <_dtoa_r+0x5da>
 8006304:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006308:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800630c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006310:	f57f af31 	bpl.w	8006176 <_dtoa_r+0x3b6>
 8006314:	460e      	mov	r6, r1
 8006316:	3901      	subs	r1, #1
 8006318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800631c:	2b30      	cmp	r3, #48	@ 0x30
 800631e:	d0f9      	beq.n	8006314 <_dtoa_r+0x554>
 8006320:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006324:	e027      	b.n	8006376 <_dtoa_r+0x5b6>
 8006326:	ee26 6b03 	vmul.f64	d6, d6, d3
 800632a:	e7d5      	b.n	80062d8 <_dtoa_r+0x518>
 800632c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006330:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006334:	463e      	mov	r6, r7
 8006336:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800633a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800633e:	ee15 3a10 	vmov	r3, s10
 8006342:	3330      	adds	r3, #48	@ 0x30
 8006344:	f806 3b01 	strb.w	r3, [r6], #1
 8006348:	1bf3      	subs	r3, r6, r7
 800634a:	459a      	cmp	sl, r3
 800634c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006350:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006354:	d132      	bne.n	80063bc <_dtoa_r+0x5fc>
 8006356:	ee37 7b07 	vadd.f64	d7, d7, d7
 800635a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	dc18      	bgt.n	8006396 <_dtoa_r+0x5d6>
 8006364:	eeb4 7b46 	vcmp.f64	d7, d6
 8006368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636c:	d103      	bne.n	8006376 <_dtoa_r+0x5b6>
 800636e:	ee15 3a10 	vmov	r3, s10
 8006372:	07db      	lsls	r3, r3, #31
 8006374:	d40f      	bmi.n	8006396 <_dtoa_r+0x5d6>
 8006376:	9901      	ldr	r1, [sp, #4]
 8006378:	4648      	mov	r0, r9
 800637a:	f000 fbbf 	bl	8006afc <_Bfree>
 800637e:	2300      	movs	r3, #0
 8006380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006382:	7033      	strb	r3, [r6, #0]
 8006384:	f108 0301 	add.w	r3, r8, #1
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 824b 	beq.w	8006828 <_dtoa_r+0xa68>
 8006392:	601e      	str	r6, [r3, #0]
 8006394:	e248      	b.n	8006828 <_dtoa_r+0xa68>
 8006396:	f8cd 8014 	str.w	r8, [sp, #20]
 800639a:	4633      	mov	r3, r6
 800639c:	461e      	mov	r6, r3
 800639e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063a2:	2a39      	cmp	r2, #57	@ 0x39
 80063a4:	d106      	bne.n	80063b4 <_dtoa_r+0x5f4>
 80063a6:	429f      	cmp	r7, r3
 80063a8:	d1f8      	bne.n	800639c <_dtoa_r+0x5dc>
 80063aa:	9a05      	ldr	r2, [sp, #20]
 80063ac:	3201      	adds	r2, #1
 80063ae:	9205      	str	r2, [sp, #20]
 80063b0:	2230      	movs	r2, #48	@ 0x30
 80063b2:	703a      	strb	r2, [r7, #0]
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	3201      	adds	r2, #1
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e7b1      	b.n	8006320 <_dtoa_r+0x560>
 80063bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80063c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c8:	d1b5      	bne.n	8006336 <_dtoa_r+0x576>
 80063ca:	e7d4      	b.n	8006376 <_dtoa_r+0x5b6>
 80063cc:	08007aa0 	.word	0x08007aa0
 80063d0:	08007a78 	.word	0x08007a78
 80063d4:	9908      	ldr	r1, [sp, #32]
 80063d6:	2900      	cmp	r1, #0
 80063d8:	f000 80e9 	beq.w	80065ae <_dtoa_r+0x7ee>
 80063dc:	9907      	ldr	r1, [sp, #28]
 80063de:	2901      	cmp	r1, #1
 80063e0:	f300 80cb 	bgt.w	800657a <_dtoa_r+0x7ba>
 80063e4:	2d00      	cmp	r5, #0
 80063e6:	f000 80c4 	beq.w	8006572 <_dtoa_r+0x7b2>
 80063ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063ee:	9e04      	ldr	r6, [sp, #16]
 80063f0:	461c      	mov	r4, r3
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	2101      	movs	r1, #1
 80063fe:	4413      	add	r3, r2
 8006400:	4648      	mov	r0, r9
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	f000 fc2e 	bl	8006c64 <__i2b>
 8006408:	9b05      	ldr	r3, [sp, #20]
 800640a:	4605      	mov	r5, r0
 800640c:	b166      	cbz	r6, 8006428 <_dtoa_r+0x668>
 800640e:	9a06      	ldr	r2, [sp, #24]
 8006410:	2a00      	cmp	r2, #0
 8006412:	dd09      	ble.n	8006428 <_dtoa_r+0x668>
 8006414:	42b2      	cmp	r2, r6
 8006416:	9904      	ldr	r1, [sp, #16]
 8006418:	bfa8      	it	ge
 800641a:	4632      	movge	r2, r6
 800641c:	1a89      	subs	r1, r1, r2
 800641e:	9104      	str	r1, [sp, #16]
 8006420:	9906      	ldr	r1, [sp, #24]
 8006422:	1ab6      	subs	r6, r6, r2
 8006424:	1a8a      	subs	r2, r1, r2
 8006426:	9206      	str	r2, [sp, #24]
 8006428:	b30b      	cbz	r3, 800646e <_dtoa_r+0x6ae>
 800642a:	9a08      	ldr	r2, [sp, #32]
 800642c:	2a00      	cmp	r2, #0
 800642e:	f000 80c5 	beq.w	80065bc <_dtoa_r+0x7fc>
 8006432:	2c00      	cmp	r4, #0
 8006434:	f000 80bf 	beq.w	80065b6 <_dtoa_r+0x7f6>
 8006438:	4629      	mov	r1, r5
 800643a:	4622      	mov	r2, r4
 800643c:	4648      	mov	r0, r9
 800643e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006440:	f000 fcc8 	bl	8006dd4 <__pow5mult>
 8006444:	9a01      	ldr	r2, [sp, #4]
 8006446:	4601      	mov	r1, r0
 8006448:	4605      	mov	r5, r0
 800644a:	4648      	mov	r0, r9
 800644c:	f000 fc20 	bl	8006c90 <__multiply>
 8006450:	9901      	ldr	r1, [sp, #4]
 8006452:	9005      	str	r0, [sp, #20]
 8006454:	4648      	mov	r0, r9
 8006456:	f000 fb51 	bl	8006afc <_Bfree>
 800645a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800645c:	1b1b      	subs	r3, r3, r4
 800645e:	f000 80b0 	beq.w	80065c2 <_dtoa_r+0x802>
 8006462:	9905      	ldr	r1, [sp, #20]
 8006464:	461a      	mov	r2, r3
 8006466:	4648      	mov	r0, r9
 8006468:	f000 fcb4 	bl	8006dd4 <__pow5mult>
 800646c:	9001      	str	r0, [sp, #4]
 800646e:	2101      	movs	r1, #1
 8006470:	4648      	mov	r0, r9
 8006472:	f000 fbf7 	bl	8006c64 <__i2b>
 8006476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006478:	4604      	mov	r4, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 81da 	beq.w	8006834 <_dtoa_r+0xa74>
 8006480:	461a      	mov	r2, r3
 8006482:	4601      	mov	r1, r0
 8006484:	4648      	mov	r0, r9
 8006486:	f000 fca5 	bl	8006dd4 <__pow5mult>
 800648a:	9b07      	ldr	r3, [sp, #28]
 800648c:	2b01      	cmp	r3, #1
 800648e:	4604      	mov	r4, r0
 8006490:	f300 80a0 	bgt.w	80065d4 <_dtoa_r+0x814>
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f040 8096 	bne.w	80065c8 <_dtoa_r+0x808>
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	f040 8092 	bne.w	80065cc <_dtoa_r+0x80c>
 80064a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064ac:	0d12      	lsrs	r2, r2, #20
 80064ae:	0512      	lsls	r2, r2, #20
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	f000 808d 	beq.w	80065d0 <_dtoa_r+0x810>
 80064b6:	9b04      	ldr	r3, [sp, #16]
 80064b8:	3301      	adds	r3, #1
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	9b06      	ldr	r3, [sp, #24]
 80064be:	3301      	adds	r3, #1
 80064c0:	9306      	str	r3, [sp, #24]
 80064c2:	2301      	movs	r3, #1
 80064c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 81b9 	beq.w	8006840 <_dtoa_r+0xa80>
 80064ce:	6922      	ldr	r2, [r4, #16]
 80064d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80064d4:	6910      	ldr	r0, [r2, #16]
 80064d6:	f000 fb79 	bl	8006bcc <__hi0bits>
 80064da:	f1c0 0020 	rsb	r0, r0, #32
 80064de:	9b06      	ldr	r3, [sp, #24]
 80064e0:	4418      	add	r0, r3
 80064e2:	f010 001f 	ands.w	r0, r0, #31
 80064e6:	f000 8081 	beq.w	80065ec <_dtoa_r+0x82c>
 80064ea:	f1c0 0220 	rsb	r2, r0, #32
 80064ee:	2a04      	cmp	r2, #4
 80064f0:	dd73      	ble.n	80065da <_dtoa_r+0x81a>
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	f1c0 001c 	rsb	r0, r0, #28
 80064f8:	4403      	add	r3, r0
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	4406      	add	r6, r0
 8006500:	4403      	add	r3, r0
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	9b04      	ldr	r3, [sp, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd05      	ble.n	8006516 <_dtoa_r+0x756>
 800650a:	9901      	ldr	r1, [sp, #4]
 800650c:	461a      	mov	r2, r3
 800650e:	4648      	mov	r0, r9
 8006510:	f000 fcba 	bl	8006e88 <__lshift>
 8006514:	9001      	str	r0, [sp, #4]
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd05      	ble.n	8006528 <_dtoa_r+0x768>
 800651c:	4621      	mov	r1, r4
 800651e:	461a      	mov	r2, r3
 8006520:	4648      	mov	r0, r9
 8006522:	f000 fcb1 	bl	8006e88 <__lshift>
 8006526:	4604      	mov	r4, r0
 8006528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800652a:	2b00      	cmp	r3, #0
 800652c:	d060      	beq.n	80065f0 <_dtoa_r+0x830>
 800652e:	9801      	ldr	r0, [sp, #4]
 8006530:	4621      	mov	r1, r4
 8006532:	f000 fd15 	bl	8006f60 <__mcmp>
 8006536:	2800      	cmp	r0, #0
 8006538:	da5a      	bge.n	80065f0 <_dtoa_r+0x830>
 800653a:	f108 33ff 	add.w	r3, r8, #4294967295
 800653e:	9305      	str	r3, [sp, #20]
 8006540:	9901      	ldr	r1, [sp, #4]
 8006542:	2300      	movs	r3, #0
 8006544:	220a      	movs	r2, #10
 8006546:	4648      	mov	r0, r9
 8006548:	f000 fafa 	bl	8006b40 <__multadd>
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	9001      	str	r0, [sp, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8177 	beq.w	8006844 <_dtoa_r+0xa84>
 8006556:	4629      	mov	r1, r5
 8006558:	2300      	movs	r3, #0
 800655a:	220a      	movs	r2, #10
 800655c:	4648      	mov	r0, r9
 800655e:	f000 faef 	bl	8006b40 <__multadd>
 8006562:	f1bb 0f00 	cmp.w	fp, #0
 8006566:	4605      	mov	r5, r0
 8006568:	dc6e      	bgt.n	8006648 <_dtoa_r+0x888>
 800656a:	9b07      	ldr	r3, [sp, #28]
 800656c:	2b02      	cmp	r3, #2
 800656e:	dc48      	bgt.n	8006602 <_dtoa_r+0x842>
 8006570:	e06a      	b.n	8006648 <_dtoa_r+0x888>
 8006572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006574:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006578:	e739      	b.n	80063ee <_dtoa_r+0x62e>
 800657a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800657e:	42a3      	cmp	r3, r4
 8006580:	db07      	blt.n	8006592 <_dtoa_r+0x7d2>
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	eba3 0404 	sub.w	r4, r3, r4
 800658a:	db0b      	blt.n	80065a4 <_dtoa_r+0x7e4>
 800658c:	9e04      	ldr	r6, [sp, #16]
 800658e:	4652      	mov	r2, sl
 8006590:	e72f      	b.n	80063f2 <_dtoa_r+0x632>
 8006592:	1ae2      	subs	r2, r4, r3
 8006594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006596:	9e04      	ldr	r6, [sp, #16]
 8006598:	4413      	add	r3, r2
 800659a:	930a      	str	r3, [sp, #40]	@ 0x28
 800659c:	4652      	mov	r2, sl
 800659e:	4623      	mov	r3, r4
 80065a0:	2400      	movs	r4, #0
 80065a2:	e726      	b.n	80063f2 <_dtoa_r+0x632>
 80065a4:	9a04      	ldr	r2, [sp, #16]
 80065a6:	eba2 060a 	sub.w	r6, r2, sl
 80065aa:	2200      	movs	r2, #0
 80065ac:	e721      	b.n	80063f2 <_dtoa_r+0x632>
 80065ae:	9e04      	ldr	r6, [sp, #16]
 80065b0:	9d08      	ldr	r5, [sp, #32]
 80065b2:	461c      	mov	r4, r3
 80065b4:	e72a      	b.n	800640c <_dtoa_r+0x64c>
 80065b6:	9a01      	ldr	r2, [sp, #4]
 80065b8:	9205      	str	r2, [sp, #20]
 80065ba:	e752      	b.n	8006462 <_dtoa_r+0x6a2>
 80065bc:	9901      	ldr	r1, [sp, #4]
 80065be:	461a      	mov	r2, r3
 80065c0:	e751      	b.n	8006466 <_dtoa_r+0x6a6>
 80065c2:	9b05      	ldr	r3, [sp, #20]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	e752      	b.n	800646e <_dtoa_r+0x6ae>
 80065c8:	2300      	movs	r3, #0
 80065ca:	e77b      	b.n	80064c4 <_dtoa_r+0x704>
 80065cc:	9b02      	ldr	r3, [sp, #8]
 80065ce:	e779      	b.n	80064c4 <_dtoa_r+0x704>
 80065d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80065d2:	e778      	b.n	80064c6 <_dtoa_r+0x706>
 80065d4:	2300      	movs	r3, #0
 80065d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d8:	e779      	b.n	80064ce <_dtoa_r+0x70e>
 80065da:	d093      	beq.n	8006504 <_dtoa_r+0x744>
 80065dc:	9b04      	ldr	r3, [sp, #16]
 80065de:	321c      	adds	r2, #28
 80065e0:	4413      	add	r3, r2
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	9b06      	ldr	r3, [sp, #24]
 80065e6:	4416      	add	r6, r2
 80065e8:	4413      	add	r3, r2
 80065ea:	e78a      	b.n	8006502 <_dtoa_r+0x742>
 80065ec:	4602      	mov	r2, r0
 80065ee:	e7f5      	b.n	80065dc <_dtoa_r+0x81c>
 80065f0:	f1ba 0f00 	cmp.w	sl, #0
 80065f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80065f8:	46d3      	mov	fp, sl
 80065fa:	dc21      	bgt.n	8006640 <_dtoa_r+0x880>
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	dd1e      	ble.n	8006640 <_dtoa_r+0x880>
 8006602:	f1bb 0f00 	cmp.w	fp, #0
 8006606:	f47f addc 	bne.w	80061c2 <_dtoa_r+0x402>
 800660a:	4621      	mov	r1, r4
 800660c:	465b      	mov	r3, fp
 800660e:	2205      	movs	r2, #5
 8006610:	4648      	mov	r0, r9
 8006612:	f000 fa95 	bl	8006b40 <__multadd>
 8006616:	4601      	mov	r1, r0
 8006618:	4604      	mov	r4, r0
 800661a:	9801      	ldr	r0, [sp, #4]
 800661c:	f000 fca0 	bl	8006f60 <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	f77f adce 	ble.w	80061c2 <_dtoa_r+0x402>
 8006626:	463e      	mov	r6, r7
 8006628:	2331      	movs	r3, #49	@ 0x31
 800662a:	f806 3b01 	strb.w	r3, [r6], #1
 800662e:	9b05      	ldr	r3, [sp, #20]
 8006630:	3301      	adds	r3, #1
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	e5c9      	b.n	80061ca <_dtoa_r+0x40a>
 8006636:	f8cd 8014 	str.w	r8, [sp, #20]
 800663a:	4654      	mov	r4, sl
 800663c:	4625      	mov	r5, r4
 800663e:	e7f2      	b.n	8006626 <_dtoa_r+0x866>
 8006640:	9b08      	ldr	r3, [sp, #32]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8102 	beq.w	800684c <_dtoa_r+0xa8c>
 8006648:	2e00      	cmp	r6, #0
 800664a:	dd05      	ble.n	8006658 <_dtoa_r+0x898>
 800664c:	4629      	mov	r1, r5
 800664e:	4632      	mov	r2, r6
 8006650:	4648      	mov	r0, r9
 8006652:	f000 fc19 	bl	8006e88 <__lshift>
 8006656:	4605      	mov	r5, r0
 8006658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d058      	beq.n	8006710 <_dtoa_r+0x950>
 800665e:	6869      	ldr	r1, [r5, #4]
 8006660:	4648      	mov	r0, r9
 8006662:	f000 fa0b 	bl	8006a7c <_Balloc>
 8006666:	4606      	mov	r6, r0
 8006668:	b928      	cbnz	r0, 8006676 <_dtoa_r+0x8b6>
 800666a:	4b82      	ldr	r3, [pc, #520]	@ (8006874 <_dtoa_r+0xab4>)
 800666c:	4602      	mov	r2, r0
 800666e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006672:	f7ff bbbe 	b.w	8005df2 <_dtoa_r+0x32>
 8006676:	692a      	ldr	r2, [r5, #16]
 8006678:	3202      	adds	r2, #2
 800667a:	0092      	lsls	r2, r2, #2
 800667c:	f105 010c 	add.w	r1, r5, #12
 8006680:	300c      	adds	r0, #12
 8006682:	f7ff fb06 	bl	8005c92 <memcpy>
 8006686:	2201      	movs	r2, #1
 8006688:	4631      	mov	r1, r6
 800668a:	4648      	mov	r0, r9
 800668c:	f000 fbfc 	bl	8006e88 <__lshift>
 8006690:	1c7b      	adds	r3, r7, #1
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	eb07 030b 	add.w	r3, r7, fp
 8006698:	9309      	str	r3, [sp, #36]	@ 0x24
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	46a8      	mov	r8, r5
 80066a2:	9308      	str	r3, [sp, #32]
 80066a4:	4605      	mov	r5, r0
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	9801      	ldr	r0, [sp, #4]
 80066aa:	4621      	mov	r1, r4
 80066ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80066b0:	f7ff fafd 	bl	8005cae <quorem>
 80066b4:	4641      	mov	r1, r8
 80066b6:	9002      	str	r0, [sp, #8]
 80066b8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80066bc:	9801      	ldr	r0, [sp, #4]
 80066be:	f000 fc4f 	bl	8006f60 <__mcmp>
 80066c2:	462a      	mov	r2, r5
 80066c4:	9006      	str	r0, [sp, #24]
 80066c6:	4621      	mov	r1, r4
 80066c8:	4648      	mov	r0, r9
 80066ca:	f000 fc65 	bl	8006f98 <__mdiff>
 80066ce:	68c2      	ldr	r2, [r0, #12]
 80066d0:	4606      	mov	r6, r0
 80066d2:	b9fa      	cbnz	r2, 8006714 <_dtoa_r+0x954>
 80066d4:	4601      	mov	r1, r0
 80066d6:	9801      	ldr	r0, [sp, #4]
 80066d8:	f000 fc42 	bl	8006f60 <__mcmp>
 80066dc:	4602      	mov	r2, r0
 80066de:	4631      	mov	r1, r6
 80066e0:	4648      	mov	r0, r9
 80066e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80066e4:	f000 fa0a 	bl	8006afc <_Bfree>
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066ec:	9e04      	ldr	r6, [sp, #16]
 80066ee:	ea42 0103 	orr.w	r1, r2, r3
 80066f2:	9b08      	ldr	r3, [sp, #32]
 80066f4:	4319      	orrs	r1, r3
 80066f6:	d10f      	bne.n	8006718 <_dtoa_r+0x958>
 80066f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80066fc:	d028      	beq.n	8006750 <_dtoa_r+0x990>
 80066fe:	9b06      	ldr	r3, [sp, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	dd02      	ble.n	800670a <_dtoa_r+0x94a>
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800670a:	f88b a000 	strb.w	sl, [fp]
 800670e:	e55e      	b.n	80061ce <_dtoa_r+0x40e>
 8006710:	4628      	mov	r0, r5
 8006712:	e7bd      	b.n	8006690 <_dtoa_r+0x8d0>
 8006714:	2201      	movs	r2, #1
 8006716:	e7e2      	b.n	80066de <_dtoa_r+0x91e>
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	db04      	blt.n	8006728 <_dtoa_r+0x968>
 800671e:	9907      	ldr	r1, [sp, #28]
 8006720:	430b      	orrs	r3, r1
 8006722:	9908      	ldr	r1, [sp, #32]
 8006724:	430b      	orrs	r3, r1
 8006726:	d120      	bne.n	800676a <_dtoa_r+0x9aa>
 8006728:	2a00      	cmp	r2, #0
 800672a:	ddee      	ble.n	800670a <_dtoa_r+0x94a>
 800672c:	9901      	ldr	r1, [sp, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	4648      	mov	r0, r9
 8006732:	f000 fba9 	bl	8006e88 <__lshift>
 8006736:	4621      	mov	r1, r4
 8006738:	9001      	str	r0, [sp, #4]
 800673a:	f000 fc11 	bl	8006f60 <__mcmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	dc03      	bgt.n	800674a <_dtoa_r+0x98a>
 8006742:	d1e2      	bne.n	800670a <_dtoa_r+0x94a>
 8006744:	f01a 0f01 	tst.w	sl, #1
 8006748:	d0df      	beq.n	800670a <_dtoa_r+0x94a>
 800674a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800674e:	d1d9      	bne.n	8006704 <_dtoa_r+0x944>
 8006750:	2339      	movs	r3, #57	@ 0x39
 8006752:	f88b 3000 	strb.w	r3, [fp]
 8006756:	4633      	mov	r3, r6
 8006758:	461e      	mov	r6, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006760:	2a39      	cmp	r2, #57	@ 0x39
 8006762:	d052      	beq.n	800680a <_dtoa_r+0xa4a>
 8006764:	3201      	adds	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e531      	b.n	80061ce <_dtoa_r+0x40e>
 800676a:	2a00      	cmp	r2, #0
 800676c:	dd07      	ble.n	800677e <_dtoa_r+0x9be>
 800676e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006772:	d0ed      	beq.n	8006750 <_dtoa_r+0x990>
 8006774:	f10a 0301 	add.w	r3, sl, #1
 8006778:	f88b 3000 	strb.w	r3, [fp]
 800677c:	e527      	b.n	80061ce <_dtoa_r+0x40e>
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006782:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006786:	4293      	cmp	r3, r2
 8006788:	d029      	beq.n	80067de <_dtoa_r+0xa1e>
 800678a:	9901      	ldr	r1, [sp, #4]
 800678c:	2300      	movs	r3, #0
 800678e:	220a      	movs	r2, #10
 8006790:	4648      	mov	r0, r9
 8006792:	f000 f9d5 	bl	8006b40 <__multadd>
 8006796:	45a8      	cmp	r8, r5
 8006798:	9001      	str	r0, [sp, #4]
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	f04f 020a 	mov.w	r2, #10
 80067a2:	4641      	mov	r1, r8
 80067a4:	4648      	mov	r0, r9
 80067a6:	d107      	bne.n	80067b8 <_dtoa_r+0x9f8>
 80067a8:	f000 f9ca 	bl	8006b40 <__multadd>
 80067ac:	4680      	mov	r8, r0
 80067ae:	4605      	mov	r5, r0
 80067b0:	9b04      	ldr	r3, [sp, #16]
 80067b2:	3301      	adds	r3, #1
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	e776      	b.n	80066a6 <_dtoa_r+0x8e6>
 80067b8:	f000 f9c2 	bl	8006b40 <__multadd>
 80067bc:	4629      	mov	r1, r5
 80067be:	4680      	mov	r8, r0
 80067c0:	2300      	movs	r3, #0
 80067c2:	220a      	movs	r2, #10
 80067c4:	4648      	mov	r0, r9
 80067c6:	f000 f9bb 	bl	8006b40 <__multadd>
 80067ca:	4605      	mov	r5, r0
 80067cc:	e7f0      	b.n	80067b0 <_dtoa_r+0x9f0>
 80067ce:	f1bb 0f00 	cmp.w	fp, #0
 80067d2:	bfcc      	ite	gt
 80067d4:	465e      	movgt	r6, fp
 80067d6:	2601      	movle	r6, #1
 80067d8:	443e      	add	r6, r7
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	9901      	ldr	r1, [sp, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	4648      	mov	r0, r9
 80067e4:	f000 fb50 	bl	8006e88 <__lshift>
 80067e8:	4621      	mov	r1, r4
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	f000 fbb8 	bl	8006f60 <__mcmp>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	dcb0      	bgt.n	8006756 <_dtoa_r+0x996>
 80067f4:	d102      	bne.n	80067fc <_dtoa_r+0xa3c>
 80067f6:	f01a 0f01 	tst.w	sl, #1
 80067fa:	d1ac      	bne.n	8006756 <_dtoa_r+0x996>
 80067fc:	4633      	mov	r3, r6
 80067fe:	461e      	mov	r6, r3
 8006800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006804:	2a30      	cmp	r2, #48	@ 0x30
 8006806:	d0fa      	beq.n	80067fe <_dtoa_r+0xa3e>
 8006808:	e4e1      	b.n	80061ce <_dtoa_r+0x40e>
 800680a:	429f      	cmp	r7, r3
 800680c:	d1a4      	bne.n	8006758 <_dtoa_r+0x998>
 800680e:	9b05      	ldr	r3, [sp, #20]
 8006810:	3301      	adds	r3, #1
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	2331      	movs	r3, #49	@ 0x31
 8006816:	703b      	strb	r3, [r7, #0]
 8006818:	e4d9      	b.n	80061ce <_dtoa_r+0x40e>
 800681a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800681c:	4f16      	ldr	r7, [pc, #88]	@ (8006878 <_dtoa_r+0xab8>)
 800681e:	b11b      	cbz	r3, 8006828 <_dtoa_r+0xa68>
 8006820:	f107 0308 	add.w	r3, r7, #8
 8006824:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	4638      	mov	r0, r7
 800682a:	b011      	add	sp, #68	@ 0x44
 800682c:	ecbd 8b02 	vpop	{d8}
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b01      	cmp	r3, #1
 8006838:	f77f ae2c 	ble.w	8006494 <_dtoa_r+0x6d4>
 800683c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800683e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006840:	2001      	movs	r0, #1
 8006842:	e64c      	b.n	80064de <_dtoa_r+0x71e>
 8006844:	f1bb 0f00 	cmp.w	fp, #0
 8006848:	f77f aed8 	ble.w	80065fc <_dtoa_r+0x83c>
 800684c:	463e      	mov	r6, r7
 800684e:	9801      	ldr	r0, [sp, #4]
 8006850:	4621      	mov	r1, r4
 8006852:	f7ff fa2c 	bl	8005cae <quorem>
 8006856:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800685a:	f806 ab01 	strb.w	sl, [r6], #1
 800685e:	1bf2      	subs	r2, r6, r7
 8006860:	4593      	cmp	fp, r2
 8006862:	ddb4      	ble.n	80067ce <_dtoa_r+0xa0e>
 8006864:	9901      	ldr	r1, [sp, #4]
 8006866:	2300      	movs	r3, #0
 8006868:	220a      	movs	r2, #10
 800686a:	4648      	mov	r0, r9
 800686c:	f000 f968 	bl	8006b40 <__multadd>
 8006870:	9001      	str	r0, [sp, #4]
 8006872:	e7ec      	b.n	800684e <_dtoa_r+0xa8e>
 8006874:	080079a8 	.word	0x080079a8
 8006878:	0800792c 	.word	0x0800792c

0800687c <_free_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4605      	mov	r5, r0
 8006880:	2900      	cmp	r1, #0
 8006882:	d041      	beq.n	8006908 <_free_r+0x8c>
 8006884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006888:	1f0c      	subs	r4, r1, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfb8      	it	lt
 800688e:	18e4      	addlt	r4, r4, r3
 8006890:	f000 f8e8 	bl	8006a64 <__malloc_lock>
 8006894:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <_free_r+0x90>)
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	b933      	cbnz	r3, 80068a8 <_free_r+0x2c>
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	6014      	str	r4, [r2, #0]
 800689e:	4628      	mov	r0, r5
 80068a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a4:	f000 b8e4 	b.w	8006a70 <__malloc_unlock>
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	d908      	bls.n	80068be <_free_r+0x42>
 80068ac:	6820      	ldr	r0, [r4, #0]
 80068ae:	1821      	adds	r1, r4, r0
 80068b0:	428b      	cmp	r3, r1
 80068b2:	bf01      	itttt	eq
 80068b4:	6819      	ldreq	r1, [r3, #0]
 80068b6:	685b      	ldreq	r3, [r3, #4]
 80068b8:	1809      	addeq	r1, r1, r0
 80068ba:	6021      	streq	r1, [r4, #0]
 80068bc:	e7ed      	b.n	800689a <_free_r+0x1e>
 80068be:	461a      	mov	r2, r3
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b10b      	cbz	r3, 80068c8 <_free_r+0x4c>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d9fa      	bls.n	80068be <_free_r+0x42>
 80068c8:	6811      	ldr	r1, [r2, #0]
 80068ca:	1850      	adds	r0, r2, r1
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d10b      	bne.n	80068e8 <_free_r+0x6c>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	4401      	add	r1, r0
 80068d4:	1850      	adds	r0, r2, r1
 80068d6:	4283      	cmp	r3, r0
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	d1e0      	bne.n	800689e <_free_r+0x22>
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	6053      	str	r3, [r2, #4]
 80068e2:	4408      	add	r0, r1
 80068e4:	6010      	str	r0, [r2, #0]
 80068e6:	e7da      	b.n	800689e <_free_r+0x22>
 80068e8:	d902      	bls.n	80068f0 <_free_r+0x74>
 80068ea:	230c      	movs	r3, #12
 80068ec:	602b      	str	r3, [r5, #0]
 80068ee:	e7d6      	b.n	800689e <_free_r+0x22>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf04      	itt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	bf04      	itt	eq
 8006900:	1809      	addeq	r1, r1, r0
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	6054      	str	r4, [r2, #4]
 8006906:	e7ca      	b.n	800689e <_free_r+0x22>
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	2400042c 	.word	0x2400042c

08006910 <malloc>:
 8006910:	4b02      	ldr	r3, [pc, #8]	@ (800691c <malloc+0xc>)
 8006912:	4601      	mov	r1, r0
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f000 b825 	b.w	8006964 <_malloc_r>
 800691a:	bf00      	nop
 800691c:	24000048 	.word	0x24000048

08006920 <sbrk_aligned>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	4e0f      	ldr	r6, [pc, #60]	@ (8006960 <sbrk_aligned+0x40>)
 8006924:	460c      	mov	r4, r1
 8006926:	6831      	ldr	r1, [r6, #0]
 8006928:	4605      	mov	r5, r0
 800692a:	b911      	cbnz	r1, 8006932 <sbrk_aligned+0x12>
 800692c:	f000 fe92 	bl	8007654 <_sbrk_r>
 8006930:	6030      	str	r0, [r6, #0]
 8006932:	4621      	mov	r1, r4
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fe8d 	bl	8007654 <_sbrk_r>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d103      	bne.n	8006946 <sbrk_aligned+0x26>
 800693e:	f04f 34ff 	mov.w	r4, #4294967295
 8006942:	4620      	mov	r0, r4
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	1cc4      	adds	r4, r0, #3
 8006948:	f024 0403 	bic.w	r4, r4, #3
 800694c:	42a0      	cmp	r0, r4
 800694e:	d0f8      	beq.n	8006942 <sbrk_aligned+0x22>
 8006950:	1a21      	subs	r1, r4, r0
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fe7e 	bl	8007654 <_sbrk_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d1f2      	bne.n	8006942 <sbrk_aligned+0x22>
 800695c:	e7ef      	b.n	800693e <sbrk_aligned+0x1e>
 800695e:	bf00      	nop
 8006960:	24000428 	.word	0x24000428

08006964 <_malloc_r>:
 8006964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4606      	mov	r6, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d904      	bls.n	800698a <_malloc_r+0x26>
 8006980:	230c      	movs	r3, #12
 8006982:	6033      	str	r3, [r6, #0]
 8006984:	2000      	movs	r0, #0
 8006986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a60 <_malloc_r+0xfc>
 800698e:	f000 f869 	bl	8006a64 <__malloc_lock>
 8006992:	f8d8 3000 	ldr.w	r3, [r8]
 8006996:	461c      	mov	r4, r3
 8006998:	bb44      	cbnz	r4, 80069ec <_malloc_r+0x88>
 800699a:	4629      	mov	r1, r5
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff ffbf 	bl	8006920 <sbrk_aligned>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	4604      	mov	r4, r0
 80069a6:	d158      	bne.n	8006a5a <_malloc_r+0xf6>
 80069a8:	f8d8 4000 	ldr.w	r4, [r8]
 80069ac:	4627      	mov	r7, r4
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	d143      	bne.n	8006a3a <_malloc_r+0xd6>
 80069b2:	2c00      	cmp	r4, #0
 80069b4:	d04b      	beq.n	8006a4e <_malloc_r+0xea>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	eb04 0903 	add.w	r9, r4, r3
 80069c0:	f000 fe48 	bl	8007654 <_sbrk_r>
 80069c4:	4581      	cmp	r9, r0
 80069c6:	d142      	bne.n	8006a4e <_malloc_r+0xea>
 80069c8:	6821      	ldr	r1, [r4, #0]
 80069ca:	1a6d      	subs	r5, r5, r1
 80069cc:	4629      	mov	r1, r5
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7ff ffa6 	bl	8006920 <sbrk_aligned>
 80069d4:	3001      	adds	r0, #1
 80069d6:	d03a      	beq.n	8006a4e <_malloc_r+0xea>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	442b      	add	r3, r5
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	f8d8 3000 	ldr.w	r3, [r8]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	bb62      	cbnz	r2, 8006a40 <_malloc_r+0xdc>
 80069e6:	f8c8 7000 	str.w	r7, [r8]
 80069ea:	e00f      	b.n	8006a0c <_malloc_r+0xa8>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	1b52      	subs	r2, r2, r5
 80069f0:	d420      	bmi.n	8006a34 <_malloc_r+0xd0>
 80069f2:	2a0b      	cmp	r2, #11
 80069f4:	d917      	bls.n	8006a26 <_malloc_r+0xc2>
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	6025      	str	r5, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	6059      	strne	r1, [r3, #4]
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	bf08      	it	eq
 8006a04:	f8c8 1000 	streq.w	r1, [r8]
 8006a08:	5162      	str	r2, [r4, r5]
 8006a0a:	604b      	str	r3, [r1, #4]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 f82f 	bl	8006a70 <__malloc_unlock>
 8006a12:	f104 000b 	add.w	r0, r4, #11
 8006a16:	1d23      	adds	r3, r4, #4
 8006a18:	f020 0007 	bic.w	r0, r0, #7
 8006a1c:	1ac2      	subs	r2, r0, r3
 8006a1e:	bf1c      	itt	ne
 8006a20:	1a1b      	subne	r3, r3, r0
 8006a22:	50a3      	strne	r3, [r4, r2]
 8006a24:	e7af      	b.n	8006986 <_malloc_r+0x22>
 8006a26:	6862      	ldr	r2, [r4, #4]
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	bf0c      	ite	eq
 8006a2c:	f8c8 2000 	streq.w	r2, [r8]
 8006a30:	605a      	strne	r2, [r3, #4]
 8006a32:	e7eb      	b.n	8006a0c <_malloc_r+0xa8>
 8006a34:	4623      	mov	r3, r4
 8006a36:	6864      	ldr	r4, [r4, #4]
 8006a38:	e7ae      	b.n	8006998 <_malloc_r+0x34>
 8006a3a:	463c      	mov	r4, r7
 8006a3c:	687f      	ldr	r7, [r7, #4]
 8006a3e:	e7b6      	b.n	80069ae <_malloc_r+0x4a>
 8006a40:	461a      	mov	r2, r3
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d1fb      	bne.n	8006a40 <_malloc_r+0xdc>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6053      	str	r3, [r2, #4]
 8006a4c:	e7de      	b.n	8006a0c <_malloc_r+0xa8>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 f80c 	bl	8006a70 <__malloc_unlock>
 8006a58:	e794      	b.n	8006984 <_malloc_r+0x20>
 8006a5a:	6005      	str	r5, [r0, #0]
 8006a5c:	e7d6      	b.n	8006a0c <_malloc_r+0xa8>
 8006a5e:	bf00      	nop
 8006a60:	2400042c 	.word	0x2400042c

08006a64 <__malloc_lock>:
 8006a64:	4801      	ldr	r0, [pc, #4]	@ (8006a6c <__malloc_lock+0x8>)
 8006a66:	f7ff b912 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	24000424 	.word	0x24000424

08006a70 <__malloc_unlock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	@ (8006a78 <__malloc_unlock+0x8>)
 8006a72:	f7ff b90d 	b.w	8005c90 <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	24000424 	.word	0x24000424

08006a7c <_Balloc>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	69c6      	ldr	r6, [r0, #28]
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	b976      	cbnz	r6, 8006aa4 <_Balloc+0x28>
 8006a86:	2010      	movs	r0, #16
 8006a88:	f7ff ff42 	bl	8006910 <malloc>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	61e0      	str	r0, [r4, #28]
 8006a90:	b920      	cbnz	r0, 8006a9c <_Balloc+0x20>
 8006a92:	4b18      	ldr	r3, [pc, #96]	@ (8006af4 <_Balloc+0x78>)
 8006a94:	4818      	ldr	r0, [pc, #96]	@ (8006af8 <_Balloc+0x7c>)
 8006a96:	216b      	movs	r1, #107	@ 0x6b
 8006a98:	f000 fdec 	bl	8007674 <__assert_func>
 8006a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aa0:	6006      	str	r6, [r0, #0]
 8006aa2:	60c6      	str	r6, [r0, #12]
 8006aa4:	69e6      	ldr	r6, [r4, #28]
 8006aa6:	68f3      	ldr	r3, [r6, #12]
 8006aa8:	b183      	cbz	r3, 8006acc <_Balloc+0x50>
 8006aaa:	69e3      	ldr	r3, [r4, #28]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ab2:	b9b8      	cbnz	r0, 8006ae4 <_Balloc+0x68>
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8006aba:	1d72      	adds	r2, r6, #5
 8006abc:	0092      	lsls	r2, r2, #2
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fdf6 	bl	80076b0 <_calloc_r>
 8006ac4:	b160      	cbz	r0, 8006ae0 <_Balloc+0x64>
 8006ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006aca:	e00e      	b.n	8006aea <_Balloc+0x6e>
 8006acc:	2221      	movs	r2, #33	@ 0x21
 8006ace:	2104      	movs	r1, #4
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fded 	bl	80076b0 <_calloc_r>
 8006ad6:	69e3      	ldr	r3, [r4, #28]
 8006ad8:	60f0      	str	r0, [r6, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e4      	bne.n	8006aaa <_Balloc+0x2e>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	6802      	ldr	r2, [r0, #0]
 8006ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006aea:	2300      	movs	r3, #0
 8006aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006af0:	e7f7      	b.n	8006ae2 <_Balloc+0x66>
 8006af2:	bf00      	nop
 8006af4:	08007939 	.word	0x08007939
 8006af8:	080079b9 	.word	0x080079b9

08006afc <_Bfree>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	69c6      	ldr	r6, [r0, #28]
 8006b00:	4605      	mov	r5, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	b976      	cbnz	r6, 8006b24 <_Bfree+0x28>
 8006b06:	2010      	movs	r0, #16
 8006b08:	f7ff ff02 	bl	8006910 <malloc>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	61e8      	str	r0, [r5, #28]
 8006b10:	b920      	cbnz	r0, 8006b1c <_Bfree+0x20>
 8006b12:	4b09      	ldr	r3, [pc, #36]	@ (8006b38 <_Bfree+0x3c>)
 8006b14:	4809      	ldr	r0, [pc, #36]	@ (8006b3c <_Bfree+0x40>)
 8006b16:	218f      	movs	r1, #143	@ 0x8f
 8006b18:	f000 fdac 	bl	8007674 <__assert_func>
 8006b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b20:	6006      	str	r6, [r0, #0]
 8006b22:	60c6      	str	r6, [r0, #12]
 8006b24:	b13c      	cbz	r4, 8006b36 <_Bfree+0x3a>
 8006b26:	69eb      	ldr	r3, [r5, #28]
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b30:	6021      	str	r1, [r4, #0]
 8006b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	08007939 	.word	0x08007939
 8006b3c:	080079b9 	.word	0x080079b9

08006b40 <__multadd>:
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	690d      	ldr	r5, [r1, #16]
 8006b46:	4607      	mov	r7, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	461e      	mov	r6, r3
 8006b4c:	f101 0c14 	add.w	ip, r1, #20
 8006b50:	2000      	movs	r0, #0
 8006b52:	f8dc 3000 	ldr.w	r3, [ip]
 8006b56:	b299      	uxth	r1, r3
 8006b58:	fb02 6101 	mla	r1, r2, r1, r6
 8006b5c:	0c1e      	lsrs	r6, r3, #16
 8006b5e:	0c0b      	lsrs	r3, r1, #16
 8006b60:	fb02 3306 	mla	r3, r2, r6, r3
 8006b64:	b289      	uxth	r1, r1
 8006b66:	3001      	adds	r0, #1
 8006b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b6c:	4285      	cmp	r5, r0
 8006b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b76:	dcec      	bgt.n	8006b52 <__multadd+0x12>
 8006b78:	b30e      	cbz	r6, 8006bbe <__multadd+0x7e>
 8006b7a:	68a3      	ldr	r3, [r4, #8]
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	dc19      	bgt.n	8006bb4 <__multadd+0x74>
 8006b80:	6861      	ldr	r1, [r4, #4]
 8006b82:	4638      	mov	r0, r7
 8006b84:	3101      	adds	r1, #1
 8006b86:	f7ff ff79 	bl	8006a7c <_Balloc>
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	b928      	cbnz	r0, 8006b9a <__multadd+0x5a>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc4 <__multadd+0x84>)
 8006b92:	480d      	ldr	r0, [pc, #52]	@ (8006bc8 <__multadd+0x88>)
 8006b94:	21ba      	movs	r1, #186	@ 0xba
 8006b96:	f000 fd6d 	bl	8007674 <__assert_func>
 8006b9a:	6922      	ldr	r2, [r4, #16]
 8006b9c:	3202      	adds	r2, #2
 8006b9e:	f104 010c 	add.w	r1, r4, #12
 8006ba2:	0092      	lsls	r2, r2, #2
 8006ba4:	300c      	adds	r0, #12
 8006ba6:	f7ff f874 	bl	8005c92 <memcpy>
 8006baa:	4621      	mov	r1, r4
 8006bac:	4638      	mov	r0, r7
 8006bae:	f7ff ffa5 	bl	8006afc <_Bfree>
 8006bb2:	4644      	mov	r4, r8
 8006bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bb8:	3501      	adds	r5, #1
 8006bba:	615e      	str	r6, [r3, #20]
 8006bbc:	6125      	str	r5, [r4, #16]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc4:	080079a8 	.word	0x080079a8
 8006bc8:	080079b9 	.word	0x080079b9

08006bcc <__hi0bits>:
 8006bcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	bf36      	itet	cc
 8006bd4:	0403      	lslcc	r3, r0, #16
 8006bd6:	2000      	movcs	r0, #0
 8006bd8:	2010      	movcc	r0, #16
 8006bda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bde:	bf3c      	itt	cc
 8006be0:	021b      	lslcc	r3, r3, #8
 8006be2:	3008      	addcc	r0, #8
 8006be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be8:	bf3c      	itt	cc
 8006bea:	011b      	lslcc	r3, r3, #4
 8006bec:	3004      	addcc	r0, #4
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf2:	bf3c      	itt	cc
 8006bf4:	009b      	lslcc	r3, r3, #2
 8006bf6:	3002      	addcc	r0, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	db05      	blt.n	8006c08 <__hi0bits+0x3c>
 8006bfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c00:	f100 0001 	add.w	r0, r0, #1
 8006c04:	bf08      	it	eq
 8006c06:	2020      	moveq	r0, #32
 8006c08:	4770      	bx	lr

08006c0a <__lo0bits>:
 8006c0a:	6803      	ldr	r3, [r0, #0]
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	f013 0007 	ands.w	r0, r3, #7
 8006c12:	d00b      	beq.n	8006c2c <__lo0bits+0x22>
 8006c14:	07d9      	lsls	r1, r3, #31
 8006c16:	d421      	bmi.n	8006c5c <__lo0bits+0x52>
 8006c18:	0798      	lsls	r0, r3, #30
 8006c1a:	bf49      	itett	mi
 8006c1c:	085b      	lsrmi	r3, r3, #1
 8006c1e:	089b      	lsrpl	r3, r3, #2
 8006c20:	2001      	movmi	r0, #1
 8006c22:	6013      	strmi	r3, [r2, #0]
 8006c24:	bf5c      	itt	pl
 8006c26:	6013      	strpl	r3, [r2, #0]
 8006c28:	2002      	movpl	r0, #2
 8006c2a:	4770      	bx	lr
 8006c2c:	b299      	uxth	r1, r3
 8006c2e:	b909      	cbnz	r1, 8006c34 <__lo0bits+0x2a>
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	2010      	movs	r0, #16
 8006c34:	b2d9      	uxtb	r1, r3
 8006c36:	b909      	cbnz	r1, 8006c3c <__lo0bits+0x32>
 8006c38:	3008      	adds	r0, #8
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	0719      	lsls	r1, r3, #28
 8006c3e:	bf04      	itt	eq
 8006c40:	091b      	lsreq	r3, r3, #4
 8006c42:	3004      	addeq	r0, #4
 8006c44:	0799      	lsls	r1, r3, #30
 8006c46:	bf04      	itt	eq
 8006c48:	089b      	lsreq	r3, r3, #2
 8006c4a:	3002      	addeq	r0, #2
 8006c4c:	07d9      	lsls	r1, r3, #31
 8006c4e:	d403      	bmi.n	8006c58 <__lo0bits+0x4e>
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	f100 0001 	add.w	r0, r0, #1
 8006c56:	d003      	beq.n	8006c60 <__lo0bits+0x56>
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4770      	bx	lr
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	4770      	bx	lr
 8006c60:	2020      	movs	r0, #32
 8006c62:	4770      	bx	lr

08006c64 <__i2b>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	2101      	movs	r1, #1
 8006c6a:	f7ff ff07 	bl	8006a7c <_Balloc>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	b928      	cbnz	r0, 8006c7e <__i2b+0x1a>
 8006c72:	4b05      	ldr	r3, [pc, #20]	@ (8006c88 <__i2b+0x24>)
 8006c74:	4805      	ldr	r0, [pc, #20]	@ (8006c8c <__i2b+0x28>)
 8006c76:	f240 1145 	movw	r1, #325	@ 0x145
 8006c7a:	f000 fcfb 	bl	8007674 <__assert_func>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	6144      	str	r4, [r0, #20]
 8006c82:	6103      	str	r3, [r0, #16]
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	bf00      	nop
 8006c88:	080079a8 	.word	0x080079a8
 8006c8c:	080079b9 	.word	0x080079b9

08006c90 <__multiply>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	4617      	mov	r7, r2
 8006c96:	690a      	ldr	r2, [r1, #16]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	bfa8      	it	ge
 8006c9e:	463b      	movge	r3, r7
 8006ca0:	4689      	mov	r9, r1
 8006ca2:	bfa4      	itt	ge
 8006ca4:	460f      	movge	r7, r1
 8006ca6:	4699      	movge	r9, r3
 8006ca8:	693d      	ldr	r5, [r7, #16]
 8006caa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	eb05 060a 	add.w	r6, r5, sl
 8006cb6:	42b3      	cmp	r3, r6
 8006cb8:	b085      	sub	sp, #20
 8006cba:	bfb8      	it	lt
 8006cbc:	3101      	addlt	r1, #1
 8006cbe:	f7ff fedd 	bl	8006a7c <_Balloc>
 8006cc2:	b930      	cbnz	r0, 8006cd2 <__multiply+0x42>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4b41      	ldr	r3, [pc, #260]	@ (8006dcc <__multiply+0x13c>)
 8006cc8:	4841      	ldr	r0, [pc, #260]	@ (8006dd0 <__multiply+0x140>)
 8006cca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cce:	f000 fcd1 	bl	8007674 <__assert_func>
 8006cd2:	f100 0414 	add.w	r4, r0, #20
 8006cd6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006cda:	4623      	mov	r3, r4
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4573      	cmp	r3, lr
 8006ce0:	d320      	bcc.n	8006d24 <__multiply+0x94>
 8006ce2:	f107 0814 	add.w	r8, r7, #20
 8006ce6:	f109 0114 	add.w	r1, r9, #20
 8006cea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006cee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006cf2:	9302      	str	r3, [sp, #8]
 8006cf4:	1beb      	subs	r3, r5, r7
 8006cf6:	3b15      	subs	r3, #21
 8006cf8:	f023 0303 	bic.w	r3, r3, #3
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	3715      	adds	r7, #21
 8006d00:	42bd      	cmp	r5, r7
 8006d02:	bf38      	it	cc
 8006d04:	2304      	movcc	r3, #4
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	9103      	str	r1, [sp, #12]
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	d80c      	bhi.n	8006d2a <__multiply+0x9a>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	dd03      	ble.n	8006d1c <__multiply+0x8c>
 8006d14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d055      	beq.n	8006dc8 <__multiply+0x138>
 8006d1c:	6106      	str	r6, [r0, #16]
 8006d1e:	b005      	add	sp, #20
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	f843 2b04 	str.w	r2, [r3], #4
 8006d28:	e7d9      	b.n	8006cde <__multiply+0x4e>
 8006d2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d2e:	f1ba 0f00 	cmp.w	sl, #0
 8006d32:	d01f      	beq.n	8006d74 <__multiply+0xe4>
 8006d34:	46c4      	mov	ip, r8
 8006d36:	46a1      	mov	r9, r4
 8006d38:	2700      	movs	r7, #0
 8006d3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d3e:	f8d9 3000 	ldr.w	r3, [r9]
 8006d42:	fa1f fb82 	uxth.w	fp, r2
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d4c:	443b      	add	r3, r7
 8006d4e:	f8d9 7000 	ldr.w	r7, [r9]
 8006d52:	0c12      	lsrs	r2, r2, #16
 8006d54:	0c3f      	lsrs	r7, r7, #16
 8006d56:	fb0a 7202 	mla	r2, sl, r2, r7
 8006d5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d64:	4565      	cmp	r5, ip
 8006d66:	f849 3b04 	str.w	r3, [r9], #4
 8006d6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006d6e:	d8e4      	bhi.n	8006d3a <__multiply+0xaa>
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	50e7      	str	r7, [r4, r3]
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d7a:	3104      	adds	r1, #4
 8006d7c:	f1b9 0f00 	cmp.w	r9, #0
 8006d80:	d020      	beq.n	8006dc4 <__multiply+0x134>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	4647      	mov	r7, r8
 8006d86:	46a4      	mov	ip, r4
 8006d88:	f04f 0a00 	mov.w	sl, #0
 8006d8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006d90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006d94:	fb09 220b 	mla	r2, r9, fp, r2
 8006d98:	4452      	add	r2, sl
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006da0:	f84c 3b04 	str.w	r3, [ip], #4
 8006da4:	f857 3b04 	ldr.w	r3, [r7], #4
 8006da8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dac:	f8bc 3000 	ldrh.w	r3, [ip]
 8006db0:	fb09 330a 	mla	r3, r9, sl, r3
 8006db4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006db8:	42bd      	cmp	r5, r7
 8006dba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dbe:	d8e5      	bhi.n	8006d8c <__multiply+0xfc>
 8006dc0:	9a01      	ldr	r2, [sp, #4]
 8006dc2:	50a3      	str	r3, [r4, r2]
 8006dc4:	3404      	adds	r4, #4
 8006dc6:	e79f      	b.n	8006d08 <__multiply+0x78>
 8006dc8:	3e01      	subs	r6, #1
 8006dca:	e7a1      	b.n	8006d10 <__multiply+0x80>
 8006dcc:	080079a8 	.word	0x080079a8
 8006dd0:	080079b9 	.word	0x080079b9

08006dd4 <__pow5mult>:
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	4615      	mov	r5, r2
 8006dda:	f012 0203 	ands.w	r2, r2, #3
 8006dde:	4607      	mov	r7, r0
 8006de0:	460e      	mov	r6, r1
 8006de2:	d007      	beq.n	8006df4 <__pow5mult+0x20>
 8006de4:	4c25      	ldr	r4, [pc, #148]	@ (8006e7c <__pow5mult+0xa8>)
 8006de6:	3a01      	subs	r2, #1
 8006de8:	2300      	movs	r3, #0
 8006dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dee:	f7ff fea7 	bl	8006b40 <__multadd>
 8006df2:	4606      	mov	r6, r0
 8006df4:	10ad      	asrs	r5, r5, #2
 8006df6:	d03d      	beq.n	8006e74 <__pow5mult+0xa0>
 8006df8:	69fc      	ldr	r4, [r7, #28]
 8006dfa:	b97c      	cbnz	r4, 8006e1c <__pow5mult+0x48>
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f7ff fd87 	bl	8006910 <malloc>
 8006e02:	4602      	mov	r2, r0
 8006e04:	61f8      	str	r0, [r7, #28]
 8006e06:	b928      	cbnz	r0, 8006e14 <__pow5mult+0x40>
 8006e08:	4b1d      	ldr	r3, [pc, #116]	@ (8006e80 <__pow5mult+0xac>)
 8006e0a:	481e      	ldr	r0, [pc, #120]	@ (8006e84 <__pow5mult+0xb0>)
 8006e0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e10:	f000 fc30 	bl	8007674 <__assert_func>
 8006e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e18:	6004      	str	r4, [r0, #0]
 8006e1a:	60c4      	str	r4, [r0, #12]
 8006e1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e24:	b94c      	cbnz	r4, 8006e3a <__pow5mult+0x66>
 8006e26:	f240 2171 	movw	r1, #625	@ 0x271
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f7ff ff1a 	bl	8006c64 <__i2b>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e36:	4604      	mov	r4, r0
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	f04f 0900 	mov.w	r9, #0
 8006e3e:	07eb      	lsls	r3, r5, #31
 8006e40:	d50a      	bpl.n	8006e58 <__pow5mult+0x84>
 8006e42:	4631      	mov	r1, r6
 8006e44:	4622      	mov	r2, r4
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff ff22 	bl	8006c90 <__multiply>
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4680      	mov	r8, r0
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff fe53 	bl	8006afc <_Bfree>
 8006e56:	4646      	mov	r6, r8
 8006e58:	106d      	asrs	r5, r5, #1
 8006e5a:	d00b      	beq.n	8006e74 <__pow5mult+0xa0>
 8006e5c:	6820      	ldr	r0, [r4, #0]
 8006e5e:	b938      	cbnz	r0, 8006e70 <__pow5mult+0x9c>
 8006e60:	4622      	mov	r2, r4
 8006e62:	4621      	mov	r1, r4
 8006e64:	4638      	mov	r0, r7
 8006e66:	f7ff ff13 	bl	8006c90 <__multiply>
 8006e6a:	6020      	str	r0, [r4, #0]
 8006e6c:	f8c0 9000 	str.w	r9, [r0]
 8006e70:	4604      	mov	r4, r0
 8006e72:	e7e4      	b.n	8006e3e <__pow5mult+0x6a>
 8006e74:	4630      	mov	r0, r6
 8006e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08007a6c 	.word	0x08007a6c
 8006e80:	08007939 	.word	0x08007939
 8006e84:	080079b9 	.word	0x080079b9

08006e88 <__lshift>:
 8006e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	6849      	ldr	r1, [r1, #4]
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	4607      	mov	r7, r0
 8006e9a:	4691      	mov	r9, r2
 8006e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ea0:	f108 0601 	add.w	r6, r8, #1
 8006ea4:	42b3      	cmp	r3, r6
 8006ea6:	db0b      	blt.n	8006ec0 <__lshift+0x38>
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff fde7 	bl	8006a7c <_Balloc>
 8006eae:	4605      	mov	r5, r0
 8006eb0:	b948      	cbnz	r0, 8006ec6 <__lshift+0x3e>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4b28      	ldr	r3, [pc, #160]	@ (8006f58 <__lshift+0xd0>)
 8006eb6:	4829      	ldr	r0, [pc, #164]	@ (8006f5c <__lshift+0xd4>)
 8006eb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ebc:	f000 fbda 	bl	8007674 <__assert_func>
 8006ec0:	3101      	adds	r1, #1
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__lshift+0x1c>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f100 0114 	add.w	r1, r0, #20
 8006ecc:	f100 0210 	add.w	r2, r0, #16
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	4553      	cmp	r3, sl
 8006ed4:	db33      	blt.n	8006f3e <__lshift+0xb6>
 8006ed6:	6920      	ldr	r0, [r4, #16]
 8006ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006edc:	f104 0314 	add.w	r3, r4, #20
 8006ee0:	f019 091f 	ands.w	r9, r9, #31
 8006ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ee8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006eec:	d02b      	beq.n	8006f46 <__lshift+0xbe>
 8006eee:	f1c9 0e20 	rsb	lr, r9, #32
 8006ef2:	468a      	mov	sl, r1
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	fa00 f009 	lsl.w	r0, r0, r9
 8006efc:	4310      	orrs	r0, r2
 8006efe:	f84a 0b04 	str.w	r0, [sl], #4
 8006f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f06:	459c      	cmp	ip, r3
 8006f08:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f0c:	d8f3      	bhi.n	8006ef6 <__lshift+0x6e>
 8006f0e:	ebac 0304 	sub.w	r3, ip, r4
 8006f12:	3b15      	subs	r3, #21
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	3304      	adds	r3, #4
 8006f1a:	f104 0015 	add.w	r0, r4, #21
 8006f1e:	4560      	cmp	r0, ip
 8006f20:	bf88      	it	hi
 8006f22:	2304      	movhi	r3, #4
 8006f24:	50ca      	str	r2, [r1, r3]
 8006f26:	b10a      	cbz	r2, 8006f2c <__lshift+0xa4>
 8006f28:	f108 0602 	add.w	r6, r8, #2
 8006f2c:	3e01      	subs	r6, #1
 8006f2e:	4638      	mov	r0, r7
 8006f30:	612e      	str	r6, [r5, #16]
 8006f32:	4621      	mov	r1, r4
 8006f34:	f7ff fde2 	bl	8006afc <_Bfree>
 8006f38:	4628      	mov	r0, r5
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f42:	3301      	adds	r3, #1
 8006f44:	e7c5      	b.n	8006ed2 <__lshift+0x4a>
 8006f46:	3904      	subs	r1, #4
 8006f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f50:	459c      	cmp	ip, r3
 8006f52:	d8f9      	bhi.n	8006f48 <__lshift+0xc0>
 8006f54:	e7ea      	b.n	8006f2c <__lshift+0xa4>
 8006f56:	bf00      	nop
 8006f58:	080079a8 	.word	0x080079a8
 8006f5c:	080079b9 	.word	0x080079b9

08006f60 <__mcmp>:
 8006f60:	690a      	ldr	r2, [r1, #16]
 8006f62:	4603      	mov	r3, r0
 8006f64:	6900      	ldr	r0, [r0, #16]
 8006f66:	1a80      	subs	r0, r0, r2
 8006f68:	b530      	push	{r4, r5, lr}
 8006f6a:	d10e      	bne.n	8006f8a <__mcmp+0x2a>
 8006f6c:	3314      	adds	r3, #20
 8006f6e:	3114      	adds	r1, #20
 8006f70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f80:	4295      	cmp	r5, r2
 8006f82:	d003      	beq.n	8006f8c <__mcmp+0x2c>
 8006f84:	d205      	bcs.n	8006f92 <__mcmp+0x32>
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	bd30      	pop	{r4, r5, pc}
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d3f3      	bcc.n	8006f78 <__mcmp+0x18>
 8006f90:	e7fb      	b.n	8006f8a <__mcmp+0x2a>
 8006f92:	2001      	movs	r0, #1
 8006f94:	e7f9      	b.n	8006f8a <__mcmp+0x2a>
	...

08006f98 <__mdiff>:
 8006f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4648      	mov	r0, r9
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	f7ff ffdb 	bl	8006f60 <__mcmp>
 8006faa:	1e05      	subs	r5, r0, #0
 8006fac:	d112      	bne.n	8006fd4 <__mdiff+0x3c>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7ff fd63 	bl	8006a7c <_Balloc>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	b928      	cbnz	r0, 8006fc6 <__mdiff+0x2e>
 8006fba:	4b3f      	ldr	r3, [pc, #252]	@ (80070b8 <__mdiff+0x120>)
 8006fbc:	f240 2137 	movw	r1, #567	@ 0x237
 8006fc0:	483e      	ldr	r0, [pc, #248]	@ (80070bc <__mdiff+0x124>)
 8006fc2:	f000 fb57 	bl	8007674 <__assert_func>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fcc:	4610      	mov	r0, r2
 8006fce:	b003      	add	sp, #12
 8006fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd4:	bfbc      	itt	lt
 8006fd6:	464b      	movlt	r3, r9
 8006fd8:	46a1      	movlt	r9, r4
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fe0:	bfba      	itte	lt
 8006fe2:	461c      	movlt	r4, r3
 8006fe4:	2501      	movlt	r5, #1
 8006fe6:	2500      	movge	r5, #0
 8006fe8:	f7ff fd48 	bl	8006a7c <_Balloc>
 8006fec:	4602      	mov	r2, r0
 8006fee:	b918      	cbnz	r0, 8006ff8 <__mdiff+0x60>
 8006ff0:	4b31      	ldr	r3, [pc, #196]	@ (80070b8 <__mdiff+0x120>)
 8006ff2:	f240 2145 	movw	r1, #581	@ 0x245
 8006ff6:	e7e3      	b.n	8006fc0 <__mdiff+0x28>
 8006ff8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ffc:	6926      	ldr	r6, [r4, #16]
 8006ffe:	60c5      	str	r5, [r0, #12]
 8007000:	f109 0310 	add.w	r3, r9, #16
 8007004:	f109 0514 	add.w	r5, r9, #20
 8007008:	f104 0e14 	add.w	lr, r4, #20
 800700c:	f100 0b14 	add.w	fp, r0, #20
 8007010:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007014:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	46d9      	mov	r9, fp
 800701c:	f04f 0c00 	mov.w	ip, #0
 8007020:	9b01      	ldr	r3, [sp, #4]
 8007022:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007026:	f853 af04 	ldr.w	sl, [r3, #4]!
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	fa1f f38a 	uxth.w	r3, sl
 8007030:	4619      	mov	r1, r3
 8007032:	b283      	uxth	r3, r0
 8007034:	1acb      	subs	r3, r1, r3
 8007036:	0c00      	lsrs	r0, r0, #16
 8007038:	4463      	add	r3, ip
 800703a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800703e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007042:	b29b      	uxth	r3, r3
 8007044:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007048:	4576      	cmp	r6, lr
 800704a:	f849 3b04 	str.w	r3, [r9], #4
 800704e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007052:	d8e5      	bhi.n	8007020 <__mdiff+0x88>
 8007054:	1b33      	subs	r3, r6, r4
 8007056:	3b15      	subs	r3, #21
 8007058:	f023 0303 	bic.w	r3, r3, #3
 800705c:	3415      	adds	r4, #21
 800705e:	3304      	adds	r3, #4
 8007060:	42a6      	cmp	r6, r4
 8007062:	bf38      	it	cc
 8007064:	2304      	movcc	r3, #4
 8007066:	441d      	add	r5, r3
 8007068:	445b      	add	r3, fp
 800706a:	461e      	mov	r6, r3
 800706c:	462c      	mov	r4, r5
 800706e:	4544      	cmp	r4, r8
 8007070:	d30e      	bcc.n	8007090 <__mdiff+0xf8>
 8007072:	f108 0103 	add.w	r1, r8, #3
 8007076:	1b49      	subs	r1, r1, r5
 8007078:	f021 0103 	bic.w	r1, r1, #3
 800707c:	3d03      	subs	r5, #3
 800707e:	45a8      	cmp	r8, r5
 8007080:	bf38      	it	cc
 8007082:	2100      	movcc	r1, #0
 8007084:	440b      	add	r3, r1
 8007086:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800708a:	b191      	cbz	r1, 80070b2 <__mdiff+0x11a>
 800708c:	6117      	str	r7, [r2, #16]
 800708e:	e79d      	b.n	8006fcc <__mdiff+0x34>
 8007090:	f854 1b04 	ldr.w	r1, [r4], #4
 8007094:	46e6      	mov	lr, ip
 8007096:	0c08      	lsrs	r0, r1, #16
 8007098:	fa1c fc81 	uxtah	ip, ip, r1
 800709c:	4471      	add	r1, lr
 800709e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070a2:	b289      	uxth	r1, r1
 80070a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070a8:	f846 1b04 	str.w	r1, [r6], #4
 80070ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070b0:	e7dd      	b.n	800706e <__mdiff+0xd6>
 80070b2:	3f01      	subs	r7, #1
 80070b4:	e7e7      	b.n	8007086 <__mdiff+0xee>
 80070b6:	bf00      	nop
 80070b8:	080079a8 	.word	0x080079a8
 80070bc:	080079b9 	.word	0x080079b9

080070c0 <__d2b>:
 80070c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	460f      	mov	r7, r1
 80070c6:	2101      	movs	r1, #1
 80070c8:	ec59 8b10 	vmov	r8, r9, d0
 80070cc:	4616      	mov	r6, r2
 80070ce:	f7ff fcd5 	bl	8006a7c <_Balloc>
 80070d2:	4604      	mov	r4, r0
 80070d4:	b930      	cbnz	r0, 80070e4 <__d2b+0x24>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b23      	ldr	r3, [pc, #140]	@ (8007168 <__d2b+0xa8>)
 80070da:	4824      	ldr	r0, [pc, #144]	@ (800716c <__d2b+0xac>)
 80070dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80070e0:	f000 fac8 	bl	8007674 <__assert_func>
 80070e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070ec:	b10d      	cbz	r5, 80070f2 <__d2b+0x32>
 80070ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	f1b8 0300 	subs.w	r3, r8, #0
 80070f8:	d023      	beq.n	8007142 <__d2b+0x82>
 80070fa:	4668      	mov	r0, sp
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	f7ff fd84 	bl	8006c0a <__lo0bits>
 8007102:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007106:	b1d0      	cbz	r0, 800713e <__d2b+0x7e>
 8007108:	f1c0 0320 	rsb	r3, r0, #32
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	430b      	orrs	r3, r1
 8007112:	40c2      	lsrs	r2, r0
 8007114:	6163      	str	r3, [r4, #20]
 8007116:	9201      	str	r2, [sp, #4]
 8007118:	9b01      	ldr	r3, [sp, #4]
 800711a:	61a3      	str	r3, [r4, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf0c      	ite	eq
 8007120:	2201      	moveq	r2, #1
 8007122:	2202      	movne	r2, #2
 8007124:	6122      	str	r2, [r4, #16]
 8007126:	b1a5      	cbz	r5, 8007152 <__d2b+0x92>
 8007128:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800712c:	4405      	add	r5, r0
 800712e:	603d      	str	r5, [r7, #0]
 8007130:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007134:	6030      	str	r0, [r6, #0]
 8007136:	4620      	mov	r0, r4
 8007138:	b003      	add	sp, #12
 800713a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800713e:	6161      	str	r1, [r4, #20]
 8007140:	e7ea      	b.n	8007118 <__d2b+0x58>
 8007142:	a801      	add	r0, sp, #4
 8007144:	f7ff fd61 	bl	8006c0a <__lo0bits>
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	6163      	str	r3, [r4, #20]
 800714c:	3020      	adds	r0, #32
 800714e:	2201      	movs	r2, #1
 8007150:	e7e8      	b.n	8007124 <__d2b+0x64>
 8007152:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007156:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800715a:	6038      	str	r0, [r7, #0]
 800715c:	6918      	ldr	r0, [r3, #16]
 800715e:	f7ff fd35 	bl	8006bcc <__hi0bits>
 8007162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007166:	e7e5      	b.n	8007134 <__d2b+0x74>
 8007168:	080079a8 	.word	0x080079a8
 800716c:	080079b9 	.word	0x080079b9

08007170 <__sfputc_r>:
 8007170:	6893      	ldr	r3, [r2, #8]
 8007172:	3b01      	subs	r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	b410      	push	{r4}
 8007178:	6093      	str	r3, [r2, #8]
 800717a:	da08      	bge.n	800718e <__sfputc_r+0x1e>
 800717c:	6994      	ldr	r4, [r2, #24]
 800717e:	42a3      	cmp	r3, r4
 8007180:	db01      	blt.n	8007186 <__sfputc_r+0x16>
 8007182:	290a      	cmp	r1, #10
 8007184:	d103      	bne.n	800718e <__sfputc_r+0x1e>
 8007186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800718a:	f7fe bc6e 	b.w	8005a6a <__swbuf_r>
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	1c58      	adds	r0, r3, #1
 8007192:	6010      	str	r0, [r2, #0]
 8007194:	7019      	strb	r1, [r3, #0]
 8007196:	4608      	mov	r0, r1
 8007198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800719c:	4770      	bx	lr

0800719e <__sfputs_r>:
 800719e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a0:	4606      	mov	r6, r0
 80071a2:	460f      	mov	r7, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	18d5      	adds	r5, r2, r3
 80071a8:	42ac      	cmp	r4, r5
 80071aa:	d101      	bne.n	80071b0 <__sfputs_r+0x12>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e007      	b.n	80071c0 <__sfputs_r+0x22>
 80071b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b4:	463a      	mov	r2, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ffda 	bl	8007170 <__sfputc_r>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d1f3      	bne.n	80071a8 <__sfputs_r+0xa>
 80071c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071c4 <_vfiprintf_r>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	460d      	mov	r5, r1
 80071ca:	b09d      	sub	sp, #116	@ 0x74
 80071cc:	4614      	mov	r4, r2
 80071ce:	4698      	mov	r8, r3
 80071d0:	4606      	mov	r6, r0
 80071d2:	b118      	cbz	r0, 80071dc <_vfiprintf_r+0x18>
 80071d4:	6a03      	ldr	r3, [r0, #32]
 80071d6:	b90b      	cbnz	r3, 80071dc <_vfiprintf_r+0x18>
 80071d8:	f7fe fb70 	bl	80058bc <__sinit>
 80071dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071de:	07d9      	lsls	r1, r3, #31
 80071e0:	d405      	bmi.n	80071ee <_vfiprintf_r+0x2a>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	059a      	lsls	r2, r3, #22
 80071e6:	d402      	bmi.n	80071ee <_vfiprintf_r+0x2a>
 80071e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ea:	f7fe fd50 	bl	8005c8e <__retarget_lock_acquire_recursive>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	071b      	lsls	r3, r3, #28
 80071f2:	d501      	bpl.n	80071f8 <_vfiprintf_r+0x34>
 80071f4:	692b      	ldr	r3, [r5, #16]
 80071f6:	b99b      	cbnz	r3, 8007220 <_vfiprintf_r+0x5c>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7fe fc74 	bl	8005ae8 <__swsetup_r>
 8007200:	b170      	cbz	r0, 8007220 <_vfiprintf_r+0x5c>
 8007202:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007204:	07dc      	lsls	r4, r3, #31
 8007206:	d504      	bpl.n	8007212 <_vfiprintf_r+0x4e>
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
 800720c:	b01d      	add	sp, #116	@ 0x74
 800720e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	0598      	lsls	r0, r3, #22
 8007216:	d4f7      	bmi.n	8007208 <_vfiprintf_r+0x44>
 8007218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800721a:	f7fe fd39 	bl	8005c90 <__retarget_lock_release_recursive>
 800721e:	e7f3      	b.n	8007208 <_vfiprintf_r+0x44>
 8007220:	2300      	movs	r3, #0
 8007222:	9309      	str	r3, [sp, #36]	@ 0x24
 8007224:	2320      	movs	r3, #32
 8007226:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800722a:	f8cd 800c 	str.w	r8, [sp, #12]
 800722e:	2330      	movs	r3, #48	@ 0x30
 8007230:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073e0 <_vfiprintf_r+0x21c>
 8007234:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007238:	f04f 0901 	mov.w	r9, #1
 800723c:	4623      	mov	r3, r4
 800723e:	469a      	mov	sl, r3
 8007240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007244:	b10a      	cbz	r2, 800724a <_vfiprintf_r+0x86>
 8007246:	2a25      	cmp	r2, #37	@ 0x25
 8007248:	d1f9      	bne.n	800723e <_vfiprintf_r+0x7a>
 800724a:	ebba 0b04 	subs.w	fp, sl, r4
 800724e:	d00b      	beq.n	8007268 <_vfiprintf_r+0xa4>
 8007250:	465b      	mov	r3, fp
 8007252:	4622      	mov	r2, r4
 8007254:	4629      	mov	r1, r5
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ffa1 	bl	800719e <__sfputs_r>
 800725c:	3001      	adds	r0, #1
 800725e:	f000 80a7 	beq.w	80073b0 <_vfiprintf_r+0x1ec>
 8007262:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007264:	445a      	add	r2, fp
 8007266:	9209      	str	r2, [sp, #36]	@ 0x24
 8007268:	f89a 3000 	ldrb.w	r3, [sl]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 809f 	beq.w	80073b0 <_vfiprintf_r+0x1ec>
 8007272:	2300      	movs	r3, #0
 8007274:	f04f 32ff 	mov.w	r2, #4294967295
 8007278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800727c:	f10a 0a01 	add.w	sl, sl, #1
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	9307      	str	r3, [sp, #28]
 8007284:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007288:	931a      	str	r3, [sp, #104]	@ 0x68
 800728a:	4654      	mov	r4, sl
 800728c:	2205      	movs	r2, #5
 800728e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007292:	4853      	ldr	r0, [pc, #332]	@ (80073e0 <_vfiprintf_r+0x21c>)
 8007294:	f7f9 f824 	bl	80002e0 <memchr>
 8007298:	9a04      	ldr	r2, [sp, #16]
 800729a:	b9d8      	cbnz	r0, 80072d4 <_vfiprintf_r+0x110>
 800729c:	06d1      	lsls	r1, r2, #27
 800729e:	bf44      	itt	mi
 80072a0:	2320      	movmi	r3, #32
 80072a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072a6:	0713      	lsls	r3, r2, #28
 80072a8:	bf44      	itt	mi
 80072aa:	232b      	movmi	r3, #43	@ 0x2b
 80072ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072b0:	f89a 3000 	ldrb.w	r3, [sl]
 80072b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072b6:	d015      	beq.n	80072e4 <_vfiprintf_r+0x120>
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	4654      	mov	r4, sl
 80072bc:	2000      	movs	r0, #0
 80072be:	f04f 0c0a 	mov.w	ip, #10
 80072c2:	4621      	mov	r1, r4
 80072c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c8:	3b30      	subs	r3, #48	@ 0x30
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d94b      	bls.n	8007366 <_vfiprintf_r+0x1a2>
 80072ce:	b1b0      	cbz	r0, 80072fe <_vfiprintf_r+0x13a>
 80072d0:	9207      	str	r2, [sp, #28]
 80072d2:	e014      	b.n	80072fe <_vfiprintf_r+0x13a>
 80072d4:	eba0 0308 	sub.w	r3, r0, r8
 80072d8:	fa09 f303 	lsl.w	r3, r9, r3
 80072dc:	4313      	orrs	r3, r2
 80072de:	9304      	str	r3, [sp, #16]
 80072e0:	46a2      	mov	sl, r4
 80072e2:	e7d2      	b.n	800728a <_vfiprintf_r+0xc6>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	1d19      	adds	r1, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9103      	str	r1, [sp, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfbb      	ittet	lt
 80072f0:	425b      	neglt	r3, r3
 80072f2:	f042 0202 	orrlt.w	r2, r2, #2
 80072f6:	9307      	strge	r3, [sp, #28]
 80072f8:	9307      	strlt	r3, [sp, #28]
 80072fa:	bfb8      	it	lt
 80072fc:	9204      	strlt	r2, [sp, #16]
 80072fe:	7823      	ldrb	r3, [r4, #0]
 8007300:	2b2e      	cmp	r3, #46	@ 0x2e
 8007302:	d10a      	bne.n	800731a <_vfiprintf_r+0x156>
 8007304:	7863      	ldrb	r3, [r4, #1]
 8007306:	2b2a      	cmp	r3, #42	@ 0x2a
 8007308:	d132      	bne.n	8007370 <_vfiprintf_r+0x1ac>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	1d1a      	adds	r2, r3, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9203      	str	r2, [sp, #12]
 8007312:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007316:	3402      	adds	r4, #2
 8007318:	9305      	str	r3, [sp, #20]
 800731a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073f0 <_vfiprintf_r+0x22c>
 800731e:	7821      	ldrb	r1, [r4, #0]
 8007320:	2203      	movs	r2, #3
 8007322:	4650      	mov	r0, sl
 8007324:	f7f8 ffdc 	bl	80002e0 <memchr>
 8007328:	b138      	cbz	r0, 800733a <_vfiprintf_r+0x176>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	eba0 000a 	sub.w	r0, r0, sl
 8007330:	2240      	movs	r2, #64	@ 0x40
 8007332:	4082      	lsls	r2, r0
 8007334:	4313      	orrs	r3, r2
 8007336:	3401      	adds	r4, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4829      	ldr	r0, [pc, #164]	@ (80073e4 <_vfiprintf_r+0x220>)
 8007340:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007344:	2206      	movs	r2, #6
 8007346:	f7f8 ffcb 	bl	80002e0 <memchr>
 800734a:	2800      	cmp	r0, #0
 800734c:	d03f      	beq.n	80073ce <_vfiprintf_r+0x20a>
 800734e:	4b26      	ldr	r3, [pc, #152]	@ (80073e8 <_vfiprintf_r+0x224>)
 8007350:	bb1b      	cbnz	r3, 800739a <_vfiprintf_r+0x1d6>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	3307      	adds	r3, #7
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	3308      	adds	r3, #8
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007360:	443b      	add	r3, r7
 8007362:	9309      	str	r3, [sp, #36]	@ 0x24
 8007364:	e76a      	b.n	800723c <_vfiprintf_r+0x78>
 8007366:	fb0c 3202 	mla	r2, ip, r2, r3
 800736a:	460c      	mov	r4, r1
 800736c:	2001      	movs	r0, #1
 800736e:	e7a8      	b.n	80072c2 <_vfiprintf_r+0xfe>
 8007370:	2300      	movs	r3, #0
 8007372:	3401      	adds	r4, #1
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0c0a 	mov.w	ip, #10
 800737c:	4620      	mov	r0, r4
 800737e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007382:	3a30      	subs	r2, #48	@ 0x30
 8007384:	2a09      	cmp	r2, #9
 8007386:	d903      	bls.n	8007390 <_vfiprintf_r+0x1cc>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0c6      	beq.n	800731a <_vfiprintf_r+0x156>
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	e7c4      	b.n	800731a <_vfiprintf_r+0x156>
 8007390:	fb0c 2101 	mla	r1, ip, r1, r2
 8007394:	4604      	mov	r4, r0
 8007396:	2301      	movs	r3, #1
 8007398:	e7f0      	b.n	800737c <_vfiprintf_r+0x1b8>
 800739a:	ab03      	add	r3, sp, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	462a      	mov	r2, r5
 80073a0:	4b12      	ldr	r3, [pc, #72]	@ (80073ec <_vfiprintf_r+0x228>)
 80073a2:	a904      	add	r1, sp, #16
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7fd fe57 	bl	8005058 <_printf_float>
 80073aa:	4607      	mov	r7, r0
 80073ac:	1c78      	adds	r0, r7, #1
 80073ae:	d1d6      	bne.n	800735e <_vfiprintf_r+0x19a>
 80073b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b2:	07d9      	lsls	r1, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_vfiprintf_r+0x1fe>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	059a      	lsls	r2, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_vfiprintf_r+0x1fe>
 80073bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073be:	f7fe fc67 	bl	8005c90 <__retarget_lock_release_recursive>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	065b      	lsls	r3, r3, #25
 80073c6:	f53f af1f 	bmi.w	8007208 <_vfiprintf_r+0x44>
 80073ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073cc:	e71e      	b.n	800720c <_vfiprintf_r+0x48>
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	462a      	mov	r2, r5
 80073d4:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <_vfiprintf_r+0x228>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	4630      	mov	r0, r6
 80073da:	f7fe f8c5 	bl	8005568 <_printf_i>
 80073de:	e7e4      	b.n	80073aa <_vfiprintf_r+0x1e6>
 80073e0:	08007a12 	.word	0x08007a12
 80073e4:	08007a1c 	.word	0x08007a1c
 80073e8:	08005059 	.word	0x08005059
 80073ec:	0800719f 	.word	0x0800719f
 80073f0:	08007a18 	.word	0x08007a18

080073f4 <__sflush_r>:
 80073f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fc:	0716      	lsls	r6, r2, #28
 80073fe:	4605      	mov	r5, r0
 8007400:	460c      	mov	r4, r1
 8007402:	d454      	bmi.n	80074ae <__sflush_r+0xba>
 8007404:	684b      	ldr	r3, [r1, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	dc02      	bgt.n	8007410 <__sflush_r+0x1c>
 800740a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd48      	ble.n	80074a2 <__sflush_r+0xae>
 8007410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007412:	2e00      	cmp	r6, #0
 8007414:	d045      	beq.n	80074a2 <__sflush_r+0xae>
 8007416:	2300      	movs	r3, #0
 8007418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800741c:	682f      	ldr	r7, [r5, #0]
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	d030      	beq.n	8007486 <__sflush_r+0x92>
 8007424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	0759      	lsls	r1, r3, #29
 800742a:	d505      	bpl.n	8007438 <__sflush_r+0x44>
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007432:	b10b      	cbz	r3, 8007438 <__sflush_r+0x44>
 8007434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	2300      	movs	r3, #0
 800743a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800743c:	6a21      	ldr	r1, [r4, #32]
 800743e:	4628      	mov	r0, r5
 8007440:	47b0      	blx	r6
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	d106      	bne.n	8007456 <__sflush_r+0x62>
 8007448:	6829      	ldr	r1, [r5, #0]
 800744a:	291d      	cmp	r1, #29
 800744c:	d82b      	bhi.n	80074a6 <__sflush_r+0xb2>
 800744e:	4a2a      	ldr	r2, [pc, #168]	@ (80074f8 <__sflush_r+0x104>)
 8007450:	40ca      	lsrs	r2, r1
 8007452:	07d6      	lsls	r6, r2, #31
 8007454:	d527      	bpl.n	80074a6 <__sflush_r+0xb2>
 8007456:	2200      	movs	r2, #0
 8007458:	6062      	str	r2, [r4, #4]
 800745a:	04d9      	lsls	r1, r3, #19
 800745c:	6922      	ldr	r2, [r4, #16]
 800745e:	6022      	str	r2, [r4, #0]
 8007460:	d504      	bpl.n	800746c <__sflush_r+0x78>
 8007462:	1c42      	adds	r2, r0, #1
 8007464:	d101      	bne.n	800746a <__sflush_r+0x76>
 8007466:	682b      	ldr	r3, [r5, #0]
 8007468:	b903      	cbnz	r3, 800746c <__sflush_r+0x78>
 800746a:	6560      	str	r0, [r4, #84]	@ 0x54
 800746c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800746e:	602f      	str	r7, [r5, #0]
 8007470:	b1b9      	cbz	r1, 80074a2 <__sflush_r+0xae>
 8007472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007476:	4299      	cmp	r1, r3
 8007478:	d002      	beq.n	8007480 <__sflush_r+0x8c>
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff f9fe 	bl	800687c <_free_r>
 8007480:	2300      	movs	r3, #0
 8007482:	6363      	str	r3, [r4, #52]	@ 0x34
 8007484:	e00d      	b.n	80074a2 <__sflush_r+0xae>
 8007486:	2301      	movs	r3, #1
 8007488:	4628      	mov	r0, r5
 800748a:	47b0      	blx	r6
 800748c:	4602      	mov	r2, r0
 800748e:	1c50      	adds	r0, r2, #1
 8007490:	d1c9      	bne.n	8007426 <__sflush_r+0x32>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0c6      	beq.n	8007426 <__sflush_r+0x32>
 8007498:	2b1d      	cmp	r3, #29
 800749a:	d001      	beq.n	80074a0 <__sflush_r+0xac>
 800749c:	2b16      	cmp	r3, #22
 800749e:	d11e      	bne.n	80074de <__sflush_r+0xea>
 80074a0:	602f      	str	r7, [r5, #0]
 80074a2:	2000      	movs	r0, #0
 80074a4:	e022      	b.n	80074ec <__sflush_r+0xf8>
 80074a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074aa:	b21b      	sxth	r3, r3
 80074ac:	e01b      	b.n	80074e6 <__sflush_r+0xf2>
 80074ae:	690f      	ldr	r7, [r1, #16]
 80074b0:	2f00      	cmp	r7, #0
 80074b2:	d0f6      	beq.n	80074a2 <__sflush_r+0xae>
 80074b4:	0793      	lsls	r3, r2, #30
 80074b6:	680e      	ldr	r6, [r1, #0]
 80074b8:	bf08      	it	eq
 80074ba:	694b      	ldreq	r3, [r1, #20]
 80074bc:	600f      	str	r7, [r1, #0]
 80074be:	bf18      	it	ne
 80074c0:	2300      	movne	r3, #0
 80074c2:	eba6 0807 	sub.w	r8, r6, r7
 80074c6:	608b      	str	r3, [r1, #8]
 80074c8:	f1b8 0f00 	cmp.w	r8, #0
 80074cc:	dde9      	ble.n	80074a2 <__sflush_r+0xae>
 80074ce:	6a21      	ldr	r1, [r4, #32]
 80074d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074d2:	4643      	mov	r3, r8
 80074d4:	463a      	mov	r2, r7
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b0      	blx	r6
 80074da:	2800      	cmp	r0, #0
 80074dc:	dc08      	bgt.n	80074f0 <__sflush_r+0xfc>
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f0:	4407      	add	r7, r0
 80074f2:	eba8 0800 	sub.w	r8, r8, r0
 80074f6:	e7e7      	b.n	80074c8 <__sflush_r+0xd4>
 80074f8:	20400001 	.word	0x20400001

080074fc <_fflush_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	4605      	mov	r5, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b913      	cbnz	r3, 800750c <_fflush_r+0x10>
 8007506:	2500      	movs	r5, #0
 8007508:	4628      	mov	r0, r5
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	b118      	cbz	r0, 8007516 <_fflush_r+0x1a>
 800750e:	6a03      	ldr	r3, [r0, #32]
 8007510:	b90b      	cbnz	r3, 8007516 <_fflush_r+0x1a>
 8007512:	f7fe f9d3 	bl	80058bc <__sinit>
 8007516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f3      	beq.n	8007506 <_fflush_r+0xa>
 800751e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007520:	07d0      	lsls	r0, r2, #31
 8007522:	d404      	bmi.n	800752e <_fflush_r+0x32>
 8007524:	0599      	lsls	r1, r3, #22
 8007526:	d402      	bmi.n	800752e <_fflush_r+0x32>
 8007528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800752a:	f7fe fbb0 	bl	8005c8e <__retarget_lock_acquire_recursive>
 800752e:	4628      	mov	r0, r5
 8007530:	4621      	mov	r1, r4
 8007532:	f7ff ff5f 	bl	80073f4 <__sflush_r>
 8007536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007538:	07da      	lsls	r2, r3, #31
 800753a:	4605      	mov	r5, r0
 800753c:	d4e4      	bmi.n	8007508 <_fflush_r+0xc>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	059b      	lsls	r3, r3, #22
 8007542:	d4e1      	bmi.n	8007508 <_fflush_r+0xc>
 8007544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007546:	f7fe fba3 	bl	8005c90 <__retarget_lock_release_recursive>
 800754a:	e7dd      	b.n	8007508 <_fflush_r+0xc>

0800754c <__swhatbuf_r>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	460c      	mov	r4, r1
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2900      	cmp	r1, #0
 8007556:	b096      	sub	sp, #88	@ 0x58
 8007558:	4615      	mov	r5, r2
 800755a:	461e      	mov	r6, r3
 800755c:	da0d      	bge.n	800757a <__swhatbuf_r+0x2e>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007564:	f04f 0100 	mov.w	r1, #0
 8007568:	bf14      	ite	ne
 800756a:	2340      	movne	r3, #64	@ 0x40
 800756c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007570:	2000      	movs	r0, #0
 8007572:	6031      	str	r1, [r6, #0]
 8007574:	602b      	str	r3, [r5, #0]
 8007576:	b016      	add	sp, #88	@ 0x58
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	466a      	mov	r2, sp
 800757c:	f000 f848 	bl	8007610 <_fstat_r>
 8007580:	2800      	cmp	r0, #0
 8007582:	dbec      	blt.n	800755e <__swhatbuf_r+0x12>
 8007584:	9901      	ldr	r1, [sp, #4]
 8007586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800758a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800758e:	4259      	negs	r1, r3
 8007590:	4159      	adcs	r1, r3
 8007592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007596:	e7eb      	b.n	8007570 <__swhatbuf_r+0x24>

08007598 <__smakebuf_r>:
 8007598:	898b      	ldrh	r3, [r1, #12]
 800759a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800759c:	079d      	lsls	r5, r3, #30
 800759e:	4606      	mov	r6, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	d507      	bpl.n	80075b4 <__smakebuf_r+0x1c>
 80075a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	2301      	movs	r3, #1
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	b003      	add	sp, #12
 80075b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b4:	ab01      	add	r3, sp, #4
 80075b6:	466a      	mov	r2, sp
 80075b8:	f7ff ffc8 	bl	800754c <__swhatbuf_r>
 80075bc:	9f00      	ldr	r7, [sp, #0]
 80075be:	4605      	mov	r5, r0
 80075c0:	4639      	mov	r1, r7
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff f9ce 	bl	8006964 <_malloc_r>
 80075c8:	b948      	cbnz	r0, 80075de <__smakebuf_r+0x46>
 80075ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ce:	059a      	lsls	r2, r3, #22
 80075d0:	d4ee      	bmi.n	80075b0 <__smakebuf_r+0x18>
 80075d2:	f023 0303 	bic.w	r3, r3, #3
 80075d6:	f043 0302 	orr.w	r3, r3, #2
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	e7e2      	b.n	80075a4 <__smakebuf_r+0xc>
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	6020      	str	r0, [r4, #0]
 80075e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075ee:	b15b      	cbz	r3, 8007608 <__smakebuf_r+0x70>
 80075f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f4:	4630      	mov	r0, r6
 80075f6:	f000 f81d 	bl	8007634 <_isatty_r>
 80075fa:	b128      	cbz	r0, 8007608 <__smakebuf_r+0x70>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	431d      	orrs	r5, r3
 800760c:	81a5      	strh	r5, [r4, #12]
 800760e:	e7cf      	b.n	80075b0 <__smakebuf_r+0x18>

08007610 <_fstat_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	@ (8007630 <_fstat_r+0x20>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f7f9 f985 	bl	800092c <_fstat>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d102      	bne.n	800762c <_fstat_r+0x1c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	b103      	cbz	r3, 800762c <_fstat_r+0x1c>
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	24000420 	.word	0x24000420

08007634 <_isatty_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d06      	ldr	r5, [pc, #24]	@ (8007650 <_isatty_r+0x1c>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7f9 f984 	bl	800094c <_isatty>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_isatty_r+0x1a>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_isatty_r+0x1a>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	24000420 	.word	0x24000420

08007654 <_sbrk_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	@ (8007670 <_sbrk_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7f9 f98c 	bl	800097c <_sbrk>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_sbrk_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_sbrk_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	24000420 	.word	0x24000420

08007674 <__assert_func>:
 8007674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007676:	4614      	mov	r4, r2
 8007678:	461a      	mov	r2, r3
 800767a:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <__assert_func+0x2c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4605      	mov	r5, r0
 8007680:	68d8      	ldr	r0, [r3, #12]
 8007682:	b14c      	cbz	r4, 8007698 <__assert_func+0x24>
 8007684:	4b07      	ldr	r3, [pc, #28]	@ (80076a4 <__assert_func+0x30>)
 8007686:	9100      	str	r1, [sp, #0]
 8007688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800768c:	4906      	ldr	r1, [pc, #24]	@ (80076a8 <__assert_func+0x34>)
 800768e:	462b      	mov	r3, r5
 8007690:	f000 f842 	bl	8007718 <fiprintf>
 8007694:	f000 f852 	bl	800773c <abort>
 8007698:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <__assert_func+0x38>)
 800769a:	461c      	mov	r4, r3
 800769c:	e7f3      	b.n	8007686 <__assert_func+0x12>
 800769e:	bf00      	nop
 80076a0:	24000048 	.word	0x24000048
 80076a4:	08007a2d 	.word	0x08007a2d
 80076a8:	08007a3a 	.word	0x08007a3a
 80076ac:	08007a68 	.word	0x08007a68

080076b0 <_calloc_r>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	fba1 5402 	umull	r5, r4, r1, r2
 80076b6:	b934      	cbnz	r4, 80076c6 <_calloc_r+0x16>
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7ff f953 	bl	8006964 <_malloc_r>
 80076be:	4606      	mov	r6, r0
 80076c0:	b928      	cbnz	r0, 80076ce <_calloc_r+0x1e>
 80076c2:	4630      	mov	r0, r6
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	220c      	movs	r2, #12
 80076c8:	6002      	str	r2, [r0, #0]
 80076ca:	2600      	movs	r6, #0
 80076cc:	e7f9      	b.n	80076c2 <_calloc_r+0x12>
 80076ce:	462a      	mov	r2, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7fe fa5f 	bl	8005b94 <memset>
 80076d6:	e7f4      	b.n	80076c2 <_calloc_r+0x12>

080076d8 <__ascii_mbtowc>:
 80076d8:	b082      	sub	sp, #8
 80076da:	b901      	cbnz	r1, 80076de <__ascii_mbtowc+0x6>
 80076dc:	a901      	add	r1, sp, #4
 80076de:	b142      	cbz	r2, 80076f2 <__ascii_mbtowc+0x1a>
 80076e0:	b14b      	cbz	r3, 80076f6 <__ascii_mbtowc+0x1e>
 80076e2:	7813      	ldrb	r3, [r2, #0]
 80076e4:	600b      	str	r3, [r1, #0]
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	1e10      	subs	r0, r2, #0
 80076ea:	bf18      	it	ne
 80076ec:	2001      	movne	r0, #1
 80076ee:	b002      	add	sp, #8
 80076f0:	4770      	bx	lr
 80076f2:	4610      	mov	r0, r2
 80076f4:	e7fb      	b.n	80076ee <__ascii_mbtowc+0x16>
 80076f6:	f06f 0001 	mvn.w	r0, #1
 80076fa:	e7f8      	b.n	80076ee <__ascii_mbtowc+0x16>

080076fc <__ascii_wctomb>:
 80076fc:	4603      	mov	r3, r0
 80076fe:	4608      	mov	r0, r1
 8007700:	b141      	cbz	r1, 8007714 <__ascii_wctomb+0x18>
 8007702:	2aff      	cmp	r2, #255	@ 0xff
 8007704:	d904      	bls.n	8007710 <__ascii_wctomb+0x14>
 8007706:	228a      	movs	r2, #138	@ 0x8a
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	4770      	bx	lr
 8007710:	700a      	strb	r2, [r1, #0]
 8007712:	2001      	movs	r0, #1
 8007714:	4770      	bx	lr
	...

08007718 <fiprintf>:
 8007718:	b40e      	push	{r1, r2, r3}
 800771a:	b503      	push	{r0, r1, lr}
 800771c:	4601      	mov	r1, r0
 800771e:	ab03      	add	r3, sp, #12
 8007720:	4805      	ldr	r0, [pc, #20]	@ (8007738 <fiprintf+0x20>)
 8007722:	f853 2b04 	ldr.w	r2, [r3], #4
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	f7ff fd4b 	bl	80071c4 <_vfiprintf_r>
 800772e:	b002      	add	sp, #8
 8007730:	f85d eb04 	ldr.w	lr, [sp], #4
 8007734:	b003      	add	sp, #12
 8007736:	4770      	bx	lr
 8007738:	24000048 	.word	0x24000048

0800773c <abort>:
 800773c:	b508      	push	{r3, lr}
 800773e:	2006      	movs	r0, #6
 8007740:	f000 f82c 	bl	800779c <raise>
 8007744:	2001      	movs	r0, #1
 8007746:	f7f9 f8a1 	bl	800088c <_exit>

0800774a <_raise_r>:
 800774a:	291f      	cmp	r1, #31
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4605      	mov	r5, r0
 8007750:	460c      	mov	r4, r1
 8007752:	d904      	bls.n	800775e <_raise_r+0x14>
 8007754:	2316      	movs	r3, #22
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007760:	b112      	cbz	r2, 8007768 <_raise_r+0x1e>
 8007762:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007766:	b94b      	cbnz	r3, 800777c <_raise_r+0x32>
 8007768:	4628      	mov	r0, r5
 800776a:	f000 f831 	bl	80077d0 <_getpid_r>
 800776e:	4622      	mov	r2, r4
 8007770:	4601      	mov	r1, r0
 8007772:	4628      	mov	r0, r5
 8007774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007778:	f000 b818 	b.w	80077ac <_kill_r>
 800777c:	2b01      	cmp	r3, #1
 800777e:	d00a      	beq.n	8007796 <_raise_r+0x4c>
 8007780:	1c59      	adds	r1, r3, #1
 8007782:	d103      	bne.n	800778c <_raise_r+0x42>
 8007784:	2316      	movs	r3, #22
 8007786:	6003      	str	r3, [r0, #0]
 8007788:	2001      	movs	r0, #1
 800778a:	e7e7      	b.n	800775c <_raise_r+0x12>
 800778c:	2100      	movs	r1, #0
 800778e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007792:	4620      	mov	r0, r4
 8007794:	4798      	blx	r3
 8007796:	2000      	movs	r0, #0
 8007798:	e7e0      	b.n	800775c <_raise_r+0x12>
	...

0800779c <raise>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <raise+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfd2 	b.w	800774a <_raise_r>
 80077a6:	bf00      	nop
 80077a8:	24000048 	.word	0x24000048

080077ac <_kill_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	@ (80077cc <_kill_r+0x20>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7f9 f857 	bl	800086c <_kill>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_kill_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_kill_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	24000420 	.word	0x24000420

080077d0 <_getpid_r>:
 80077d0:	f7f9 b844 	b.w	800085c <_getpid>

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
