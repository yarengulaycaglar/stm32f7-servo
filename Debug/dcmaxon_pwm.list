
dcmaxon_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007534  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080077d8  080077d8  000087d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007c54  08007c54  00008c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007c60  08007c60  00008c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000204  24000000  08007c64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000022c  24000204  08007e68  00009204  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000430  08007e68  00009430  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e806  00000000  00000000  00009232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e99  00000000  00000000  00017a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  000198d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008e2  00000000  00000000  0001a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003964b  00000000  00000000  0001ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e16c  00000000  00000000  000543d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171b72  00000000  00000000  00062541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d40b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ecc  00000000  00000000  001d40f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001d7fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080077bc 	.word	0x080077bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	080077bc 	.word	0x080077bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <main>:
static void MX_FDCAN1_Init(void);
void Error_Handler(void);

FDCAN_HandleTypeDef hfdcan1;
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	/* Sistem başlatma */
	printf("Main start...\n");
 8000396:	481a      	ldr	r0, [pc, #104]	@ (8000400 <main+0x70>)
 8000398:	f005 fb10 	bl	80059bc <puts>
	HAL_Init();
 800039c:	f000 fdb4 	bl	8000f08 <HAL_Init>
	SystemClock_Config();
 80003a0:	f000 f83c 	bl	800041c <SystemClock_Config>
	MX_GPIO_Init();
 80003a4:	f000 f920 	bl	80005e8 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80003a8:	f000 f8b8 	bl	800051c <MX_FDCAN1_Init>

	uint8_t controller_id = 1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	71fb      	strb	r3, [r7, #7]

	enter_motor_control_mode(controller_id, &hfdcan1);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4914      	ldr	r1, [pc, #80]	@ (8000404 <main+0x74>)
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fbeb 	bl	8000b90 <enter_motor_control_mode>

	while (1)
	{
		/* RPM komutunu FDCAN üzerinden gönder */
		pack_cmd(controller_id,p_des, v_des, kp, kd, t_ff, &hfdcan1);
 80003ba:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <main+0x78>)
 80003bc:	edd3 7a00 	vldr	s15, [r3]
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <main+0x7c>)
 80003c2:	ed93 7a00 	vldr	s14, [r3]
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <main+0x80>)
 80003c8:	edd3 6a00 	vldr	s13, [r3]
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <main+0x84>)
 80003ce:	ed93 6a00 	vldr	s12, [r3]
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <main+0x88>)
 80003d4:	edd3 5a00 	vldr	s11, [r3]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	490a      	ldr	r1, [pc, #40]	@ (8000404 <main+0x74>)
 80003dc:	eeb0 2a65 	vmov.f32	s4, s11
 80003e0:	eef0 1a46 	vmov.f32	s3, s12
 80003e4:	eeb0 1a66 	vmov.f32	s2, s13
 80003e8:	eef0 0a47 	vmov.f32	s1, s14
 80003ec:	eeb0 0a67 	vmov.f32	s0, s15
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fc2f 	bl	8000c54 <pack_cmd>
		HAL_Delay(100);
 80003f6:	2064      	movs	r0, #100	@ 0x64
 80003f8:	f000 fe18 	bl	800102c <HAL_Delay>
		pack_cmd(controller_id,p_des, v_des, kp, kd, t_ff, &hfdcan1);
 80003fc:	bf00      	nop
 80003fe:	e7dc      	b.n	80003ba <main+0x2a>
 8000400:	080077d8 	.word	0x080077d8
 8000404:	24000220 	.word	0x24000220
 8000408:	240002d8 	.word	0x240002d8
 800040c:	240002dc 	.word	0x240002dc
 8000410:	24000028 	.word	0x24000028
 8000414:	2400002c 	.word	0x2400002c
 8000418:	24000030 	.word	0x24000030

0800041c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b09c      	sub	sp, #112	@ 0x70
 8000420:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000426:	224c      	movs	r2, #76	@ 0x4c
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f005 fba6 	bl	8005b7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2220      	movs	r2, #32
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f005 fba0 	bl	8005b7c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800043c:	2002      	movs	r0, #2
 800043e:	f002 fa3d 	bl	80028bc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <SystemClock_Config+0xf8>)
 8000448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800044a:	4a32      	ldr	r2, [pc, #200]	@ (8000514 <SystemClock_Config+0xf8>)
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000452:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <SystemClock_Config+0xf8>)
 8000454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <SystemClock_Config+0xfc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000464:	4a2c      	ldr	r2, [pc, #176]	@ (8000518 <SystemClock_Config+0xfc>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b2a      	ldr	r3, [pc, #168]	@ (8000518 <SystemClock_Config+0xfc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000478:	bf00      	nop
 800047a:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <SystemClock_Config+0xfc>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000486:	d1f8      	bne.n	800047a <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000488:	2303      	movs	r3, #3
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800048c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000490:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000492:	2301      	movs	r3, #1
 8000494:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	2340      	movs	r3, #64	@ 0x40
 8000498:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	2302      	movs	r3, #2
 80004a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80004a6:	2318      	movs	r3, #24
 80004a8:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80004aa:	2302      	movs	r3, #2
 80004ac:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ae:	2304      	movs	r3, #4
 80004b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004b6:	230c      	movs	r3, #12
 80004b8:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fa32 	bl	8002930 <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80004d2:	f000 f8cb 	bl	800066c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	233f      	movs	r3, #63	@ 0x3f
 80004d8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ea:	2340      	movs	r3, #64	@ 0x40
 80004ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fe72 	bl	80031e4 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0xee>
	{
		Error_Handler();
 8000506:	f000 f8b1 	bl	800066c <Error_Handler>
	}
}
 800050a:	bf00      	nop
 800050c:	3770      	adds	r7, #112	@ 0x70
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	58000400 	.word	0x58000400
 8000518:	58024800 	.word	0x58024800

0800051c <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	hfdcan1.Instance = FDCAN1;
 8000520:	4b2f      	ldr	r3, [pc, #188]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000522:	4a30      	ldr	r2, [pc, #192]	@ (80005e4 <MX_FDCAN1_Init+0xc8>)
 8000524:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000526:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052c:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = ENABLE;
 8000532:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000534:	2201      	movs	r2, #1
 8000536:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000538:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800053a:	2200      	movs	r2, #0
 800053c:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = ENABLE;
 800053e:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000540:	2201      	movs	r2, #1
 8000542:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 4;
 8000544:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000546:	2204      	movs	r2, #4
 8000548:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 5;
 800054a:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800054c:	2205      	movs	r2, #5
 800054e:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 14;
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000552:	220e      	movs	r2, #14
 8000554:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 5;
 8000556:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000558:	2205      	movs	r2, #5
 800055a:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.MessageRAMOffset = 0;
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800055e:	2200      	movs	r2, #0
 8000560:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 1;
 8000562:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000564:	2201      	movs	r2, #1
 8000566:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000568:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800056a:	2200      	movs	r2, #0
 800056c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 8;
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000570:	2208      	movs	r2, #8
 8000572:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000576:	2204      	movs	r2, #4
 8000578:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000582:	2204      	movs	r2, #4
 8000584:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000588:	2200      	movs	r2, #0
 800058a:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.TxEventsNbr = 0;
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800058e:	2200      	movs	r2, #0
 8000590:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000592:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000594:	2200      	movs	r2, #0
 8000596:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 800059a:	2208      	movs	r2, #8
 800059c:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 80005ac:	f000 fe7e 	bl	80012ac <HAL_FDCAN_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_FDCAN1_Init+0x9e>
	{
		Error_Handler();
 80005b6:	f000 f859 	bl	800066c <Error_Handler>
	}
	/* FDCAN RX interrupt'ını etkinleştir */
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 80005c0:	f001 fa44 	bl	8001a4c <HAL_FDCAN_ActivateNotification>

	// Enable interrupts
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80005c4:	2013      	movs	r0, #19
 80005c6:	f000 fe56 	bl	8001276 <HAL_NVIC_EnableIRQ>

	/* FDCAN'ı başlat */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 80005cc:	f001 f84c 	bl	8001668 <HAL_FDCAN_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler(); // FDCAN başlatma hatası
 80005d6:	f000 f849 	bl	800066c <Error_Handler>
	}
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	24000220 	.word	0x24000220
 80005e4:	4000a000 	.word	0x4000a000

080005e8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

	/* FDCAN1 pinlerini (PD0: RX, PD1: TX) yapılandır */
	__HAL_RCC_GPIOD_CLK_ENABLE();  // GPIOD için saat aktif et
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_GPIO_Init+0x7c>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000604:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <MX_GPIO_Init+0x7c>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_GPIO_Init+0x7c>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_FDCAN_CLK_ENABLE();
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_GPIO_Init+0x7c>)
 800061e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <MX_GPIO_Init+0x7c>)
 8000624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000628:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_GPIO_Init+0x7c>)
 800062e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800063a:	2303      	movs	r3, #3
 800063c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;  // FDCAN1 pin alternatifi
 800064a:	2309      	movs	r3, #9
 800064c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_GPIO_Init+0x80>)
 8000656:	f001 ff81 	bl	800255c <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58020c00 	.word	0x58020c00

0800066c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <Error_Handler+0x8>

08000678 <HAL_FDCAN_RxFifo0Callback>:
	}
}

// HAL callback fonksiyonu
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rx_msg;

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_msg, msg) == HAL_OK)
 8000682:	f107 0208 	add.w	r2, r7, #8
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f001 f872 	bl	8001774 <HAL_FDCAN_GetRxMessage>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <HAL_FDCAN_RxFifo0Callback+0x22>
	{
		// Mesaj başarıyla alındı
		unpack_reply();
 8000696:	f000 fb91 	bl	8000dbc <unpack_reply>
	}
}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	@ 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	240002cc 	.word	0x240002cc

080006a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_MspInit+0x30>)
 80006b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006b4:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <HAL_MspInit+0x30>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_MspInit+0x30>)
 80006c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58024400 	.word	0x58024400

080006dc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0ba      	sub	sp, #232	@ 0xe8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	22c0      	movs	r2, #192	@ 0xc0
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fa3d 	bl	8005b7c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <HAL_FDCAN_MspInit+0xc8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d146      	bne.n	800079a <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800070c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000710:	f04f 0300 	mov.w	r3, #0
 8000714:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000718:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800071c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4618      	mov	r0, r3
 8000726:	f003 f88d 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000730:	f7ff ff9c 	bl	800066c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <HAL_FDCAN_MspInit+0xcc>)
 8000736:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800073a:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <HAL_FDCAN_MspInit+0xcc>)
 800073c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000740:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <HAL_FDCAN_MspInit+0xcc>)
 8000746:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800074a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_FDCAN_MspInit+0xcc>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <HAL_FDCAN_MspInit+0xcc>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_FDCAN_MspInit+0xcc>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000770:	2303      	movs	r3, #3
 8000772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000788:	2309      	movs	r3, #9
 800078a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <HAL_FDCAN_MspInit+0xd0>)
 8000796:	f001 fee1 	bl	800255c <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800079a:	bf00      	nop
 800079c:	37e8      	adds	r7, #232	@ 0xe8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	4000a000 	.word	0x4000a000
 80007a8:	58024400 	.word	0x58024400
 80007ac:	58020c00 	.word	0x58020c00

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000806:	f000 fbf1 	bl	8000fec <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

	/* USER CODE END TIM2_IRQn 0 */
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan1); // HAL olaylarını işle
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <FDCAN1_IT0_IRQHandler+0x10>)
 8000832:	f001 f985 	bl	8001b40 <HAL_FDCAN_IRQHandler>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000220 	.word	0x24000220

08000840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return 1;
 8000844:	2301      	movs	r3, #1
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_kill>:

int _kill(int pid, int sig)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800085a:	f005 f9e1 	bl	8005c20 <__errno>
 800085e:	4603      	mov	r3, r0
 8000860:	2216      	movs	r2, #22
 8000862:	601a      	str	r2, [r3, #0]
  return -1;
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_exit>:

void _exit (int status)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000878:	f04f 31ff 	mov.w	r1, #4294967295
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffe7 	bl	8000850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <_exit+0x12>

08000886 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e00a      	b.n	80008ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000898:	f3af 8000 	nop.w
 800089c:	4601      	mov	r1, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	60ba      	str	r2, [r7, #8]
 80008a4:	b2ca      	uxtb	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3301      	adds	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dbf0      	blt.n	8000898 <_read+0x12>
  }

  return len;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e009      	b.n	80008e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	60ba      	str	r2, [r7, #8]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dbf1      	blt.n	80008d2 <_write+0x12>
  }
  return len;
 80008ee:	687b      	ldr	r3, [r7, #4]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_close>:

int _close(int file)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000920:	605a      	str	r2, [r3, #4]
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_isatty>:

int _isatty(int file)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000938:	2301      	movs	r3, #1
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f005 f946 	bl	8005c20 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24080000 	.word	0x24080000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	240002c0 	.word	0x240002c0
 80009c8:	24000430 	.word	0x24000430

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d0:	4b37      	ldr	r3, [pc, #220]	@ (8000ab0 <SystemInit+0xe4>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a36      	ldr	r2, [pc, #216]	@ (8000ab0 <SystemInit+0xe4>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009e0:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <SystemInit+0xe8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 030f 	and.w	r3, r3, #15
 80009e8:	2b06      	cmp	r3, #6
 80009ea:	d807      	bhi.n	80009fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ec:	4b31      	ldr	r3, [pc, #196]	@ (8000ab4 <SystemInit+0xe8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f023 030f 	bic.w	r3, r3, #15
 80009f4:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab4 <SystemInit+0xe8>)
 80009f6:	f043 0307 	orr.w	r3, r3, #7
 80009fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009fc:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <SystemInit+0xec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab8 <SystemInit+0xec>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <SystemInit+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <SystemInit+0xec>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4929      	ldr	r1, [pc, #164]	@ (8000ab8 <SystemInit+0xec>)
 8000a14:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <SystemInit+0xf0>)
 8000a16:	4013      	ands	r3, r2
 8000a18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a1a:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <SystemInit+0xe8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a26:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <SystemInit+0xe8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f023 030f 	bic.w	r3, r3, #15
 8000a2e:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <SystemInit+0xe8>)
 8000a30:	f043 0307 	orr.w	r3, r3, #7
 8000a34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <SystemInit+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <SystemInit+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <SystemInit+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <SystemInit+0xec>)
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <SystemInit+0xf4>)
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <SystemInit+0xec>)
 8000a50:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <SystemInit+0xf8>)
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <SystemInit+0xec>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <SystemInit+0xfc>)
 8000a58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <SystemInit+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <SystemInit+0xec>)
 8000a62:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <SystemInit+0xfc>)
 8000a64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a66:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <SystemInit+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <SystemInit+0xec>)
 8000a6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <SystemInit+0xfc>)
 8000a70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <SystemInit+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <SystemInit+0xec>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <SystemInit+0xec>)
 8000a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <SystemInit+0xec>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <SystemInit+0x100>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <SystemInit+0x104>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a96:	d202      	bcs.n	8000a9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <SystemInit+0x108>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <SystemInit+0x10c>)
 8000aa0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000aa4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00
 8000ab4:	52002000 	.word	0x52002000
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ac0:	02020200 	.word	0x02020200
 8000ac4:	01ff0000 	.word	0x01ff0000
 8000ac8:	01010280 	.word	0x01010280
 8000acc:	5c001000 	.word	0x5c001000
 8000ad0:	ffff0000 	.word	0xffff0000
 8000ad4:	51008108 	.word	0x51008108
 8000ad8:	52004000 	.word	0x52004000

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae0:	f7ff ff74 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	@ (8000b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	@ (8000b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f005 f88f 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fc3f 	bl	8000390 <main>
  bx  lr
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b1c:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8000b20:	08007c64 	.word	0x08007c64
  ldr r2, =_sbss
 8000b24:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 8000b28:	24000430 	.word	0x24000430

08000b2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC3_IRQHandler>

08000b2e <comm_can_transmit_eid>:
	buffer_append_int16(buffer + send_index + send_index1, RPA, &send_index1);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index + send_index1, hfdcan1);
}

// Transmit fonksiyonu (FDCAN kullanılarak)
static void comm_can_transmit_eid(uint32_t id, uint8_t* data, uint8_t len, FDCAN_HandleTypeDef *hfdcan1) {
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b08e      	sub	sp, #56	@ 0x38
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d901      	bls.n	8000b48 <comm_can_transmit_eid+0x1a>
		len = 8;
 8000b44:	2308      	movs	r3, #8
 8000b46:	71fb      	strb	r3, [r7, #7]
	}
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = id;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID; // Standart ID tipi
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Veri çerçevesi
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = (len << 16); // Veri uzunluğu
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8000b5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.MessageMarker = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &TxHeader, data) != HAL_OK)
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	4619      	mov	r1, r3
 8000b78:	6838      	ldr	r0, [r7, #0]
 8000b7a:	f000 fda0 	bl	80016be <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <comm_can_transmit_eid+0x5a>
	{
		Error_Handler(); // Veri gönderme hatası
 8000b84:	f7ff fd72 	bl	800066c <Error_Handler>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3738      	adds	r7, #56	@ 0x38
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <enter_motor_control_mode>:
 ****************************************************************************************************************
 * MIT MODE
 *****************************************************************************************************************
 */

void enter_motor_control_mode(uint8_t controller_id, FDCAN_HandleTypeDef *hfdcan1) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC}; // Motor control mode giriş mesajı
 8000b9c:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <enter_motor_control_mode+0x30>)
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba6:	e883 0003 	stmia.w	r3, {r0, r1}
    comm_can_transmit_eid(controller_id, buffer, sizeof(buffer), hfdcan1);
 8000baa:	79f8      	ldrb	r0, [r7, #7]
 8000bac:	f107 0108 	add.w	r1, r7, #8
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	f7ff ffbb 	bl	8000b2e <comm_can_transmit_eid>
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	0800786c 	.word	0x0800786c

08000bc4 <float_to_uint>:


static int float_to_uint(float x, float x_min, float x_max, unsigned int bits)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bce:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bd2:	ed87 1a01 	vstr	s2, [r7, #4]
 8000bd6:	6038      	str	r0, [r7, #0]
	/// Converts a float to an unsigned int, given range and number of bits ///
	float span = x_max- x_min;
 8000bd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be4:	edc7 7a05 	vstr	s15, [r7, #20]
	if(x < x_min) x = x_min;
 8000be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bec:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	d502      	bpl.n	8000c00 <float_to_uint+0x3c>
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e00a      	b.n	8000c16 <float_to_uint+0x52>
	else if(x > x_max) x = x_max;
 8000c00:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c10:	dd01      	ble.n	8000c16 <float_to_uint+0x52>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]
	return (int) ((x- x_min)*((float)((1<<bits)/span)));
 8000c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c22:	2201      	movs	r2, #1
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000c32:	edd7 6a05 	vldr	s13, [r7, #20]
 8000c36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c42:	ee17 3a90 	vmov	r3, s15
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <pack_cmd>:


/*
 *  Sends routine code
 */
void pack_cmd(uint8_t controller_id, float p_des, float v_des, float kp, float kd, float t_ff, FDCAN_HandleTypeDef *hfdcan1){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	@ 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000c60:	edc7 0a05 	vstr	s1, [r7, #20]
 8000c64:	ed87 1a04 	vstr	s2, [r7, #16]
 8000c68:	edc7 1a03 	vstr	s3, [r7, #12]
 8000c6c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000c70:	6079      	str	r1, [r7, #4]
 8000c72:	77fb      	strb	r3, [r7, #31]
	/// convert floats to unsigned ints ///
	int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8000c74:	4b46      	ldr	r3, [pc, #280]	@ (8000d90 <pack_cmd+0x13c>)
 8000c76:	edd3 7a00 	vldr	s15, [r3]
 8000c7a:	4b46      	ldr	r3, [pc, #280]	@ (8000d94 <pack_cmd+0x140>)
 8000c7c:	ed93 7a00 	vldr	s14, [r3]
 8000c80:	2010      	movs	r0, #16
 8000c82:	eeb0 1a47 	vmov.f32	s2, s14
 8000c86:	eef0 0a67 	vmov.f32	s1, s15
 8000c8a:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c8e:	f7ff ff99 	bl	8000bc4 <float_to_uint>
 8000c92:	6378      	str	r0, [r7, #52]	@ 0x34
	int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8000c94:	4b40      	ldr	r3, [pc, #256]	@ (8000d98 <pack_cmd+0x144>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	4b40      	ldr	r3, [pc, #256]	@ (8000d9c <pack_cmd+0x148>)
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	200c      	movs	r0, #12
 8000ca2:	eeb0 1a47 	vmov.f32	s2, s14
 8000ca6:	eef0 0a67 	vmov.f32	s1, s15
 8000caa:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cae:	f7ff ff89 	bl	8000bc4 <float_to_uint>
 8000cb2:	6338      	str	r0, [r7, #48]	@ 0x30
	int kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8000da0 <pack_cmd+0x14c>)
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
 8000cba:	4b3a      	ldr	r3, [pc, #232]	@ (8000da4 <pack_cmd+0x150>)
 8000cbc:	ed93 7a00 	vldr	s14, [r3]
 8000cc0:	200c      	movs	r0, #12
 8000cc2:	eeb0 1a47 	vmov.f32	s2, s14
 8000cc6:	eef0 0a67 	vmov.f32	s1, s15
 8000cca:	ed97 0a04 	vldr	s0, [r7, #16]
 8000cce:	f7ff ff79 	bl	8000bc4 <float_to_uint>
 8000cd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	int kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <pack_cmd+0x154>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <pack_cmd+0x158>)
 8000cdc:	ed93 7a00 	vldr	s14, [r3]
 8000ce0:	200c      	movs	r0, #12
 8000ce2:	eeb0 1a47 	vmov.f32	s2, s14
 8000ce6:	eef0 0a67 	vmov.f32	s1, s15
 8000cea:	ed97 0a03 	vldr	s0, [r7, #12]
 8000cee:	f7ff ff69 	bl	8000bc4 <float_to_uint>
 8000cf2:	62b8      	str	r0, [r7, #40]	@ 0x28
	int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000db0 <pack_cmd+0x15c>)
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <pack_cmd+0x160>)
 8000cfc:	ed93 7a00 	vldr	s14, [r3]
 8000d00:	200c      	movs	r0, #12
 8000d02:	eeb0 1a47 	vmov.f32	s2, s14
 8000d06:	eef0 0a67 	vmov.f32	s1, s15
 8000d0a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d0e:	f7ff ff59 	bl	8000bc4 <float_to_uint>
 8000d12:	6278      	str	r0, [r7, #36]	@ 0x24

	/// pack ints into the can buffer ///
	msg[0] = p_int>>8; // Position 8 higher
 8000d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d16:	121b      	asrs	r3, r3, #8
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <pack_cmd+0x164>)
 8000d1c:	701a      	strb	r2, [r3, #0]
	msg[1] = p_int&0xFF;// Position 8 lower
 8000d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <pack_cmd+0x164>)
 8000d24:	705a      	strb	r2, [r3, #1]
	msg[2] = v_int>>4; // Speed 8 higher
 8000d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d28:	111b      	asrs	r3, r3, #4
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <pack_cmd+0x164>)
 8000d2e:	709a      	strb	r2, [r3, #2]
	msg[3] = ((v_int&0xF)<<4)|(kp_int>>8); //Speed 4 bit lower KP 4bit higher
 8000d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	b25a      	sxtb	r2, r3
 8000d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3a:	121b      	asrs	r3, r3, #8
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <pack_cmd+0x164>)
 8000d46:	70da      	strb	r2, [r3, #3]
	msg[4] = kp_int&0xFF; // KP 8 bit lower
 8000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <pack_cmd+0x164>)
 8000d4e:	711a      	strb	r2, [r3, #4]
	msg[5] = kd_int>>4; // Kd 8 bit higher
 8000d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d52:	111b      	asrs	r3, r3, #4
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <pack_cmd+0x164>)
 8000d58:	715a      	strb	r2, [r3, #5]
	msg[6] = ((kd_int&0xF)<<4)|(t_int>>8); //KP 4bit lower torque 4 bit higher
 8000d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	121b      	asrs	r3, r3, #8
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <pack_cmd+0x164>)
 8000d70:	719a      	strb	r2, [r3, #6]
	msg[7] = t_int&0xff; // torque 4 bit lower
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <pack_cmd+0x164>)
 8000d78:	71da      	strb	r2, [r3, #7]
	comm_can_transmit_eid(controller_id, msg, sizeof(msg), hfdcan1);
 8000d7a:	7ff8      	ldrb	r0, [r7, #31]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	220c      	movs	r2, #12
 8000d80:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <pack_cmd+0x164>)
 8000d82:	f7ff fed4 	bl	8000b2e <comm_can_transmit_eid>
}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	@ 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000008 	.word	0x24000008
 8000d94:	2400000c 	.word	0x2400000c
 8000d98:	24000010 	.word	0x24000010
 8000d9c:	24000014 	.word	0x24000014
 8000da0:	240002c4 	.word	0x240002c4
 8000da4:	24000020 	.word	0x24000020
 8000da8:	240002c8 	.word	0x240002c8
 8000dac:	24000024 	.word	0x24000024
 8000db0:	24000018 	.word	0x24000018
 8000db4:	2400001c 	.word	0x2400001c
 8000db8:	240002cc 	.word	0x240002cc

08000dbc <unpack_reply>:


/*
 *  Receive routine code
 */
void unpack_reply(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
	/// unpack ints from can buffer ///
	int id = msg[0];
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e7c <unpack_reply+0xc0>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	61fb      	str	r3, [r7, #28]
	int p_int = (msg[1]<<8)|msg[2]; //Motor position data
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <unpack_reply+0xc0>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	4a2b      	ldr	r2, [pc, #172]	@ (8000e7c <unpack_reply+0xc0>)
 8000dd0:	7892      	ldrb	r2, [r2, #2]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
	int v_int = (msg[3]<<4)|(msg[4]>>4); // Motor speed data
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <unpack_reply+0xc0>)
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4a27      	ldr	r2, [pc, #156]	@ (8000e7c <unpack_reply+0xc0>)
 8000dde:	7912      	ldrb	r2, [r2, #4]
 8000de0:	0912      	lsrs	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	4313      	orrs	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
	int i_int = ((msg[4]&0xF)<<8)|msg[5]; // Motor torque data
 8000de8:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <unpack_reply+0xc0>)
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000df2:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <unpack_reply+0xc0>)
 8000df4:	7952      	ldrb	r2, [r2, #5]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]

	/// convert ints to floats ///
	float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <unpack_reply+0xc4>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <unpack_reply+0xc8>)
 8000e02:	ed93 7a00 	vldr	s14, [r3]
 8000e06:	2110      	movs	r1, #16
 8000e08:	eef0 0a47 	vmov.f32	s1, s14
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	69b8      	ldr	r0, [r7, #24]
 8000e12:	f000 f847 	bl	8000ea4 <uint_to_float>
 8000e16:	ed87 0a03 	vstr	s0, [r7, #12]
	float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <unpack_reply+0xcc>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <unpack_reply+0xd0>)
 8000e22:	ed93 7a00 	vldr	s14, [r3]
 8000e26:	210c      	movs	r1, #12
 8000e28:	eef0 0a47 	vmov.f32	s1, s14
 8000e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e30:	6978      	ldr	r0, [r7, #20]
 8000e32:	f000 f837 	bl	8000ea4 <uint_to_float>
 8000e36:	ed87 0a02 	vstr	s0, [r7, #8]
	float i = uint_to_float(i_int, T_MIN, T_MAX, 12);
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <unpack_reply+0xd4>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <unpack_reply+0xd8>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	210c      	movs	r1, #12
 8000e48:	eef0 0a47 	vmov.f32	s1, s14
 8000e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e50:	6938      	ldr	r0, [r7, #16]
 8000e52:	f000 f827 	bl	8000ea4 <uint_to_float>
 8000e56:	ed87 0a01 	vstr	s0, [r7, #4]

	// Read the corresponding data according to the ID code
	if(id == 1){
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <unpack_reply+0xb6>
		p_des = p;
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <unpack_reply+0xdc>)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6013      	str	r3, [r2, #0]
		v_des = v;
 8000e66:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <unpack_reply+0xe0>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	6013      	str	r3, [r2, #0]
		t_ff = i;
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <unpack_reply+0xe4>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
	}
}
 8000e72:	bf00      	nop
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	240002cc 	.word	0x240002cc
 8000e80:	24000008 	.word	0x24000008
 8000e84:	2400000c 	.word	0x2400000c
 8000e88:	24000010 	.word	0x24000010
 8000e8c:	24000014 	.word	0x24000014
 8000e90:	24000018 	.word	0x24000018
 8000e94:	2400001c 	.word	0x2400001c
 8000e98:	240002d8 	.word	0x240002d8
 8000e9c:	240002dc 	.word	0x240002dc
 8000ea0:	24000030 	.word	0x24000030

08000ea4 <uint_to_float>:


/*
 *  All numbers are converted to floating-point by the following function
 */
static float uint_to_float(int x_int, float x_min, float x_max, int bits) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  /// converts unsigned int to float, given range and number of bits ///
  float span = x_max - x_min;
 8000eb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eba:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec2:	edc7 7a05 	vstr	s15, [r7, #20]
  float offset = x_min;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
  return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ed8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000edc:	2201      	movs	r2, #1
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ef2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000efa:	eeb0 0a67 	vmov.f32	s0, s15
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f98c 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f14:	f002 fb1c 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4913      	ldr	r1, [pc, #76]	@ (8000f74 <HAL_Init+0x6c>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_Init+0x68>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <HAL_Init+0x6c>)
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	4a0b      	ldr	r2, [pc, #44]	@ (8000f78 <HAL_Init+0x70>)
 8000f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_Init+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f814 	bl	8000f80 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e002      	b.n	8000f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fba1 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	080078c0 	.word	0x080078c0
 8000f78:	24000004 	.word	0x24000004
 8000f7c:	24000000 	.word	0x24000000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e021      	b.n	8000fd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <HAL_InitTick+0x64>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_InitTick+0x60>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f971 	bl	8001292 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f93b 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <HAL_InitTick+0x68>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	24000038 	.word	0x24000038
 8000fe4:	24000000 	.word	0x24000000
 8000fe8:	24000034 	.word	0x24000034

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	24000038 	.word	0x24000038
 8001010:	240002e0 	.word	0x240002e0

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	240002e0 	.word	0x240002e0

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	24000038 	.word	0x24000038

08001074 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetREVID+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0c1b      	lsrs	r3, r3, #16
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	5c001000 	.word	0x5c001000

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0000 	.word	0x05fa0000

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff40 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa4 	bl	80011e8 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b098      	sub	sp, #96	@ 0x60
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80012b4:	4a84      	ldr	r2, [pc, #528]	@ (80014c8 <HAL_FDCAN_Init+0x21c>)
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4611      	mov	r1, r2
 80012bc:	224c      	movs	r2, #76	@ 0x4c
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fcdb 	bl	8005c7a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1c6      	b.n	800165c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7e      	ldr	r2, [pc, #504]	@ (80014cc <HAL_FDCAN_Init+0x220>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d106      	bne.n	80012e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff f9ee 	bl	80006dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0210 	bic.w	r2, r2, #16
 800130e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff fe80 	bl	8001014 <HAL_GetTick>
 8001314:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001316:	e014      	b.n	8001342 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001318:	f7ff fe7c 	bl	8001014 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d90d      	bls.n	8001342 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e18c      	b.n	800165c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b08      	cmp	r3, #8
 800134e:	d0e3      	beq.n	8001318 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff fe58 	bl	8001014 <HAL_GetTick>
 8001364:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001366:	e014      	b.n	8001392 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001368:	f7ff fe54 	bl	8001014 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b0a      	cmp	r3, #10
 8001374:	d90d      	bls.n	8001392 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e164      	b.n	800165c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e3      	beq.n	8001368 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7c1b      	ldrb	r3, [r3, #16]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013c6:	619a      	str	r2, [r3, #24]
 80013c8:	e007      	b.n	80013da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7c5b      	ldrb	r3, [r3, #17]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699a      	ldr	r2, [r3, #24]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80013f0:	619a      	str	r2, [r3, #24]
 80013f2:	e007      	b.n	8001404 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001402:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7c9b      	ldrb	r3, [r3, #18]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	e007      	b.n	800142e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800142c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001452:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0210 	bic.w	r2, r2, #16
 8001462:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0204 	orr.w	r2, r2, #4
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	e030      	b.n	80014e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d02c      	beq.n	80014e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d020      	beq.n	80014d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699a      	ldr	r2, [r3, #24]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800149c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0210 	orr.w	r2, r2, #16
 80014ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d114      	bne.n	80014e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699a      	ldr	r2, [r3, #24]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	e00b      	b.n	80014e0 <HAL_FDCAN_Init+0x234>
 80014c8:	08007874 	.word	0x08007874
 80014cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699a      	ldr	r2, [r3, #24]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0220 	orr.w	r2, r2, #32
 80014de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	3b01      	subs	r3, #1
 8001502:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001508:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800150a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001514:	d115      	bne.n	8001542 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001520:	3b01      	subs	r3, #1
 8001522:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001524:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	3b01      	subs	r3, #1
 800152c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800152e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	3b01      	subs	r3, #1
 8001538:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800153e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001540:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00a      	beq.n	8001560 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001568:	4413      	add	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d011      	beq.n	8001592 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001576:	f023 0107 	bic.w	r1, r3, #7
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	3360      	adds	r3, #96	@ 0x60
 8001582:	443b      	add	r3, r7
 8001584:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d011      	beq.n	80015be <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80015a2:	f023 0107 	bic.w	r1, r3, #7
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	3360      	adds	r3, #96	@ 0x60
 80015ae:	443b      	add	r3, r7
 80015b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80015ce:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3360      	adds	r3, #96	@ 0x60
 80015da:	443b      	add	r3, r7
 80015dc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80015e0:	011a      	lsls	r2, r3, #4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d012      	beq.n	800161a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80015fc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3360      	adds	r3, #96	@ 0x60
 8001608:	443b      	add	r3, r7
 800160a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800160e:	021a      	lsls	r2, r3, #8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_FDCAN_Init+0x3b8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d107      	bne.n	8001634 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f022 0203 	bic.w	r2, r2, #3
 8001632:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fd81 	bl	8002154 <FDCAN_CalcultateRamBlockAddresses>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001658:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800165c:	4618      	mov	r0, r3
 800165e:	3760      	adds	r7, #96	@ 0x60
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	4000a000 	.word	0x4000a000

08001668 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d111      	bne.n	80016a0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e008      	b.n	80016b2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016a6:	f043 0204 	orr.w	r2, r3, #4
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
  }
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d141      	bne.n	800175a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016de:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e038      	b.n	800176c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001710:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e026      	b.n	800176c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fe93 	bl	8002460 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	fa01 f202 	lsl.w	r2, r1, r2
 8001746:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800174a:	2201      	movs	r2, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e008      	b.n	800176c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001760:	f043 0208 	orr.w	r2, r3, #8
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
  }
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001774:	b480      	push	{r7}
 8001776:	b08b      	sub	sp, #44	@ 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800178c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800178e:	7efb      	ldrb	r3, [r7, #27]
 8001790:	2b02      	cmp	r3, #2
 8001792:	f040 8149 	bne.w	8001a28 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b40      	cmp	r3, #64	@ 0x40
 800179a:	d14c      	bne.n	8001836 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017a4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017b2:	f043 0220 	orr.w	r2, r3, #32
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e13c      	b.n	8001a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e12a      	b.n	8001a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f4:	d10a      	bne.n	800180c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001806:	d101      	bne.n	800180c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001808:	2301      	movs	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001828:	69f9      	ldr	r1, [r7, #28]
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
 8001834:	e068      	b.n	8001908 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b41      	cmp	r3, #65	@ 0x41
 800183a:	d14c      	bne.n	80018d6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001844:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001852:	f043 0220 	orr.w	r2, r3, #32
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0ec      	b.n	8001a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0da      	b.n	8001a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800188c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001894:	d10a      	bne.n	80018ac <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800189e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018a6:	d101      	bne.n	80018ac <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	69f9      	ldr	r1, [r7, #28]
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d4:	e018      	b.n	8001908 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d309      	bcc.n	80018f4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018e6:	f043 0220 	orr.w	r2, r3, #32
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0a2      	b.n	8001a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c9b      	lsrs	r3, r3, #18
 8001922:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e005      	b.n	8001938 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	3304      	adds	r3, #4
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29a      	uxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f003 020f 	and.w	r2, r3, #15
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0e1b      	lsrs	r3, r3, #24
 800198c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0fda      	lsrs	r2, r3, #31
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	3304      	adds	r3, #4
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	e00a      	b.n	80019c4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	441a      	add	r2, r3
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	440b      	add	r3, r1
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	3301      	adds	r3, #1
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	461a      	mov	r2, r3
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d3ec      	bcc.n	80019ae <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b40      	cmp	r3, #64	@ 0x40
 80019d8:	d105      	bne.n	80019e6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80019e4:	e01e      	b.n	8001a24 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b41      	cmp	r3, #65	@ 0x41
 80019ea:	d105      	bne.n	80019f8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80019f6:	e015      	b.n	8001a24 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b1f      	cmp	r3, #31
 80019fc:	d808      	bhi.n	8001a10 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001a0e:	e009      	b.n	8001a24 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 021f 	and.w	r2, r3, #31
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e008      	b.n	8001a3a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a2e:	f043 0208 	orr.w	r2, r3, #8
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	372c      	adds	r7, #44	@ 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	080078d0 	.word	0x080078d0

08001a4c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a5e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d002      	beq.n	8001a6c <HAL_FDCAN_ActivateNotification+0x20>
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d155      	bne.n	8001b18 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a8a:	e014      	b.n	8001ab6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d108      	bne.n	8001aae <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0202 	orr.w	r2, r2, #2
 8001aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aac:	e003      	b.n	8001ab6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_FDCAN_ActivateNotification+0xec>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	430b      	orrs	r3, r1
 8001b04:	6553      	str	r3, [r2, #84]	@ 0x54
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0f9b      	lsrs	r3, r3, #30
 8001b0e:	490b      	ldr	r1, [pc, #44]	@ (8001b3c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e008      	b.n	8001b2a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
  }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	3fcfffff 	.word	0x3fcfffff
 8001b3c:	4000a800 	.word	0x4000a800

08001b40 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b096      	sub	sp, #88	@ 0x58
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001b48:	4b9a      	ldr	r3, [pc, #616]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	079b      	lsls	r3, r3, #30
 8001b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001b50:	4b98      	ldr	r3, [pc, #608]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	079b      	lsls	r3, r3, #30
 8001b56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b58:	4013      	ands	r3, r2
 8001b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b62:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001b66:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b70:	4013      	ands	r3, r2
 8001b72:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b88:	4013      	ands	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001baa:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8001bae:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bb8:	4013      	ands	r3, r2
 8001bba:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00a      	beq.n	8001c12 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c04:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c06:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fa54 	bl	80020ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c14:	0a9b      	lsrs	r3, r3, #10
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01d      	beq.n	8001c5a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c20:	0a9b      	lsrs	r3, r3, #10
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d017      	beq.n	8001c5a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c32:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c3e:	4013      	ands	r3, r2
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fa07 	bl	8002068 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00d      	beq.n	8001c7c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c66:	4b54      	ldr	r3, [pc, #336]	@ (8001db8 <HAL_FDCAN_IRQHandler+0x278>)
 8001c68:	400b      	ands	r3, r1
 8001c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8001c6c:	4a51      	ldr	r2, [pc, #324]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c70:	0f9b      	lsrs	r3, r3, #30
 8001c72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001c74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9c0 	bl	8001ffc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00d      	beq.n	8001c9e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001c88:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <HAL_FDCAN_IRQHandler+0x278>)
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8001c8e:	4a49      	ldr	r2, [pc, #292]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c92:	0f9b      	lsrs	r3, r3, #30
 8001c94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f9ba 	bl	8002012 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001caa:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <HAL_FDCAN_IRQHandler+0x278>)
 8001cac:	400b      	ands	r3, r1
 8001cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8001cb0:	4a40      	ldr	r2, [pc, #256]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cb4:	0f9b      	lsrs	r3, r3, #30
 8001cb6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001cb8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fcdc 	bl	8000678 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8001db8 <HAL_FDCAN_IRQHandler+0x278>)
 8001cce:	400b      	ands	r3, r1
 8001cd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8001cd2:	4a38      	ldr	r2, [pc, #224]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd6:	0f9b      	lsrs	r3, r3, #30
 8001cd8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001cda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f9a3 	bl	8002028 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce4:	0adb      	lsrs	r3, r3, #11
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d010      	beq.n	8001d10 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf0:	0adb      	lsrs	r3, r3, #11
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d02:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d04:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f997 	bl	800203e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d12:	0a5b      	lsrs	r3, r3, #9
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01d      	beq.n	8001d58 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1e:	0a5b      	lsrs	r3, r3, #9
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d017      	beq.n	8001d58 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d48:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f97d 	bl	8002052 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d5a:	0cdb      	lsrs	r3, r3, #19
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d66:	0cdb      	lsrs	r3, r3, #19
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d78:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f97c 	bl	800207e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d010      	beq.n	8001dc0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001da6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <HAL_FDCAN_IRQHandler+0x274>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	e004      	b.n	8001dbc <HAL_FDCAN_IRQHandler+0x27c>
 8001db2:	bf00      	nop
 8001db4:	4000a800 	.word	0x4000a800
 8001db8:	3fcfffff 	.word	0x3fcfffff
 8001dbc:	f000 f969 	bl	8002092 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d010      	beq.n	8001dee <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dce:	0c9b      	lsrs	r3, r3, #18
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001de0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001de2:	4b83      	ldr	r3, [pc, #524]	@ (8001ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f95c 	bl	80020a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001df0:	0c5b      	lsrs	r3, r3, #17
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dfc:	0c5b      	lsrs	r3, r3, #17
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e10:	4b77      	ldr	r3, [pc, #476]	@ (8001ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e32:	4b70      	ldr	r3, [pc, #448]	@ (8001ff4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001e34:	400b      	ands	r3, r1
 8001e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e38:	4a6d      	ldr	r2, [pc, #436]	@ (8001ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e3c:	0f9b      	lsrs	r3, r3, #30
 8001e3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f94d 	bl	80020e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d011      	beq.n	8001e72 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001e54:	4b67      	ldr	r3, [pc, #412]	@ (8001ff4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001e56:	400b      	ands	r3, r1
 8001e58:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e5a:	4a65      	ldr	r2, [pc, #404]	@ (8001ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5e:	0f9b      	lsrs	r3, r3, #30
 8001e60:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a60      	ldr	r2, [pc, #384]	@ (8001ff8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f040 80ac 	bne.w	8001fd6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a4 	beq.w	8001fd6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eba:	4013      	ands	r3, r2
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8001ee0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	4013      	ands	r3, r2
 8001eec:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8001ef8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f22:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8e6 	bl	80020f8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8e6 	bl	800210e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01a      	beq.n	8001f84 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d014      	beq.n	8001f84 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f70:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8d0 	bl	8002124 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8d1 	bl	800213c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00b      	beq.n	8001fb8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	6a3a      	ldr	r2, [r7, #32]
 8001fa6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f874 	bl	80020ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3758      	adds	r7, #88	@ 0x58
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	4000a800 	.word	0x4000a800
 8001ff4:	3fcfffff 	.word	0x3fcfffff
 8001ff8:	4000a000 	.word	0x4000a000

08001ffc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002160:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800216a:	4ba7      	ldr	r3, [pc, #668]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800216c:	4013      	ands	r3, r2
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	0091      	lsls	r1, r2, #2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	430b      	orrs	r3, r1
 8002178:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002184:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021aa:	4b97      	ldr	r3, [pc, #604]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	0091      	lsls	r1, r2, #2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	430b      	orrs	r3, r1
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80021ec:	4b86      	ldr	r3, [pc, #536]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	0091      	lsls	r1, r2, #2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002206:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002234:	4b74      	ldr	r3, [pc, #464]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	0091      	lsls	r1, r2, #2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800224e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800227c:	4b62      	ldr	r3, [pc, #392]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	0091      	lsls	r1, r2, #2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80022a8:	4b57      	ldr	r3, [pc, #348]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	0091      	lsls	r1, r2, #2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022c2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	041a      	lsls	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	4413      	add	r3, r2
 80022e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80022ea:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	0091      	lsls	r1, r2, #2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	430b      	orrs	r3, r1
 80022f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002304:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002320:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002328:	061a      	lsls	r2, r3, #24
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002338:	4b34      	ldr	r3, [pc, #208]	@ (800240c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800233a:	4413      	add	r3, r2
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002374:	441a      	add	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fe:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d915      	bls.n	8002430 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002404:	e006      	b.n	8002414 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002406:	bf00      	nop
 8002408:	ffff0003 	.word	0xffff0003
 800240c:	10002b00 	.word	0x10002b00
 8002410:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e010      	b.n	8002452 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e005      	b.n	8002444 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3304      	adds	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d3f3      	bcc.n	8002438 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop

08002460 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800247e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002486:	4313      	orrs	r3, r2
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e00a      	b.n	80024a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002494:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800249a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800249c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80024b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80024b8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ce:	6839      	ldr	r1, [r7, #0]
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	3304      	adds	r3, #4
 80024e4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3304      	adds	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e020      	b.n	800253a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3303      	adds	r3, #3
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3302      	adds	r3, #2
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	440b      	add	r3, r1
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002510:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	440b      	add	r3, r1
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800251e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	440a      	add	r2, r1
 8002526:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002528:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	3304      	adds	r3, #4
 8002532:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3304      	adds	r3, #4
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a06      	ldr	r2, [pc, #24]	@ (8002558 <FDCAN_CopyMessageToRAM+0xf8>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	461a      	mov	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4293      	cmp	r3, r2
 8002548:	d3d6      	bcc.n	80024f8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	3724      	adds	r7, #36	@ 0x24
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	080078d0 	.word	0x080078d0

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800256a:	4b89      	ldr	r3, [pc, #548]	@ (8002790 <HAL_GPIO_Init+0x234>)
 800256c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800256e:	e194      	b.n	800289a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8186 	beq.w	8002894 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d005      	beq.n	80025a0 <HAL_GPIO_Init+0x44>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d130      	bne.n	8002602 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d6:	2201      	movs	r2, #1
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 0201 	and.w	r2, r3, #1
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b03      	cmp	r3, #3
 800260c:	d017      	beq.n	800263e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d123      	bne.n	8002692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	69b9      	ldr	r1, [r7, #24]
 800268e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80e0 	beq.w	8002894 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x238>)
 80026d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026da:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <HAL_GPIO_Init+0x238>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <HAL_GPIO_Init+0x238>)
 80026e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a29      	ldr	r2, [pc, #164]	@ (8002798 <HAL_GPIO_Init+0x23c>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a20      	ldr	r2, [pc, #128]	@ (800279c <HAL_GPIO_Init+0x240>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d052      	beq.n	80027c4 <HAL_GPIO_Init+0x268>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1f      	ldr	r2, [pc, #124]	@ (80027a0 <HAL_GPIO_Init+0x244>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d031      	beq.n	800278a <HAL_GPIO_Init+0x22e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1e      	ldr	r2, [pc, #120]	@ (80027a4 <HAL_GPIO_Init+0x248>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_Init+0x22a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1d      	ldr	r2, [pc, #116]	@ (80027a8 <HAL_GPIO_Init+0x24c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d025      	beq.n	8002782 <HAL_GPIO_Init+0x226>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <HAL_GPIO_Init+0x250>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <HAL_GPIO_Init+0x222>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1b      	ldr	r2, [pc, #108]	@ (80027b0 <HAL_GPIO_Init+0x254>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_Init+0x21e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <HAL_GPIO_Init+0x258>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x21a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <HAL_GPIO_Init+0x25c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x216>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a18      	ldr	r2, [pc, #96]	@ (80027bc <HAL_GPIO_Init+0x260>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x212>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a17      	ldr	r2, [pc, #92]	@ (80027c0 <HAL_GPIO_Init+0x264>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x20e>
 8002766:	2309      	movs	r3, #9
 8002768:	e02d      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800276a:	230a      	movs	r3, #10
 800276c:	e02b      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800276e:	2308      	movs	r3, #8
 8002770:	e029      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002772:	2307      	movs	r3, #7
 8002774:	e027      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002776:	2306      	movs	r3, #6
 8002778:	e025      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800277a:	2305      	movs	r3, #5
 800277c:	e023      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800277e:	2304      	movs	r3, #4
 8002780:	e021      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002782:	2303      	movs	r3, #3
 8002784:	e01f      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 8002786:	2302      	movs	r3, #2
 8002788:	e01d      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800278a:	2301      	movs	r3, #1
 800278c:	e01b      	b.n	80027c6 <HAL_GPIO_Init+0x26a>
 800278e:	bf00      	nop
 8002790:	58000080 	.word	0x58000080
 8002794:	58024400 	.word	0x58024400
 8002798:	58000400 	.word	0x58000400
 800279c:	58020000 	.word	0x58020000
 80027a0:	58020400 	.word	0x58020400
 80027a4:	58020800 	.word	0x58020800
 80027a8:	58020c00 	.word	0x58020c00
 80027ac:	58021000 	.word	0x58021000
 80027b0:	58021400 	.word	0x58021400
 80027b4:	58021800 	.word	0x58021800
 80027b8:	58021c00 	.word	0x58021c00
 80027bc:	58022000 	.word	0x58022000
 80027c0:	58022400 	.word	0x58022400
 80027c4:	2300      	movs	r3, #0
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d6:	4938      	ldr	r1, [pc, #224]	@ (80028b8 <HAL_GPIO_Init+0x35c>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f47f ae63 	bne.w	8002570 <HAL_GPIO_Init+0x14>
  }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	3724      	adds	r7, #36	@ 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	58000400 	.word	0x58000400

080028bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_PWREx_ConfigSupply+0x70>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d00a      	beq.n	80028e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028d0:	4b16      	ldr	r3, [pc, #88]	@ (800292c <HAL_PWREx_ConfigSupply+0x70>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e01f      	b.n	8002922 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e01d      	b.n	8002922 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_PWREx_ConfigSupply+0x70>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	490f      	ldr	r1, [pc, #60]	@ (800292c <HAL_PWREx_ConfigSupply+0x70>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028f6:	f7fe fb8d 	bl	8001014 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028fc:	e009      	b.n	8002912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028fe:	f7fe fb89 	bl	8001014 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800290c:	d901      	bls.n	8002912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e007      	b.n	8002922 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_PWREx_ConfigSupply+0x70>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800291e:	d1ee      	bne.n	80028fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	58024800 	.word	0x58024800

08002930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	@ 0x30
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f000 bc48 	b.w	80031d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8088 	beq.w	8002a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	4b99      	ldr	r3, [pc, #612]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800295c:	4b96      	ldr	r3, [pc, #600]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002964:	2b10      	cmp	r3, #16
 8002966:	d007      	beq.n	8002978 <HAL_RCC_OscConfig+0x48>
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	2b18      	cmp	r3, #24
 800296c:	d111      	bne.n	8002992 <HAL_RCC_OscConfig+0x62>
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d06d      	beq.n	8002a60 <HAL_RCC_OscConfig+0x130>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d169      	bne.n	8002a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f000 bc21 	b.w	80031d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x7a>
 800299c:	4b86      	ldr	r3, [pc, #536]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a85      	ldr	r2, [pc, #532]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e02e      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x9c>
 80029b2:	4b81      	ldr	r3, [pc, #516]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a80      	ldr	r2, [pc, #512]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0xc0>
 80029d6:	4b78      	ldr	r3, [pc, #480]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a77      	ldr	r2, [pc, #476]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b75      	ldr	r3, [pc, #468]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a74      	ldr	r2, [pc, #464]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029f0:	4b71      	ldr	r3, [pc, #452]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a70      	ldr	r2, [pc, #448]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6d      	ldr	r2, [pc, #436]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb00 	bl	8001014 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fafc 	bl	8001014 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	@ 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e3d4      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe8>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe faec 	bl	8001014 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fae8 	bl	8001014 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	@ 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e3c0      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a52:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x110>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80ca 	beq.w	8002c04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a70:	4b51      	ldr	r3, [pc, #324]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_RCC_OscConfig+0x166>
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b18      	cmp	r3, #24
 8002a8a:	d156      	bne.n	8002b3a <HAL_RCC_OscConfig+0x20a>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d151      	bne.n	8002b3a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a96:	4b48      	ldr	r3, [pc, #288]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x17e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e392      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aae:	4b42      	ldr	r3, [pc, #264]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0219 	bic.w	r2, r3, #25
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	493f      	ldr	r1, [pc, #252]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe faa8 	bl	8001014 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe faa4 	bl	8001014 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e37c      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ada:	4b37      	ldr	r3, [pc, #220]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	f7fe fac5 	bl	8001074 <HAL_GetREVID>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d817      	bhi.n	8002b24 <HAL_RCC_OscConfig+0x1f4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b40      	cmp	r3, #64	@ 0x40
 8002afa:	d108      	bne.n	8002b0e <HAL_RCC_OscConfig+0x1de>
 8002afc:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b04:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0c:	e07a      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	4926      	ldr	r1, [pc, #152]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b22:	e06f      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	4921      	ldr	r1, [pc, #132]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b38:	e064      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d047      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0219 	bic.w	r2, r3, #25
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	491a      	ldr	r1, [pc, #104]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fa5e 	bl	8001014 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fa5a 	bl	8001014 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e332      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	f7fe fa7b 	bl	8001074 <HAL_GetREVID>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d819      	bhi.n	8002bbc <HAL_RCC_OscConfig+0x28c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b40      	cmp	r3, #64	@ 0x40
 8002b8e:	d108      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x272>
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b98:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9e:	6053      	str	r3, [r2, #4]
 8002ba0:	e030      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	4901      	ldr	r1, [pc, #4]	@ (8002bb8 <HAL_RCC_OscConfig+0x288>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	e025      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	4b9a      	ldr	r3, [pc, #616]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	4997      	ldr	r1, [pc, #604]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
 8002bd0:	e018      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd2:	4b95      	ldr	r3, [pc, #596]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a94      	ldr	r2, [pc, #592]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fa19 	bl	8001014 <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fa15 	bl	8001014 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e2ed      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bf8:	4b8b      	ldr	r3, [pc, #556]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a9 	beq.w	8002d64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c12:	4b85      	ldr	r3, [pc, #532]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c1c:	4b82      	ldr	r3, [pc, #520]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d007      	beq.n	8002c38 <HAL_RCC_OscConfig+0x308>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b18      	cmp	r3, #24
 8002c2c:	d13a      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x374>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d135      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c38:	4b7b      	ldr	r3, [pc, #492]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x320>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	2b80      	cmp	r3, #128	@ 0x80
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e2c1      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c50:	f7fe fa10 	bl	8001074 <HAL_GetREVID>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d817      	bhi.n	8002c8e <HAL_RCC_OscConfig+0x35e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_OscConfig+0x348>
 8002c66:	4b70      	ldr	r3, [pc, #448]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c76:	e075      	b.n	8002d64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c78:	4b6b      	ldr	r3, [pc, #428]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	069b      	lsls	r3, r3, #26
 8002c86:	4968      	ldr	r1, [pc, #416]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c8c:	e06a      	b.n	8002d64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c8e:	4b66      	ldr	r3, [pc, #408]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	4962      	ldr	r1, [pc, #392]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca2:	e05f      	b.n	8002d64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d042      	beq.n	8002d32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cac:	4b5e      	ldr	r3, [pc, #376]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f9ac 	bl	8001014 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cc0:	f7fe f9a8 	bl	8001014 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e280      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cd2:	4b55      	ldr	r3, [pc, #340]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cde:	f7fe f9c9 	bl	8001074 <HAL_GetREVID>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d817      	bhi.n	8002d1c <HAL_RCC_OscConfig+0x3ec>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d108      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3d6>
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d02:	6053      	str	r3, [r2, #4]
 8002d04:	e02e      	b.n	8002d64 <HAL_RCC_OscConfig+0x434>
 8002d06:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	4944      	ldr	r1, [pc, #272]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
 8002d1a:	e023      	b.n	8002d64 <HAL_RCC_OscConfig+0x434>
 8002d1c:	4b42      	ldr	r3, [pc, #264]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	493f      	ldr	r1, [pc, #252]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
 8002d30:	e018      	b.n	8002d64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d32:	4b3d      	ldr	r3, [pc, #244]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3c      	ldr	r2, [pc, #240]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f969 	bl	8001014 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d46:	f7fe f965 	bl	8001014 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e23d      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d58:	4b33      	ldr	r3, [pc, #204]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d036      	beq.n	8002dde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d019      	beq.n	8002dac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d78:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f946 	bl	8001014 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe f942 	bl	8001014 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e21a      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d9e:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x45c>
 8002daa:	e018      	b.n	8002dde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe f92c 	bl	8001014 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f928 	bl	8001014 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e200      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d039      	beq.n	8002e5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f909 	bl	8001014 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e06:	f7fe f905 	bl	8001014 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1dd      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <HAL_RCC_OscConfig+0x4f8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x4d6>
 8002e24:	e01b      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e2c:	4b9b      	ldr	r3, [pc, #620]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a9a      	ldr	r2, [pc, #616]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002e32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e38:	f7fe f8ec 	bl	8001014 <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e40:	f7fe f8e8 	bl	8001014 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1c0      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e52:	4b92      	ldr	r3, [pc, #584]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8081 	beq.w	8002f6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80030a0 <HAL_RCC_OscConfig+0x770>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a8b      	ldr	r2, [pc, #556]	@ (80030a0 <HAL_RCC_OscConfig+0x770>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e78:	f7fe f8cc 	bl	8001014 <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fe f8c8 	bl	8001014 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	@ 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1a0      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e92:	4b83      	ldr	r3, [pc, #524]	@ (80030a0 <HAL_RCC_OscConfig+0x770>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x584>
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	4a7c      	ldr	r2, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb2:	e02d      	b.n	8002f10 <HAL_RCC_OscConfig+0x5e0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5a6>
 8002ebc:	4b77      	ldr	r3, [pc, #476]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a76      	ldr	r2, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	4b74      	ldr	r3, [pc, #464]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	4a73      	ldr	r2, [pc, #460]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x5e0>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c8>
 8002ede:	4b6f      	ldr	r3, [pc, #444]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a6b      	ldr	r2, [pc, #428]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x5e0>
 8002ef8:	4b68      	ldr	r3, [pc, #416]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a67      	ldr	r2, [pc, #412]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f04:	4b65      	ldr	r3, [pc, #404]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	4a64      	ldr	r2, [pc, #400]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe f87c 	bl	8001014 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe f878 	bl	8001014 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e14e      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f36:	4b59      	ldr	r3, [pc, #356]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCC_OscConfig+0x5f0>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe f866 	bl	8001014 <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f862 	bl	8001014 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e138      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f62:	4b4e      	ldr	r3, [pc, #312]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 812d 	beq.w	80031d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f78:	4b48      	ldr	r3, [pc, #288]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f80:	2b18      	cmp	r3, #24
 8002f82:	f000 80bd 	beq.w	8003100 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	f040 809e 	bne.w	80030cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b42      	ldr	r3, [pc, #264]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a41      	ldr	r2, [pc, #260]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f83a 	bl	8001014 <HAL_GetTick>
 8002fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe f836 	bl	8001014 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e10e      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fb6:	4b39      	ldr	r3, [pc, #228]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fc6:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <HAL_RCC_OscConfig+0x774>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	4931      	ldr	r1, [pc, #196]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	628b      	str	r3, [r1, #40]	@ 0x28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	3b01      	subs	r3, #1
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	3b01      	subs	r3, #1
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800300c:	4923      	ldr	r1, [pc, #140]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	4a21      	ldr	r2, [pc, #132]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800301e:	4b1f      	ldr	r3, [pc, #124]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003022:	4b21      	ldr	r3, [pc, #132]	@ (80030a8 <HAL_RCC_OscConfig+0x778>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800302a:	00d2      	lsls	r2, r2, #3
 800302c:	491b      	ldr	r1, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003032:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	f023 020c 	bic.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	4917      	ldr	r1, [pc, #92]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003044:	4b15      	ldr	r3, [pc, #84]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	f023 0202 	bic.w	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003050:	4912      	ldr	r1, [pc, #72]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003056:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	4a10      	ldr	r2, [pc, #64]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003062:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800307a:	4b08      	ldr	r3, [pc, #32]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	4a07      	ldr	r2, [pc, #28]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003086:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_RCC_OscConfig+0x76c>)
 800308c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fd ffbf 	bl	8001014 <HAL_GetTick>
 8003096:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003098:	e011      	b.n	80030be <HAL_RCC_OscConfig+0x78e>
 800309a:	bf00      	nop
 800309c:	58024400 	.word	0x58024400
 80030a0:	58024800 	.word	0x58024800
 80030a4:	fffffc0c 	.word	0xfffffc0c
 80030a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fd ffb2 	bl	8001014 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e08a      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030be:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x77c>
 80030ca:	e082      	b.n	80031d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a42      	ldr	r2, [pc, #264]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80030d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fd ff9c 	bl	8001014 <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd ff98 	bl	8001014 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e070      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f2:	4b3a      	ldr	r3, [pc, #232]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x7b0>
 80030fe:	e068      	b.n	80031d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003100:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003106:	4b35      	ldr	r3, [pc, #212]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	2b01      	cmp	r3, #1
 8003112:	d031      	beq.n	8003178 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f003 0203 	and.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d12a      	bne.n	8003178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d122      	bne.n	8003178 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0a5b      	lsrs	r3, r3, #9
 8003146:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d111      	bne.n	8003178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d108      	bne.n	8003178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0e1b      	lsrs	r3, r3, #24
 800316a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003172:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e02b      	b.n	80031d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 800317e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003186:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	429a      	cmp	r2, r3
 8003190:	d01f      	beq.n	80031d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003192:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800319e:	f7fd ff39 	bl	8001014 <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031a4:	bf00      	nop
 80031a6:	f7fd ff35 	bl	8001014 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d0f9      	beq.n	80031a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80031b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_RCC_OscConfig+0x8b0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031be:	00d2      	lsls	r2, r2, #3
 80031c0:	4906      	ldr	r1, [pc, #24]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	4a04      	ldr	r2, [pc, #16]	@ (80031dc <HAL_RCC_OscConfig+0x8ac>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3730      	adds	r7, #48	@ 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	58024400 	.word	0x58024400
 80031e0:	ffff0007 	.word	0xffff0007

080031e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e19c      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b87      	ldr	r3, [pc, #540]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 020f 	bic.w	r2, r3, #15
 800320e:	4985      	ldr	r1, [pc, #532]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b83      	ldr	r3, [pc, #524]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e184      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	4b7b      	ldr	r3, [pc, #492]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003240:	429a      	cmp	r2, r3
 8003242:	d908      	bls.n	8003256 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003244:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	4975      	ldr	r1, [pc, #468]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003252:	4313      	orrs	r3, r2
 8003254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	4b70      	ldr	r3, [pc, #448]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800326e:	429a      	cmp	r2, r3
 8003270:	d908      	bls.n	8003284 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003272:	4b6d      	ldr	r3, [pc, #436]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	496a      	ldr	r1, [pc, #424]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003280:	4313      	orrs	r3, r2
 8003282:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	4b64      	ldr	r3, [pc, #400]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800329c:	429a      	cmp	r2, r3
 800329e:	d908      	bls.n	80032b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032a0:	4b61      	ldr	r3, [pc, #388]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	495e      	ldr	r1, [pc, #376]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	4b59      	ldr	r3, [pc, #356]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d908      	bls.n	80032e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032ce:	4b56      	ldr	r3, [pc, #344]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4953      	ldr	r1, [pc, #332]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d908      	bls.n	800330e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f023 020f 	bic.w	r2, r3, #15
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4947      	ldr	r1, [pc, #284]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 800330a:	4313      	orrs	r3, r2
 800330c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d055      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800331a:	4b43      	ldr	r3, [pc, #268]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4940      	ldr	r1, [pc, #256]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003328:	4313      	orrs	r3, r2
 800332a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d107      	bne.n	8003344 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003334:	4b3c      	ldr	r3, [pc, #240]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d121      	bne.n	8003384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0f6      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d107      	bne.n	800335c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800334c:	4b36      	ldr	r3, [pc, #216]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d115      	bne.n	8003384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0ea      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003364:	4b30      	ldr	r3, [pc, #192]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0de      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003374:	4b2c      	ldr	r3, [pc, #176]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0d6      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003384:	4b28      	ldr	r3, [pc, #160]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f023 0207 	bic.w	r2, r3, #7
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4925      	ldr	r1, [pc, #148]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 8003392:	4313      	orrs	r3, r2
 8003394:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003396:	f7fd fe3d 	bl	8001014 <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339e:	f7fd fe39 	bl	8001014 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0be      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d1eb      	bne.n	800339e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	429a      	cmp	r2, r3
 80033e0:	d208      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f023 020f 	bic.w	r2, r3, #15
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	490e      	ldr	r1, [pc, #56]	@ (8003428 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d214      	bcs.n	800342c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	4906      	ldr	r1, [pc, #24]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <HAL_RCC_ClockConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e086      	b.n	8003532 <HAL_RCC_ClockConfig+0x34e>
 8003424:	52002000 	.word	0x52002000
 8003428:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	4b3f      	ldr	r3, [pc, #252]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003444:	429a      	cmp	r2, r3
 8003446:	d208      	bcs.n	800345a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003448:	4b3c      	ldr	r3, [pc, #240]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4939      	ldr	r1, [pc, #228]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 8003456:	4313      	orrs	r3, r2
 8003458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	4b34      	ldr	r3, [pc, #208]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003472:	429a      	cmp	r2, r3
 8003474:	d208      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003476:	4b31      	ldr	r3, [pc, #196]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	492e      	ldr	r1, [pc, #184]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 8003484:	4313      	orrs	r3, r2
 8003486:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	4b28      	ldr	r3, [pc, #160]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d208      	bcs.n	80034b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034a4:	4b25      	ldr	r3, [pc, #148]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4922      	ldr	r1, [pc, #136]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d010      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d208      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034d2:	4b1a      	ldr	r3, [pc, #104]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4917      	ldr	r1, [pc, #92]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034e4:	f000 f834 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b14      	ldr	r3, [pc, #80]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4912      	ldr	r1, [pc, #72]	@ (8003540 <HAL_RCC_ClockConfig+0x35c>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003500:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_RCC_ClockConfig+0x358>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <HAL_RCC_ClockConfig+0x35c>)
 800350c:	5cd3      	ldrb	r3, [r2, r3]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_RCC_ClockConfig+0x360>)
 800351a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800351c:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <HAL_RCC_ClockConfig+0x364>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <HAL_RCC_ClockConfig+0x368>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fd2a 	bl	8000f80 <HAL_InitTick>
 800352c:	4603      	mov	r3, r0
 800352e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	58024400 	.word	0x58024400
 8003540:	080078c0 	.word	0x080078c0
 8003544:	24000004 	.word	0x24000004
 8003548:	24000000 	.word	0x24000000
 800354c:	24000034 	.word	0x24000034

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	@ 0x24
 8003554:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003556:	4bb3      	ldr	r3, [pc, #716]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800355e:	2b18      	cmp	r3, #24
 8003560:	f200 8155 	bhi.w	800380e <HAL_RCC_GetSysClockFreq+0x2be>
 8003564:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035d1 	.word	0x080035d1
 8003570:	0800380f 	.word	0x0800380f
 8003574:	0800380f 	.word	0x0800380f
 8003578:	0800380f 	.word	0x0800380f
 800357c:	0800380f 	.word	0x0800380f
 8003580:	0800380f 	.word	0x0800380f
 8003584:	0800380f 	.word	0x0800380f
 8003588:	0800380f 	.word	0x0800380f
 800358c:	080035f7 	.word	0x080035f7
 8003590:	0800380f 	.word	0x0800380f
 8003594:	0800380f 	.word	0x0800380f
 8003598:	0800380f 	.word	0x0800380f
 800359c:	0800380f 	.word	0x0800380f
 80035a0:	0800380f 	.word	0x0800380f
 80035a4:	0800380f 	.word	0x0800380f
 80035a8:	0800380f 	.word	0x0800380f
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	0800380f 	.word	0x0800380f
 80035b4:	0800380f 	.word	0x0800380f
 80035b8:	0800380f 	.word	0x0800380f
 80035bc:	0800380f 	.word	0x0800380f
 80035c0:	0800380f 	.word	0x0800380f
 80035c4:	0800380f 	.word	0x0800380f
 80035c8:	0800380f 	.word	0x0800380f
 80035cc:	08003603 	.word	0x08003603
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d0:	4b94      	ldr	r3, [pc, #592]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035dc:	4b91      	ldr	r3, [pc, #580]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	4a90      	ldr	r2, [pc, #576]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035ee:	e111      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035f2:	61bb      	str	r3, [r7, #24]
      break;
 80035f4:	e10e      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035f6:	4b8d      	ldr	r3, [pc, #564]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035f8:	61bb      	str	r3, [r7, #24]
      break;
 80035fa:	e10b      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035fe:	61bb      	str	r3, [r7, #24]
      break;
 8003600:	e108      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003602:	4b88      	ldr	r3, [pc, #544]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800360c:	4b85      	ldr	r3, [pc, #532]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003616:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003618:	4b82      	ldr	r3, [pc, #520]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003622:	4b80      	ldr	r3, [pc, #512]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80e1 	beq.w	8003808 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b02      	cmp	r3, #2
 800364a:	f000 8083 	beq.w	8003754 <HAL_RCC_GetSysClockFreq+0x204>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b02      	cmp	r3, #2
 8003652:	f200 80a1 	bhi.w	8003798 <HAL_RCC_GetSysClockFreq+0x248>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x114>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d056      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003662:	e099      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003664:	4b6f      	ldr	r3, [pc, #444]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02d      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003670:	4b6c      	ldr	r3, [pc, #432]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	08db      	lsrs	r3, r3, #3
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	4a6b      	ldr	r2, [pc, #428]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b62      	ldr	r3, [pc, #392]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036ca:	e087      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036de:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800370e:	e065      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2ec>
 800371e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003722:	4b40      	ldr	r3, [pc, #256]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003732:	ed97 6a02 	vldr	s12, [r7, #8]
 8003736:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2e4>
 800373a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003752:	e043      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003840 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b2f      	ldr	r3, [pc, #188]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003776:	ed97 6a02 	vldr	s12, [r7, #8]
 800377a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2e4>
 800377e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800378a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003796:	e021      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2ec>
 80037a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80037be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	0a5b      	lsrs	r3, r3, #9
 80037e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037e6:	3301      	adds	r3, #1
 80037e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003800:	ee17 3a90 	vmov	r3, s15
 8003804:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003806:	e005      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003810:	61bb      	str	r3, [r7, #24]
      break;
 8003812:	bf00      	nop
  }

  return sysclockfreq;
 8003814:	69bb      	ldr	r3, [r7, #24]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3724      	adds	r7, #36	@ 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
 8003828:	03d09000 	.word	0x03d09000
 800382c:	003d0900 	.word	0x003d0900
 8003830:	007a1200 	.word	0x007a1200
 8003834:	46000000 	.word	0x46000000
 8003838:	4c742400 	.word	0x4c742400
 800383c:	4a742400 	.word	0x4a742400
 8003840:	4af42400 	.word	0x4af42400

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b0ca      	sub	sp, #296	@ 0x128
 800384a:	af00      	add	r7, sp, #0
 800384c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003868:	2500      	movs	r5, #0
 800386a:	ea54 0305 	orrs.w	r3, r4, r5
 800386e:	d049      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003876:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800387a:	d02f      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800387c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003880:	d828      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003886:	d01a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003888:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800388c:	d822      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003896:	d007      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003898:	e01c      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389a:	4bb8      	ldr	r3, [pc, #736]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	4ab7      	ldr	r2, [pc, #732]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038a6:	e01a      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3308      	adds	r3, #8
 80038ae:	2102      	movs	r1, #2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f9d1 	bl	8004c58 <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038bc:	e00f      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	3328      	adds	r3, #40	@ 0x28
 80038c4:	2102      	movs	r1, #2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fa78 	bl	8004dbc <RCCEx_PLL3_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038d2:	e004      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038e6:	4ba5      	ldr	r3, [pc, #660]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f4:	4aa1      	ldr	r2, [pc, #644]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f6:	430b      	orrs	r3, r1
 80038f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003910:	f04f 0900 	mov.w	r9, #0
 8003914:	ea58 0309 	orrs.w	r3, r8, r9
 8003918:	d047      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	2b04      	cmp	r3, #4
 8003922:	d82a      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003924:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003941 	.word	0x08003941
 8003930:	0800394f 	.word	0x0800394f
 8003934:	08003965 	.word	0x08003965
 8003938:	08003983 	.word	0x08003983
 800393c:	08003983 	.word	0x08003983
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b8e      	ldr	r3, [pc, #568]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4a8d      	ldr	r2, [pc, #564]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800394c:	e01a      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	3308      	adds	r3, #8
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f97e 	bl	8004c58 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003962:	e00f      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	3328      	adds	r3, #40	@ 0x28
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fa25 	bl	8004dbc <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003978:	e004      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003980:	e000      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800398c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800398e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003990:	f023 0107 	bic.w	r1, r3, #7
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	4a78      	ldr	r2, [pc, #480]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	430b      	orrs	r3, r1
 800399e:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80039b6:	f04f 0b00 	mov.w	fp, #0
 80039ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80039be:	d04c      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ca:	d030      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d0:	d829      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039d4:	d02d      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80039d8:	d825      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d018      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039de:	2b80      	cmp	r3, #128	@ 0x80
 80039e0:	d821      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d007      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80039ea:	e01c      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ec:	4b63      	ldr	r3, [pc, #396]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	4a62      	ldr	r2, [pc, #392]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039f8:	e01c      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	3308      	adds	r3, #8
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 f928 	bl	8004c58 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a0e:	e011      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	3328      	adds	r3, #40	@ 0x28
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f9cf 	bl	8004dbc <RCCEx_PLL3_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2c:	e002      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4a:	4a4c      	ldr	r2, [pc, #304]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d053      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a86:	d035      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a8c:	d82e      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a92:	d031      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a98:	d828      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a9e:	d01a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa4:	d822      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003aaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ab0:	e01c      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab2:	4b32      	ldr	r3, [pc, #200]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	4a31      	ldr	r2, [pc, #196]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003abe:	e01c      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 f8c5 	bl	8004c58 <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e011      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	3328      	adds	r3, #40	@ 0x28
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f96c 	bl	8004dbc <RCCEx_PLL3_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aea:	e006      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af2:	e002      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b02:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b12:	4a1a      	ldr	r2, [pc, #104]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b18:	e003      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	d056      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b4e:	d038      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b54:	d831      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b5a:	d034      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b60:	d82b      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b66:	d01d      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b6c:	d825      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b78:	e01f      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b7a:	bf00      	nop
 8003b7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b80:	4ba2      	ldr	r3, [pc, #648]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	4aa1      	ldr	r2, [pc, #644]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	3308      	adds	r3, #8
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 f85e 	bl	8004c58 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e011      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	3328      	adds	r3, #40	@ 0x28
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f905 	bl	8004dbc <RCCEx_PLL3_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003be0:	4a8a      	ldr	r2, [pc, #552]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d03a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c16:	2b30      	cmp	r3, #48	@ 0x30
 8003c18:	d01f      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c1a:	2b30      	cmp	r3, #48	@ 0x30
 8003c1c:	d819      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d00c      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d815      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d019      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d111      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2e:	4b77      	ldr	r3, [pc, #476]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	4a76      	ldr	r2, [pc, #472]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c3a:	e011      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	3308      	adds	r3, #8
 8003c42:	2102      	movs	r1, #2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f807 	bl	8004c58 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c58:	e002      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	4a65      	ldr	r2, [pc, #404]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7c:	e003      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d051      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb0:	d035      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb6:	d82e      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cbc:	d031      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003cbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cc2:	d828      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc8:	d01a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cce:	d822      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd8:	d007      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cda:	e01c      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	4a4a      	ldr	r2, [pc, #296]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e01c      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	3308      	adds	r3, #8
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 ffb0 	bl	8004c58 <RCCEx_PLL2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cfe:	e011      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	3328      	adds	r3, #40	@ 0x28
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 f857 	bl	8004dbc <RCCEx_PLL3_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d14:	e006      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1c:	e002      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d2c:	4b37      	ldr	r3, [pc, #220]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	4a34      	ldr	r2, [pc, #208]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d056      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d74:	d033      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d7a:	d82c      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d80:	d02f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d86:	d826      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d8c:	d02b      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d92:	d820      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d98:	d012      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d9e:	d81a      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d022      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da8:	d115      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ff50 	bl	8004c58 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e015      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3328      	adds	r3, #40	@ 0x28
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fff7 	bl	8004dbc <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dde:	bf00      	nop
 8003de0:	e004      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e02:	4a02      	ldr	r2, [pc, #8]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d055      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e44:	d033      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4a:	d82c      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e50:	d02f      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e56:	d826      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e5c:	d02b      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e62:	d820      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e68:	d012      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e6e:	d81a      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d022      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e78:	d115      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fee8 	bl	8004c58 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e8e:	e015      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e94:	3328      	adds	r3, #40	@ 0x28
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 ff8f 	bl	8004dbc <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ec4:	4ba3      	ldr	r3, [pc, #652]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ed4:	4a9f      	ldr	r2, [pc, #636]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d037      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f0e:	d00e      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f14:	d816      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4b8c      	ldr	r3, [pc, #560]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	4a8b      	ldr	r2, [pc, #556]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	3308      	adds	r3, #8
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fe8e 	bl	8004c58 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f56:	4b7f      	ldr	r3, [pc, #508]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a7b      	ldr	r2, [pc, #492]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d039      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d81c      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fb5 	.word	0x08003fb5
 8003fac:	08003fc3 	.word	0x08003fc3
 8003fb0:	08003fe1 	.word	0x08003fe1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b67      	ldr	r3, [pc, #412]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4a66      	ldr	r2, [pc, #408]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fc0:	e00f      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fe44 	bl	8004c58 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fea:	4b5a      	ldr	r3, [pc, #360]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fee:	f023 0103 	bic.w	r1, r3, #3
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	4a56      	ldr	r2, [pc, #344]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ffe:	e003      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004014:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800401e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	f000 809f 	beq.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402a:	4b4b      	ldr	r3, [pc, #300]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a4a      	ldr	r2, [pc, #296]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004036:	f7fc ffed 	bl	8001014 <HAL_GetTick>
 800403a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800403e:	e00b      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004040:	f7fc ffe8 	bl	8001014 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	@ 0x64
 800404e:	d903      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004058:	4b3f      	ldr	r3, [pc, #252]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ed      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004068:	2b00      	cmp	r3, #0
 800406a:	d179      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800406c:	4b39      	ldr	r3, [pc, #228]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004078:	4053      	eors	r3, r2
 800407a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004082:	4b34      	ldr	r3, [pc, #208]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800408a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800408e:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	4a30      	ldr	r2, [pc, #192]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004098:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800409a:	4b2e      	ldr	r3, [pc, #184]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	4a2d      	ldr	r2, [pc, #180]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ba:	d118      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fc ffaa 	bl	8001014 <HAL_GetTick>
 80040c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040c4:	e00d      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fc ffa5 	bl	8001014 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d903      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80040e0:	e005      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0eb      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80040ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d129      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004106:	d10e      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004108:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004118:	091a      	lsrs	r2, r3, #4
 800411a:	4b10      	ldr	r3, [pc, #64]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800411c:	4013      	ands	r3, r2
 800411e:	4a0d      	ldr	r2, [pc, #52]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004120:	430b      	orrs	r3, r1
 8004122:	6113      	str	r3, [r2, #16]
 8004124:	e005      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004130:	6113      	str	r3, [r2, #16]
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004134:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	4a04      	ldr	r2, [pc, #16]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004144:	430b      	orrs	r3, r1
 8004146:	6713      	str	r3, [r2, #112]	@ 0x70
 8004148:	e00e      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004152:	e009      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004154:	58024400 	.word	0x58024400
 8004158:	58024800 	.word	0x58024800
 800415c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 0301 	and.w	r3, r2, #1
 8004174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800417e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	f000 8089 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004190:	2b28      	cmp	r3, #40	@ 0x28
 8004192:	d86b      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	08004275 	.word	0x08004275
 80041a0:	0800426d 	.word	0x0800426d
 80041a4:	0800426d 	.word	0x0800426d
 80041a8:	0800426d 	.word	0x0800426d
 80041ac:	0800426d 	.word	0x0800426d
 80041b0:	0800426d 	.word	0x0800426d
 80041b4:	0800426d 	.word	0x0800426d
 80041b8:	0800426d 	.word	0x0800426d
 80041bc:	08004241 	.word	0x08004241
 80041c0:	0800426d 	.word	0x0800426d
 80041c4:	0800426d 	.word	0x0800426d
 80041c8:	0800426d 	.word	0x0800426d
 80041cc:	0800426d 	.word	0x0800426d
 80041d0:	0800426d 	.word	0x0800426d
 80041d4:	0800426d 	.word	0x0800426d
 80041d8:	0800426d 	.word	0x0800426d
 80041dc:	08004257 	.word	0x08004257
 80041e0:	0800426d 	.word	0x0800426d
 80041e4:	0800426d 	.word	0x0800426d
 80041e8:	0800426d 	.word	0x0800426d
 80041ec:	0800426d 	.word	0x0800426d
 80041f0:	0800426d 	.word	0x0800426d
 80041f4:	0800426d 	.word	0x0800426d
 80041f8:	0800426d 	.word	0x0800426d
 80041fc:	08004275 	.word	0x08004275
 8004200:	0800426d 	.word	0x0800426d
 8004204:	0800426d 	.word	0x0800426d
 8004208:	0800426d 	.word	0x0800426d
 800420c:	0800426d 	.word	0x0800426d
 8004210:	0800426d 	.word	0x0800426d
 8004214:	0800426d 	.word	0x0800426d
 8004218:	0800426d 	.word	0x0800426d
 800421c:	08004275 	.word	0x08004275
 8004220:	0800426d 	.word	0x0800426d
 8004224:	0800426d 	.word	0x0800426d
 8004228:	0800426d 	.word	0x0800426d
 800422c:	0800426d 	.word	0x0800426d
 8004230:	0800426d 	.word	0x0800426d
 8004234:	0800426d 	.word	0x0800426d
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004275 	.word	0x08004275
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	3308      	adds	r3, #8
 8004246:	2101      	movs	r1, #1
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fd05 	bl	8004c58 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fdac 	bl	8004dbc <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800427e:	4bbf      	ldr	r3, [pc, #764]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800428c:	4abb      	ldr	r2, [pc, #748]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6553      	str	r3, [r2, #84]	@ 0x54
 8004292:	e003      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 0302 	and.w	r3, r2, #2
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80042b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d041      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d824      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80042c6:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004319 	.word	0x08004319
 80042d0:	080042e5 	.word	0x080042e5
 80042d4:	080042fb 	.word	0x080042fb
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	3308      	adds	r3, #8
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fcb3 	bl	8004c58 <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042f8:	e00f      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fe:	3328      	adds	r3, #40	@ 0x28
 8004300:	2101      	movs	r1, #1
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fd5a 	bl	8004dbc <RCCEx_PLL3_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004322:	4b96      	ldr	r3, [pc, #600]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004326:	f023 0107 	bic.w	r1, r3, #7
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004330:	4a92      	ldr	r2, [pc, #584]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004332:	430b      	orrs	r3, r1
 8004334:	6553      	str	r3, [r2, #84]	@ 0x54
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 0304 	and.w	r3, r2, #4
 800434c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004356:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d044      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004368:	2b05      	cmp	r3, #5
 800436a:	d825      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800436c:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	080043c1 	.word	0x080043c1
 8004378:	0800438d 	.word	0x0800438d
 800437c:	080043a3 	.word	0x080043a3
 8004380:	080043c1 	.word	0x080043c1
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043c1 	.word	0x080043c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	3308      	adds	r3, #8
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fc5f 	bl	8004c58 <RCCEx_PLL2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043a0:	e00f      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	3328      	adds	r3, #40	@ 0x28
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fd06 	bl	8004dbc <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043ca:	4b6c      	ldr	r3, [pc, #432]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	f023 0107 	bic.w	r1, r3, #7
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043da:	4a68      	ldr	r2, [pc, #416]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e0:	e003      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f002 0320 	and.w	r3, r2, #32
 80043f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d055      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004416:	d033      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004418:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800441c:	d82c      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800441e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004422:	d02f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004428:	d826      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800442a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800442e:	d02b      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004430:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004434:	d820      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800443a:	d012      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800443c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004440:	d81a      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d022      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800444a:	d115      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	3308      	adds	r3, #8
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fbff 	bl	8004c58 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004460:	e015      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3328      	adds	r3, #40	@ 0x28
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fca6 	bl	8004dbc <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004476:	e00a      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447e:	e006      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004480:	bf00      	nop
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004484:	bf00      	nop
 8004486:	e002      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004488:	bf00      	nop
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004496:	4b39      	ldr	r3, [pc, #228]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a6:	4a35      	ldr	r2, [pc, #212]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80044c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4313      	orrs	r3, r2
 80044d4:	d058      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044e2:	d033      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80044e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044e8:	d82c      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ee:	d02f      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f4:	d826      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044fa:	d02b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80044fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004500:	d820      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004506:	d012      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800450c:	d81a      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d022      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004516:	d115      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	3308      	adds	r3, #8
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fb99 	bl	8004c58 <RCCEx_PLL2_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800452c:	e015      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	3328      	adds	r3, #40	@ 0x28
 8004534:	2102      	movs	r1, #2
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fc40 	bl	8004dbc <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004542:	e00a      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800454a:	e006      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800454c:	bf00      	nop
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004550:	bf00      	nop
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004572:	4a02      	ldr	r2, [pc, #8]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6593      	str	r3, [r2, #88]	@ 0x58
 8004578:	e006      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800457a:	bf00      	nop
 800457c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800459e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d055      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045b4:	d033      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80045b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045ba:	d82c      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c0:	d02f      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c6:	d826      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045cc:	d02b      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045d2:	d820      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d8:	d012      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045de:	d81a      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d022      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e8:	d115      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	3308      	adds	r3, #8
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fb30 	bl	8004c58 <RCCEx_PLL2_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045fe:	e015      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	3328      	adds	r3, #40	@ 0x28
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fbd7 	bl	8004dbc <RCCEx_PLL3_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004614:	e00a      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800461c:	e006      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800462a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004634:	4ba1      	ldr	r3, [pc, #644]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004638:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004644:	4a9d      	ldr	r2, [pc, #628]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004646:	430b      	orrs	r3, r1
 8004648:	6593      	str	r3, [r2, #88]	@ 0x58
 800464a:	e003      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f002 0308 	and.w	r3, r2, #8
 8004660:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800466a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d01e      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	3328      	adds	r3, #40	@ 0x28
 8004688:	2102      	movs	r1, #2
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fb96 	bl	8004dbc <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800469c:	4b87      	ldr	r3, [pc, #540]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ac:	4a83      	ldr	r2, [pc, #524]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ae:	430b      	orrs	r3, r1
 80046b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f002 0310 	and.w	r3, r2, #16
 80046be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d01e      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046de:	d10c      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	3328      	adds	r3, #40	@ 0x28
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fb67 	bl	8004dbc <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046fa:	4b70      	ldr	r3, [pc, #448]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800470a:	4a6c      	ldr	r2, [pc, #432]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800471c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004726:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d03e      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800473c:	d022      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800473e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004742:	d81b      	bhi.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d00b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800474e:	e015      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004754:	3308      	adds	r3, #8
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fa7d 	bl	8004c58 <RCCEx_PLL2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004764:	e00f      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	3328      	adds	r3, #40	@ 0x28
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fb24 	bl	8004dbc <RCCEx_PLL3_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800477a:	e004      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004782:	e000      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800478e:	4b4b      	ldr	r3, [pc, #300]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004792:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800479e:	4a47      	ldr	r2, [pc, #284]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a4:	e003      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80047ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047bc:	2300      	movs	r3, #0
 80047be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d03b      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047d6:	d01f      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80047d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047dc:	d818      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80047de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e2:	d003      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80047e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047e8:	d007      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80047ea:	e011      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ec:	4b33      	ldr	r3, [pc, #204]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	4a32      	ldr	r2, [pc, #200]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80047f8:	e00f      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	3328      	adds	r3, #40	@ 0x28
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fada 	bl	8004dbc <RCCEx_PLL3_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800480e:	e004      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004816:	e000      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004822:	4b26      	ldr	r3, [pc, #152]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004826:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	4a22      	ldr	r2, [pc, #136]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004834:	430b      	orrs	r3, r1
 8004836:	6553      	str	r3, [r2, #84]	@ 0x54
 8004838:	e003      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800484e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004850:	2300      	movs	r3, #0
 8004852:	677b      	str	r3, [r7, #116]	@ 0x74
 8004854:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004858:	460b      	mov	r3, r1
 800485a:	4313      	orrs	r3, r2
 800485c:	d034      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800485e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d007      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800486e:	e011      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004870:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	4a11      	ldr	r2, [pc, #68]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800487c:	e00e      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	3308      	adds	r3, #8
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f9e6 	bl	8004c58 <RCCEx_PLL2_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004892:	e003      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800489a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	4a02      	ldr	r2, [pc, #8]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048d6:	2300      	movs	r3, #0
 80048d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048de:	460b      	mov	r3, r1
 80048e0:	4313      	orrs	r3, r2
 80048e2:	d00c      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e8:	3328      	adds	r3, #40	@ 0x28
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fa65 	bl	8004dbc <RCCEx_PLL3_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800490a:	663b      	str	r3, [r7, #96]	@ 0x60
 800490c:	2300      	movs	r3, #0
 800490e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004910:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004914:	460b      	mov	r3, r1
 8004916:	4313      	orrs	r3, r2
 8004918:	d038      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004926:	d018      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004928:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800492c:	d811      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800492e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004932:	d014      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004938:	d80b      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	d106      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4bc3      	ldr	r3, [pc, #780]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4ac2      	ldr	r2, [pc, #776]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004950:	e008      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004958:	e004      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800496c:	4bb9      	ldr	r3, [pc, #740]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004970:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497c:	4ab5      	ldr	r2, [pc, #724]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800497e:	430b      	orrs	r3, r1
 8004980:	6553      	str	r3, [r2, #84]	@ 0x54
 8004982:	e003      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004998:	65bb      	str	r3, [r7, #88]	@ 0x58
 800499a:	2300      	movs	r3, #0
 800499c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800499e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049a8:	4baa      	ldr	r3, [pc, #680]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	4aa7      	ldr	r2, [pc, #668]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ca:	2300      	movs	r3, #0
 80049cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049d8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049e8:	4a9a      	ldr	r2, [pc, #616]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049fc:	2300      	movs	r3, #0
 80049fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a04:	460b      	mov	r3, r1
 8004a06:	4313      	orrs	r3, r2
 8004a08:	d009      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a0a:	4b92      	ldr	r3, [pc, #584]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a18:	4a8e      	ldr	r2, [pc, #568]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d00e      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a3a:	4b86      	ldr	r3, [pc, #536]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4a85      	ldr	r2, [pc, #532]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a44:	6113      	str	r3, [r2, #16]
 8004a46:	4b83      	ldr	r3, [pc, #524]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a48:	6919      	ldr	r1, [r3, #16]
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a52:	4a80      	ldr	r2, [pc, #512]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a66:	2300      	movs	r3, #0
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a74:	4b77      	ldr	r3, [pc, #476]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	4a74      	ldr	r2, [pc, #464]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a96:	2300      	movs	r3, #0
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ab4:	4a67      	ldr	r2, [pc, #412]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004acc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	d011      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	3308      	adds	r3, #8
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f8ba 	bl	8004c58 <RCCEx_PLL2_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	2100      	movs	r1, #0
 8004b04:	6239      	str	r1, [r7, #32]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d011      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f89a 	bl	8004c58 <RCCEx_PLL2_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	2100      	movs	r1, #0
 8004b44:	61b9      	str	r1, [r7, #24]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b50:	460b      	mov	r3, r1
 8004b52:	4313      	orrs	r3, r2
 8004b54:	d011      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f87a 	bl	8004c58 <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	2100      	movs	r1, #0
 8004b84:	6139      	str	r1, [r7, #16]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d011      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	3328      	adds	r3, #40	@ 0x28
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f90c 	bl	8004dbc <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	d011      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	3328      	adds	r3, #40	@ 0x28
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f8ec 	bl	8004dbc <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	2100      	movs	r1, #0
 8004c04:	6039      	str	r1, [r7, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d011      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	3328      	adds	r3, #40	@ 0x28
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f8cc 	bl	8004dbc <RCCEx_PLL3_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004c3a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c54:	58024400 	.word	0x58024400

08004c58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c66:	4b53      	ldr	r3, [pc, #332]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d101      	bne.n	8004c76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e099      	b.n	8004daa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c76:	4b4f      	ldr	r3, [pc, #316]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c82:	f7fc f9c7 	bl	8001014 <HAL_GetTick>
 8004c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c8a:	f7fc f9c3 	bl	8001014 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e086      	b.n	8004daa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c9c:	4b45      	ldr	r3, [pc, #276]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ca8:	4b42      	ldr	r3, [pc, #264]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	493f      	ldr	r1, [pc, #252]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	025b      	lsls	r3, r3, #9
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cec:	4931      	ldr	r1, [pc, #196]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cf2:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	492d      	ldr	r1, [pc, #180]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d04:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	f023 0220 	bic.w	r2, r3, #32
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	4928      	ldr	r1, [pc, #160]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f023 0310 	bic.w	r3, r3, #16
 8004d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d26:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <RCCEx_PLL2_Config+0x160>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	69d2      	ldr	r2, [r2, #28]
 8004d2e:	00d2      	lsls	r2, r2, #3
 8004d30:	4920      	ldr	r1, [pc, #128]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d36:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	f043 0310 	orr.w	r3, r3, #16
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d48:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d54:	e00f      	b.n	8004d76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d106      	bne.n	8004d6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d5c:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d68:	e005      	b.n	8004d76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d6a:	4b12      	ldr	r3, [pc, #72]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d82:	f7fc f947 	bl	8001014 <HAL_GetTick>
 8004d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d88:	e008      	b.n	8004d9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d8a:	f7fc f943 	bl	8001014 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d9c:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	58024400 	.word	0x58024400
 8004db8:	ffff0007 	.word	0xffff0007

08004dbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dca:	4b53      	ldr	r3, [pc, #332]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d101      	bne.n	8004dda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e099      	b.n	8004f0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dda:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a4e      	ldr	r2, [pc, #312]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fc f915 	bl	8001014 <HAL_GetTick>
 8004dea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dee:	f7fc f911 	bl	8001014 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e086      	b.n	8004f0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e00:	4b45      	ldr	r3, [pc, #276]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e0c:	4b42      	ldr	r3, [pc, #264]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	051b      	lsls	r3, r3, #20
 8004e1a:	493f      	ldr	r1, [pc, #252]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	025b      	lsls	r3, r3, #9
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e50:	4931      	ldr	r1, [pc, #196]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e56:	4b30      	ldr	r3, [pc, #192]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	492d      	ldr	r1, [pc, #180]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e68:	4b2b      	ldr	r3, [pc, #172]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	4928      	ldr	r1, [pc, #160]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e7a:	4b27      	ldr	r3, [pc, #156]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	4a26      	ldr	r2, [pc, #152]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e86:	4b24      	ldr	r3, [pc, #144]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8a:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <RCCEx_PLL3_Config+0x160>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	69d2      	ldr	r2, [r2, #28]
 8004e92:	00d2      	lsls	r2, r2, #3
 8004e94:	4920      	ldr	r1, [pc, #128]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004eac:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eb8:	e00f      	b.n	8004eda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d106      	bne.n	8004ece <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ec0:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4a14      	ldr	r2, [pc, #80]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ec6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ecc:	e005      	b.n	8004eda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ece:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a11      	ldr	r2, [pc, #68]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eda:	4b0f      	ldr	r3, [pc, #60]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a0e      	ldr	r2, [pc, #56]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fc f895 	bl	8001014 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eee:	f7fc f891 	bl	8001014 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e006      	b.n	8004f0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f00:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	ffff0007 	.word	0xffff0007

08004f20 <__cvt>:
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	ed2d 8b02 	vpush	{d8}
 8004f26:	eeb0 8b40 	vmov.f64	d8, d0
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	4617      	mov	r7, r2
 8004f2e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004f30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f32:	ee18 2a90 	vmov	r2, s17
 8004f36:	f025 0520 	bic.w	r5, r5, #32
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	bfb6      	itet	lt
 8004f3e:	222d      	movlt	r2, #45	@ 0x2d
 8004f40:	2200      	movge	r2, #0
 8004f42:	eeb1 8b40 	vneglt.f64	d8, d0
 8004f46:	2d46      	cmp	r5, #70	@ 0x46
 8004f48:	460c      	mov	r4, r1
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	d004      	beq.n	8004f58 <__cvt+0x38>
 8004f4e:	2d45      	cmp	r5, #69	@ 0x45
 8004f50:	d100      	bne.n	8004f54 <__cvt+0x34>
 8004f52:	3401      	adds	r4, #1
 8004f54:	2102      	movs	r1, #2
 8004f56:	e000      	b.n	8004f5a <__cvt+0x3a>
 8004f58:	2103      	movs	r1, #3
 8004f5a:	ab03      	add	r3, sp, #12
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	ab02      	add	r3, sp, #8
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4622      	mov	r2, r4
 8004f64:	4633      	mov	r3, r6
 8004f66:	eeb0 0b48 	vmov.f64	d0, d8
 8004f6a:	f000 ff1d 	bl	8005da8 <_dtoa_r>
 8004f6e:	2d47      	cmp	r5, #71	@ 0x47
 8004f70:	d114      	bne.n	8004f9c <__cvt+0x7c>
 8004f72:	07fb      	lsls	r3, r7, #31
 8004f74:	d50a      	bpl.n	8004f8c <__cvt+0x6c>
 8004f76:	1902      	adds	r2, r0, r4
 8004f78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	bf08      	it	eq
 8004f82:	9203      	streq	r2, [sp, #12]
 8004f84:	2130      	movs	r1, #48	@ 0x30
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d319      	bcc.n	8004fc0 <__cvt+0xa0>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f90:	1a1b      	subs	r3, r3, r0
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	b005      	add	sp, #20
 8004f96:	ecbd 8b02 	vpop	{d8}
 8004f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f9c:	2d46      	cmp	r5, #70	@ 0x46
 8004f9e:	eb00 0204 	add.w	r2, r0, r4
 8004fa2:	d1e9      	bne.n	8004f78 <__cvt+0x58>
 8004fa4:	7803      	ldrb	r3, [r0, #0]
 8004fa6:	2b30      	cmp	r3, #48	@ 0x30
 8004fa8:	d107      	bne.n	8004fba <__cvt+0x9a>
 8004faa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	bf1c      	itt	ne
 8004fb4:	f1c4 0401 	rsbne	r4, r4, #1
 8004fb8:	6034      	strne	r4, [r6, #0]
 8004fba:	6833      	ldr	r3, [r6, #0]
 8004fbc:	441a      	add	r2, r3
 8004fbe:	e7db      	b.n	8004f78 <__cvt+0x58>
 8004fc0:	1c5c      	adds	r4, r3, #1
 8004fc2:	9403      	str	r4, [sp, #12]
 8004fc4:	7019      	strb	r1, [r3, #0]
 8004fc6:	e7de      	b.n	8004f86 <__cvt+0x66>

08004fc8 <__exponent>:
 8004fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	bfba      	itte	lt
 8004fce:	4249      	neglt	r1, r1
 8004fd0:	232d      	movlt	r3, #45	@ 0x2d
 8004fd2:	232b      	movge	r3, #43	@ 0x2b
 8004fd4:	2909      	cmp	r1, #9
 8004fd6:	7002      	strb	r2, [r0, #0]
 8004fd8:	7043      	strb	r3, [r0, #1]
 8004fda:	dd29      	ble.n	8005030 <__exponent+0x68>
 8004fdc:	f10d 0307 	add.w	r3, sp, #7
 8004fe0:	461d      	mov	r5, r3
 8004fe2:	270a      	movs	r7, #10
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fea:	fb07 1416 	mls	r4, r7, r6, r1
 8004fee:	3430      	adds	r4, #48	@ 0x30
 8004ff0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	2c63      	cmp	r4, #99	@ 0x63
 8004ff8:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	dcf1      	bgt.n	8004fe4 <__exponent+0x1c>
 8005000:	3130      	adds	r1, #48	@ 0x30
 8005002:	1e94      	subs	r4, r2, #2
 8005004:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005008:	1c41      	adds	r1, r0, #1
 800500a:	4623      	mov	r3, r4
 800500c:	42ab      	cmp	r3, r5
 800500e:	d30a      	bcc.n	8005026 <__exponent+0x5e>
 8005010:	f10d 0309 	add.w	r3, sp, #9
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	42ac      	cmp	r4, r5
 8005018:	bf88      	it	hi
 800501a:	2300      	movhi	r3, #0
 800501c:	3302      	adds	r3, #2
 800501e:	4403      	add	r3, r0
 8005020:	1a18      	subs	r0, r3, r0
 8005022:	b003      	add	sp, #12
 8005024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005026:	f813 6b01 	ldrb.w	r6, [r3], #1
 800502a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800502e:	e7ed      	b.n	800500c <__exponent+0x44>
 8005030:	2330      	movs	r3, #48	@ 0x30
 8005032:	3130      	adds	r1, #48	@ 0x30
 8005034:	7083      	strb	r3, [r0, #2]
 8005036:	70c1      	strb	r1, [r0, #3]
 8005038:	1d03      	adds	r3, r0, #4
 800503a:	e7f1      	b.n	8005020 <__exponent+0x58>
 800503c:	0000      	movs	r0, r0
	...

08005040 <_printf_float>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	b08d      	sub	sp, #52	@ 0x34
 8005046:	460c      	mov	r4, r1
 8005048:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800504c:	4616      	mov	r6, r2
 800504e:	461f      	mov	r7, r3
 8005050:	4605      	mov	r5, r0
 8005052:	f000 fd9b 	bl	8005b8c <_localeconv_r>
 8005056:	f8d0 b000 	ldr.w	fp, [r0]
 800505a:	4658      	mov	r0, fp
 800505c:	f7fb f990 	bl	8000380 <strlen>
 8005060:	2300      	movs	r3, #0
 8005062:	930a      	str	r3, [sp, #40]	@ 0x28
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	f894 9018 	ldrb.w	r9, [r4, #24]
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	9005      	str	r0, [sp, #20]
 8005070:	3307      	adds	r3, #7
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	f103 0108 	add.w	r1, r3, #8
 800507a:	f8c8 1000 	str.w	r1, [r8]
 800507e:	ed93 0b00 	vldr	d0, [r3]
 8005082:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80052e0 <_printf_float+0x2a0>
 8005086:	eeb0 7bc0 	vabs.f64	d7, d0
 800508a:	eeb4 7b46 	vcmp.f64	d7, d6
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8005096:	dd24      	ble.n	80050e2 <_printf_float+0xa2>
 8005098:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a0:	d502      	bpl.n	80050a8 <_printf_float+0x68>
 80050a2:	232d      	movs	r3, #45	@ 0x2d
 80050a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a8:	498f      	ldr	r1, [pc, #572]	@ (80052e8 <_printf_float+0x2a8>)
 80050aa:	4b90      	ldr	r3, [pc, #576]	@ (80052ec <_printf_float+0x2ac>)
 80050ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80050b0:	bf8c      	ite	hi
 80050b2:	4688      	movhi	r8, r1
 80050b4:	4698      	movls	r8, r3
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	2303      	movs	r3, #3
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	6022      	str	r2, [r4, #0]
 80050c0:	f04f 0a00 	mov.w	sl, #0
 80050c4:	9700      	str	r7, [sp, #0]
 80050c6:	4633      	mov	r3, r6
 80050c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f9d1 	bl	8005474 <_printf_common>
 80050d2:	3001      	adds	r0, #1
 80050d4:	f040 8089 	bne.w	80051ea <_printf_float+0x1aa>
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	b00d      	add	sp, #52	@ 0x34
 80050de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ea:	d709      	bvc.n	8005100 <_printf_float+0xc0>
 80050ec:	ee10 3a90 	vmov	r3, s1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bfbc      	itt	lt
 80050f4:	232d      	movlt	r3, #45	@ 0x2d
 80050f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050fa:	497d      	ldr	r1, [pc, #500]	@ (80052f0 <_printf_float+0x2b0>)
 80050fc:	4b7d      	ldr	r3, [pc, #500]	@ (80052f4 <_printf_float+0x2b4>)
 80050fe:	e7d5      	b.n	80050ac <_printf_float+0x6c>
 8005100:	6863      	ldr	r3, [r4, #4]
 8005102:	1c59      	adds	r1, r3, #1
 8005104:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005108:	d139      	bne.n	800517e <_printf_float+0x13e>
 800510a:	2306      	movs	r3, #6
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005112:	2300      	movs	r3, #0
 8005114:	6022      	str	r2, [r4, #0]
 8005116:	9303      	str	r3, [sp, #12]
 8005118:	ab0a      	add	r3, sp, #40	@ 0x28
 800511a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800511e:	ab09      	add	r3, sp, #36	@ 0x24
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6861      	ldr	r1, [r4, #4]
 8005124:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005128:	4628      	mov	r0, r5
 800512a:	f7ff fef9 	bl	8004f20 <__cvt>
 800512e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005134:	4680      	mov	r8, r0
 8005136:	d129      	bne.n	800518c <_printf_float+0x14c>
 8005138:	1cc8      	adds	r0, r1, #3
 800513a:	db02      	blt.n	8005142 <_printf_float+0x102>
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	4299      	cmp	r1, r3
 8005140:	dd41      	ble.n	80051c6 <_printf_float+0x186>
 8005142:	f1a9 0902 	sub.w	r9, r9, #2
 8005146:	fa5f f989 	uxtb.w	r9, r9
 800514a:	3901      	subs	r1, #1
 800514c:	464a      	mov	r2, r9
 800514e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005152:	9109      	str	r1, [sp, #36]	@ 0x24
 8005154:	f7ff ff38 	bl	8004fc8 <__exponent>
 8005158:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800515a:	1813      	adds	r3, r2, r0
 800515c:	2a01      	cmp	r2, #1
 800515e:	4682      	mov	sl, r0
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	dc02      	bgt.n	800516a <_printf_float+0x12a>
 8005164:	6822      	ldr	r2, [r4, #0]
 8005166:	07d2      	lsls	r2, r2, #31
 8005168:	d501      	bpl.n	800516e <_printf_float+0x12e>
 800516a:	3301      	adds	r3, #1
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0a6      	beq.n	80050c4 <_printf_float+0x84>
 8005176:	232d      	movs	r3, #45	@ 0x2d
 8005178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800517c:	e7a2      	b.n	80050c4 <_printf_float+0x84>
 800517e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005182:	d1c4      	bne.n	800510e <_printf_float+0xce>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1c2      	bne.n	800510e <_printf_float+0xce>
 8005188:	2301      	movs	r3, #1
 800518a:	e7bf      	b.n	800510c <_printf_float+0xcc>
 800518c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005190:	d9db      	bls.n	800514a <_printf_float+0x10a>
 8005192:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8005196:	d118      	bne.n	80051ca <_printf_float+0x18a>
 8005198:	2900      	cmp	r1, #0
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	dd0b      	ble.n	80051b6 <_printf_float+0x176>
 800519e:	6121      	str	r1, [r4, #16]
 80051a0:	b913      	cbnz	r3, 80051a8 <_printf_float+0x168>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	07d0      	lsls	r0, r2, #31
 80051a6:	d502      	bpl.n	80051ae <_printf_float+0x16e>
 80051a8:	3301      	adds	r3, #1
 80051aa:	440b      	add	r3, r1
 80051ac:	6123      	str	r3, [r4, #16]
 80051ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051b0:	f04f 0a00 	mov.w	sl, #0
 80051b4:	e7db      	b.n	800516e <_printf_float+0x12e>
 80051b6:	b913      	cbnz	r3, 80051be <_printf_float+0x17e>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	07d2      	lsls	r2, r2, #31
 80051bc:	d501      	bpl.n	80051c2 <_printf_float+0x182>
 80051be:	3302      	adds	r3, #2
 80051c0:	e7f4      	b.n	80051ac <_printf_float+0x16c>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7f2      	b.n	80051ac <_printf_float+0x16c>
 80051c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80051ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051cc:	4299      	cmp	r1, r3
 80051ce:	db05      	blt.n	80051dc <_printf_float+0x19c>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	6121      	str	r1, [r4, #16]
 80051d4:	07d8      	lsls	r0, r3, #31
 80051d6:	d5ea      	bpl.n	80051ae <_printf_float+0x16e>
 80051d8:	1c4b      	adds	r3, r1, #1
 80051da:	e7e7      	b.n	80051ac <_printf_float+0x16c>
 80051dc:	2900      	cmp	r1, #0
 80051de:	bfd4      	ite	le
 80051e0:	f1c1 0202 	rsble	r2, r1, #2
 80051e4:	2201      	movgt	r2, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	e7e0      	b.n	80051ac <_printf_float+0x16c>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	055a      	lsls	r2, r3, #21
 80051ee:	d407      	bmi.n	8005200 <_printf_float+0x1c0>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	4642      	mov	r2, r8
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	d12a      	bne.n	8005254 <_printf_float+0x214>
 80051fe:	e76b      	b.n	80050d8 <_printf_float+0x98>
 8005200:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005204:	f240 80e0 	bls.w	80053c8 <_printf_float+0x388>
 8005208:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800520c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005214:	d133      	bne.n	800527e <_printf_float+0x23e>
 8005216:	4a38      	ldr	r2, [pc, #224]	@ (80052f8 <_printf_float+0x2b8>)
 8005218:	2301      	movs	r3, #1
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f af59 	beq.w	80050d8 <_printf_float+0x98>
 8005226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800522a:	4543      	cmp	r3, r8
 800522c:	db02      	blt.n	8005234 <_printf_float+0x1f4>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	07d8      	lsls	r0, r3, #31
 8005232:	d50f      	bpl.n	8005254 <_printf_float+0x214>
 8005234:	9b05      	ldr	r3, [sp, #20]
 8005236:	465a      	mov	r2, fp
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af4a 	beq.w	80050d8 <_printf_float+0x98>
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	f108 38ff 	add.w	r8, r8, #4294967295
 800524c:	f104 0a1a 	add.w	sl, r4, #26
 8005250:	45c8      	cmp	r8, r9
 8005252:	dc09      	bgt.n	8005268 <_printf_float+0x228>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	079b      	lsls	r3, r3, #30
 8005258:	f100 8107 	bmi.w	800546a <_printf_float+0x42a>
 800525c:	68e0      	ldr	r0, [r4, #12]
 800525e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005260:	4298      	cmp	r0, r3
 8005262:	bfb8      	it	lt
 8005264:	4618      	movlt	r0, r3
 8005266:	e739      	b.n	80050dc <_printf_float+0x9c>
 8005268:	2301      	movs	r3, #1
 800526a:	4652      	mov	r2, sl
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f af30 	beq.w	80050d8 <_printf_float+0x98>
 8005278:	f109 0901 	add.w	r9, r9, #1
 800527c:	e7e8      	b.n	8005250 <_printf_float+0x210>
 800527e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	dc3b      	bgt.n	80052fc <_printf_float+0x2bc>
 8005284:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <_printf_float+0x2b8>)
 8005286:	2301      	movs	r3, #1
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af22 	beq.w	80050d8 <_printf_float+0x98>
 8005294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005298:	ea59 0303 	orrs.w	r3, r9, r3
 800529c:	d102      	bne.n	80052a4 <_printf_float+0x264>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	07d9      	lsls	r1, r3, #31
 80052a2:	d5d7      	bpl.n	8005254 <_printf_float+0x214>
 80052a4:	9b05      	ldr	r3, [sp, #20]
 80052a6:	465a      	mov	r2, fp
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	f43f af12 	beq.w	80050d8 <_printf_float+0x98>
 80052b4:	f04f 0a00 	mov.w	sl, #0
 80052b8:	f104 0b1a 	add.w	fp, r4, #26
 80052bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052be:	425b      	negs	r3, r3
 80052c0:	4553      	cmp	r3, sl
 80052c2:	dc01      	bgt.n	80052c8 <_printf_float+0x288>
 80052c4:	464b      	mov	r3, r9
 80052c6:	e794      	b.n	80051f2 <_printf_float+0x1b2>
 80052c8:	2301      	movs	r3, #1
 80052ca:	465a      	mov	r2, fp
 80052cc:	4631      	mov	r1, r6
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	f43f af00 	beq.w	80050d8 <_printf_float+0x98>
 80052d8:	f10a 0a01 	add.w	sl, sl, #1
 80052dc:	e7ee      	b.n	80052bc <_printf_float+0x27c>
 80052de:	bf00      	nop
 80052e0:	ffffffff 	.word	0xffffffff
 80052e4:	7fefffff 	.word	0x7fefffff
 80052e8:	080078e4 	.word	0x080078e4
 80052ec:	080078e0 	.word	0x080078e0
 80052f0:	080078ec 	.word	0x080078ec
 80052f4:	080078e8 	.word	0x080078e8
 80052f8:	080078f0 	.word	0x080078f0
 80052fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005302:	4553      	cmp	r3, sl
 8005304:	bfa8      	it	ge
 8005306:	4653      	movge	r3, sl
 8005308:	2b00      	cmp	r3, #0
 800530a:	4699      	mov	r9, r3
 800530c:	dc37      	bgt.n	800537e <_printf_float+0x33e>
 800530e:	2300      	movs	r3, #0
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005316:	f104 021a 	add.w	r2, r4, #26
 800531a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800531c:	9907      	ldr	r1, [sp, #28]
 800531e:	9306      	str	r3, [sp, #24]
 8005320:	eba3 0309 	sub.w	r3, r3, r9
 8005324:	428b      	cmp	r3, r1
 8005326:	dc31      	bgt.n	800538c <_printf_float+0x34c>
 8005328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532a:	459a      	cmp	sl, r3
 800532c:	dc3b      	bgt.n	80053a6 <_printf_float+0x366>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07da      	lsls	r2, r3, #31
 8005332:	d438      	bmi.n	80053a6 <_printf_float+0x366>
 8005334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005336:	ebaa 0903 	sub.w	r9, sl, r3
 800533a:	9b06      	ldr	r3, [sp, #24]
 800533c:	ebaa 0303 	sub.w	r3, sl, r3
 8005340:	4599      	cmp	r9, r3
 8005342:	bfa8      	it	ge
 8005344:	4699      	movge	r9, r3
 8005346:	f1b9 0f00 	cmp.w	r9, #0
 800534a:	dc34      	bgt.n	80053b6 <_printf_float+0x376>
 800534c:	f04f 0800 	mov.w	r8, #0
 8005350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005354:	f104 0b1a 	add.w	fp, r4, #26
 8005358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535a:	ebaa 0303 	sub.w	r3, sl, r3
 800535e:	eba3 0309 	sub.w	r3, r3, r9
 8005362:	4543      	cmp	r3, r8
 8005364:	f77f af76 	ble.w	8005254 <_printf_float+0x214>
 8005368:	2301      	movs	r3, #1
 800536a:	465a      	mov	r2, fp
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f aeb0 	beq.w	80050d8 <_printf_float+0x98>
 8005378:	f108 0801 	add.w	r8, r8, #1
 800537c:	e7ec      	b.n	8005358 <_printf_float+0x318>
 800537e:	4642      	mov	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d1c1      	bne.n	800530e <_printf_float+0x2ce>
 800538a:	e6a5      	b.n	80050d8 <_printf_float+0x98>
 800538c:	2301      	movs	r3, #1
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	9206      	str	r2, [sp, #24]
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f ae9e 	beq.w	80050d8 <_printf_float+0x98>
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	9a06      	ldr	r2, [sp, #24]
 80053a0:	3301      	adds	r3, #1
 80053a2:	9307      	str	r3, [sp, #28]
 80053a4:	e7b9      	b.n	800531a <_printf_float+0x2da>
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	465a      	mov	r2, fp
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	d1bf      	bne.n	8005334 <_printf_float+0x2f4>
 80053b4:	e690      	b.n	80050d8 <_printf_float+0x98>
 80053b6:	9a06      	ldr	r2, [sp, #24]
 80053b8:	464b      	mov	r3, r9
 80053ba:	4442      	add	r2, r8
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	d1c2      	bne.n	800534c <_printf_float+0x30c>
 80053c6:	e687      	b.n	80050d8 <_printf_float+0x98>
 80053c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80053cc:	f1b9 0f01 	cmp.w	r9, #1
 80053d0:	dc01      	bgt.n	80053d6 <_printf_float+0x396>
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d536      	bpl.n	8005444 <_printf_float+0x404>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4642      	mov	r2, r8
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae79 	beq.w	80050d8 <_printf_float+0x98>
 80053e6:	9b05      	ldr	r3, [sp, #20]
 80053e8:	465a      	mov	r2, fp
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f ae71 	beq.w	80050d8 <_printf_float+0x98>
 80053f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80053fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	f109 39ff 	add.w	r9, r9, #4294967295
 8005406:	d018      	beq.n	800543a <_printf_float+0x3fa>
 8005408:	464b      	mov	r3, r9
 800540a:	f108 0201 	add.w	r2, r8, #1
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	d10c      	bne.n	8005432 <_printf_float+0x3f2>
 8005418:	e65e      	b.n	80050d8 <_printf_float+0x98>
 800541a:	2301      	movs	r3, #1
 800541c:	465a      	mov	r2, fp
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae57 	beq.w	80050d8 <_printf_float+0x98>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	45c8      	cmp	r8, r9
 8005430:	dbf3      	blt.n	800541a <_printf_float+0x3da>
 8005432:	4653      	mov	r3, sl
 8005434:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005438:	e6dc      	b.n	80051f4 <_printf_float+0x1b4>
 800543a:	f04f 0800 	mov.w	r8, #0
 800543e:	f104 0b1a 	add.w	fp, r4, #26
 8005442:	e7f4      	b.n	800542e <_printf_float+0x3ee>
 8005444:	2301      	movs	r3, #1
 8005446:	4642      	mov	r2, r8
 8005448:	e7e1      	b.n	800540e <_printf_float+0x3ce>
 800544a:	2301      	movs	r3, #1
 800544c:	464a      	mov	r2, r9
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae3f 	beq.w	80050d8 <_printf_float+0x98>
 800545a:	f108 0801 	add.w	r8, r8, #1
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005462:	1a5b      	subs	r3, r3, r1
 8005464:	4543      	cmp	r3, r8
 8005466:	dcf0      	bgt.n	800544a <_printf_float+0x40a>
 8005468:	e6f8      	b.n	800525c <_printf_float+0x21c>
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	f104 0919 	add.w	r9, r4, #25
 8005472:	e7f4      	b.n	800545e <_printf_float+0x41e>

08005474 <_printf_common>:
 8005474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	4616      	mov	r6, r2
 800547a:	4698      	mov	r8, r3
 800547c:	688a      	ldr	r2, [r1, #8]
 800547e:	690b      	ldr	r3, [r1, #16]
 8005480:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005484:	4293      	cmp	r3, r2
 8005486:	bfb8      	it	lt
 8005488:	4613      	movlt	r3, r2
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005490:	4607      	mov	r7, r0
 8005492:	460c      	mov	r4, r1
 8005494:	b10a      	cbz	r2, 800549a <_printf_common+0x26>
 8005496:	3301      	adds	r3, #1
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	0699      	lsls	r1, r3, #26
 800549e:	bf42      	ittt	mi
 80054a0:	6833      	ldrmi	r3, [r6, #0]
 80054a2:	3302      	addmi	r3, #2
 80054a4:	6033      	strmi	r3, [r6, #0]
 80054a6:	6825      	ldr	r5, [r4, #0]
 80054a8:	f015 0506 	ands.w	r5, r5, #6
 80054ac:	d106      	bne.n	80054bc <_printf_common+0x48>
 80054ae:	f104 0a19 	add.w	sl, r4, #25
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	6832      	ldr	r2, [r6, #0]
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dc26      	bgt.n	800550a <_printf_common+0x96>
 80054bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	3b00      	subs	r3, #0
 80054c4:	bf18      	it	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	0692      	lsls	r2, r2, #26
 80054ca:	d42b      	bmi.n	8005524 <_printf_common+0xb0>
 80054cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054d0:	4641      	mov	r1, r8
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c8      	blx	r9
 80054d6:	3001      	adds	r0, #1
 80054d8:	d01e      	beq.n	8005518 <_printf_common+0xa4>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	f003 0306 	and.w	r3, r3, #6
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	bf02      	ittt	eq
 80054e6:	68e5      	ldreq	r5, [r4, #12]
 80054e8:	6833      	ldreq	r3, [r6, #0]
 80054ea:	1aed      	subeq	r5, r5, r3
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	bf0c      	ite	eq
 80054f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f4:	2500      	movne	r5, #0
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bfc4      	itt	gt
 80054fa:	1a9b      	subgt	r3, r3, r2
 80054fc:	18ed      	addgt	r5, r5, r3
 80054fe:	2600      	movs	r6, #0
 8005500:	341a      	adds	r4, #26
 8005502:	42b5      	cmp	r5, r6
 8005504:	d11a      	bne.n	800553c <_printf_common+0xc8>
 8005506:	2000      	movs	r0, #0
 8005508:	e008      	b.n	800551c <_printf_common+0xa8>
 800550a:	2301      	movs	r3, #1
 800550c:	4652      	mov	r2, sl
 800550e:	4641      	mov	r1, r8
 8005510:	4638      	mov	r0, r7
 8005512:	47c8      	blx	r9
 8005514:	3001      	adds	r0, #1
 8005516:	d103      	bne.n	8005520 <_printf_common+0xac>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	3501      	adds	r5, #1
 8005522:	e7c6      	b.n	80054b2 <_printf_common+0x3e>
 8005524:	18e1      	adds	r1, r4, r3
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	2030      	movs	r0, #48	@ 0x30
 800552a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800552e:	4422      	add	r2, r4
 8005530:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005538:	3302      	adds	r3, #2
 800553a:	e7c7      	b.n	80054cc <_printf_common+0x58>
 800553c:	2301      	movs	r3, #1
 800553e:	4622      	mov	r2, r4
 8005540:	4641      	mov	r1, r8
 8005542:	4638      	mov	r0, r7
 8005544:	47c8      	blx	r9
 8005546:	3001      	adds	r0, #1
 8005548:	d0e6      	beq.n	8005518 <_printf_common+0xa4>
 800554a:	3601      	adds	r6, #1
 800554c:	e7d9      	b.n	8005502 <_printf_common+0x8e>
	...

08005550 <_printf_i>:
 8005550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	7e0f      	ldrb	r7, [r1, #24]
 8005556:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005558:	2f78      	cmp	r7, #120	@ 0x78
 800555a:	4691      	mov	r9, r2
 800555c:	4680      	mov	r8, r0
 800555e:	460c      	mov	r4, r1
 8005560:	469a      	mov	sl, r3
 8005562:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005566:	d807      	bhi.n	8005578 <_printf_i+0x28>
 8005568:	2f62      	cmp	r7, #98	@ 0x62
 800556a:	d80a      	bhi.n	8005582 <_printf_i+0x32>
 800556c:	2f00      	cmp	r7, #0
 800556e:	f000 80d1 	beq.w	8005714 <_printf_i+0x1c4>
 8005572:	2f58      	cmp	r7, #88	@ 0x58
 8005574:	f000 80b8 	beq.w	80056e8 <_printf_i+0x198>
 8005578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800557c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005580:	e03a      	b.n	80055f8 <_printf_i+0xa8>
 8005582:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005586:	2b15      	cmp	r3, #21
 8005588:	d8f6      	bhi.n	8005578 <_printf_i+0x28>
 800558a:	a101      	add	r1, pc, #4	@ (adr r1, 8005590 <_printf_i+0x40>)
 800558c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055fd 	.word	0x080055fd
 8005598:	08005579 	.word	0x08005579
 800559c:	08005579 	.word	0x08005579
 80055a0:	08005579 	.word	0x08005579
 80055a4:	08005579 	.word	0x08005579
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005579 	.word	0x08005579
 80055b0:	08005579 	.word	0x08005579
 80055b4:	08005579 	.word	0x08005579
 80055b8:	08005579 	.word	0x08005579
 80055bc:	080056fb 	.word	0x080056fb
 80055c0:	08005627 	.word	0x08005627
 80055c4:	080056b5 	.word	0x080056b5
 80055c8:	08005579 	.word	0x08005579
 80055cc:	08005579 	.word	0x08005579
 80055d0:	0800571d 	.word	0x0800571d
 80055d4:	08005579 	.word	0x08005579
 80055d8:	08005627 	.word	0x08005627
 80055dc:	08005579 	.word	0x08005579
 80055e0:	08005579 	.word	0x08005579
 80055e4:	080056bd 	.word	0x080056bd
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6032      	str	r2, [r6, #0]
 80055f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055f8:	2301      	movs	r3, #1
 80055fa:	e09c      	b.n	8005736 <_printf_i+0x1e6>
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	1d19      	adds	r1, r3, #4
 8005602:	6031      	str	r1, [r6, #0]
 8005604:	0606      	lsls	r6, r0, #24
 8005606:	d501      	bpl.n	800560c <_printf_i+0xbc>
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	e003      	b.n	8005614 <_printf_i+0xc4>
 800560c:	0645      	lsls	r5, r0, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0xb8>
 8005610:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005614:	2d00      	cmp	r5, #0
 8005616:	da03      	bge.n	8005620 <_printf_i+0xd0>
 8005618:	232d      	movs	r3, #45	@ 0x2d
 800561a:	426d      	negs	r5, r5
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005620:	4858      	ldr	r0, [pc, #352]	@ (8005784 <_printf_i+0x234>)
 8005622:	230a      	movs	r3, #10
 8005624:	e011      	b.n	800564a <_printf_i+0xfa>
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	0608      	lsls	r0, r1, #24
 800562c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005630:	d402      	bmi.n	8005638 <_printf_i+0xe8>
 8005632:	0649      	lsls	r1, r1, #25
 8005634:	bf48      	it	mi
 8005636:	b2ad      	uxthmi	r5, r5
 8005638:	2f6f      	cmp	r7, #111	@ 0x6f
 800563a:	4852      	ldr	r0, [pc, #328]	@ (8005784 <_printf_i+0x234>)
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	bf14      	ite	ne
 8005640:	230a      	movne	r3, #10
 8005642:	2308      	moveq	r3, #8
 8005644:	2100      	movs	r1, #0
 8005646:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800564a:	6866      	ldr	r6, [r4, #4]
 800564c:	60a6      	str	r6, [r4, #8]
 800564e:	2e00      	cmp	r6, #0
 8005650:	db05      	blt.n	800565e <_printf_i+0x10e>
 8005652:	6821      	ldr	r1, [r4, #0]
 8005654:	432e      	orrs	r6, r5
 8005656:	f021 0104 	bic.w	r1, r1, #4
 800565a:	6021      	str	r1, [r4, #0]
 800565c:	d04b      	beq.n	80056f6 <_printf_i+0x1a6>
 800565e:	4616      	mov	r6, r2
 8005660:	fbb5 f1f3 	udiv	r1, r5, r3
 8005664:	fb03 5711 	mls	r7, r3, r1, r5
 8005668:	5dc7      	ldrb	r7, [r0, r7]
 800566a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800566e:	462f      	mov	r7, r5
 8005670:	42bb      	cmp	r3, r7
 8005672:	460d      	mov	r5, r1
 8005674:	d9f4      	bls.n	8005660 <_printf_i+0x110>
 8005676:	2b08      	cmp	r3, #8
 8005678:	d10b      	bne.n	8005692 <_printf_i+0x142>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	07df      	lsls	r7, r3, #31
 800567e:	d508      	bpl.n	8005692 <_printf_i+0x142>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	6861      	ldr	r1, [r4, #4]
 8005684:	4299      	cmp	r1, r3
 8005686:	bfde      	ittt	le
 8005688:	2330      	movle	r3, #48	@ 0x30
 800568a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800568e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005692:	1b92      	subs	r2, r2, r6
 8005694:	6122      	str	r2, [r4, #16]
 8005696:	f8cd a000 	str.w	sl, [sp]
 800569a:	464b      	mov	r3, r9
 800569c:	aa03      	add	r2, sp, #12
 800569e:	4621      	mov	r1, r4
 80056a0:	4640      	mov	r0, r8
 80056a2:	f7ff fee7 	bl	8005474 <_printf_common>
 80056a6:	3001      	adds	r0, #1
 80056a8:	d14a      	bne.n	8005740 <_printf_i+0x1f0>
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295
 80056ae:	b004      	add	sp, #16
 80056b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f043 0320 	orr.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	4832      	ldr	r0, [pc, #200]	@ (8005788 <_printf_i+0x238>)
 80056be:	2778      	movs	r7, #120	@ 0x78
 80056c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	6831      	ldr	r1, [r6, #0]
 80056c8:	061f      	lsls	r7, r3, #24
 80056ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80056ce:	d402      	bmi.n	80056d6 <_printf_i+0x186>
 80056d0:	065f      	lsls	r7, r3, #25
 80056d2:	bf48      	it	mi
 80056d4:	b2ad      	uxthmi	r5, r5
 80056d6:	6031      	str	r1, [r6, #0]
 80056d8:	07d9      	lsls	r1, r3, #31
 80056da:	bf44      	itt	mi
 80056dc:	f043 0320 	orrmi.w	r3, r3, #32
 80056e0:	6023      	strmi	r3, [r4, #0]
 80056e2:	b11d      	cbz	r5, 80056ec <_printf_i+0x19c>
 80056e4:	2310      	movs	r3, #16
 80056e6:	e7ad      	b.n	8005644 <_printf_i+0xf4>
 80056e8:	4826      	ldr	r0, [pc, #152]	@ (8005784 <_printf_i+0x234>)
 80056ea:	e7e9      	b.n	80056c0 <_printf_i+0x170>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	f023 0320 	bic.w	r3, r3, #32
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	e7f6      	b.n	80056e4 <_printf_i+0x194>
 80056f6:	4616      	mov	r6, r2
 80056f8:	e7bd      	b.n	8005676 <_printf_i+0x126>
 80056fa:	6833      	ldr	r3, [r6, #0]
 80056fc:	6825      	ldr	r5, [r4, #0]
 80056fe:	6961      	ldr	r1, [r4, #20]
 8005700:	1d18      	adds	r0, r3, #4
 8005702:	6030      	str	r0, [r6, #0]
 8005704:	062e      	lsls	r6, r5, #24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	d501      	bpl.n	800570e <_printf_i+0x1be>
 800570a:	6019      	str	r1, [r3, #0]
 800570c:	e002      	b.n	8005714 <_printf_i+0x1c4>
 800570e:	0668      	lsls	r0, r5, #25
 8005710:	d5fb      	bpl.n	800570a <_printf_i+0x1ba>
 8005712:	8019      	strh	r1, [r3, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	4616      	mov	r6, r2
 800571a:	e7bc      	b.n	8005696 <_printf_i+0x146>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	6032      	str	r2, [r6, #0]
 8005722:	681e      	ldr	r6, [r3, #0]
 8005724:	6862      	ldr	r2, [r4, #4]
 8005726:	2100      	movs	r1, #0
 8005728:	4630      	mov	r0, r6
 800572a:	f7fa fdd9 	bl	80002e0 <memchr>
 800572e:	b108      	cbz	r0, 8005734 <_printf_i+0x1e4>
 8005730:	1b80      	subs	r0, r0, r6
 8005732:	6060      	str	r0, [r4, #4]
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	2300      	movs	r3, #0
 800573a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800573e:	e7aa      	b.n	8005696 <_printf_i+0x146>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	4632      	mov	r2, r6
 8005744:	4649      	mov	r1, r9
 8005746:	4640      	mov	r0, r8
 8005748:	47d0      	blx	sl
 800574a:	3001      	adds	r0, #1
 800574c:	d0ad      	beq.n	80056aa <_printf_i+0x15a>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	079b      	lsls	r3, r3, #30
 8005752:	d413      	bmi.n	800577c <_printf_i+0x22c>
 8005754:	68e0      	ldr	r0, [r4, #12]
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	4298      	cmp	r0, r3
 800575a:	bfb8      	it	lt
 800575c:	4618      	movlt	r0, r3
 800575e:	e7a6      	b.n	80056ae <_printf_i+0x15e>
 8005760:	2301      	movs	r3, #1
 8005762:	4632      	mov	r2, r6
 8005764:	4649      	mov	r1, r9
 8005766:	4640      	mov	r0, r8
 8005768:	47d0      	blx	sl
 800576a:	3001      	adds	r0, #1
 800576c:	d09d      	beq.n	80056aa <_printf_i+0x15a>
 800576e:	3501      	adds	r5, #1
 8005770:	68e3      	ldr	r3, [r4, #12]
 8005772:	9903      	ldr	r1, [sp, #12]
 8005774:	1a5b      	subs	r3, r3, r1
 8005776:	42ab      	cmp	r3, r5
 8005778:	dcf2      	bgt.n	8005760 <_printf_i+0x210>
 800577a:	e7eb      	b.n	8005754 <_printf_i+0x204>
 800577c:	2500      	movs	r5, #0
 800577e:	f104 0619 	add.w	r6, r4, #25
 8005782:	e7f5      	b.n	8005770 <_printf_i+0x220>
 8005784:	080078f2 	.word	0x080078f2
 8005788:	08007903 	.word	0x08007903

0800578c <std>:
 800578c:	2300      	movs	r3, #0
 800578e:	b510      	push	{r4, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	e9c0 3300 	strd	r3, r3, [r0]
 8005796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800579a:	6083      	str	r3, [r0, #8]
 800579c:	8181      	strh	r1, [r0, #12]
 800579e:	6643      	str	r3, [r0, #100]	@ 0x64
 80057a0:	81c2      	strh	r2, [r0, #14]
 80057a2:	6183      	str	r3, [r0, #24]
 80057a4:	4619      	mov	r1, r3
 80057a6:	2208      	movs	r2, #8
 80057a8:	305c      	adds	r0, #92	@ 0x5c
 80057aa:	f000 f9e7 	bl	8005b7c <memset>
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <std+0x58>)
 80057b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <std+0x5c>)
 80057b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <std+0x60>)
 80057b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <std+0x64>)
 80057bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <std+0x68>)
 80057c0:	6224      	str	r4, [r4, #32]
 80057c2:	429c      	cmp	r4, r3
 80057c4:	d006      	beq.n	80057d4 <std+0x48>
 80057c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057ca:	4294      	cmp	r4, r2
 80057cc:	d002      	beq.n	80057d4 <std+0x48>
 80057ce:	33d0      	adds	r3, #208	@ 0xd0
 80057d0:	429c      	cmp	r4, r3
 80057d2:	d105      	bne.n	80057e0 <std+0x54>
 80057d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057dc:	f000 ba4a 	b.w	8005c74 <__retarget_lock_init_recursive>
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	080059cd 	.word	0x080059cd
 80057e8:	080059ef 	.word	0x080059ef
 80057ec:	08005a27 	.word	0x08005a27
 80057f0:	08005a4b 	.word	0x08005a4b
 80057f4:	240002e4 	.word	0x240002e4

080057f8 <stdio_exit_handler>:
 80057f8:	4a02      	ldr	r2, [pc, #8]	@ (8005804 <stdio_exit_handler+0xc>)
 80057fa:	4903      	ldr	r1, [pc, #12]	@ (8005808 <stdio_exit_handler+0x10>)
 80057fc:	4803      	ldr	r0, [pc, #12]	@ (800580c <stdio_exit_handler+0x14>)
 80057fe:	f000 b869 	b.w	80058d4 <_fwalk_sglue>
 8005802:	bf00      	nop
 8005804:	2400003c 	.word	0x2400003c
 8005808:	080074e5 	.word	0x080074e5
 800580c:	2400004c 	.word	0x2400004c

08005810 <cleanup_stdio>:
 8005810:	6841      	ldr	r1, [r0, #4]
 8005812:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <cleanup_stdio+0x34>)
 8005814:	4299      	cmp	r1, r3
 8005816:	b510      	push	{r4, lr}
 8005818:	4604      	mov	r4, r0
 800581a:	d001      	beq.n	8005820 <cleanup_stdio+0x10>
 800581c:	f001 fe62 	bl	80074e4 <_fflush_r>
 8005820:	68a1      	ldr	r1, [r4, #8]
 8005822:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <cleanup_stdio+0x38>)
 8005824:	4299      	cmp	r1, r3
 8005826:	d002      	beq.n	800582e <cleanup_stdio+0x1e>
 8005828:	4620      	mov	r0, r4
 800582a:	f001 fe5b 	bl	80074e4 <_fflush_r>
 800582e:	68e1      	ldr	r1, [r4, #12]
 8005830:	4b06      	ldr	r3, [pc, #24]	@ (800584c <cleanup_stdio+0x3c>)
 8005832:	4299      	cmp	r1, r3
 8005834:	d004      	beq.n	8005840 <cleanup_stdio+0x30>
 8005836:	4620      	mov	r0, r4
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	f001 be52 	b.w	80074e4 <_fflush_r>
 8005840:	bd10      	pop	{r4, pc}
 8005842:	bf00      	nop
 8005844:	240002e4 	.word	0x240002e4
 8005848:	2400034c 	.word	0x2400034c
 800584c:	240003b4 	.word	0x240003b4

08005850 <global_stdio_init.part.0>:
 8005850:	b510      	push	{r4, lr}
 8005852:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <global_stdio_init.part.0+0x30>)
 8005854:	4c0b      	ldr	r4, [pc, #44]	@ (8005884 <global_stdio_init.part.0+0x34>)
 8005856:	4a0c      	ldr	r2, [pc, #48]	@ (8005888 <global_stdio_init.part.0+0x38>)
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	2200      	movs	r2, #0
 800585e:	2104      	movs	r1, #4
 8005860:	f7ff ff94 	bl	800578c <std>
 8005864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005868:	2201      	movs	r2, #1
 800586a:	2109      	movs	r1, #9
 800586c:	f7ff ff8e 	bl	800578c <std>
 8005870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005874:	2202      	movs	r2, #2
 8005876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800587a:	2112      	movs	r1, #18
 800587c:	f7ff bf86 	b.w	800578c <std>
 8005880:	2400041c 	.word	0x2400041c
 8005884:	240002e4 	.word	0x240002e4
 8005888:	080057f9 	.word	0x080057f9

0800588c <__sfp_lock_acquire>:
 800588c:	4801      	ldr	r0, [pc, #4]	@ (8005894 <__sfp_lock_acquire+0x8>)
 800588e:	f000 b9f2 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 8005892:	bf00      	nop
 8005894:	24000425 	.word	0x24000425

08005898 <__sfp_lock_release>:
 8005898:	4801      	ldr	r0, [pc, #4]	@ (80058a0 <__sfp_lock_release+0x8>)
 800589a:	f000 b9ed 	b.w	8005c78 <__retarget_lock_release_recursive>
 800589e:	bf00      	nop
 80058a0:	24000425 	.word	0x24000425

080058a4 <__sinit>:
 80058a4:	b510      	push	{r4, lr}
 80058a6:	4604      	mov	r4, r0
 80058a8:	f7ff fff0 	bl	800588c <__sfp_lock_acquire>
 80058ac:	6a23      	ldr	r3, [r4, #32]
 80058ae:	b11b      	cbz	r3, 80058b8 <__sinit+0x14>
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	f7ff bff0 	b.w	8005898 <__sfp_lock_release>
 80058b8:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <__sinit+0x28>)
 80058ba:	6223      	str	r3, [r4, #32]
 80058bc:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <__sinit+0x2c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f5      	bne.n	80058b0 <__sinit+0xc>
 80058c4:	f7ff ffc4 	bl	8005850 <global_stdio_init.part.0>
 80058c8:	e7f2      	b.n	80058b0 <__sinit+0xc>
 80058ca:	bf00      	nop
 80058cc:	08005811 	.word	0x08005811
 80058d0:	2400041c 	.word	0x2400041c

080058d4 <_fwalk_sglue>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	4607      	mov	r7, r0
 80058da:	4688      	mov	r8, r1
 80058dc:	4614      	mov	r4, r2
 80058de:	2600      	movs	r6, #0
 80058e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058e4:	f1b9 0901 	subs.w	r9, r9, #1
 80058e8:	d505      	bpl.n	80058f6 <_fwalk_sglue+0x22>
 80058ea:	6824      	ldr	r4, [r4, #0]
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	d1f7      	bne.n	80058e0 <_fwalk_sglue+0xc>
 80058f0:	4630      	mov	r0, r6
 80058f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d907      	bls.n	800590c <_fwalk_sglue+0x38>
 80058fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005900:	3301      	adds	r3, #1
 8005902:	d003      	beq.n	800590c <_fwalk_sglue+0x38>
 8005904:	4629      	mov	r1, r5
 8005906:	4638      	mov	r0, r7
 8005908:	47c0      	blx	r8
 800590a:	4306      	orrs	r6, r0
 800590c:	3568      	adds	r5, #104	@ 0x68
 800590e:	e7e9      	b.n	80058e4 <_fwalk_sglue+0x10>

08005910 <_puts_r>:
 8005910:	6a03      	ldr	r3, [r0, #32]
 8005912:	b570      	push	{r4, r5, r6, lr}
 8005914:	6884      	ldr	r4, [r0, #8]
 8005916:	4605      	mov	r5, r0
 8005918:	460e      	mov	r6, r1
 800591a:	b90b      	cbnz	r3, 8005920 <_puts_r+0x10>
 800591c:	f7ff ffc2 	bl	80058a4 <__sinit>
 8005920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005922:	07db      	lsls	r3, r3, #31
 8005924:	d405      	bmi.n	8005932 <_puts_r+0x22>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	0598      	lsls	r0, r3, #22
 800592a:	d402      	bmi.n	8005932 <_puts_r+0x22>
 800592c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800592e:	f000 f9a2 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	0719      	lsls	r1, r3, #28
 8005936:	d502      	bpl.n	800593e <_puts_r+0x2e>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d135      	bne.n	80059aa <_puts_r+0x9a>
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 f8c5 	bl	8005ad0 <__swsetup_r>
 8005946:	b380      	cbz	r0, 80059aa <_puts_r+0x9a>
 8005948:	f04f 35ff 	mov.w	r5, #4294967295
 800594c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800594e:	07da      	lsls	r2, r3, #31
 8005950:	d405      	bmi.n	800595e <_puts_r+0x4e>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	059b      	lsls	r3, r3, #22
 8005956:	d402      	bmi.n	800595e <_puts_r+0x4e>
 8005958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800595a:	f000 f98d 	bl	8005c78 <__retarget_lock_release_recursive>
 800595e:	4628      	mov	r0, r5
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	2b00      	cmp	r3, #0
 8005964:	da04      	bge.n	8005970 <_puts_r+0x60>
 8005966:	69a2      	ldr	r2, [r4, #24]
 8005968:	429a      	cmp	r2, r3
 800596a:	dc17      	bgt.n	800599c <_puts_r+0x8c>
 800596c:	290a      	cmp	r1, #10
 800596e:	d015      	beq.n	800599c <_puts_r+0x8c>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	6022      	str	r2, [r4, #0]
 8005976:	7019      	strb	r1, [r3, #0]
 8005978:	68a3      	ldr	r3, [r4, #8]
 800597a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800597e:	3b01      	subs	r3, #1
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	2900      	cmp	r1, #0
 8005984:	d1ed      	bne.n	8005962 <_puts_r+0x52>
 8005986:	2b00      	cmp	r3, #0
 8005988:	da11      	bge.n	80059ae <_puts_r+0x9e>
 800598a:	4622      	mov	r2, r4
 800598c:	210a      	movs	r1, #10
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f85f 	bl	8005a52 <__swbuf_r>
 8005994:	3001      	adds	r0, #1
 8005996:	d0d7      	beq.n	8005948 <_puts_r+0x38>
 8005998:	250a      	movs	r5, #10
 800599a:	e7d7      	b.n	800594c <_puts_r+0x3c>
 800599c:	4622      	mov	r2, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f857 	bl	8005a52 <__swbuf_r>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d1e7      	bne.n	8005978 <_puts_r+0x68>
 80059a8:	e7ce      	b.n	8005948 <_puts_r+0x38>
 80059aa:	3e01      	subs	r6, #1
 80059ac:	e7e4      	b.n	8005978 <_puts_r+0x68>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	220a      	movs	r2, #10
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e7ee      	b.n	8005998 <_puts_r+0x88>
	...

080059bc <puts>:
 80059bc:	4b02      	ldr	r3, [pc, #8]	@ (80059c8 <puts+0xc>)
 80059be:	4601      	mov	r1, r0
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f7ff bfa5 	b.w	8005910 <_puts_r>
 80059c6:	bf00      	nop
 80059c8:	24000048 	.word	0x24000048

080059cc <__sread>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	460c      	mov	r4, r1
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	f000 f900 	bl	8005bd8 <_read_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	bfab      	itete	ge
 80059dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059de:	89a3      	ldrhlt	r3, [r4, #12]
 80059e0:	181b      	addge	r3, r3, r0
 80059e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059e6:	bfac      	ite	ge
 80059e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ea:	81a3      	strhlt	r3, [r4, #12]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__swrite>:
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	461f      	mov	r7, r3
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	05db      	lsls	r3, r3, #23
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4616      	mov	r6, r2
 80059fe:	d505      	bpl.n	8005a0c <__swrite+0x1e>
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	2302      	movs	r3, #2
 8005a06:	2200      	movs	r2, #0
 8005a08:	f000 f8d4 	bl	8005bb4 <_lseek_r>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	4632      	mov	r2, r6
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a22:	f000 b8eb 	b.w	8005bfc <_write_r>

08005a26 <__sseek>:
 8005a26:	b510      	push	{r4, lr}
 8005a28:	460c      	mov	r4, r1
 8005a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2e:	f000 f8c1 	bl	8005bb4 <_lseek_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	bf15      	itete	ne
 8005a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a42:	81a3      	strheq	r3, [r4, #12]
 8005a44:	bf18      	it	ne
 8005a46:	81a3      	strhne	r3, [r4, #12]
 8005a48:	bd10      	pop	{r4, pc}

08005a4a <__sclose>:
 8005a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4e:	f000 b8a1 	b.w	8005b94 <_close_r>

08005a52 <__swbuf_r>:
 8005a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a54:	460e      	mov	r6, r1
 8005a56:	4614      	mov	r4, r2
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b118      	cbz	r0, 8005a64 <__swbuf_r+0x12>
 8005a5c:	6a03      	ldr	r3, [r0, #32]
 8005a5e:	b90b      	cbnz	r3, 8005a64 <__swbuf_r+0x12>
 8005a60:	f7ff ff20 	bl	80058a4 <__sinit>
 8005a64:	69a3      	ldr	r3, [r4, #24]
 8005a66:	60a3      	str	r3, [r4, #8]
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	071a      	lsls	r2, r3, #28
 8005a6c:	d501      	bpl.n	8005a72 <__swbuf_r+0x20>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	b943      	cbnz	r3, 8005a84 <__swbuf_r+0x32>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 f82b 	bl	8005ad0 <__swsetup_r>
 8005a7a:	b118      	cbz	r0, 8005a84 <__swbuf_r+0x32>
 8005a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a80:	4638      	mov	r0, r7
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	6922      	ldr	r2, [r4, #16]
 8005a88:	1a98      	subs	r0, r3, r2
 8005a8a:	6963      	ldr	r3, [r4, #20]
 8005a8c:	b2f6      	uxtb	r6, r6
 8005a8e:	4283      	cmp	r3, r0
 8005a90:	4637      	mov	r7, r6
 8005a92:	dc05      	bgt.n	8005aa0 <__swbuf_r+0x4e>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	f001 fd24 	bl	80074e4 <_fflush_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d1ed      	bne.n	8005a7c <__swbuf_r+0x2a>
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	60a3      	str	r3, [r4, #8]
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	701e      	strb	r6, [r3, #0]
 8005aae:	6962      	ldr	r2, [r4, #20]
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d004      	beq.n	8005ac0 <__swbuf_r+0x6e>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	07db      	lsls	r3, r3, #31
 8005aba:	d5e1      	bpl.n	8005a80 <__swbuf_r+0x2e>
 8005abc:	2e0a      	cmp	r6, #10
 8005abe:	d1df      	bne.n	8005a80 <__swbuf_r+0x2e>
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f001 fd0e 	bl	80074e4 <_fflush_r>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d0d9      	beq.n	8005a80 <__swbuf_r+0x2e>
 8005acc:	e7d6      	b.n	8005a7c <__swbuf_r+0x2a>
	...

08005ad0 <__swsetup_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4b29      	ldr	r3, [pc, #164]	@ (8005b78 <__swsetup_r+0xa8>)
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	460c      	mov	r4, r1
 8005ada:	b118      	cbz	r0, 8005ae4 <__swsetup_r+0x14>
 8005adc:	6a03      	ldr	r3, [r0, #32]
 8005ade:	b90b      	cbnz	r3, 8005ae4 <__swsetup_r+0x14>
 8005ae0:	f7ff fee0 	bl	80058a4 <__sinit>
 8005ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae8:	0719      	lsls	r1, r3, #28
 8005aea:	d422      	bmi.n	8005b32 <__swsetup_r+0x62>
 8005aec:	06da      	lsls	r2, r3, #27
 8005aee:	d407      	bmi.n	8005b00 <__swsetup_r+0x30>
 8005af0:	2209      	movs	r2, #9
 8005af2:	602a      	str	r2, [r5, #0]
 8005af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	f04f 30ff 	mov.w	r0, #4294967295
 8005afe:	e033      	b.n	8005b68 <__swsetup_r+0x98>
 8005b00:	0758      	lsls	r0, r3, #29
 8005b02:	d512      	bpl.n	8005b2a <__swsetup_r+0x5a>
 8005b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b06:	b141      	cbz	r1, 8005b1a <__swsetup_r+0x4a>
 8005b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	d002      	beq.n	8005b16 <__swsetup_r+0x46>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fea7 	bl	8006864 <_free_r>
 8005b16:	2300      	movs	r3, #0
 8005b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	2300      	movs	r3, #0
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f043 0308 	orr.w	r3, r3, #8
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	b94b      	cbnz	r3, 8005b4a <__swsetup_r+0x7a>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b40:	d003      	beq.n	8005b4a <__swsetup_r+0x7a>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f001 fd1b 	bl	8007580 <__smakebuf_r>
 8005b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4e:	f013 0201 	ands.w	r2, r3, #1
 8005b52:	d00a      	beq.n	8005b6a <__swsetup_r+0x9a>
 8005b54:	2200      	movs	r2, #0
 8005b56:	60a2      	str	r2, [r4, #8]
 8005b58:	6962      	ldr	r2, [r4, #20]
 8005b5a:	4252      	negs	r2, r2
 8005b5c:	61a2      	str	r2, [r4, #24]
 8005b5e:	6922      	ldr	r2, [r4, #16]
 8005b60:	b942      	cbnz	r2, 8005b74 <__swsetup_r+0xa4>
 8005b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b66:	d1c5      	bne.n	8005af4 <__swsetup_r+0x24>
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	0799      	lsls	r1, r3, #30
 8005b6c:	bf58      	it	pl
 8005b6e:	6962      	ldrpl	r2, [r4, #20]
 8005b70:	60a2      	str	r2, [r4, #8]
 8005b72:	e7f4      	b.n	8005b5e <__swsetup_r+0x8e>
 8005b74:	2000      	movs	r0, #0
 8005b76:	e7f7      	b.n	8005b68 <__swsetup_r+0x98>
 8005b78:	24000048 	.word	0x24000048

08005b7c <memset>:
 8005b7c:	4402      	add	r2, r0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <_localeconv_r>:
 8005b8c:	4800      	ldr	r0, [pc, #0]	@ (8005b90 <_localeconv_r+0x4>)
 8005b8e:	4770      	bx	lr
 8005b90:	24000188 	.word	0x24000188

08005b94 <_close_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	@ (8005bb0 <_close_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fa feaa 	bl	80008f8 <_close>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_close_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_close_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	24000420 	.word	0x24000420

08005bb4 <_lseek_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	@ (8005bd4 <_lseek_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fa febf 	bl	8000946 <_lseek>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_lseek_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_lseek_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	24000420 	.word	0x24000420

08005bd8 <_read_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	@ (8005bf8 <_read_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fa fe4d 	bl	8000886 <_read>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_read_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_read_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	24000420 	.word	0x24000420

08005bfc <_write_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	@ (8005c1c <_write_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fa fe58 	bl	80008c0 <_write>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_write_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_write_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	24000420 	.word	0x24000420

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	@ (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	24000048 	.word	0x24000048

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f001 fdbc 	bl	80077bc <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08007c5c 	.word	0x08007c5c
 8005c68:	08007c5c 	.word	0x08007c5c
 8005c6c:	08007c5c 	.word	0x08007c5c
 8005c70:	08007c60 	.word	0x08007c60

08005c74 <__retarget_lock_init_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_acquire_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_release_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <memcpy>:
 8005c7a:	440a      	add	r2, r1
 8005c7c:	4291      	cmp	r1, r2
 8005c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c82:	d100      	bne.n	8005c86 <memcpy+0xc>
 8005c84:	4770      	bx	lr
 8005c86:	b510      	push	{r4, lr}
 8005c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c90:	4291      	cmp	r1, r2
 8005c92:	d1f9      	bne.n	8005c88 <memcpy+0xe>
 8005c94:	bd10      	pop	{r4, pc}

08005c96 <quorem>:
 8005c96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	6903      	ldr	r3, [r0, #16]
 8005c9c:	690c      	ldr	r4, [r1, #16]
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	db7e      	blt.n	8005da2 <quorem+0x10c>
 8005ca4:	3c01      	subs	r4, #1
 8005ca6:	f101 0814 	add.w	r8, r1, #20
 8005caa:	00a3      	lsls	r3, r4, #2
 8005cac:	f100 0514 	add.w	r5, r0, #20
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ccc:	d32e      	bcc.n	8005d2c <quorem+0x96>
 8005cce:	f04f 0a00 	mov.w	sl, #0
 8005cd2:	46c4      	mov	ip, r8
 8005cd4:	46ae      	mov	lr, r5
 8005cd6:	46d3      	mov	fp, sl
 8005cd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cdc:	b298      	uxth	r0, r3
 8005cde:	fb06 a000 	mla	r0, r6, r0, sl
 8005ce2:	0c02      	lsrs	r2, r0, #16
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	fb06 2303 	mla	r3, r6, r3, r2
 8005cea:	f8de 2000 	ldr.w	r2, [lr]
 8005cee:	b280      	uxth	r0, r0
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	1a12      	subs	r2, r2, r0
 8005cf4:	445a      	add	r2, fp
 8005cf6:	f8de 0000 	ldr.w	r0, [lr]
 8005cfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d0e:	45e1      	cmp	r9, ip
 8005d10:	f84e 2b04 	str.w	r2, [lr], #4
 8005d14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d18:	d2de      	bcs.n	8005cd8 <quorem+0x42>
 8005d1a:	9b00      	ldr	r3, [sp, #0]
 8005d1c:	58eb      	ldr	r3, [r5, r3]
 8005d1e:	b92b      	cbnz	r3, 8005d2c <quorem+0x96>
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	3b04      	subs	r3, #4
 8005d24:	429d      	cmp	r5, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	d32f      	bcc.n	8005d8a <quorem+0xf4>
 8005d2a:	613c      	str	r4, [r7, #16]
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f001 f90b 	bl	8006f48 <__mcmp>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	db25      	blt.n	8005d82 <quorem+0xec>
 8005d36:	4629      	mov	r1, r5
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d3e:	f8d1 c000 	ldr.w	ip, [r1]
 8005d42:	fa1f fe82 	uxth.w	lr, r2
 8005d46:	fa1f f38c 	uxth.w	r3, ip
 8005d4a:	eba3 030e 	sub.w	r3, r3, lr
 8005d4e:	4403      	add	r3, r0
 8005d50:	0c12      	lsrs	r2, r2, #16
 8005d52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d60:	45c1      	cmp	r9, r8
 8005d62:	f841 3b04 	str.w	r3, [r1], #4
 8005d66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d6a:	d2e6      	bcs.n	8005d3a <quorem+0xa4>
 8005d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d74:	b922      	cbnz	r2, 8005d80 <quorem+0xea>
 8005d76:	3b04      	subs	r3, #4
 8005d78:	429d      	cmp	r5, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	d30b      	bcc.n	8005d96 <quorem+0x100>
 8005d7e:	613c      	str	r4, [r7, #16]
 8005d80:	3601      	adds	r6, #1
 8005d82:	4630      	mov	r0, r6
 8005d84:	b003      	add	sp, #12
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	3b04      	subs	r3, #4
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d1cb      	bne.n	8005d2a <quorem+0x94>
 8005d92:	3c01      	subs	r4, #1
 8005d94:	e7c6      	b.n	8005d24 <quorem+0x8e>
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1ef      	bne.n	8005d7e <quorem+0xe8>
 8005d9e:	3c01      	subs	r4, #1
 8005da0:	e7ea      	b.n	8005d78 <quorem+0xe2>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e7ee      	b.n	8005d84 <quorem+0xee>
	...

08005da8 <_dtoa_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	ed2d 8b02 	vpush	{d8}
 8005db0:	69c7      	ldr	r7, [r0, #28]
 8005db2:	b091      	sub	sp, #68	@ 0x44
 8005db4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005db8:	ec55 4b10 	vmov	r4, r5, d0
 8005dbc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005dbe:	9107      	str	r1, [sp, #28]
 8005dc0:	4681      	mov	r9, r0
 8005dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8005dc6:	b97f      	cbnz	r7, 8005de8 <_dtoa_r+0x40>
 8005dc8:	2010      	movs	r0, #16
 8005dca:	f000 fd95 	bl	80068f8 <malloc>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f8c9 001c 	str.w	r0, [r9, #28]
 8005dd4:	b920      	cbnz	r0, 8005de0 <_dtoa_r+0x38>
 8005dd6:	4ba0      	ldr	r3, [pc, #640]	@ (8006058 <_dtoa_r+0x2b0>)
 8005dd8:	21ef      	movs	r1, #239	@ 0xef
 8005dda:	48a0      	ldr	r0, [pc, #640]	@ (800605c <_dtoa_r+0x2b4>)
 8005ddc:	f001 fc3e 	bl	800765c <__assert_func>
 8005de0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005de4:	6007      	str	r7, [r0, #0]
 8005de6:	60c7      	str	r7, [r0, #12]
 8005de8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	b159      	cbz	r1, 8005e08 <_dtoa_r+0x60>
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	604a      	str	r2, [r1, #4]
 8005df4:	2301      	movs	r3, #1
 8005df6:	4093      	lsls	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
 8005dfa:	4648      	mov	r0, r9
 8005dfc:	f000 fe72 	bl	8006ae4 <_Bfree>
 8005e00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	1e2b      	subs	r3, r5, #0
 8005e0a:	bfbb      	ittet	lt
 8005e0c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e10:	9303      	strlt	r3, [sp, #12]
 8005e12:	2300      	movge	r3, #0
 8005e14:	2201      	movlt	r2, #1
 8005e16:	bfac      	ite	ge
 8005e18:	6033      	strge	r3, [r6, #0]
 8005e1a:	6032      	strlt	r2, [r6, #0]
 8005e1c:	4b90      	ldr	r3, [pc, #576]	@ (8006060 <_dtoa_r+0x2b8>)
 8005e1e:	9e03      	ldr	r6, [sp, #12]
 8005e20:	43b3      	bics	r3, r6
 8005e22:	d110      	bne.n	8005e46 <_dtoa_r+0x9e>
 8005e24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e26:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005e30:	4323      	orrs	r3, r4
 8005e32:	f000 84e6 	beq.w	8006802 <_dtoa_r+0xa5a>
 8005e36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005e38:	4f8a      	ldr	r7, [pc, #552]	@ (8006064 <_dtoa_r+0x2bc>)
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 84e8 	beq.w	8006810 <_dtoa_r+0xa68>
 8005e40:	1cfb      	adds	r3, r7, #3
 8005e42:	f000 bce3 	b.w	800680c <_dtoa_r+0xa64>
 8005e46:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005e4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e52:	d10a      	bne.n	8005e6a <_dtoa_r+0xc2>
 8005e54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e56:	2301      	movs	r3, #1
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005e5c:	b113      	cbz	r3, 8005e64 <_dtoa_r+0xbc>
 8005e5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005e60:	4b81      	ldr	r3, [pc, #516]	@ (8006068 <_dtoa_r+0x2c0>)
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	4f81      	ldr	r7, [pc, #516]	@ (800606c <_dtoa_r+0x2c4>)
 8005e66:	f000 bcd3 	b.w	8006810 <_dtoa_r+0xa68>
 8005e6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005e6c:	a90f      	add	r1, sp, #60	@ 0x3c
 8005e6e:	4648      	mov	r0, r9
 8005e70:	eeb0 0b48 	vmov.f64	d0, d8
 8005e74:	f001 f918 	bl	80070a8 <__d2b>
 8005e78:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005e7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e7e:	9001      	str	r0, [sp, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d045      	beq.n	8005f10 <_dtoa_r+0x168>
 8005e84:	eeb0 7b48 	vmov.f64	d7, d8
 8005e88:	ee18 1a90 	vmov	r1, s17
 8005e8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005e90:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005e94:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005e98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	ee07 1a90 	vmov	s15, r1
 8005ea2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005ea6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006040 <_dtoa_r+0x298>
 8005eaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005eae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006048 <_dtoa_r+0x2a0>
 8005eb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005eb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006050 <_dtoa_r+0x2a8>
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005ec2:	eeb0 7b46 	vmov.f64	d7, d6
 8005ec6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005eca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005ece:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed6:	ee16 8a90 	vmov	r8, s13
 8005eda:	d508      	bpl.n	8005eee <_dtoa_r+0x146>
 8005edc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005ee0:	eeb4 6b47 	vcmp.f64	d6, d7
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	bf18      	it	ne
 8005eea:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005eee:	f1b8 0f16 	cmp.w	r8, #22
 8005ef2:	d82b      	bhi.n	8005f4c <_dtoa_r+0x1a4>
 8005ef4:	495e      	ldr	r1, [pc, #376]	@ (8006070 <_dtoa_r+0x2c8>)
 8005ef6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005efa:	ed91 7b00 	vldr	d7, [r1]
 8005efe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f06:	d501      	bpl.n	8005f0c <_dtoa_r+0x164>
 8005f08:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	e01e      	b.n	8005f4e <_dtoa_r+0x1a6>
 8005f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005f18:	2920      	cmp	r1, #32
 8005f1a:	bfc1      	itttt	gt
 8005f1c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005f20:	408e      	lslgt	r6, r1
 8005f22:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005f26:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005f2a:	bfd6      	itet	le
 8005f2c:	f1c1 0120 	rsble	r1, r1, #32
 8005f30:	4331      	orrgt	r1, r6
 8005f32:	fa04 f101 	lslle.w	r1, r4, r1
 8005f36:	ee07 1a90 	vmov	s15, r1
 8005f3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	ee17 1a90 	vmov	r1, s15
 8005f44:	2501      	movs	r5, #1
 8005f46:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005f4a:	e7a8      	b.n	8005e9e <_dtoa_r+0xf6>
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	1e53      	subs	r3, r2, #1
 8005f52:	9306      	str	r3, [sp, #24]
 8005f54:	bf45      	ittet	mi
 8005f56:	f1c2 0301 	rsbmi	r3, r2, #1
 8005f5a:	9304      	strmi	r3, [sp, #16]
 8005f5c:	2300      	movpl	r3, #0
 8005f5e:	2300      	movmi	r3, #0
 8005f60:	bf4c      	ite	mi
 8005f62:	9306      	strmi	r3, [sp, #24]
 8005f64:	9304      	strpl	r3, [sp, #16]
 8005f66:	f1b8 0f00 	cmp.w	r8, #0
 8005f6a:	910c      	str	r1, [sp, #48]	@ 0x30
 8005f6c:	db18      	blt.n	8005fa0 <_dtoa_r+0x1f8>
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005f74:	4443      	add	r3, r8
 8005f76:	9306      	str	r3, [sp, #24]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9a07      	ldr	r2, [sp, #28]
 8005f7c:	2a09      	cmp	r2, #9
 8005f7e:	d845      	bhi.n	800600c <_dtoa_r+0x264>
 8005f80:	2a05      	cmp	r2, #5
 8005f82:	bfc4      	itt	gt
 8005f84:	3a04      	subgt	r2, #4
 8005f86:	9207      	strgt	r2, [sp, #28]
 8005f88:	9a07      	ldr	r2, [sp, #28]
 8005f8a:	f1a2 0202 	sub.w	r2, r2, #2
 8005f8e:	bfcc      	ite	gt
 8005f90:	2400      	movgt	r4, #0
 8005f92:	2401      	movle	r4, #1
 8005f94:	2a03      	cmp	r2, #3
 8005f96:	d844      	bhi.n	8006022 <_dtoa_r+0x27a>
 8005f98:	e8df f002 	tbb	[pc, r2]
 8005f9c:	0b173634 	.word	0x0b173634
 8005fa0:	9b04      	ldr	r3, [sp, #16]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	eba3 0308 	sub.w	r3, r3, r8
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	920a      	str	r2, [sp, #40]	@ 0x28
 8005fac:	f1c8 0300 	rsb	r3, r8, #0
 8005fb0:	e7e3      	b.n	8005f7a <_dtoa_r+0x1d2>
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	9208      	str	r2, [sp, #32]
 8005fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb8:	eb08 0b02 	add.w	fp, r8, r2
 8005fbc:	f10b 0a01 	add.w	sl, fp, #1
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	2a01      	cmp	r2, #1
 8005fc4:	bfb8      	it	lt
 8005fc6:	2201      	movlt	r2, #1
 8005fc8:	e006      	b.n	8005fd8 <_dtoa_r+0x230>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	9208      	str	r2, [sp, #32]
 8005fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	dd29      	ble.n	8006028 <_dtoa_r+0x280>
 8005fd4:	4693      	mov	fp, r2
 8005fd6:	4692      	mov	sl, r2
 8005fd8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	2004      	movs	r0, #4
 8005fe0:	f100 0614 	add.w	r6, r0, #20
 8005fe4:	4296      	cmp	r6, r2
 8005fe6:	d926      	bls.n	8006036 <_dtoa_r+0x28e>
 8005fe8:	6079      	str	r1, [r7, #4]
 8005fea:	4648      	mov	r0, r9
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	f000 fd39 	bl	8006a64 <_Balloc>
 8005ff2:	9b05      	ldr	r3, [sp, #20]
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d13e      	bne.n	8006078 <_dtoa_r+0x2d0>
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8006074 <_dtoa_r+0x2cc>)
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006002:	e6ea      	b.n	8005dda <_dtoa_r+0x32>
 8006004:	2200      	movs	r2, #0
 8006006:	e7e1      	b.n	8005fcc <_dtoa_r+0x224>
 8006008:	2200      	movs	r2, #0
 800600a:	e7d3      	b.n	8005fb4 <_dtoa_r+0x20c>
 800600c:	2401      	movs	r4, #1
 800600e:	2200      	movs	r2, #0
 8006010:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006014:	f04f 3bff 	mov.w	fp, #4294967295
 8006018:	2100      	movs	r1, #0
 800601a:	46da      	mov	sl, fp
 800601c:	2212      	movs	r2, #18
 800601e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006020:	e7da      	b.n	8005fd8 <_dtoa_r+0x230>
 8006022:	2201      	movs	r2, #1
 8006024:	9208      	str	r2, [sp, #32]
 8006026:	e7f5      	b.n	8006014 <_dtoa_r+0x26c>
 8006028:	f04f 0b01 	mov.w	fp, #1
 800602c:	46da      	mov	sl, fp
 800602e:	465a      	mov	r2, fp
 8006030:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006034:	e7d0      	b.n	8005fd8 <_dtoa_r+0x230>
 8006036:	3101      	adds	r1, #1
 8006038:	0040      	lsls	r0, r0, #1
 800603a:	e7d1      	b.n	8005fe0 <_dtoa_r+0x238>
 800603c:	f3af 8000 	nop.w
 8006040:	636f4361 	.word	0x636f4361
 8006044:	3fd287a7 	.word	0x3fd287a7
 8006048:	8b60c8b3 	.word	0x8b60c8b3
 800604c:	3fc68a28 	.word	0x3fc68a28
 8006050:	509f79fb 	.word	0x509f79fb
 8006054:	3fd34413 	.word	0x3fd34413
 8006058:	08007921 	.word	0x08007921
 800605c:	08007938 	.word	0x08007938
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	0800791d 	.word	0x0800791d
 8006068:	080078f1 	.word	0x080078f1
 800606c:	080078f0 	.word	0x080078f0
 8006070:	08007a88 	.word	0x08007a88
 8006074:	08007990 	.word	0x08007990
 8006078:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800607c:	f1ba 0f0e 	cmp.w	sl, #14
 8006080:	6010      	str	r0, [r2, #0]
 8006082:	d86e      	bhi.n	8006162 <_dtoa_r+0x3ba>
 8006084:	2c00      	cmp	r4, #0
 8006086:	d06c      	beq.n	8006162 <_dtoa_r+0x3ba>
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	f340 80b4 	ble.w	80061f8 <_dtoa_r+0x450>
 8006090:	4ac8      	ldr	r2, [pc, #800]	@ (80063b4 <_dtoa_r+0x60c>)
 8006092:	f008 010f 	and.w	r1, r8, #15
 8006096:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800609a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800609e:	ed92 7b00 	vldr	d7, [r2]
 80060a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80060a6:	f000 809b 	beq.w	80061e0 <_dtoa_r+0x438>
 80060aa:	4ac3      	ldr	r2, [pc, #780]	@ (80063b8 <_dtoa_r+0x610>)
 80060ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80060b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80060b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80060b8:	f001 010f 	and.w	r1, r1, #15
 80060bc:	2203      	movs	r2, #3
 80060be:	48be      	ldr	r0, [pc, #760]	@ (80063b8 <_dtoa_r+0x610>)
 80060c0:	2900      	cmp	r1, #0
 80060c2:	f040 808f 	bne.w	80061e4 <_dtoa_r+0x43c>
 80060c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80060ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80060ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80060d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060d8:	2900      	cmp	r1, #0
 80060da:	f000 80b3 	beq.w	8006244 <_dtoa_r+0x49c>
 80060de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80060e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80060e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ea:	f140 80ab 	bpl.w	8006244 <_dtoa_r+0x49c>
 80060ee:	f1ba 0f00 	cmp.w	sl, #0
 80060f2:	f000 80a7 	beq.w	8006244 <_dtoa_r+0x49c>
 80060f6:	f1bb 0f00 	cmp.w	fp, #0
 80060fa:	dd30      	ble.n	800615e <_dtoa_r+0x3b6>
 80060fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006100:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006104:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006108:	f108 31ff 	add.w	r1, r8, #4294967295
 800610c:	9105      	str	r1, [sp, #20]
 800610e:	3201      	adds	r2, #1
 8006110:	465c      	mov	r4, fp
 8006112:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006116:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800611a:	ee07 2a90 	vmov	s15, r2
 800611e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006122:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006126:	ee15 2a90 	vmov	r2, s11
 800612a:	ec51 0b15 	vmov	r0, r1, d5
 800612e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8006132:	2c00      	cmp	r4, #0
 8006134:	f040 808a 	bne.w	800624c <_dtoa_r+0x4a4>
 8006138:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800613c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006140:	ec41 0b17 	vmov	d7, r0, r1
 8006144:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614c:	f300 826a 	bgt.w	8006624 <_dtoa_r+0x87c>
 8006150:	eeb1 7b47 	vneg.f64	d7, d7
 8006154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615c:	d423      	bmi.n	80061a6 <_dtoa_r+0x3fe>
 800615e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006162:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006164:	2a00      	cmp	r2, #0
 8006166:	f2c0 8129 	blt.w	80063bc <_dtoa_r+0x614>
 800616a:	f1b8 0f0e 	cmp.w	r8, #14
 800616e:	f300 8125 	bgt.w	80063bc <_dtoa_r+0x614>
 8006172:	4b90      	ldr	r3, [pc, #576]	@ (80063b4 <_dtoa_r+0x60c>)
 8006174:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006178:	ed93 6b00 	vldr	d6, [r3]
 800617c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	f280 80c8 	bge.w	8006314 <_dtoa_r+0x56c>
 8006184:	f1ba 0f00 	cmp.w	sl, #0
 8006188:	f300 80c4 	bgt.w	8006314 <_dtoa_r+0x56c>
 800618c:	d10b      	bne.n	80061a6 <_dtoa_r+0x3fe>
 800618e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006192:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006196:	ed9d 7b02 	vldr	d7, [sp, #8]
 800619a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a2:	f2c0 823c 	blt.w	800661e <_dtoa_r+0x876>
 80061a6:	2400      	movs	r4, #0
 80061a8:	4625      	mov	r5, r4
 80061aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ac:	43db      	mvns	r3, r3
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	463e      	mov	r6, r7
 80061b2:	f04f 0800 	mov.w	r8, #0
 80061b6:	4621      	mov	r1, r4
 80061b8:	4648      	mov	r0, r9
 80061ba:	f000 fc93 	bl	8006ae4 <_Bfree>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 80a2 	beq.w	8006308 <_dtoa_r+0x560>
 80061c4:	f1b8 0f00 	cmp.w	r8, #0
 80061c8:	d005      	beq.n	80061d6 <_dtoa_r+0x42e>
 80061ca:	45a8      	cmp	r8, r5
 80061cc:	d003      	beq.n	80061d6 <_dtoa_r+0x42e>
 80061ce:	4641      	mov	r1, r8
 80061d0:	4648      	mov	r0, r9
 80061d2:	f000 fc87 	bl	8006ae4 <_Bfree>
 80061d6:	4629      	mov	r1, r5
 80061d8:	4648      	mov	r0, r9
 80061da:	f000 fc83 	bl	8006ae4 <_Bfree>
 80061de:	e093      	b.n	8006308 <_dtoa_r+0x560>
 80061e0:	2202      	movs	r2, #2
 80061e2:	e76c      	b.n	80060be <_dtoa_r+0x316>
 80061e4:	07cc      	lsls	r4, r1, #31
 80061e6:	d504      	bpl.n	80061f2 <_dtoa_r+0x44a>
 80061e8:	ed90 6b00 	vldr	d6, [r0]
 80061ec:	3201      	adds	r2, #1
 80061ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80061f2:	1049      	asrs	r1, r1, #1
 80061f4:	3008      	adds	r0, #8
 80061f6:	e763      	b.n	80060c0 <_dtoa_r+0x318>
 80061f8:	d022      	beq.n	8006240 <_dtoa_r+0x498>
 80061fa:	f1c8 0100 	rsb	r1, r8, #0
 80061fe:	4a6d      	ldr	r2, [pc, #436]	@ (80063b4 <_dtoa_r+0x60c>)
 8006200:	f001 000f 	and.w	r0, r1, #15
 8006204:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006208:	ed92 7b00 	vldr	d7, [r2]
 800620c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006210:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006214:	4868      	ldr	r0, [pc, #416]	@ (80063b8 <_dtoa_r+0x610>)
 8006216:	1109      	asrs	r1, r1, #4
 8006218:	2400      	movs	r4, #0
 800621a:	2202      	movs	r2, #2
 800621c:	b929      	cbnz	r1, 800622a <_dtoa_r+0x482>
 800621e:	2c00      	cmp	r4, #0
 8006220:	f43f af57 	beq.w	80060d2 <_dtoa_r+0x32a>
 8006224:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006228:	e753      	b.n	80060d2 <_dtoa_r+0x32a>
 800622a:	07ce      	lsls	r6, r1, #31
 800622c:	d505      	bpl.n	800623a <_dtoa_r+0x492>
 800622e:	ed90 6b00 	vldr	d6, [r0]
 8006232:	3201      	adds	r2, #1
 8006234:	2401      	movs	r4, #1
 8006236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800623a:	1049      	asrs	r1, r1, #1
 800623c:	3008      	adds	r0, #8
 800623e:	e7ed      	b.n	800621c <_dtoa_r+0x474>
 8006240:	2202      	movs	r2, #2
 8006242:	e746      	b.n	80060d2 <_dtoa_r+0x32a>
 8006244:	f8cd 8014 	str.w	r8, [sp, #20]
 8006248:	4654      	mov	r4, sl
 800624a:	e762      	b.n	8006112 <_dtoa_r+0x36a>
 800624c:	4a59      	ldr	r2, [pc, #356]	@ (80063b4 <_dtoa_r+0x60c>)
 800624e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006252:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006256:	9a08      	ldr	r2, [sp, #32]
 8006258:	ec41 0b17 	vmov	d7, r0, r1
 800625c:	443c      	add	r4, r7
 800625e:	b34a      	cbz	r2, 80062b4 <_dtoa_r+0x50c>
 8006260:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006264:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8006268:	463e      	mov	r6, r7
 800626a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800626e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006272:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006276:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800627a:	ee14 2a90 	vmov	r2, s9
 800627e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006282:	3230      	adds	r2, #48	@ 0x30
 8006284:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006288:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	f806 2b01 	strb.w	r2, [r6], #1
 8006294:	d438      	bmi.n	8006308 <_dtoa_r+0x560>
 8006296:	ee32 5b46 	vsub.f64	d5, d2, d6
 800629a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800629e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a2:	d46e      	bmi.n	8006382 <_dtoa_r+0x5da>
 80062a4:	42a6      	cmp	r6, r4
 80062a6:	f43f af5a 	beq.w	800615e <_dtoa_r+0x3b6>
 80062aa:	ee27 7b03 	vmul.f64	d7, d7, d3
 80062ae:	ee26 6b03 	vmul.f64	d6, d6, d3
 80062b2:	e7e0      	b.n	8006276 <_dtoa_r+0x4ce>
 80062b4:	4621      	mov	r1, r4
 80062b6:	463e      	mov	r6, r7
 80062b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062bc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80062c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062c4:	ee14 2a90 	vmov	r2, s9
 80062c8:	3230      	adds	r2, #48	@ 0x30
 80062ca:	f806 2b01 	strb.w	r2, [r6], #1
 80062ce:	42a6      	cmp	r6, r4
 80062d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80062d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80062d8:	d119      	bne.n	800630e <_dtoa_r+0x566>
 80062da:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80062de:	ee37 4b05 	vadd.f64	d4, d7, d5
 80062e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80062e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ea:	dc4a      	bgt.n	8006382 <_dtoa_r+0x5da>
 80062ec:	ee35 5b47 	vsub.f64	d5, d5, d7
 80062f0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80062f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f8:	f57f af31 	bpl.w	800615e <_dtoa_r+0x3b6>
 80062fc:	460e      	mov	r6, r1
 80062fe:	3901      	subs	r1, #1
 8006300:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006304:	2b30      	cmp	r3, #48	@ 0x30
 8006306:	d0f9      	beq.n	80062fc <_dtoa_r+0x554>
 8006308:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800630c:	e027      	b.n	800635e <_dtoa_r+0x5b6>
 800630e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006312:	e7d5      	b.n	80062c0 <_dtoa_r+0x518>
 8006314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006318:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800631c:	463e      	mov	r6, r7
 800631e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006322:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006326:	ee15 3a10 	vmov	r3, s10
 800632a:	3330      	adds	r3, #48	@ 0x30
 800632c:	f806 3b01 	strb.w	r3, [r6], #1
 8006330:	1bf3      	subs	r3, r6, r7
 8006332:	459a      	cmp	sl, r3
 8006334:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006338:	eea3 7b46 	vfms.f64	d7, d3, d6
 800633c:	d132      	bne.n	80063a4 <_dtoa_r+0x5fc>
 800633e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006342:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634a:	dc18      	bgt.n	800637e <_dtoa_r+0x5d6>
 800634c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	d103      	bne.n	800635e <_dtoa_r+0x5b6>
 8006356:	ee15 3a10 	vmov	r3, s10
 800635a:	07db      	lsls	r3, r3, #31
 800635c:	d40f      	bmi.n	800637e <_dtoa_r+0x5d6>
 800635e:	9901      	ldr	r1, [sp, #4]
 8006360:	4648      	mov	r0, r9
 8006362:	f000 fbbf 	bl	8006ae4 <_Bfree>
 8006366:	2300      	movs	r3, #0
 8006368:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800636a:	7033      	strb	r3, [r6, #0]
 800636c:	f108 0301 	add.w	r3, r8, #1
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 824b 	beq.w	8006810 <_dtoa_r+0xa68>
 800637a:	601e      	str	r6, [r3, #0]
 800637c:	e248      	b.n	8006810 <_dtoa_r+0xa68>
 800637e:	f8cd 8014 	str.w	r8, [sp, #20]
 8006382:	4633      	mov	r3, r6
 8006384:	461e      	mov	r6, r3
 8006386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800638a:	2a39      	cmp	r2, #57	@ 0x39
 800638c:	d106      	bne.n	800639c <_dtoa_r+0x5f4>
 800638e:	429f      	cmp	r7, r3
 8006390:	d1f8      	bne.n	8006384 <_dtoa_r+0x5dc>
 8006392:	9a05      	ldr	r2, [sp, #20]
 8006394:	3201      	adds	r2, #1
 8006396:	9205      	str	r2, [sp, #20]
 8006398:	2230      	movs	r2, #48	@ 0x30
 800639a:	703a      	strb	r2, [r7, #0]
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	3201      	adds	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e7b1      	b.n	8006308 <_dtoa_r+0x560>
 80063a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80063a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b0:	d1b5      	bne.n	800631e <_dtoa_r+0x576>
 80063b2:	e7d4      	b.n	800635e <_dtoa_r+0x5b6>
 80063b4:	08007a88 	.word	0x08007a88
 80063b8:	08007a60 	.word	0x08007a60
 80063bc:	9908      	ldr	r1, [sp, #32]
 80063be:	2900      	cmp	r1, #0
 80063c0:	f000 80e9 	beq.w	8006596 <_dtoa_r+0x7ee>
 80063c4:	9907      	ldr	r1, [sp, #28]
 80063c6:	2901      	cmp	r1, #1
 80063c8:	f300 80cb 	bgt.w	8006562 <_dtoa_r+0x7ba>
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	f000 80c4 	beq.w	800655a <_dtoa_r+0x7b2>
 80063d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063d6:	9e04      	ldr	r6, [sp, #16]
 80063d8:	461c      	mov	r4, r3
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	9b06      	ldr	r3, [sp, #24]
 80063e4:	2101      	movs	r1, #1
 80063e6:	4413      	add	r3, r2
 80063e8:	4648      	mov	r0, r9
 80063ea:	9306      	str	r3, [sp, #24]
 80063ec:	f000 fc2e 	bl	8006c4c <__i2b>
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	4605      	mov	r5, r0
 80063f4:	b166      	cbz	r6, 8006410 <_dtoa_r+0x668>
 80063f6:	9a06      	ldr	r2, [sp, #24]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	dd09      	ble.n	8006410 <_dtoa_r+0x668>
 80063fc:	42b2      	cmp	r2, r6
 80063fe:	9904      	ldr	r1, [sp, #16]
 8006400:	bfa8      	it	ge
 8006402:	4632      	movge	r2, r6
 8006404:	1a89      	subs	r1, r1, r2
 8006406:	9104      	str	r1, [sp, #16]
 8006408:	9906      	ldr	r1, [sp, #24]
 800640a:	1ab6      	subs	r6, r6, r2
 800640c:	1a8a      	subs	r2, r1, r2
 800640e:	9206      	str	r2, [sp, #24]
 8006410:	b30b      	cbz	r3, 8006456 <_dtoa_r+0x6ae>
 8006412:	9a08      	ldr	r2, [sp, #32]
 8006414:	2a00      	cmp	r2, #0
 8006416:	f000 80c5 	beq.w	80065a4 <_dtoa_r+0x7fc>
 800641a:	2c00      	cmp	r4, #0
 800641c:	f000 80bf 	beq.w	800659e <_dtoa_r+0x7f6>
 8006420:	4629      	mov	r1, r5
 8006422:	4622      	mov	r2, r4
 8006424:	4648      	mov	r0, r9
 8006426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006428:	f000 fcc8 	bl	8006dbc <__pow5mult>
 800642c:	9a01      	ldr	r2, [sp, #4]
 800642e:	4601      	mov	r1, r0
 8006430:	4605      	mov	r5, r0
 8006432:	4648      	mov	r0, r9
 8006434:	f000 fc20 	bl	8006c78 <__multiply>
 8006438:	9901      	ldr	r1, [sp, #4]
 800643a:	9005      	str	r0, [sp, #20]
 800643c:	4648      	mov	r0, r9
 800643e:	f000 fb51 	bl	8006ae4 <_Bfree>
 8006442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006444:	1b1b      	subs	r3, r3, r4
 8006446:	f000 80b0 	beq.w	80065aa <_dtoa_r+0x802>
 800644a:	9905      	ldr	r1, [sp, #20]
 800644c:	461a      	mov	r2, r3
 800644e:	4648      	mov	r0, r9
 8006450:	f000 fcb4 	bl	8006dbc <__pow5mult>
 8006454:	9001      	str	r0, [sp, #4]
 8006456:	2101      	movs	r1, #1
 8006458:	4648      	mov	r0, r9
 800645a:	f000 fbf7 	bl	8006c4c <__i2b>
 800645e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006460:	4604      	mov	r4, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 81da 	beq.w	800681c <_dtoa_r+0xa74>
 8006468:	461a      	mov	r2, r3
 800646a:	4601      	mov	r1, r0
 800646c:	4648      	mov	r0, r9
 800646e:	f000 fca5 	bl	8006dbc <__pow5mult>
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	2b01      	cmp	r3, #1
 8006476:	4604      	mov	r4, r0
 8006478:	f300 80a0 	bgt.w	80065bc <_dtoa_r+0x814>
 800647c:	9b02      	ldr	r3, [sp, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 8096 	bne.w	80065b0 <_dtoa_r+0x808>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800648a:	2a00      	cmp	r2, #0
 800648c:	f040 8092 	bne.w	80065b4 <_dtoa_r+0x80c>
 8006490:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006494:	0d12      	lsrs	r2, r2, #20
 8006496:	0512      	lsls	r2, r2, #20
 8006498:	2a00      	cmp	r2, #0
 800649a:	f000 808d 	beq.w	80065b8 <_dtoa_r+0x810>
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	3301      	adds	r3, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	9b06      	ldr	r3, [sp, #24]
 80064a6:	3301      	adds	r3, #1
 80064a8:	9306      	str	r3, [sp, #24]
 80064aa:	2301      	movs	r3, #1
 80064ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 81b9 	beq.w	8006828 <_dtoa_r+0xa80>
 80064b6:	6922      	ldr	r2, [r4, #16]
 80064b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80064bc:	6910      	ldr	r0, [r2, #16]
 80064be:	f000 fb79 	bl	8006bb4 <__hi0bits>
 80064c2:	f1c0 0020 	rsb	r0, r0, #32
 80064c6:	9b06      	ldr	r3, [sp, #24]
 80064c8:	4418      	add	r0, r3
 80064ca:	f010 001f 	ands.w	r0, r0, #31
 80064ce:	f000 8081 	beq.w	80065d4 <_dtoa_r+0x82c>
 80064d2:	f1c0 0220 	rsb	r2, r0, #32
 80064d6:	2a04      	cmp	r2, #4
 80064d8:	dd73      	ble.n	80065c2 <_dtoa_r+0x81a>
 80064da:	9b04      	ldr	r3, [sp, #16]
 80064dc:	f1c0 001c 	rsb	r0, r0, #28
 80064e0:	4403      	add	r3, r0
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	9b06      	ldr	r3, [sp, #24]
 80064e6:	4406      	add	r6, r0
 80064e8:	4403      	add	r3, r0
 80064ea:	9306      	str	r3, [sp, #24]
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dd05      	ble.n	80064fe <_dtoa_r+0x756>
 80064f2:	9901      	ldr	r1, [sp, #4]
 80064f4:	461a      	mov	r2, r3
 80064f6:	4648      	mov	r0, r9
 80064f8:	f000 fcba 	bl	8006e70 <__lshift>
 80064fc:	9001      	str	r0, [sp, #4]
 80064fe:	9b06      	ldr	r3, [sp, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dd05      	ble.n	8006510 <_dtoa_r+0x768>
 8006504:	4621      	mov	r1, r4
 8006506:	461a      	mov	r2, r3
 8006508:	4648      	mov	r0, r9
 800650a:	f000 fcb1 	bl	8006e70 <__lshift>
 800650e:	4604      	mov	r4, r0
 8006510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006512:	2b00      	cmp	r3, #0
 8006514:	d060      	beq.n	80065d8 <_dtoa_r+0x830>
 8006516:	9801      	ldr	r0, [sp, #4]
 8006518:	4621      	mov	r1, r4
 800651a:	f000 fd15 	bl	8006f48 <__mcmp>
 800651e:	2800      	cmp	r0, #0
 8006520:	da5a      	bge.n	80065d8 <_dtoa_r+0x830>
 8006522:	f108 33ff 	add.w	r3, r8, #4294967295
 8006526:	9305      	str	r3, [sp, #20]
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	2300      	movs	r3, #0
 800652c:	220a      	movs	r2, #10
 800652e:	4648      	mov	r0, r9
 8006530:	f000 fafa 	bl	8006b28 <__multadd>
 8006534:	9b08      	ldr	r3, [sp, #32]
 8006536:	9001      	str	r0, [sp, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8177 	beq.w	800682c <_dtoa_r+0xa84>
 800653e:	4629      	mov	r1, r5
 8006540:	2300      	movs	r3, #0
 8006542:	220a      	movs	r2, #10
 8006544:	4648      	mov	r0, r9
 8006546:	f000 faef 	bl	8006b28 <__multadd>
 800654a:	f1bb 0f00 	cmp.w	fp, #0
 800654e:	4605      	mov	r5, r0
 8006550:	dc6e      	bgt.n	8006630 <_dtoa_r+0x888>
 8006552:	9b07      	ldr	r3, [sp, #28]
 8006554:	2b02      	cmp	r3, #2
 8006556:	dc48      	bgt.n	80065ea <_dtoa_r+0x842>
 8006558:	e06a      	b.n	8006630 <_dtoa_r+0x888>
 800655a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800655c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006560:	e739      	b.n	80063d6 <_dtoa_r+0x62e>
 8006562:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006566:	42a3      	cmp	r3, r4
 8006568:	db07      	blt.n	800657a <_dtoa_r+0x7d2>
 800656a:	f1ba 0f00 	cmp.w	sl, #0
 800656e:	eba3 0404 	sub.w	r4, r3, r4
 8006572:	db0b      	blt.n	800658c <_dtoa_r+0x7e4>
 8006574:	9e04      	ldr	r6, [sp, #16]
 8006576:	4652      	mov	r2, sl
 8006578:	e72f      	b.n	80063da <_dtoa_r+0x632>
 800657a:	1ae2      	subs	r2, r4, r3
 800657c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800657e:	9e04      	ldr	r6, [sp, #16]
 8006580:	4413      	add	r3, r2
 8006582:	930a      	str	r3, [sp, #40]	@ 0x28
 8006584:	4652      	mov	r2, sl
 8006586:	4623      	mov	r3, r4
 8006588:	2400      	movs	r4, #0
 800658a:	e726      	b.n	80063da <_dtoa_r+0x632>
 800658c:	9a04      	ldr	r2, [sp, #16]
 800658e:	eba2 060a 	sub.w	r6, r2, sl
 8006592:	2200      	movs	r2, #0
 8006594:	e721      	b.n	80063da <_dtoa_r+0x632>
 8006596:	9e04      	ldr	r6, [sp, #16]
 8006598:	9d08      	ldr	r5, [sp, #32]
 800659a:	461c      	mov	r4, r3
 800659c:	e72a      	b.n	80063f4 <_dtoa_r+0x64c>
 800659e:	9a01      	ldr	r2, [sp, #4]
 80065a0:	9205      	str	r2, [sp, #20]
 80065a2:	e752      	b.n	800644a <_dtoa_r+0x6a2>
 80065a4:	9901      	ldr	r1, [sp, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	e751      	b.n	800644e <_dtoa_r+0x6a6>
 80065aa:	9b05      	ldr	r3, [sp, #20]
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	e752      	b.n	8006456 <_dtoa_r+0x6ae>
 80065b0:	2300      	movs	r3, #0
 80065b2:	e77b      	b.n	80064ac <_dtoa_r+0x704>
 80065b4:	9b02      	ldr	r3, [sp, #8]
 80065b6:	e779      	b.n	80064ac <_dtoa_r+0x704>
 80065b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80065ba:	e778      	b.n	80064ae <_dtoa_r+0x706>
 80065bc:	2300      	movs	r3, #0
 80065be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065c0:	e779      	b.n	80064b6 <_dtoa_r+0x70e>
 80065c2:	d093      	beq.n	80064ec <_dtoa_r+0x744>
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	321c      	adds	r2, #28
 80065c8:	4413      	add	r3, r2
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	4416      	add	r6, r2
 80065d0:	4413      	add	r3, r2
 80065d2:	e78a      	b.n	80064ea <_dtoa_r+0x742>
 80065d4:	4602      	mov	r2, r0
 80065d6:	e7f5      	b.n	80065c4 <_dtoa_r+0x81c>
 80065d8:	f1ba 0f00 	cmp.w	sl, #0
 80065dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80065e0:	46d3      	mov	fp, sl
 80065e2:	dc21      	bgt.n	8006628 <_dtoa_r+0x880>
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	dd1e      	ble.n	8006628 <_dtoa_r+0x880>
 80065ea:	f1bb 0f00 	cmp.w	fp, #0
 80065ee:	f47f addc 	bne.w	80061aa <_dtoa_r+0x402>
 80065f2:	4621      	mov	r1, r4
 80065f4:	465b      	mov	r3, fp
 80065f6:	2205      	movs	r2, #5
 80065f8:	4648      	mov	r0, r9
 80065fa:	f000 fa95 	bl	8006b28 <__multadd>
 80065fe:	4601      	mov	r1, r0
 8006600:	4604      	mov	r4, r0
 8006602:	9801      	ldr	r0, [sp, #4]
 8006604:	f000 fca0 	bl	8006f48 <__mcmp>
 8006608:	2800      	cmp	r0, #0
 800660a:	f77f adce 	ble.w	80061aa <_dtoa_r+0x402>
 800660e:	463e      	mov	r6, r7
 8006610:	2331      	movs	r3, #49	@ 0x31
 8006612:	f806 3b01 	strb.w	r3, [r6], #1
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	3301      	adds	r3, #1
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	e5c9      	b.n	80061b2 <_dtoa_r+0x40a>
 800661e:	f8cd 8014 	str.w	r8, [sp, #20]
 8006622:	4654      	mov	r4, sl
 8006624:	4625      	mov	r5, r4
 8006626:	e7f2      	b.n	800660e <_dtoa_r+0x866>
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8102 	beq.w	8006834 <_dtoa_r+0xa8c>
 8006630:	2e00      	cmp	r6, #0
 8006632:	dd05      	ble.n	8006640 <_dtoa_r+0x898>
 8006634:	4629      	mov	r1, r5
 8006636:	4632      	mov	r2, r6
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fc19 	bl	8006e70 <__lshift>
 800663e:	4605      	mov	r5, r0
 8006640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d058      	beq.n	80066f8 <_dtoa_r+0x950>
 8006646:	6869      	ldr	r1, [r5, #4]
 8006648:	4648      	mov	r0, r9
 800664a:	f000 fa0b 	bl	8006a64 <_Balloc>
 800664e:	4606      	mov	r6, r0
 8006650:	b928      	cbnz	r0, 800665e <_dtoa_r+0x8b6>
 8006652:	4b82      	ldr	r3, [pc, #520]	@ (800685c <_dtoa_r+0xab4>)
 8006654:	4602      	mov	r2, r0
 8006656:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800665a:	f7ff bbbe 	b.w	8005dda <_dtoa_r+0x32>
 800665e:	692a      	ldr	r2, [r5, #16]
 8006660:	3202      	adds	r2, #2
 8006662:	0092      	lsls	r2, r2, #2
 8006664:	f105 010c 	add.w	r1, r5, #12
 8006668:	300c      	adds	r0, #12
 800666a:	f7ff fb06 	bl	8005c7a <memcpy>
 800666e:	2201      	movs	r2, #1
 8006670:	4631      	mov	r1, r6
 8006672:	4648      	mov	r0, r9
 8006674:	f000 fbfc 	bl	8006e70 <__lshift>
 8006678:	1c7b      	adds	r3, r7, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	eb07 030b 	add.w	r3, r7, fp
 8006680:	9309      	str	r3, [sp, #36]	@ 0x24
 8006682:	9b02      	ldr	r3, [sp, #8]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	46a8      	mov	r8, r5
 800668a:	9308      	str	r3, [sp, #32]
 800668c:	4605      	mov	r5, r0
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	9801      	ldr	r0, [sp, #4]
 8006692:	4621      	mov	r1, r4
 8006694:	f103 3bff 	add.w	fp, r3, #4294967295
 8006698:	f7ff fafd 	bl	8005c96 <quorem>
 800669c:	4641      	mov	r1, r8
 800669e:	9002      	str	r0, [sp, #8]
 80066a0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80066a4:	9801      	ldr	r0, [sp, #4]
 80066a6:	f000 fc4f 	bl	8006f48 <__mcmp>
 80066aa:	462a      	mov	r2, r5
 80066ac:	9006      	str	r0, [sp, #24]
 80066ae:	4621      	mov	r1, r4
 80066b0:	4648      	mov	r0, r9
 80066b2:	f000 fc65 	bl	8006f80 <__mdiff>
 80066b6:	68c2      	ldr	r2, [r0, #12]
 80066b8:	4606      	mov	r6, r0
 80066ba:	b9fa      	cbnz	r2, 80066fc <_dtoa_r+0x954>
 80066bc:	4601      	mov	r1, r0
 80066be:	9801      	ldr	r0, [sp, #4]
 80066c0:	f000 fc42 	bl	8006f48 <__mcmp>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4631      	mov	r1, r6
 80066c8:	4648      	mov	r0, r9
 80066ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80066cc:	f000 fa0a 	bl	8006ae4 <_Bfree>
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066d4:	9e04      	ldr	r6, [sp, #16]
 80066d6:	ea42 0103 	orr.w	r1, r2, r3
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	4319      	orrs	r1, r3
 80066de:	d10f      	bne.n	8006700 <_dtoa_r+0x958>
 80066e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80066e4:	d028      	beq.n	8006738 <_dtoa_r+0x990>
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dd02      	ble.n	80066f2 <_dtoa_r+0x94a>
 80066ec:	9b02      	ldr	r3, [sp, #8]
 80066ee:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80066f2:	f88b a000 	strb.w	sl, [fp]
 80066f6:	e55e      	b.n	80061b6 <_dtoa_r+0x40e>
 80066f8:	4628      	mov	r0, r5
 80066fa:	e7bd      	b.n	8006678 <_dtoa_r+0x8d0>
 80066fc:	2201      	movs	r2, #1
 80066fe:	e7e2      	b.n	80066c6 <_dtoa_r+0x91e>
 8006700:	9b06      	ldr	r3, [sp, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	db04      	blt.n	8006710 <_dtoa_r+0x968>
 8006706:	9907      	ldr	r1, [sp, #28]
 8006708:	430b      	orrs	r3, r1
 800670a:	9908      	ldr	r1, [sp, #32]
 800670c:	430b      	orrs	r3, r1
 800670e:	d120      	bne.n	8006752 <_dtoa_r+0x9aa>
 8006710:	2a00      	cmp	r2, #0
 8006712:	ddee      	ble.n	80066f2 <_dtoa_r+0x94a>
 8006714:	9901      	ldr	r1, [sp, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	4648      	mov	r0, r9
 800671a:	f000 fba9 	bl	8006e70 <__lshift>
 800671e:	4621      	mov	r1, r4
 8006720:	9001      	str	r0, [sp, #4]
 8006722:	f000 fc11 	bl	8006f48 <__mcmp>
 8006726:	2800      	cmp	r0, #0
 8006728:	dc03      	bgt.n	8006732 <_dtoa_r+0x98a>
 800672a:	d1e2      	bne.n	80066f2 <_dtoa_r+0x94a>
 800672c:	f01a 0f01 	tst.w	sl, #1
 8006730:	d0df      	beq.n	80066f2 <_dtoa_r+0x94a>
 8006732:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006736:	d1d9      	bne.n	80066ec <_dtoa_r+0x944>
 8006738:	2339      	movs	r3, #57	@ 0x39
 800673a:	f88b 3000 	strb.w	r3, [fp]
 800673e:	4633      	mov	r3, r6
 8006740:	461e      	mov	r6, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006748:	2a39      	cmp	r2, #57	@ 0x39
 800674a:	d052      	beq.n	80067f2 <_dtoa_r+0xa4a>
 800674c:	3201      	adds	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e531      	b.n	80061b6 <_dtoa_r+0x40e>
 8006752:	2a00      	cmp	r2, #0
 8006754:	dd07      	ble.n	8006766 <_dtoa_r+0x9be>
 8006756:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800675a:	d0ed      	beq.n	8006738 <_dtoa_r+0x990>
 800675c:	f10a 0301 	add.w	r3, sl, #1
 8006760:	f88b 3000 	strb.w	r3, [fp]
 8006764:	e527      	b.n	80061b6 <_dtoa_r+0x40e>
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800676a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800676e:	4293      	cmp	r3, r2
 8006770:	d029      	beq.n	80067c6 <_dtoa_r+0xa1e>
 8006772:	9901      	ldr	r1, [sp, #4]
 8006774:	2300      	movs	r3, #0
 8006776:	220a      	movs	r2, #10
 8006778:	4648      	mov	r0, r9
 800677a:	f000 f9d5 	bl	8006b28 <__multadd>
 800677e:	45a8      	cmp	r8, r5
 8006780:	9001      	str	r0, [sp, #4]
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	f04f 020a 	mov.w	r2, #10
 800678a:	4641      	mov	r1, r8
 800678c:	4648      	mov	r0, r9
 800678e:	d107      	bne.n	80067a0 <_dtoa_r+0x9f8>
 8006790:	f000 f9ca 	bl	8006b28 <__multadd>
 8006794:	4680      	mov	r8, r0
 8006796:	4605      	mov	r5, r0
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	3301      	adds	r3, #1
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	e776      	b.n	800668e <_dtoa_r+0x8e6>
 80067a0:	f000 f9c2 	bl	8006b28 <__multadd>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4680      	mov	r8, r0
 80067a8:	2300      	movs	r3, #0
 80067aa:	220a      	movs	r2, #10
 80067ac:	4648      	mov	r0, r9
 80067ae:	f000 f9bb 	bl	8006b28 <__multadd>
 80067b2:	4605      	mov	r5, r0
 80067b4:	e7f0      	b.n	8006798 <_dtoa_r+0x9f0>
 80067b6:	f1bb 0f00 	cmp.w	fp, #0
 80067ba:	bfcc      	ite	gt
 80067bc:	465e      	movgt	r6, fp
 80067be:	2601      	movle	r6, #1
 80067c0:	443e      	add	r6, r7
 80067c2:	f04f 0800 	mov.w	r8, #0
 80067c6:	9901      	ldr	r1, [sp, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	4648      	mov	r0, r9
 80067cc:	f000 fb50 	bl	8006e70 <__lshift>
 80067d0:	4621      	mov	r1, r4
 80067d2:	9001      	str	r0, [sp, #4]
 80067d4:	f000 fbb8 	bl	8006f48 <__mcmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	dcb0      	bgt.n	800673e <_dtoa_r+0x996>
 80067dc:	d102      	bne.n	80067e4 <_dtoa_r+0xa3c>
 80067de:	f01a 0f01 	tst.w	sl, #1
 80067e2:	d1ac      	bne.n	800673e <_dtoa_r+0x996>
 80067e4:	4633      	mov	r3, r6
 80067e6:	461e      	mov	r6, r3
 80067e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ec:	2a30      	cmp	r2, #48	@ 0x30
 80067ee:	d0fa      	beq.n	80067e6 <_dtoa_r+0xa3e>
 80067f0:	e4e1      	b.n	80061b6 <_dtoa_r+0x40e>
 80067f2:	429f      	cmp	r7, r3
 80067f4:	d1a4      	bne.n	8006740 <_dtoa_r+0x998>
 80067f6:	9b05      	ldr	r3, [sp, #20]
 80067f8:	3301      	adds	r3, #1
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	2331      	movs	r3, #49	@ 0x31
 80067fe:	703b      	strb	r3, [r7, #0]
 8006800:	e4d9      	b.n	80061b6 <_dtoa_r+0x40e>
 8006802:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006804:	4f16      	ldr	r7, [pc, #88]	@ (8006860 <_dtoa_r+0xab8>)
 8006806:	b11b      	cbz	r3, 8006810 <_dtoa_r+0xa68>
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4638      	mov	r0, r7
 8006812:	b011      	add	sp, #68	@ 0x44
 8006814:	ecbd 8b02 	vpop	{d8}
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	2b01      	cmp	r3, #1
 8006820:	f77f ae2c 	ble.w	800647c <_dtoa_r+0x6d4>
 8006824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006828:	2001      	movs	r0, #1
 800682a:	e64c      	b.n	80064c6 <_dtoa_r+0x71e>
 800682c:	f1bb 0f00 	cmp.w	fp, #0
 8006830:	f77f aed8 	ble.w	80065e4 <_dtoa_r+0x83c>
 8006834:	463e      	mov	r6, r7
 8006836:	9801      	ldr	r0, [sp, #4]
 8006838:	4621      	mov	r1, r4
 800683a:	f7ff fa2c 	bl	8005c96 <quorem>
 800683e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006842:	f806 ab01 	strb.w	sl, [r6], #1
 8006846:	1bf2      	subs	r2, r6, r7
 8006848:	4593      	cmp	fp, r2
 800684a:	ddb4      	ble.n	80067b6 <_dtoa_r+0xa0e>
 800684c:	9901      	ldr	r1, [sp, #4]
 800684e:	2300      	movs	r3, #0
 8006850:	220a      	movs	r2, #10
 8006852:	4648      	mov	r0, r9
 8006854:	f000 f968 	bl	8006b28 <__multadd>
 8006858:	9001      	str	r0, [sp, #4]
 800685a:	e7ec      	b.n	8006836 <_dtoa_r+0xa8e>
 800685c:	08007990 	.word	0x08007990
 8006860:	08007914 	.word	0x08007914

08006864 <_free_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4605      	mov	r5, r0
 8006868:	2900      	cmp	r1, #0
 800686a:	d041      	beq.n	80068f0 <_free_r+0x8c>
 800686c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006870:	1f0c      	subs	r4, r1, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfb8      	it	lt
 8006876:	18e4      	addlt	r4, r4, r3
 8006878:	f000 f8e8 	bl	8006a4c <__malloc_lock>
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <_free_r+0x90>)
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	b933      	cbnz	r3, 8006890 <_free_r+0x2c>
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	6014      	str	r4, [r2, #0]
 8006886:	4628      	mov	r0, r5
 8006888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688c:	f000 b8e4 	b.w	8006a58 <__malloc_unlock>
 8006890:	42a3      	cmp	r3, r4
 8006892:	d908      	bls.n	80068a6 <_free_r+0x42>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	1821      	adds	r1, r4, r0
 8006898:	428b      	cmp	r3, r1
 800689a:	bf01      	itttt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	1809      	addeq	r1, r1, r0
 80068a2:	6021      	streq	r1, [r4, #0]
 80068a4:	e7ed      	b.n	8006882 <_free_r+0x1e>
 80068a6:	461a      	mov	r2, r3
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b10b      	cbz	r3, 80068b0 <_free_r+0x4c>
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d9fa      	bls.n	80068a6 <_free_r+0x42>
 80068b0:	6811      	ldr	r1, [r2, #0]
 80068b2:	1850      	adds	r0, r2, r1
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d10b      	bne.n	80068d0 <_free_r+0x6c>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	4401      	add	r1, r0
 80068bc:	1850      	adds	r0, r2, r1
 80068be:	4283      	cmp	r3, r0
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	d1e0      	bne.n	8006886 <_free_r+0x22>
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	4408      	add	r0, r1
 80068cc:	6010      	str	r0, [r2, #0]
 80068ce:	e7da      	b.n	8006886 <_free_r+0x22>
 80068d0:	d902      	bls.n	80068d8 <_free_r+0x74>
 80068d2:	230c      	movs	r3, #12
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	e7d6      	b.n	8006886 <_free_r+0x22>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	1821      	adds	r1, r4, r0
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf04      	itt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	bf04      	itt	eq
 80068e8:	1809      	addeq	r1, r1, r0
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	6054      	str	r4, [r2, #4]
 80068ee:	e7ca      	b.n	8006886 <_free_r+0x22>
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	2400042c 	.word	0x2400042c

080068f8 <malloc>:
 80068f8:	4b02      	ldr	r3, [pc, #8]	@ (8006904 <malloc+0xc>)
 80068fa:	4601      	mov	r1, r0
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	f000 b825 	b.w	800694c <_malloc_r>
 8006902:	bf00      	nop
 8006904:	24000048 	.word	0x24000048

08006908 <sbrk_aligned>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	4e0f      	ldr	r6, [pc, #60]	@ (8006948 <sbrk_aligned+0x40>)
 800690c:	460c      	mov	r4, r1
 800690e:	6831      	ldr	r1, [r6, #0]
 8006910:	4605      	mov	r5, r0
 8006912:	b911      	cbnz	r1, 800691a <sbrk_aligned+0x12>
 8006914:	f000 fe92 	bl	800763c <_sbrk_r>
 8006918:	6030      	str	r0, [r6, #0]
 800691a:	4621      	mov	r1, r4
 800691c:	4628      	mov	r0, r5
 800691e:	f000 fe8d 	bl	800763c <_sbrk_r>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	d103      	bne.n	800692e <sbrk_aligned+0x26>
 8006926:	f04f 34ff 	mov.w	r4, #4294967295
 800692a:	4620      	mov	r0, r4
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	1cc4      	adds	r4, r0, #3
 8006930:	f024 0403 	bic.w	r4, r4, #3
 8006934:	42a0      	cmp	r0, r4
 8006936:	d0f8      	beq.n	800692a <sbrk_aligned+0x22>
 8006938:	1a21      	subs	r1, r4, r0
 800693a:	4628      	mov	r0, r5
 800693c:	f000 fe7e 	bl	800763c <_sbrk_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1f2      	bne.n	800692a <sbrk_aligned+0x22>
 8006944:	e7ef      	b.n	8006926 <sbrk_aligned+0x1e>
 8006946:	bf00      	nop
 8006948:	24000428 	.word	0x24000428

0800694c <_malloc_r>:
 800694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006950:	1ccd      	adds	r5, r1, #3
 8006952:	f025 0503 	bic.w	r5, r5, #3
 8006956:	3508      	adds	r5, #8
 8006958:	2d0c      	cmp	r5, #12
 800695a:	bf38      	it	cc
 800695c:	250c      	movcc	r5, #12
 800695e:	2d00      	cmp	r5, #0
 8006960:	4606      	mov	r6, r0
 8006962:	db01      	blt.n	8006968 <_malloc_r+0x1c>
 8006964:	42a9      	cmp	r1, r5
 8006966:	d904      	bls.n	8006972 <_malloc_r+0x26>
 8006968:	230c      	movs	r3, #12
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	2000      	movs	r0, #0
 800696e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a48 <_malloc_r+0xfc>
 8006976:	f000 f869 	bl	8006a4c <__malloc_lock>
 800697a:	f8d8 3000 	ldr.w	r3, [r8]
 800697e:	461c      	mov	r4, r3
 8006980:	bb44      	cbnz	r4, 80069d4 <_malloc_r+0x88>
 8006982:	4629      	mov	r1, r5
 8006984:	4630      	mov	r0, r6
 8006986:	f7ff ffbf 	bl	8006908 <sbrk_aligned>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	4604      	mov	r4, r0
 800698e:	d158      	bne.n	8006a42 <_malloc_r+0xf6>
 8006990:	f8d8 4000 	ldr.w	r4, [r8]
 8006994:	4627      	mov	r7, r4
 8006996:	2f00      	cmp	r7, #0
 8006998:	d143      	bne.n	8006a22 <_malloc_r+0xd6>
 800699a:	2c00      	cmp	r4, #0
 800699c:	d04b      	beq.n	8006a36 <_malloc_r+0xea>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	4639      	mov	r1, r7
 80069a2:	4630      	mov	r0, r6
 80069a4:	eb04 0903 	add.w	r9, r4, r3
 80069a8:	f000 fe48 	bl	800763c <_sbrk_r>
 80069ac:	4581      	cmp	r9, r0
 80069ae:	d142      	bne.n	8006a36 <_malloc_r+0xea>
 80069b0:	6821      	ldr	r1, [r4, #0]
 80069b2:	1a6d      	subs	r5, r5, r1
 80069b4:	4629      	mov	r1, r5
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7ff ffa6 	bl	8006908 <sbrk_aligned>
 80069bc:	3001      	adds	r0, #1
 80069be:	d03a      	beq.n	8006a36 <_malloc_r+0xea>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	442b      	add	r3, r5
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	bb62      	cbnz	r2, 8006a28 <_malloc_r+0xdc>
 80069ce:	f8c8 7000 	str.w	r7, [r8]
 80069d2:	e00f      	b.n	80069f4 <_malloc_r+0xa8>
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	1b52      	subs	r2, r2, r5
 80069d8:	d420      	bmi.n	8006a1c <_malloc_r+0xd0>
 80069da:	2a0b      	cmp	r2, #11
 80069dc:	d917      	bls.n	8006a0e <_malloc_r+0xc2>
 80069de:	1961      	adds	r1, r4, r5
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	6025      	str	r5, [r4, #0]
 80069e4:	bf18      	it	ne
 80069e6:	6059      	strne	r1, [r3, #4]
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	bf08      	it	eq
 80069ec:	f8c8 1000 	streq.w	r1, [r8]
 80069f0:	5162      	str	r2, [r4, r5]
 80069f2:	604b      	str	r3, [r1, #4]
 80069f4:	4630      	mov	r0, r6
 80069f6:	f000 f82f 	bl	8006a58 <__malloc_unlock>
 80069fa:	f104 000b 	add.w	r0, r4, #11
 80069fe:	1d23      	adds	r3, r4, #4
 8006a00:	f020 0007 	bic.w	r0, r0, #7
 8006a04:	1ac2      	subs	r2, r0, r3
 8006a06:	bf1c      	itt	ne
 8006a08:	1a1b      	subne	r3, r3, r0
 8006a0a:	50a3      	strne	r3, [r4, r2]
 8006a0c:	e7af      	b.n	800696e <_malloc_r+0x22>
 8006a0e:	6862      	ldr	r2, [r4, #4]
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	bf0c      	ite	eq
 8006a14:	f8c8 2000 	streq.w	r2, [r8]
 8006a18:	605a      	strne	r2, [r3, #4]
 8006a1a:	e7eb      	b.n	80069f4 <_malloc_r+0xa8>
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	6864      	ldr	r4, [r4, #4]
 8006a20:	e7ae      	b.n	8006980 <_malloc_r+0x34>
 8006a22:	463c      	mov	r4, r7
 8006a24:	687f      	ldr	r7, [r7, #4]
 8006a26:	e7b6      	b.n	8006996 <_malloc_r+0x4a>
 8006a28:	461a      	mov	r2, r3
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d1fb      	bne.n	8006a28 <_malloc_r+0xdc>
 8006a30:	2300      	movs	r3, #0
 8006a32:	6053      	str	r3, [r2, #4]
 8006a34:	e7de      	b.n	80069f4 <_malloc_r+0xa8>
 8006a36:	230c      	movs	r3, #12
 8006a38:	6033      	str	r3, [r6, #0]
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f000 f80c 	bl	8006a58 <__malloc_unlock>
 8006a40:	e794      	b.n	800696c <_malloc_r+0x20>
 8006a42:	6005      	str	r5, [r0, #0]
 8006a44:	e7d6      	b.n	80069f4 <_malloc_r+0xa8>
 8006a46:	bf00      	nop
 8006a48:	2400042c 	.word	0x2400042c

08006a4c <__malloc_lock>:
 8006a4c:	4801      	ldr	r0, [pc, #4]	@ (8006a54 <__malloc_lock+0x8>)
 8006a4e:	f7ff b912 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 8006a52:	bf00      	nop
 8006a54:	24000424 	.word	0x24000424

08006a58 <__malloc_unlock>:
 8006a58:	4801      	ldr	r0, [pc, #4]	@ (8006a60 <__malloc_unlock+0x8>)
 8006a5a:	f7ff b90d 	b.w	8005c78 <__retarget_lock_release_recursive>
 8006a5e:	bf00      	nop
 8006a60:	24000424 	.word	0x24000424

08006a64 <_Balloc>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	69c6      	ldr	r6, [r0, #28]
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	b976      	cbnz	r6, 8006a8c <_Balloc+0x28>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f7ff ff42 	bl	80068f8 <malloc>
 8006a74:	4602      	mov	r2, r0
 8006a76:	61e0      	str	r0, [r4, #28]
 8006a78:	b920      	cbnz	r0, 8006a84 <_Balloc+0x20>
 8006a7a:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <_Balloc+0x78>)
 8006a7c:	4818      	ldr	r0, [pc, #96]	@ (8006ae0 <_Balloc+0x7c>)
 8006a7e:	216b      	movs	r1, #107	@ 0x6b
 8006a80:	f000 fdec 	bl	800765c <__assert_func>
 8006a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a88:	6006      	str	r6, [r0, #0]
 8006a8a:	60c6      	str	r6, [r0, #12]
 8006a8c:	69e6      	ldr	r6, [r4, #28]
 8006a8e:	68f3      	ldr	r3, [r6, #12]
 8006a90:	b183      	cbz	r3, 8006ab4 <_Balloc+0x50>
 8006a92:	69e3      	ldr	r3, [r4, #28]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a9a:	b9b8      	cbnz	r0, 8006acc <_Balloc+0x68>
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8006aa2:	1d72      	adds	r2, r6, #5
 8006aa4:	0092      	lsls	r2, r2, #2
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fdf6 	bl	8007698 <_calloc_r>
 8006aac:	b160      	cbz	r0, 8006ac8 <_Balloc+0x64>
 8006aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ab2:	e00e      	b.n	8006ad2 <_Balloc+0x6e>
 8006ab4:	2221      	movs	r2, #33	@ 0x21
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fded 	bl	8007698 <_calloc_r>
 8006abe:	69e3      	ldr	r3, [r4, #28]
 8006ac0:	60f0      	str	r0, [r6, #12]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e4      	bne.n	8006a92 <_Balloc+0x2e>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	6802      	ldr	r2, [r0, #0]
 8006ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ad8:	e7f7      	b.n	8006aca <_Balloc+0x66>
 8006ada:	bf00      	nop
 8006adc:	08007921 	.word	0x08007921
 8006ae0:	080079a1 	.word	0x080079a1

08006ae4 <_Bfree>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	69c6      	ldr	r6, [r0, #28]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b976      	cbnz	r6, 8006b0c <_Bfree+0x28>
 8006aee:	2010      	movs	r0, #16
 8006af0:	f7ff ff02 	bl	80068f8 <malloc>
 8006af4:	4602      	mov	r2, r0
 8006af6:	61e8      	str	r0, [r5, #28]
 8006af8:	b920      	cbnz	r0, 8006b04 <_Bfree+0x20>
 8006afa:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <_Bfree+0x3c>)
 8006afc:	4809      	ldr	r0, [pc, #36]	@ (8006b24 <_Bfree+0x40>)
 8006afe:	218f      	movs	r1, #143	@ 0x8f
 8006b00:	f000 fdac 	bl	800765c <__assert_func>
 8006b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b08:	6006      	str	r6, [r0, #0]
 8006b0a:	60c6      	str	r6, [r0, #12]
 8006b0c:	b13c      	cbz	r4, 8006b1e <_Bfree+0x3a>
 8006b0e:	69eb      	ldr	r3, [r5, #28]
 8006b10:	6862      	ldr	r2, [r4, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b18:	6021      	str	r1, [r4, #0]
 8006b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	08007921 	.word	0x08007921
 8006b24:	080079a1 	.word	0x080079a1

08006b28 <__multadd>:
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	690d      	ldr	r5, [r1, #16]
 8006b2e:	4607      	mov	r7, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	461e      	mov	r6, r3
 8006b34:	f101 0c14 	add.w	ip, r1, #20
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b3e:	b299      	uxth	r1, r3
 8006b40:	fb02 6101 	mla	r1, r2, r1, r6
 8006b44:	0c1e      	lsrs	r6, r3, #16
 8006b46:	0c0b      	lsrs	r3, r1, #16
 8006b48:	fb02 3306 	mla	r3, r2, r6, r3
 8006b4c:	b289      	uxth	r1, r1
 8006b4e:	3001      	adds	r0, #1
 8006b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b54:	4285      	cmp	r5, r0
 8006b56:	f84c 1b04 	str.w	r1, [ip], #4
 8006b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b5e:	dcec      	bgt.n	8006b3a <__multadd+0x12>
 8006b60:	b30e      	cbz	r6, 8006ba6 <__multadd+0x7e>
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	42ab      	cmp	r3, r5
 8006b66:	dc19      	bgt.n	8006b9c <__multadd+0x74>
 8006b68:	6861      	ldr	r1, [r4, #4]
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	3101      	adds	r1, #1
 8006b6e:	f7ff ff79 	bl	8006a64 <_Balloc>
 8006b72:	4680      	mov	r8, r0
 8006b74:	b928      	cbnz	r0, 8006b82 <__multadd+0x5a>
 8006b76:	4602      	mov	r2, r0
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <__multadd+0x84>)
 8006b7a:	480d      	ldr	r0, [pc, #52]	@ (8006bb0 <__multadd+0x88>)
 8006b7c:	21ba      	movs	r1, #186	@ 0xba
 8006b7e:	f000 fd6d 	bl	800765c <__assert_func>
 8006b82:	6922      	ldr	r2, [r4, #16]
 8006b84:	3202      	adds	r2, #2
 8006b86:	f104 010c 	add.w	r1, r4, #12
 8006b8a:	0092      	lsls	r2, r2, #2
 8006b8c:	300c      	adds	r0, #12
 8006b8e:	f7ff f874 	bl	8005c7a <memcpy>
 8006b92:	4621      	mov	r1, r4
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7ff ffa5 	bl	8006ae4 <_Bfree>
 8006b9a:	4644      	mov	r4, r8
 8006b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	615e      	str	r6, [r3, #20]
 8006ba4:	6125      	str	r5, [r4, #16]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bac:	08007990 	.word	0x08007990
 8006bb0:	080079a1 	.word	0x080079a1

08006bb4 <__hi0bits>:
 8006bb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006bb8:	4603      	mov	r3, r0
 8006bba:	bf36      	itet	cc
 8006bbc:	0403      	lslcc	r3, r0, #16
 8006bbe:	2000      	movcs	r0, #0
 8006bc0:	2010      	movcc	r0, #16
 8006bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bc6:	bf3c      	itt	cc
 8006bc8:	021b      	lslcc	r3, r3, #8
 8006bca:	3008      	addcc	r0, #8
 8006bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd0:	bf3c      	itt	cc
 8006bd2:	011b      	lslcc	r3, r3, #4
 8006bd4:	3004      	addcc	r0, #4
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bda:	bf3c      	itt	cc
 8006bdc:	009b      	lslcc	r3, r3, #2
 8006bde:	3002      	addcc	r0, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	db05      	blt.n	8006bf0 <__hi0bits+0x3c>
 8006be4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006be8:	f100 0001 	add.w	r0, r0, #1
 8006bec:	bf08      	it	eq
 8006bee:	2020      	moveq	r0, #32
 8006bf0:	4770      	bx	lr

08006bf2 <__lo0bits>:
 8006bf2:	6803      	ldr	r3, [r0, #0]
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	f013 0007 	ands.w	r0, r3, #7
 8006bfa:	d00b      	beq.n	8006c14 <__lo0bits+0x22>
 8006bfc:	07d9      	lsls	r1, r3, #31
 8006bfe:	d421      	bmi.n	8006c44 <__lo0bits+0x52>
 8006c00:	0798      	lsls	r0, r3, #30
 8006c02:	bf49      	itett	mi
 8006c04:	085b      	lsrmi	r3, r3, #1
 8006c06:	089b      	lsrpl	r3, r3, #2
 8006c08:	2001      	movmi	r0, #1
 8006c0a:	6013      	strmi	r3, [r2, #0]
 8006c0c:	bf5c      	itt	pl
 8006c0e:	6013      	strpl	r3, [r2, #0]
 8006c10:	2002      	movpl	r0, #2
 8006c12:	4770      	bx	lr
 8006c14:	b299      	uxth	r1, r3
 8006c16:	b909      	cbnz	r1, 8006c1c <__lo0bits+0x2a>
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	2010      	movs	r0, #16
 8006c1c:	b2d9      	uxtb	r1, r3
 8006c1e:	b909      	cbnz	r1, 8006c24 <__lo0bits+0x32>
 8006c20:	3008      	adds	r0, #8
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	0719      	lsls	r1, r3, #28
 8006c26:	bf04      	itt	eq
 8006c28:	091b      	lsreq	r3, r3, #4
 8006c2a:	3004      	addeq	r0, #4
 8006c2c:	0799      	lsls	r1, r3, #30
 8006c2e:	bf04      	itt	eq
 8006c30:	089b      	lsreq	r3, r3, #2
 8006c32:	3002      	addeq	r0, #2
 8006c34:	07d9      	lsls	r1, r3, #31
 8006c36:	d403      	bmi.n	8006c40 <__lo0bits+0x4e>
 8006c38:	085b      	lsrs	r3, r3, #1
 8006c3a:	f100 0001 	add.w	r0, r0, #1
 8006c3e:	d003      	beq.n	8006c48 <__lo0bits+0x56>
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4770      	bx	lr
 8006c44:	2000      	movs	r0, #0
 8006c46:	4770      	bx	lr
 8006c48:	2020      	movs	r0, #32
 8006c4a:	4770      	bx	lr

08006c4c <__i2b>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	460c      	mov	r4, r1
 8006c50:	2101      	movs	r1, #1
 8006c52:	f7ff ff07 	bl	8006a64 <_Balloc>
 8006c56:	4602      	mov	r2, r0
 8006c58:	b928      	cbnz	r0, 8006c66 <__i2b+0x1a>
 8006c5a:	4b05      	ldr	r3, [pc, #20]	@ (8006c70 <__i2b+0x24>)
 8006c5c:	4805      	ldr	r0, [pc, #20]	@ (8006c74 <__i2b+0x28>)
 8006c5e:	f240 1145 	movw	r1, #325	@ 0x145
 8006c62:	f000 fcfb 	bl	800765c <__assert_func>
 8006c66:	2301      	movs	r3, #1
 8006c68:	6144      	str	r4, [r0, #20]
 8006c6a:	6103      	str	r3, [r0, #16]
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	08007990 	.word	0x08007990
 8006c74:	080079a1 	.word	0x080079a1

08006c78 <__multiply>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	4617      	mov	r7, r2
 8006c7e:	690a      	ldr	r2, [r1, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	bfa8      	it	ge
 8006c86:	463b      	movge	r3, r7
 8006c88:	4689      	mov	r9, r1
 8006c8a:	bfa4      	itt	ge
 8006c8c:	460f      	movge	r7, r1
 8006c8e:	4699      	movge	r9, r3
 8006c90:	693d      	ldr	r5, [r7, #16]
 8006c92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	eb05 060a 	add.w	r6, r5, sl
 8006c9e:	42b3      	cmp	r3, r6
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	bfb8      	it	lt
 8006ca4:	3101      	addlt	r1, #1
 8006ca6:	f7ff fedd 	bl	8006a64 <_Balloc>
 8006caa:	b930      	cbnz	r0, 8006cba <__multiply+0x42>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b41      	ldr	r3, [pc, #260]	@ (8006db4 <__multiply+0x13c>)
 8006cb0:	4841      	ldr	r0, [pc, #260]	@ (8006db8 <__multiply+0x140>)
 8006cb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cb6:	f000 fcd1 	bl	800765c <__assert_func>
 8006cba:	f100 0414 	add.w	r4, r0, #20
 8006cbe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4573      	cmp	r3, lr
 8006cc8:	d320      	bcc.n	8006d0c <__multiply+0x94>
 8006cca:	f107 0814 	add.w	r8, r7, #20
 8006cce:	f109 0114 	add.w	r1, r9, #20
 8006cd2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006cd6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	1beb      	subs	r3, r5, r7
 8006cde:	3b15      	subs	r3, #21
 8006ce0:	f023 0303 	bic.w	r3, r3, #3
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	3715      	adds	r7, #21
 8006ce8:	42bd      	cmp	r5, r7
 8006cea:	bf38      	it	cc
 8006cec:	2304      	movcc	r3, #4
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	9103      	str	r1, [sp, #12]
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	d80c      	bhi.n	8006d12 <__multiply+0x9a>
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	dd03      	ble.n	8006d04 <__multiply+0x8c>
 8006cfc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d055      	beq.n	8006db0 <__multiply+0x138>
 8006d04:	6106      	str	r6, [r0, #16]
 8006d06:	b005      	add	sp, #20
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	f843 2b04 	str.w	r2, [r3], #4
 8006d10:	e7d9      	b.n	8006cc6 <__multiply+0x4e>
 8006d12:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d16:	f1ba 0f00 	cmp.w	sl, #0
 8006d1a:	d01f      	beq.n	8006d5c <__multiply+0xe4>
 8006d1c:	46c4      	mov	ip, r8
 8006d1e:	46a1      	mov	r9, r4
 8006d20:	2700      	movs	r7, #0
 8006d22:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d26:	f8d9 3000 	ldr.w	r3, [r9]
 8006d2a:	fa1f fb82 	uxth.w	fp, r2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d34:	443b      	add	r3, r7
 8006d36:	f8d9 7000 	ldr.w	r7, [r9]
 8006d3a:	0c12      	lsrs	r2, r2, #16
 8006d3c:	0c3f      	lsrs	r7, r7, #16
 8006d3e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006d42:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d4c:	4565      	cmp	r5, ip
 8006d4e:	f849 3b04 	str.w	r3, [r9], #4
 8006d52:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006d56:	d8e4      	bhi.n	8006d22 <__multiply+0xaa>
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	50e7      	str	r7, [r4, r3]
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d62:	3104      	adds	r1, #4
 8006d64:	f1b9 0f00 	cmp.w	r9, #0
 8006d68:	d020      	beq.n	8006dac <__multiply+0x134>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	4647      	mov	r7, r8
 8006d6e:	46a4      	mov	ip, r4
 8006d70:	f04f 0a00 	mov.w	sl, #0
 8006d74:	f8b7 b000 	ldrh.w	fp, [r7]
 8006d78:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8006d80:	4452      	add	r2, sl
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d88:	f84c 3b04 	str.w	r3, [ip], #4
 8006d8c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006d90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d94:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d98:	fb09 330a 	mla	r3, r9, sl, r3
 8006d9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006da0:	42bd      	cmp	r5, r7
 8006da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006da6:	d8e5      	bhi.n	8006d74 <__multiply+0xfc>
 8006da8:	9a01      	ldr	r2, [sp, #4]
 8006daa:	50a3      	str	r3, [r4, r2]
 8006dac:	3404      	adds	r4, #4
 8006dae:	e79f      	b.n	8006cf0 <__multiply+0x78>
 8006db0:	3e01      	subs	r6, #1
 8006db2:	e7a1      	b.n	8006cf8 <__multiply+0x80>
 8006db4:	08007990 	.word	0x08007990
 8006db8:	080079a1 	.word	0x080079a1

08006dbc <__pow5mult>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	f012 0203 	ands.w	r2, r2, #3
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	460e      	mov	r6, r1
 8006dca:	d007      	beq.n	8006ddc <__pow5mult+0x20>
 8006dcc:	4c25      	ldr	r4, [pc, #148]	@ (8006e64 <__pow5mult+0xa8>)
 8006dce:	3a01      	subs	r2, #1
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dd6:	f7ff fea7 	bl	8006b28 <__multadd>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	10ad      	asrs	r5, r5, #2
 8006dde:	d03d      	beq.n	8006e5c <__pow5mult+0xa0>
 8006de0:	69fc      	ldr	r4, [r7, #28]
 8006de2:	b97c      	cbnz	r4, 8006e04 <__pow5mult+0x48>
 8006de4:	2010      	movs	r0, #16
 8006de6:	f7ff fd87 	bl	80068f8 <malloc>
 8006dea:	4602      	mov	r2, r0
 8006dec:	61f8      	str	r0, [r7, #28]
 8006dee:	b928      	cbnz	r0, 8006dfc <__pow5mult+0x40>
 8006df0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e68 <__pow5mult+0xac>)
 8006df2:	481e      	ldr	r0, [pc, #120]	@ (8006e6c <__pow5mult+0xb0>)
 8006df4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006df8:	f000 fc30 	bl	800765c <__assert_func>
 8006dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e00:	6004      	str	r4, [r0, #0]
 8006e02:	60c4      	str	r4, [r0, #12]
 8006e04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e0c:	b94c      	cbnz	r4, 8006e22 <__pow5mult+0x66>
 8006e0e:	f240 2171 	movw	r1, #625	@ 0x271
 8006e12:	4638      	mov	r0, r7
 8006e14:	f7ff ff1a 	bl	8006c4c <__i2b>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e1e:	4604      	mov	r4, r0
 8006e20:	6003      	str	r3, [r0, #0]
 8006e22:	f04f 0900 	mov.w	r9, #0
 8006e26:	07eb      	lsls	r3, r5, #31
 8006e28:	d50a      	bpl.n	8006e40 <__pow5mult+0x84>
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7ff ff22 	bl	8006c78 <__multiply>
 8006e34:	4631      	mov	r1, r6
 8006e36:	4680      	mov	r8, r0
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff fe53 	bl	8006ae4 <_Bfree>
 8006e3e:	4646      	mov	r6, r8
 8006e40:	106d      	asrs	r5, r5, #1
 8006e42:	d00b      	beq.n	8006e5c <__pow5mult+0xa0>
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	b938      	cbnz	r0, 8006e58 <__pow5mult+0x9c>
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f7ff ff13 	bl	8006c78 <__multiply>
 8006e52:	6020      	str	r0, [r4, #0]
 8006e54:	f8c0 9000 	str.w	r9, [r0]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e7e4      	b.n	8006e26 <__pow5mult+0x6a>
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	bf00      	nop
 8006e64:	08007a54 	.word	0x08007a54
 8006e68:	08007921 	.word	0x08007921
 8006e6c:	080079a1 	.word	0x080079a1

08006e70 <__lshift>:
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	6849      	ldr	r1, [r1, #4]
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e7e:	68a3      	ldr	r3, [r4, #8]
 8006e80:	4607      	mov	r7, r0
 8006e82:	4691      	mov	r9, r2
 8006e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e88:	f108 0601 	add.w	r6, r8, #1
 8006e8c:	42b3      	cmp	r3, r6
 8006e8e:	db0b      	blt.n	8006ea8 <__lshift+0x38>
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff fde7 	bl	8006a64 <_Balloc>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b948      	cbnz	r0, 8006eae <__lshift+0x3e>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <__lshift+0xd0>)
 8006e9e:	4829      	ldr	r0, [pc, #164]	@ (8006f44 <__lshift+0xd4>)
 8006ea0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ea4:	f000 fbda 	bl	800765c <__assert_func>
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	e7ee      	b.n	8006e8c <__lshift+0x1c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f100 0114 	add.w	r1, r0, #20
 8006eb4:	f100 0210 	add.w	r2, r0, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	4553      	cmp	r3, sl
 8006ebc:	db33      	blt.n	8006f26 <__lshift+0xb6>
 8006ebe:	6920      	ldr	r0, [r4, #16]
 8006ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ec4:	f104 0314 	add.w	r3, r4, #20
 8006ec8:	f019 091f 	ands.w	r9, r9, #31
 8006ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ed4:	d02b      	beq.n	8006f2e <__lshift+0xbe>
 8006ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8006eda:	468a      	mov	sl, r1
 8006edc:	2200      	movs	r2, #0
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ee4:	4310      	orrs	r0, r2
 8006ee6:	f84a 0b04 	str.w	r0, [sl], #4
 8006eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eee:	459c      	cmp	ip, r3
 8006ef0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ef4:	d8f3      	bhi.n	8006ede <__lshift+0x6e>
 8006ef6:	ebac 0304 	sub.w	r3, ip, r4
 8006efa:	3b15      	subs	r3, #21
 8006efc:	f023 0303 	bic.w	r3, r3, #3
 8006f00:	3304      	adds	r3, #4
 8006f02:	f104 0015 	add.w	r0, r4, #21
 8006f06:	4560      	cmp	r0, ip
 8006f08:	bf88      	it	hi
 8006f0a:	2304      	movhi	r3, #4
 8006f0c:	50ca      	str	r2, [r1, r3]
 8006f0e:	b10a      	cbz	r2, 8006f14 <__lshift+0xa4>
 8006f10:	f108 0602 	add.w	r6, r8, #2
 8006f14:	3e01      	subs	r6, #1
 8006f16:	4638      	mov	r0, r7
 8006f18:	612e      	str	r6, [r5, #16]
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	f7ff fde2 	bl	8006ae4 <_Bfree>
 8006f20:	4628      	mov	r0, r5
 8006f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	e7c5      	b.n	8006eba <__lshift+0x4a>
 8006f2e:	3904      	subs	r1, #4
 8006f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f34:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f38:	459c      	cmp	ip, r3
 8006f3a:	d8f9      	bhi.n	8006f30 <__lshift+0xc0>
 8006f3c:	e7ea      	b.n	8006f14 <__lshift+0xa4>
 8006f3e:	bf00      	nop
 8006f40:	08007990 	.word	0x08007990
 8006f44:	080079a1 	.word	0x080079a1

08006f48 <__mcmp>:
 8006f48:	690a      	ldr	r2, [r1, #16]
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6900      	ldr	r0, [r0, #16]
 8006f4e:	1a80      	subs	r0, r0, r2
 8006f50:	b530      	push	{r4, r5, lr}
 8006f52:	d10e      	bne.n	8006f72 <__mcmp+0x2a>
 8006f54:	3314      	adds	r3, #20
 8006f56:	3114      	adds	r1, #20
 8006f58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f68:	4295      	cmp	r5, r2
 8006f6a:	d003      	beq.n	8006f74 <__mcmp+0x2c>
 8006f6c:	d205      	bcs.n	8006f7a <__mcmp+0x32>
 8006f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f72:	bd30      	pop	{r4, r5, pc}
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d3f3      	bcc.n	8006f60 <__mcmp+0x18>
 8006f78:	e7fb      	b.n	8006f72 <__mcmp+0x2a>
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	e7f9      	b.n	8006f72 <__mcmp+0x2a>
	...

08006f80 <__mdiff>:
 8006f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	4689      	mov	r9, r1
 8006f86:	4606      	mov	r6, r0
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4648      	mov	r0, r9
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	f7ff ffdb 	bl	8006f48 <__mcmp>
 8006f92:	1e05      	subs	r5, r0, #0
 8006f94:	d112      	bne.n	8006fbc <__mdiff+0x3c>
 8006f96:	4629      	mov	r1, r5
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7ff fd63 	bl	8006a64 <_Balloc>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	b928      	cbnz	r0, 8006fae <__mdiff+0x2e>
 8006fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80070a0 <__mdiff+0x120>)
 8006fa4:	f240 2137 	movw	r1, #567	@ 0x237
 8006fa8:	483e      	ldr	r0, [pc, #248]	@ (80070a4 <__mdiff+0x124>)
 8006faa:	f000 fb57 	bl	800765c <__assert_func>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	bfbc      	itt	lt
 8006fbe:	464b      	movlt	r3, r9
 8006fc0:	46a1      	movlt	r9, r4
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fc8:	bfba      	itte	lt
 8006fca:	461c      	movlt	r4, r3
 8006fcc:	2501      	movlt	r5, #1
 8006fce:	2500      	movge	r5, #0
 8006fd0:	f7ff fd48 	bl	8006a64 <_Balloc>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	b918      	cbnz	r0, 8006fe0 <__mdiff+0x60>
 8006fd8:	4b31      	ldr	r3, [pc, #196]	@ (80070a0 <__mdiff+0x120>)
 8006fda:	f240 2145 	movw	r1, #581	@ 0x245
 8006fde:	e7e3      	b.n	8006fa8 <__mdiff+0x28>
 8006fe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fe4:	6926      	ldr	r6, [r4, #16]
 8006fe6:	60c5      	str	r5, [r0, #12]
 8006fe8:	f109 0310 	add.w	r3, r9, #16
 8006fec:	f109 0514 	add.w	r5, r9, #20
 8006ff0:	f104 0e14 	add.w	lr, r4, #20
 8006ff4:	f100 0b14 	add.w	fp, r0, #20
 8006ff8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ffc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	46d9      	mov	r9, fp
 8007004:	f04f 0c00 	mov.w	ip, #0
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800700e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	fa1f f38a 	uxth.w	r3, sl
 8007018:	4619      	mov	r1, r3
 800701a:	b283      	uxth	r3, r0
 800701c:	1acb      	subs	r3, r1, r3
 800701e:	0c00      	lsrs	r0, r0, #16
 8007020:	4463      	add	r3, ip
 8007022:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007026:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800702a:	b29b      	uxth	r3, r3
 800702c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007030:	4576      	cmp	r6, lr
 8007032:	f849 3b04 	str.w	r3, [r9], #4
 8007036:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800703a:	d8e5      	bhi.n	8007008 <__mdiff+0x88>
 800703c:	1b33      	subs	r3, r6, r4
 800703e:	3b15      	subs	r3, #21
 8007040:	f023 0303 	bic.w	r3, r3, #3
 8007044:	3415      	adds	r4, #21
 8007046:	3304      	adds	r3, #4
 8007048:	42a6      	cmp	r6, r4
 800704a:	bf38      	it	cc
 800704c:	2304      	movcc	r3, #4
 800704e:	441d      	add	r5, r3
 8007050:	445b      	add	r3, fp
 8007052:	461e      	mov	r6, r3
 8007054:	462c      	mov	r4, r5
 8007056:	4544      	cmp	r4, r8
 8007058:	d30e      	bcc.n	8007078 <__mdiff+0xf8>
 800705a:	f108 0103 	add.w	r1, r8, #3
 800705e:	1b49      	subs	r1, r1, r5
 8007060:	f021 0103 	bic.w	r1, r1, #3
 8007064:	3d03      	subs	r5, #3
 8007066:	45a8      	cmp	r8, r5
 8007068:	bf38      	it	cc
 800706a:	2100      	movcc	r1, #0
 800706c:	440b      	add	r3, r1
 800706e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007072:	b191      	cbz	r1, 800709a <__mdiff+0x11a>
 8007074:	6117      	str	r7, [r2, #16]
 8007076:	e79d      	b.n	8006fb4 <__mdiff+0x34>
 8007078:	f854 1b04 	ldr.w	r1, [r4], #4
 800707c:	46e6      	mov	lr, ip
 800707e:	0c08      	lsrs	r0, r1, #16
 8007080:	fa1c fc81 	uxtah	ip, ip, r1
 8007084:	4471      	add	r1, lr
 8007086:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800708a:	b289      	uxth	r1, r1
 800708c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007090:	f846 1b04 	str.w	r1, [r6], #4
 8007094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007098:	e7dd      	b.n	8007056 <__mdiff+0xd6>
 800709a:	3f01      	subs	r7, #1
 800709c:	e7e7      	b.n	800706e <__mdiff+0xee>
 800709e:	bf00      	nop
 80070a0:	08007990 	.word	0x08007990
 80070a4:	080079a1 	.word	0x080079a1

080070a8 <__d2b>:
 80070a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070ac:	460f      	mov	r7, r1
 80070ae:	2101      	movs	r1, #1
 80070b0:	ec59 8b10 	vmov	r8, r9, d0
 80070b4:	4616      	mov	r6, r2
 80070b6:	f7ff fcd5 	bl	8006a64 <_Balloc>
 80070ba:	4604      	mov	r4, r0
 80070bc:	b930      	cbnz	r0, 80070cc <__d2b+0x24>
 80070be:	4602      	mov	r2, r0
 80070c0:	4b23      	ldr	r3, [pc, #140]	@ (8007150 <__d2b+0xa8>)
 80070c2:	4824      	ldr	r0, [pc, #144]	@ (8007154 <__d2b+0xac>)
 80070c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80070c8:	f000 fac8 	bl	800765c <__assert_func>
 80070cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070d4:	b10d      	cbz	r5, 80070da <__d2b+0x32>
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	f1b8 0300 	subs.w	r3, r8, #0
 80070e0:	d023      	beq.n	800712a <__d2b+0x82>
 80070e2:	4668      	mov	r0, sp
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	f7ff fd84 	bl	8006bf2 <__lo0bits>
 80070ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070ee:	b1d0      	cbz	r0, 8007126 <__d2b+0x7e>
 80070f0:	f1c0 0320 	rsb	r3, r0, #32
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	430b      	orrs	r3, r1
 80070fa:	40c2      	lsrs	r2, r0
 80070fc:	6163      	str	r3, [r4, #20]
 80070fe:	9201      	str	r2, [sp, #4]
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	61a3      	str	r3, [r4, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	bf0c      	ite	eq
 8007108:	2201      	moveq	r2, #1
 800710a:	2202      	movne	r2, #2
 800710c:	6122      	str	r2, [r4, #16]
 800710e:	b1a5      	cbz	r5, 800713a <__d2b+0x92>
 8007110:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007114:	4405      	add	r5, r0
 8007116:	603d      	str	r5, [r7, #0]
 8007118:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800711c:	6030      	str	r0, [r6, #0]
 800711e:	4620      	mov	r0, r4
 8007120:	b003      	add	sp, #12
 8007122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007126:	6161      	str	r1, [r4, #20]
 8007128:	e7ea      	b.n	8007100 <__d2b+0x58>
 800712a:	a801      	add	r0, sp, #4
 800712c:	f7ff fd61 	bl	8006bf2 <__lo0bits>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	6163      	str	r3, [r4, #20]
 8007134:	3020      	adds	r0, #32
 8007136:	2201      	movs	r2, #1
 8007138:	e7e8      	b.n	800710c <__d2b+0x64>
 800713a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800713e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007142:	6038      	str	r0, [r7, #0]
 8007144:	6918      	ldr	r0, [r3, #16]
 8007146:	f7ff fd35 	bl	8006bb4 <__hi0bits>
 800714a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800714e:	e7e5      	b.n	800711c <__d2b+0x74>
 8007150:	08007990 	.word	0x08007990
 8007154:	080079a1 	.word	0x080079a1

08007158 <__sfputc_r>:
 8007158:	6893      	ldr	r3, [r2, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	b410      	push	{r4}
 8007160:	6093      	str	r3, [r2, #8]
 8007162:	da08      	bge.n	8007176 <__sfputc_r+0x1e>
 8007164:	6994      	ldr	r4, [r2, #24]
 8007166:	42a3      	cmp	r3, r4
 8007168:	db01      	blt.n	800716e <__sfputc_r+0x16>
 800716a:	290a      	cmp	r1, #10
 800716c:	d103      	bne.n	8007176 <__sfputc_r+0x1e>
 800716e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007172:	f7fe bc6e 	b.w	8005a52 <__swbuf_r>
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	1c58      	adds	r0, r3, #1
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	7019      	strb	r1, [r3, #0]
 800717e:	4608      	mov	r0, r1
 8007180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007184:	4770      	bx	lr

08007186 <__sfputs_r>:
 8007186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	4614      	mov	r4, r2
 800718e:	18d5      	adds	r5, r2, r3
 8007190:	42ac      	cmp	r4, r5
 8007192:	d101      	bne.n	8007198 <__sfputs_r+0x12>
 8007194:	2000      	movs	r0, #0
 8007196:	e007      	b.n	80071a8 <__sfputs_r+0x22>
 8007198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719c:	463a      	mov	r2, r7
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ffda 	bl	8007158 <__sfputc_r>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d1f3      	bne.n	8007190 <__sfputs_r+0xa>
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ac <_vfiprintf_r>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460d      	mov	r5, r1
 80071b2:	b09d      	sub	sp, #116	@ 0x74
 80071b4:	4614      	mov	r4, r2
 80071b6:	4698      	mov	r8, r3
 80071b8:	4606      	mov	r6, r0
 80071ba:	b118      	cbz	r0, 80071c4 <_vfiprintf_r+0x18>
 80071bc:	6a03      	ldr	r3, [r0, #32]
 80071be:	b90b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x18>
 80071c0:	f7fe fb70 	bl	80058a4 <__sinit>
 80071c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071c6:	07d9      	lsls	r1, r3, #31
 80071c8:	d405      	bmi.n	80071d6 <_vfiprintf_r+0x2a>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	059a      	lsls	r2, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_vfiprintf_r+0x2a>
 80071d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071d2:	f7fe fd50 	bl	8005c76 <__retarget_lock_acquire_recursive>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	071b      	lsls	r3, r3, #28
 80071da:	d501      	bpl.n	80071e0 <_vfiprintf_r+0x34>
 80071dc:	692b      	ldr	r3, [r5, #16]
 80071de:	b99b      	cbnz	r3, 8007208 <_vfiprintf_r+0x5c>
 80071e0:	4629      	mov	r1, r5
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7fe fc74 	bl	8005ad0 <__swsetup_r>
 80071e8:	b170      	cbz	r0, 8007208 <_vfiprintf_r+0x5c>
 80071ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071ec:	07dc      	lsls	r4, r3, #31
 80071ee:	d504      	bpl.n	80071fa <_vfiprintf_r+0x4e>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	b01d      	add	sp, #116	@ 0x74
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	0598      	lsls	r0, r3, #22
 80071fe:	d4f7      	bmi.n	80071f0 <_vfiprintf_r+0x44>
 8007200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007202:	f7fe fd39 	bl	8005c78 <__retarget_lock_release_recursive>
 8007206:	e7f3      	b.n	80071f0 <_vfiprintf_r+0x44>
 8007208:	2300      	movs	r3, #0
 800720a:	9309      	str	r3, [sp, #36]	@ 0x24
 800720c:	2320      	movs	r3, #32
 800720e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007212:	f8cd 800c 	str.w	r8, [sp, #12]
 8007216:	2330      	movs	r3, #48	@ 0x30
 8007218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073c8 <_vfiprintf_r+0x21c>
 800721c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007220:	f04f 0901 	mov.w	r9, #1
 8007224:	4623      	mov	r3, r4
 8007226:	469a      	mov	sl, r3
 8007228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722c:	b10a      	cbz	r2, 8007232 <_vfiprintf_r+0x86>
 800722e:	2a25      	cmp	r2, #37	@ 0x25
 8007230:	d1f9      	bne.n	8007226 <_vfiprintf_r+0x7a>
 8007232:	ebba 0b04 	subs.w	fp, sl, r4
 8007236:	d00b      	beq.n	8007250 <_vfiprintf_r+0xa4>
 8007238:	465b      	mov	r3, fp
 800723a:	4622      	mov	r2, r4
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f7ff ffa1 	bl	8007186 <__sfputs_r>
 8007244:	3001      	adds	r0, #1
 8007246:	f000 80a7 	beq.w	8007398 <_vfiprintf_r+0x1ec>
 800724a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800724c:	445a      	add	r2, fp
 800724e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007250:	f89a 3000 	ldrb.w	r3, [sl]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 809f 	beq.w	8007398 <_vfiprintf_r+0x1ec>
 800725a:	2300      	movs	r3, #0
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007264:	f10a 0a01 	add.w	sl, sl, #1
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	9307      	str	r3, [sp, #28]
 800726c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007270:	931a      	str	r3, [sp, #104]	@ 0x68
 8007272:	4654      	mov	r4, sl
 8007274:	2205      	movs	r2, #5
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4853      	ldr	r0, [pc, #332]	@ (80073c8 <_vfiprintf_r+0x21c>)
 800727c:	f7f9 f830 	bl	80002e0 <memchr>
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	b9d8      	cbnz	r0, 80072bc <_vfiprintf_r+0x110>
 8007284:	06d1      	lsls	r1, r2, #27
 8007286:	bf44      	itt	mi
 8007288:	2320      	movmi	r3, #32
 800728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800728e:	0713      	lsls	r3, r2, #28
 8007290:	bf44      	itt	mi
 8007292:	232b      	movmi	r3, #43	@ 0x2b
 8007294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007298:	f89a 3000 	ldrb.w	r3, [sl]
 800729c:	2b2a      	cmp	r3, #42	@ 0x2a
 800729e:	d015      	beq.n	80072cc <_vfiprintf_r+0x120>
 80072a0:	9a07      	ldr	r2, [sp, #28]
 80072a2:	4654      	mov	r4, sl
 80072a4:	2000      	movs	r0, #0
 80072a6:	f04f 0c0a 	mov.w	ip, #10
 80072aa:	4621      	mov	r1, r4
 80072ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b0:	3b30      	subs	r3, #48	@ 0x30
 80072b2:	2b09      	cmp	r3, #9
 80072b4:	d94b      	bls.n	800734e <_vfiprintf_r+0x1a2>
 80072b6:	b1b0      	cbz	r0, 80072e6 <_vfiprintf_r+0x13a>
 80072b8:	9207      	str	r2, [sp, #28]
 80072ba:	e014      	b.n	80072e6 <_vfiprintf_r+0x13a>
 80072bc:	eba0 0308 	sub.w	r3, r0, r8
 80072c0:	fa09 f303 	lsl.w	r3, r9, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	46a2      	mov	sl, r4
 80072ca:	e7d2      	b.n	8007272 <_vfiprintf_r+0xc6>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1d19      	adds	r1, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfbb      	ittet	lt
 80072d8:	425b      	neglt	r3, r3
 80072da:	f042 0202 	orrlt.w	r2, r2, #2
 80072de:	9307      	strge	r3, [sp, #28]
 80072e0:	9307      	strlt	r3, [sp, #28]
 80072e2:	bfb8      	it	lt
 80072e4:	9204      	strlt	r2, [sp, #16]
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ea:	d10a      	bne.n	8007302 <_vfiprintf_r+0x156>
 80072ec:	7863      	ldrb	r3, [r4, #1]
 80072ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f0:	d132      	bne.n	8007358 <_vfiprintf_r+0x1ac>
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	1d1a      	adds	r2, r3, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	9203      	str	r2, [sp, #12]
 80072fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072fe:	3402      	adds	r4, #2
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073d8 <_vfiprintf_r+0x22c>
 8007306:	7821      	ldrb	r1, [r4, #0]
 8007308:	2203      	movs	r2, #3
 800730a:	4650      	mov	r0, sl
 800730c:	f7f8 ffe8 	bl	80002e0 <memchr>
 8007310:	b138      	cbz	r0, 8007322 <_vfiprintf_r+0x176>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	eba0 000a 	sub.w	r0, r0, sl
 8007318:	2240      	movs	r2, #64	@ 0x40
 800731a:	4082      	lsls	r2, r0
 800731c:	4313      	orrs	r3, r2
 800731e:	3401      	adds	r4, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4829      	ldr	r0, [pc, #164]	@ (80073cc <_vfiprintf_r+0x220>)
 8007328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800732c:	2206      	movs	r2, #6
 800732e:	f7f8 ffd7 	bl	80002e0 <memchr>
 8007332:	2800      	cmp	r0, #0
 8007334:	d03f      	beq.n	80073b6 <_vfiprintf_r+0x20a>
 8007336:	4b26      	ldr	r3, [pc, #152]	@ (80073d0 <_vfiprintf_r+0x224>)
 8007338:	bb1b      	cbnz	r3, 8007382 <_vfiprintf_r+0x1d6>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	3308      	adds	r3, #8
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007348:	443b      	add	r3, r7
 800734a:	9309      	str	r3, [sp, #36]	@ 0x24
 800734c:	e76a      	b.n	8007224 <_vfiprintf_r+0x78>
 800734e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2001      	movs	r0, #1
 8007356:	e7a8      	b.n	80072aa <_vfiprintf_r+0xfe>
 8007358:	2300      	movs	r3, #0
 800735a:	3401      	adds	r4, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736a:	3a30      	subs	r2, #48	@ 0x30
 800736c:	2a09      	cmp	r2, #9
 800736e:	d903      	bls.n	8007378 <_vfiprintf_r+0x1cc>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0c6      	beq.n	8007302 <_vfiprintf_r+0x156>
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	e7c4      	b.n	8007302 <_vfiprintf_r+0x156>
 8007378:	fb0c 2101 	mla	r1, ip, r1, r2
 800737c:	4604      	mov	r4, r0
 800737e:	2301      	movs	r3, #1
 8007380:	e7f0      	b.n	8007364 <_vfiprintf_r+0x1b8>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <_vfiprintf_r+0x228>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4630      	mov	r0, r6
 800738e:	f7fd fe57 	bl	8005040 <_printf_float>
 8007392:	4607      	mov	r7, r0
 8007394:	1c78      	adds	r0, r7, #1
 8007396:	d1d6      	bne.n	8007346 <_vfiprintf_r+0x19a>
 8007398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d405      	bmi.n	80073aa <_vfiprintf_r+0x1fe>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	059a      	lsls	r2, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_vfiprintf_r+0x1fe>
 80073a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073a6:	f7fe fc67 	bl	8005c78 <__retarget_lock_release_recursive>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	065b      	lsls	r3, r3, #25
 80073ae:	f53f af1f 	bmi.w	80071f0 <_vfiprintf_r+0x44>
 80073b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073b4:	e71e      	b.n	80071f4 <_vfiprintf_r+0x48>
 80073b6:	ab03      	add	r3, sp, #12
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	462a      	mov	r2, r5
 80073bc:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <_vfiprintf_r+0x228>)
 80073be:	a904      	add	r1, sp, #16
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7fe f8c5 	bl	8005550 <_printf_i>
 80073c6:	e7e4      	b.n	8007392 <_vfiprintf_r+0x1e6>
 80073c8:	080079fa 	.word	0x080079fa
 80073cc:	08007a04 	.word	0x08007a04
 80073d0:	08005041 	.word	0x08005041
 80073d4:	08007187 	.word	0x08007187
 80073d8:	08007a00 	.word	0x08007a00

080073dc <__sflush_r>:
 80073dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e4:	0716      	lsls	r6, r2, #28
 80073e6:	4605      	mov	r5, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	d454      	bmi.n	8007496 <__sflush_r+0xba>
 80073ec:	684b      	ldr	r3, [r1, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dc02      	bgt.n	80073f8 <__sflush_r+0x1c>
 80073f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd48      	ble.n	800748a <__sflush_r+0xae>
 80073f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	d045      	beq.n	800748a <__sflush_r+0xae>
 80073fe:	2300      	movs	r3, #0
 8007400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007404:	682f      	ldr	r7, [r5, #0]
 8007406:	6a21      	ldr	r1, [r4, #32]
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	d030      	beq.n	800746e <__sflush_r+0x92>
 800740c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	0759      	lsls	r1, r3, #29
 8007412:	d505      	bpl.n	8007420 <__sflush_r+0x44>
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800741a:	b10b      	cbz	r3, 8007420 <__sflush_r+0x44>
 800741c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007424:	6a21      	ldr	r1, [r4, #32]
 8007426:	4628      	mov	r0, r5
 8007428:	47b0      	blx	r6
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	d106      	bne.n	800743e <__sflush_r+0x62>
 8007430:	6829      	ldr	r1, [r5, #0]
 8007432:	291d      	cmp	r1, #29
 8007434:	d82b      	bhi.n	800748e <__sflush_r+0xb2>
 8007436:	4a2a      	ldr	r2, [pc, #168]	@ (80074e0 <__sflush_r+0x104>)
 8007438:	40ca      	lsrs	r2, r1
 800743a:	07d6      	lsls	r6, r2, #31
 800743c:	d527      	bpl.n	800748e <__sflush_r+0xb2>
 800743e:	2200      	movs	r2, #0
 8007440:	6062      	str	r2, [r4, #4]
 8007442:	04d9      	lsls	r1, r3, #19
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	d504      	bpl.n	8007454 <__sflush_r+0x78>
 800744a:	1c42      	adds	r2, r0, #1
 800744c:	d101      	bne.n	8007452 <__sflush_r+0x76>
 800744e:	682b      	ldr	r3, [r5, #0]
 8007450:	b903      	cbnz	r3, 8007454 <__sflush_r+0x78>
 8007452:	6560      	str	r0, [r4, #84]	@ 0x54
 8007454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007456:	602f      	str	r7, [r5, #0]
 8007458:	b1b9      	cbz	r1, 800748a <__sflush_r+0xae>
 800745a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800745e:	4299      	cmp	r1, r3
 8007460:	d002      	beq.n	8007468 <__sflush_r+0x8c>
 8007462:	4628      	mov	r0, r5
 8007464:	f7ff f9fe 	bl	8006864 <_free_r>
 8007468:	2300      	movs	r3, #0
 800746a:	6363      	str	r3, [r4, #52]	@ 0x34
 800746c:	e00d      	b.n	800748a <__sflush_r+0xae>
 800746e:	2301      	movs	r3, #1
 8007470:	4628      	mov	r0, r5
 8007472:	47b0      	blx	r6
 8007474:	4602      	mov	r2, r0
 8007476:	1c50      	adds	r0, r2, #1
 8007478:	d1c9      	bne.n	800740e <__sflush_r+0x32>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0c6      	beq.n	800740e <__sflush_r+0x32>
 8007480:	2b1d      	cmp	r3, #29
 8007482:	d001      	beq.n	8007488 <__sflush_r+0xac>
 8007484:	2b16      	cmp	r3, #22
 8007486:	d11e      	bne.n	80074c6 <__sflush_r+0xea>
 8007488:	602f      	str	r7, [r5, #0]
 800748a:	2000      	movs	r0, #0
 800748c:	e022      	b.n	80074d4 <__sflush_r+0xf8>
 800748e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007492:	b21b      	sxth	r3, r3
 8007494:	e01b      	b.n	80074ce <__sflush_r+0xf2>
 8007496:	690f      	ldr	r7, [r1, #16]
 8007498:	2f00      	cmp	r7, #0
 800749a:	d0f6      	beq.n	800748a <__sflush_r+0xae>
 800749c:	0793      	lsls	r3, r2, #30
 800749e:	680e      	ldr	r6, [r1, #0]
 80074a0:	bf08      	it	eq
 80074a2:	694b      	ldreq	r3, [r1, #20]
 80074a4:	600f      	str	r7, [r1, #0]
 80074a6:	bf18      	it	ne
 80074a8:	2300      	movne	r3, #0
 80074aa:	eba6 0807 	sub.w	r8, r6, r7
 80074ae:	608b      	str	r3, [r1, #8]
 80074b0:	f1b8 0f00 	cmp.w	r8, #0
 80074b4:	dde9      	ble.n	800748a <__sflush_r+0xae>
 80074b6:	6a21      	ldr	r1, [r4, #32]
 80074b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074ba:	4643      	mov	r3, r8
 80074bc:	463a      	mov	r2, r7
 80074be:	4628      	mov	r0, r5
 80074c0:	47b0      	blx	r6
 80074c2:	2800      	cmp	r0, #0
 80074c4:	dc08      	bgt.n	80074d8 <__sflush_r+0xfc>
 80074c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d8:	4407      	add	r7, r0
 80074da:	eba8 0800 	sub.w	r8, r8, r0
 80074de:	e7e7      	b.n	80074b0 <__sflush_r+0xd4>
 80074e0:	20400001 	.word	0x20400001

080074e4 <_fflush_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	690b      	ldr	r3, [r1, #16]
 80074e8:	4605      	mov	r5, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	b913      	cbnz	r3, 80074f4 <_fflush_r+0x10>
 80074ee:	2500      	movs	r5, #0
 80074f0:	4628      	mov	r0, r5
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	b118      	cbz	r0, 80074fe <_fflush_r+0x1a>
 80074f6:	6a03      	ldr	r3, [r0, #32]
 80074f8:	b90b      	cbnz	r3, 80074fe <_fflush_r+0x1a>
 80074fa:	f7fe f9d3 	bl	80058a4 <__sinit>
 80074fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0f3      	beq.n	80074ee <_fflush_r+0xa>
 8007506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007508:	07d0      	lsls	r0, r2, #31
 800750a:	d404      	bmi.n	8007516 <_fflush_r+0x32>
 800750c:	0599      	lsls	r1, r3, #22
 800750e:	d402      	bmi.n	8007516 <_fflush_r+0x32>
 8007510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007512:	f7fe fbb0 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8007516:	4628      	mov	r0, r5
 8007518:	4621      	mov	r1, r4
 800751a:	f7ff ff5f 	bl	80073dc <__sflush_r>
 800751e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007520:	07da      	lsls	r2, r3, #31
 8007522:	4605      	mov	r5, r0
 8007524:	d4e4      	bmi.n	80074f0 <_fflush_r+0xc>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	059b      	lsls	r3, r3, #22
 800752a:	d4e1      	bmi.n	80074f0 <_fflush_r+0xc>
 800752c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800752e:	f7fe fba3 	bl	8005c78 <__retarget_lock_release_recursive>
 8007532:	e7dd      	b.n	80074f0 <_fflush_r+0xc>

08007534 <__swhatbuf_r>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	2900      	cmp	r1, #0
 800753e:	b096      	sub	sp, #88	@ 0x58
 8007540:	4615      	mov	r5, r2
 8007542:	461e      	mov	r6, r3
 8007544:	da0d      	bge.n	8007562 <__swhatbuf_r+0x2e>
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800754c:	f04f 0100 	mov.w	r1, #0
 8007550:	bf14      	ite	ne
 8007552:	2340      	movne	r3, #64	@ 0x40
 8007554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007558:	2000      	movs	r0, #0
 800755a:	6031      	str	r1, [r6, #0]
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	b016      	add	sp, #88	@ 0x58
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	466a      	mov	r2, sp
 8007564:	f000 f848 	bl	80075f8 <_fstat_r>
 8007568:	2800      	cmp	r0, #0
 800756a:	dbec      	blt.n	8007546 <__swhatbuf_r+0x12>
 800756c:	9901      	ldr	r1, [sp, #4]
 800756e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007576:	4259      	negs	r1, r3
 8007578:	4159      	adcs	r1, r3
 800757a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800757e:	e7eb      	b.n	8007558 <__swhatbuf_r+0x24>

08007580 <__smakebuf_r>:
 8007580:	898b      	ldrh	r3, [r1, #12]
 8007582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007584:	079d      	lsls	r5, r3, #30
 8007586:	4606      	mov	r6, r0
 8007588:	460c      	mov	r4, r1
 800758a:	d507      	bpl.n	800759c <__smakebuf_r+0x1c>
 800758c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	2301      	movs	r3, #1
 8007596:	6163      	str	r3, [r4, #20]
 8007598:	b003      	add	sp, #12
 800759a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800759c:	ab01      	add	r3, sp, #4
 800759e:	466a      	mov	r2, sp
 80075a0:	f7ff ffc8 	bl	8007534 <__swhatbuf_r>
 80075a4:	9f00      	ldr	r7, [sp, #0]
 80075a6:	4605      	mov	r5, r0
 80075a8:	4639      	mov	r1, r7
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7ff f9ce 	bl	800694c <_malloc_r>
 80075b0:	b948      	cbnz	r0, 80075c6 <__smakebuf_r+0x46>
 80075b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b6:	059a      	lsls	r2, r3, #22
 80075b8:	d4ee      	bmi.n	8007598 <__smakebuf_r+0x18>
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	f043 0302 	orr.w	r3, r3, #2
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	e7e2      	b.n	800758c <__smakebuf_r+0xc>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	6020      	str	r0, [r4, #0]
 80075ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075d6:	b15b      	cbz	r3, 80075f0 <__smakebuf_r+0x70>
 80075d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075dc:	4630      	mov	r0, r6
 80075de:	f000 f81d 	bl	800761c <_isatty_r>
 80075e2:	b128      	cbz	r0, 80075f0 <__smakebuf_r+0x70>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	431d      	orrs	r5, r3
 80075f4:	81a5      	strh	r5, [r4, #12]
 80075f6:	e7cf      	b.n	8007598 <__smakebuf_r+0x18>

080075f8 <_fstat_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d07      	ldr	r5, [pc, #28]	@ (8007618 <_fstat_r+0x20>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f7f9 f983 	bl	8000910 <_fstat>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d102      	bne.n	8007614 <_fstat_r+0x1c>
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	b103      	cbz	r3, 8007614 <_fstat_r+0x1c>
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	24000420 	.word	0x24000420

0800761c <_isatty_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4d06      	ldr	r5, [pc, #24]	@ (8007638 <_isatty_r+0x1c>)
 8007620:	2300      	movs	r3, #0
 8007622:	4604      	mov	r4, r0
 8007624:	4608      	mov	r0, r1
 8007626:	602b      	str	r3, [r5, #0]
 8007628:	f7f9 f982 	bl	8000930 <_isatty>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_isatty_r+0x1a>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_isatty_r+0x1a>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	24000420 	.word	0x24000420

0800763c <_sbrk_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d06      	ldr	r5, [pc, #24]	@ (8007658 <_sbrk_r+0x1c>)
 8007640:	2300      	movs	r3, #0
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	f7f9 f98a 	bl	8000960 <_sbrk>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_sbrk_r+0x1a>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_sbrk_r+0x1a>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	24000420 	.word	0x24000420

0800765c <__assert_func>:
 800765c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800765e:	4614      	mov	r4, r2
 8007660:	461a      	mov	r2, r3
 8007662:	4b09      	ldr	r3, [pc, #36]	@ (8007688 <__assert_func+0x2c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4605      	mov	r5, r0
 8007668:	68d8      	ldr	r0, [r3, #12]
 800766a:	b14c      	cbz	r4, 8007680 <__assert_func+0x24>
 800766c:	4b07      	ldr	r3, [pc, #28]	@ (800768c <__assert_func+0x30>)
 800766e:	9100      	str	r1, [sp, #0]
 8007670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007674:	4906      	ldr	r1, [pc, #24]	@ (8007690 <__assert_func+0x34>)
 8007676:	462b      	mov	r3, r5
 8007678:	f000 f842 	bl	8007700 <fiprintf>
 800767c:	f000 f852 	bl	8007724 <abort>
 8007680:	4b04      	ldr	r3, [pc, #16]	@ (8007694 <__assert_func+0x38>)
 8007682:	461c      	mov	r4, r3
 8007684:	e7f3      	b.n	800766e <__assert_func+0x12>
 8007686:	bf00      	nop
 8007688:	24000048 	.word	0x24000048
 800768c:	08007a15 	.word	0x08007a15
 8007690:	08007a22 	.word	0x08007a22
 8007694:	08007a50 	.word	0x08007a50

08007698 <_calloc_r>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	fba1 5402 	umull	r5, r4, r1, r2
 800769e:	b934      	cbnz	r4, 80076ae <_calloc_r+0x16>
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7ff f953 	bl	800694c <_malloc_r>
 80076a6:	4606      	mov	r6, r0
 80076a8:	b928      	cbnz	r0, 80076b6 <_calloc_r+0x1e>
 80076aa:	4630      	mov	r0, r6
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	220c      	movs	r2, #12
 80076b0:	6002      	str	r2, [r0, #0]
 80076b2:	2600      	movs	r6, #0
 80076b4:	e7f9      	b.n	80076aa <_calloc_r+0x12>
 80076b6:	462a      	mov	r2, r5
 80076b8:	4621      	mov	r1, r4
 80076ba:	f7fe fa5f 	bl	8005b7c <memset>
 80076be:	e7f4      	b.n	80076aa <_calloc_r+0x12>

080076c0 <__ascii_mbtowc>:
 80076c0:	b082      	sub	sp, #8
 80076c2:	b901      	cbnz	r1, 80076c6 <__ascii_mbtowc+0x6>
 80076c4:	a901      	add	r1, sp, #4
 80076c6:	b142      	cbz	r2, 80076da <__ascii_mbtowc+0x1a>
 80076c8:	b14b      	cbz	r3, 80076de <__ascii_mbtowc+0x1e>
 80076ca:	7813      	ldrb	r3, [r2, #0]
 80076cc:	600b      	str	r3, [r1, #0]
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	1e10      	subs	r0, r2, #0
 80076d2:	bf18      	it	ne
 80076d4:	2001      	movne	r0, #1
 80076d6:	b002      	add	sp, #8
 80076d8:	4770      	bx	lr
 80076da:	4610      	mov	r0, r2
 80076dc:	e7fb      	b.n	80076d6 <__ascii_mbtowc+0x16>
 80076de:	f06f 0001 	mvn.w	r0, #1
 80076e2:	e7f8      	b.n	80076d6 <__ascii_mbtowc+0x16>

080076e4 <__ascii_wctomb>:
 80076e4:	4603      	mov	r3, r0
 80076e6:	4608      	mov	r0, r1
 80076e8:	b141      	cbz	r1, 80076fc <__ascii_wctomb+0x18>
 80076ea:	2aff      	cmp	r2, #255	@ 0xff
 80076ec:	d904      	bls.n	80076f8 <__ascii_wctomb+0x14>
 80076ee:	228a      	movs	r2, #138	@ 0x8a
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295
 80076f6:	4770      	bx	lr
 80076f8:	700a      	strb	r2, [r1, #0]
 80076fa:	2001      	movs	r0, #1
 80076fc:	4770      	bx	lr
	...

08007700 <fiprintf>:
 8007700:	b40e      	push	{r1, r2, r3}
 8007702:	b503      	push	{r0, r1, lr}
 8007704:	4601      	mov	r1, r0
 8007706:	ab03      	add	r3, sp, #12
 8007708:	4805      	ldr	r0, [pc, #20]	@ (8007720 <fiprintf+0x20>)
 800770a:	f853 2b04 	ldr.w	r2, [r3], #4
 800770e:	6800      	ldr	r0, [r0, #0]
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	f7ff fd4b 	bl	80071ac <_vfiprintf_r>
 8007716:	b002      	add	sp, #8
 8007718:	f85d eb04 	ldr.w	lr, [sp], #4
 800771c:	b003      	add	sp, #12
 800771e:	4770      	bx	lr
 8007720:	24000048 	.word	0x24000048

08007724 <abort>:
 8007724:	b508      	push	{r3, lr}
 8007726:	2006      	movs	r0, #6
 8007728:	f000 f82c 	bl	8007784 <raise>
 800772c:	2001      	movs	r0, #1
 800772e:	f7f9 f89f 	bl	8000870 <_exit>

08007732 <_raise_r>:
 8007732:	291f      	cmp	r1, #31
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4605      	mov	r5, r0
 8007738:	460c      	mov	r4, r1
 800773a:	d904      	bls.n	8007746 <_raise_r+0x14>
 800773c:	2316      	movs	r3, #22
 800773e:	6003      	str	r3, [r0, #0]
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007748:	b112      	cbz	r2, 8007750 <_raise_r+0x1e>
 800774a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800774e:	b94b      	cbnz	r3, 8007764 <_raise_r+0x32>
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f831 	bl	80077b8 <_getpid_r>
 8007756:	4622      	mov	r2, r4
 8007758:	4601      	mov	r1, r0
 800775a:	4628      	mov	r0, r5
 800775c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007760:	f000 b818 	b.w	8007794 <_kill_r>
 8007764:	2b01      	cmp	r3, #1
 8007766:	d00a      	beq.n	800777e <_raise_r+0x4c>
 8007768:	1c59      	adds	r1, r3, #1
 800776a:	d103      	bne.n	8007774 <_raise_r+0x42>
 800776c:	2316      	movs	r3, #22
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	2001      	movs	r0, #1
 8007772:	e7e7      	b.n	8007744 <_raise_r+0x12>
 8007774:	2100      	movs	r1, #0
 8007776:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800777a:	4620      	mov	r0, r4
 800777c:	4798      	blx	r3
 800777e:	2000      	movs	r0, #0
 8007780:	e7e0      	b.n	8007744 <_raise_r+0x12>
	...

08007784 <raise>:
 8007784:	4b02      	ldr	r3, [pc, #8]	@ (8007790 <raise+0xc>)
 8007786:	4601      	mov	r1, r0
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	f7ff bfd2 	b.w	8007732 <_raise_r>
 800778e:	bf00      	nop
 8007790:	24000048 	.word	0x24000048

08007794 <_kill_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d07      	ldr	r5, [pc, #28]	@ (80077b4 <_kill_r+0x20>)
 8007798:	2300      	movs	r3, #0
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	f7f9 f855 	bl	8000850 <_kill>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d102      	bne.n	80077b0 <_kill_r+0x1c>
 80077aa:	682b      	ldr	r3, [r5, #0]
 80077ac:	b103      	cbz	r3, 80077b0 <_kill_r+0x1c>
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	bd38      	pop	{r3, r4, r5, pc}
 80077b2:	bf00      	nop
 80077b4:	24000420 	.word	0x24000420

080077b8 <_getpid_r>:
 80077b8:	f7f9 b842 	b.w	8000840 <_getpid>

080077bc <_init>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr

080077c8 <_fini>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr
