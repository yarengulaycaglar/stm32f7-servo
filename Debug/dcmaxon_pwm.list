
dcmaxon_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08006fb8  08006fb8  00007fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800744c  0800744c  0000844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007458  08007458  00008458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800745c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000220  240001d8  08007634  000091d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003f8  08007634  000093f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e078  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e18  00000000  00000000  0001727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba0  00000000  00000000  00019098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008b9  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003964b  00000000  00000000  0001a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e031  00000000  00000000  00053b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171a9e  00000000  00000000  00061b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d360b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e60  00000000  00000000  001d3650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001d74b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006f9c 	.word	0x08006f9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08006f9c 	.word	0x08006f9c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <main>:
static void MX_FDCAN1_Init(void);
void Error_Handler(void);

FDCAN_HandleTypeDef hfdcan1;
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	/* Sistem başlatma */
	printf("Main start...\n");
 8000396:	4817      	ldr	r0, [pc, #92]	@ (80003f4 <main+0x64>)
 8000398:	f004 fefe 	bl	8005198 <puts>
	HAL_Init();
 800039c:	f000 fcc8 	bl	8000d30 <HAL_Init>
	SystemClock_Config();
 80003a0:	f000 f82e 	bl	8000400 <SystemClock_Config>
	MX_GPIO_Init();
 80003a4:	f000 f910 	bl	80005c8 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80003a8:	f000 f8aa 	bl	8000500 <MX_FDCAN1_Init>

	/* FDCAN'ı başlat */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80003ac:	4812      	ldr	r0, [pc, #72]	@ (80003f8 <main+0x68>)
 80003ae:	f001 f843 	bl	8001438 <HAL_FDCAN_Start>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <main+0x2c>
	{
		Error_Handler(); // FDCAN başlatma hatası
 80003b8:	f000 f936 	bl	8000628 <Error_Handler>
	}

	/* FDCAN RX interrupt'ını etkinleştir */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, NULL) != HAL_OK)
 80003bc:	2200      	movs	r2, #0
 80003be:	2101      	movs	r1, #1
 80003c0:	480d      	ldr	r0, [pc, #52]	@ (80003f8 <main+0x68>)
 80003c2:	f001 fa2b 	bl	800181c <HAL_FDCAN_ActivateNotification>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <main+0x40>
	{
		Error_Handler(); // FDCAN interrupt hatası
 80003cc:	f000 f92c 	bl	8000628 <Error_Handler>
	}

	uint8_t controller_id = 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	71fb      	strb	r3, [r7, #7]
	//float target_rpm = 0.0f;  // Hedef RPM değeri

	while (1)
	{
		/* RPM komutunu FDCAN üzerinden gönder */
		comm_can_set_rpm(controller_id, motor_speed, &hfdcan1);
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <main+0x6c>)
 80003d6:	edd3 7a00 	vldr	s15, [r3]
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4906      	ldr	r1, [pc, #24]	@ (80003f8 <main+0x68>)
 80003de:	eeb0 0a67 	vmov.f32	s0, s15
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fbba 	bl	8000b5c <comm_can_set_rpm>

		HAL_Delay(100);
 80003e8:	2064      	movs	r0, #100	@ 0x64
 80003ea:	f000 fd33 	bl	8000e54 <HAL_Delay>
		comm_can_set_rpm(controller_id, motor_speed, &hfdcan1);
 80003ee:	bf00      	nop
 80003f0:	e7f0      	b.n	80003d4 <main+0x44>
 80003f2:	bf00      	nop
 80003f4:	08006fb8 	.word	0x08006fb8
 80003f8:	240001f4 	.word	0x240001f4
 80003fc:	2400029c 	.word	0x2400029c

08000400 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b09c      	sub	sp, #112	@ 0x70
 8000404:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040a:	224c      	movs	r2, #76	@ 0x4c
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f004 ffa2 	bl	8005358 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2220      	movs	r2, #32
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f004 ff9c 	bl	8005358 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000420:	2002      	movs	r0, #2
 8000422:	f001 fe29 	bl	8002078 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <SystemClock_Config+0xf8>)
 800042c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800042e:	4a32      	ldr	r2, [pc, #200]	@ (80004f8 <SystemClock_Config+0xf8>)
 8000430:	f023 0301 	bic.w	r3, r3, #1
 8000434:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000436:	4b30      	ldr	r3, [pc, #192]	@ (80004f8 <SystemClock_Config+0xf8>)
 8000438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	4b2e      	ldr	r3, [pc, #184]	@ (80004fc <SystemClock_Config+0xfc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000448:	4a2c      	ldr	r2, [pc, #176]	@ (80004fc <SystemClock_Config+0xfc>)
 800044a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <SystemClock_Config+0xfc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045c:	bf00      	nop
 800045e:	4b27      	ldr	r3, [pc, #156]	@ (80004fc <SystemClock_Config+0xfc>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800046a:	d1f8      	bne.n	800045e <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800046c:	2303      	movs	r3, #3
 800046e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000470:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000474:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000476:	2301      	movs	r3, #1
 8000478:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2340      	movs	r3, #64	@ 0x40
 800047c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	2302      	movs	r3, #2
 8000484:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000486:	2301      	movs	r3, #1
 8000488:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 800048a:	2318      	movs	r3, #24
 800048c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800048e:	2302      	movs	r3, #2
 8000490:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000492:	2304      	movs	r3, #4
 8000494:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800049a:	230c      	movs	r3, #12
 800049c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800049e:	2300      	movs	r3, #0
 80004a0:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 fe1e 	bl	80020ec <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0xba>
	{
		Error_Handler();
 80004b6:	f000 f8b7 	bl	8000628 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	233f      	movs	r3, #63	@ 0x3f
 80004bc:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004be:	2300      	movs	r3, #0
 80004c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ce:	2340      	movs	r3, #64	@ 0x40
 80004d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 fa5e 	bl	80029a0 <HAL_RCC_ClockConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0xee>
	{
		Error_Handler();
 80004ea:	f000 f89d 	bl	8000628 <Error_Handler>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3770      	adds	r7, #112	@ 0x70
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	58000400 	.word	0x58000400
 80004fc:	58024800 	.word	0x58024800

08000500 <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	hfdcan1.Instance = FDCAN1;
 8000504:	4b2e      	ldr	r3, [pc, #184]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000506:	4a2f      	ldr	r2, [pc, #188]	@ (80005c4 <MX_FDCAN1_Init+0xc4>)
 8000508:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800050a:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000510:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000516:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000518:	2200      	movs	r2, #0
 800051a:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 800051c:	4b28      	ldr	r3, [pc, #160]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000522:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000524:	2200      	movs	r2, #0
 8000526:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000528:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800052a:	2210      	movs	r2, #16
 800052c:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800052e:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000530:	2201      	movs	r2, #1
 8000532:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 800053a:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800053c:	2202      	movs	r2, #2
 800053e:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000540:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000542:	2201      	movs	r2, #1
 8000544:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000546:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000548:	2201      	movs	r2, #1
 800054a:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 800054c:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800054e:	2201      	movs	r2, #1
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000552:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000554:	2201      	movs	r2, #1
 8000556:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000560:	2200      	movs	r2, #0
 8000562:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000566:	2200      	movs	r2, #0
 8000568:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800056c:	2200      	movs	r2, #0
 800056e:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000572:	2204      	movs	r2, #4
 8000574:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800057c:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800057e:	2204      	movs	r2, #4
 8000580:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000584:	2200      	movs	r2, #0
 8000586:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800058a:	2204      	movs	r2, #4
 800058c:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000590:	2200      	movs	r2, #0
 8000592:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 8000596:	2200      	movs	r2, #0
 8000598:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 800059c:	2200      	movs	r2, #0
 800059e:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_FDCAN1_Init+0xc0>)
 80005ae:	f000 fd65 	bl	800107c <HAL_FDCAN_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_FDCAN1_Init+0xbc>
	{
		Error_Handler();
 80005b8:	f000 f836 	bl	8000628 <Error_Handler>
	}
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	240001f4 	.word	0x240001f4
 80005c4:	4000a000 	.word	0x4000a000

080005c8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

	/* FDCAN1 pinlerini (PD0: RX, PD1: TX) yapılandır */
	__HAL_RCC_GPIOD_CLK_ENABLE();  // GPIOD için saat aktif et
 80005dc:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <MX_GPIO_Init+0x58>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <MX_GPIO_Init+0x58>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <MX_GPIO_Init+0x58>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;  // FDCAN1 pin alternatifi
 800060a:	2309      	movs	r3, #9
 800060c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <MX_GPIO_Init+0x5c>)
 8000614:	f001 fb80 	bl	8001d18 <HAL_GPIO_Init>
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58024400 	.word	0x58024400
 8000624:	58020c00 	.word	0x58020c00

08000628 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <Error_Handler+0x8>

08000634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_MspInit+0x30>)
 800063c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000640:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <HAL_MspInit+0x30>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_MspInit+0x30>)
 800064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	58024400 	.word	0x58024400

08000668 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0ba      	sub	sp, #232	@ 0xe8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	22c0      	movs	r2, #192	@ 0xc0
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fe65 	bl	8005358 <memset>
  if(hfdcan->Instance==FDCAN1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <HAL_FDCAN_MspInit+0xc8>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d146      	bne.n	8000726 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000698:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80006a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fca5 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80006bc:	f7ff ffb4 	bl	8000628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80006c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006cc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80006d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006fc:	2303      	movs	r3, #3
 80006fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000714:	2309      	movs	r3, #9
 8000716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <HAL_FDCAN_MspInit+0xd0>)
 8000722:	f001 faf9 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000726:	bf00      	nop
 8000728:	37e8      	adds	r7, #232	@ 0xe8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	4000a000 	.word	0x4000a000
 8000734:	58024400 	.word	0x58024400
 8000738:	58020c00 	.word	0x58020c00

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000792:	f000 fb3f 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}

0800079a <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	@ 0x30
 80007bc:	af00      	add	r7, sp, #0
	printf("Interrupt is triggered...\n");
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <FDCAN1_IT0_IRQHandler+0x38>)
 80007c0:	f004 fcea 	bl	8005198 <puts>
    FDCAN_RxHeaderTypeDef rx_msg;
    uint8_t rx_data[8] = {0};  // Gelen veriyi tutacak array
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_msg, rx_data) == HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	2140      	movs	r1, #64	@ 0x40
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <FDCAN1_IT0_IRQHandler+0x3c>)
 80007d6:	f000 feb5 	bl	8001544 <HAL_FDCAN_GetRxMessage>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d103      	bne.n	80007e8 <FDCAN1_IT0_IRQHandler+0x30>
    {
        // Motor verisini al ve güncelle
        motor_receive(rx_data);
 80007e0:	463b      	mov	r3, r7
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fa14 	bl	8000c10 <motor_receive>
    }
}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08006fc8 	.word	0x08006fc8
 80007f4:	240001f4 	.word	0x240001f4

080007f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return 1;
 80007fc:	2301      	movs	r3, #1
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <_kill>:

int _kill(int pid, int sig)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000812:	f004 fdf3 	bl	80053fc <__errno>
 8000816:	4603      	mov	r3, r0
 8000818:	2216      	movs	r2, #22
 800081a:	601a      	str	r2, [r3, #0]
  return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <_exit>:

void _exit (int status)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffe7 	bl	8000808 <_kill>
  while (1) {}    /* Make sure we hang here */
 800083a:	bf00      	nop
 800083c:	e7fd      	b.n	800083a <_exit+0x12>

0800083e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e00a      	b.n	8000866 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000850:	f3af 8000 	nop.w
 8000854:	4601      	mov	r1, r0
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	60ba      	str	r2, [r7, #8]
 800085c:	b2ca      	uxtb	r2, r1
 800085e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	3301      	adds	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbf0      	blt.n	8000850 <_read+0x12>
  }

  return len;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e009      	b.n	800089e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbf1      	blt.n	800088a <_write+0x12>
  }
  return len;
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_close>:

int _close(int file)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d8:	605a      	str	r2, [r3, #4]
  return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_isatty>:

int _isatty(int file)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008f0:	2301      	movs	r3, #1
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f004 fd58 	bl	80053fc <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24080000 	.word	0x24080000
 8000978:	00000400 	.word	0x00000400
 800097c:	24000294 	.word	0x24000294
 8000980:	240003f8 	.word	0x240003f8

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000988:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <SystemInit+0xe4>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a36      	ldr	r2, [pc, #216]	@ (8000a68 <SystemInit+0xe4>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <SystemInit+0xe8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 030f 	and.w	r3, r3, #15
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d807      	bhi.n	80009b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <SystemInit+0xe8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f023 030f 	bic.w	r3, r3, #15
 80009ac:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <SystemInit+0xe8>)
 80009ae:	f043 0307 	orr.w	r3, r3, #7
 80009b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <SystemInit+0xec>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a70 <SystemInit+0xec>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a70 <SystemInit+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <SystemInit+0xec>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4929      	ldr	r1, [pc, #164]	@ (8000a70 <SystemInit+0xec>)
 80009cc:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <SystemInit+0xf0>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <SystemInit+0xe8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <SystemInit+0xe8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f023 030f 	bic.w	r3, r3, #15
 80009e6:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <SystemInit+0xe8>)
 80009e8:	f043 0307 	orr.w	r3, r3, #7
 80009ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <SystemInit+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <SystemInit+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <SystemInit+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <SystemInit+0xec>)
 8000a02:	4a1d      	ldr	r2, [pc, #116]	@ (8000a78 <SystemInit+0xf4>)
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <SystemInit+0xec>)
 8000a08:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <SystemInit+0xf8>)
 8000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <SystemInit+0xec>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <SystemInit+0xfc>)
 8000a10:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <SystemInit+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <SystemInit+0xec>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <SystemInit+0xfc>)
 8000a1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <SystemInit+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <SystemInit+0xec>)
 8000a26:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <SystemInit+0xfc>)
 8000a28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <SystemInit+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <SystemInit+0xec>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <SystemInit+0xec>)
 8000a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <SystemInit+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <SystemInit+0x100>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <SystemInit+0x104>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a4e:	d202      	bcs.n	8000a56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <SystemInit+0x108>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <SystemInit+0x10c>)
 8000a58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	52002000 	.word	0x52002000
 8000a70:	58024400 	.word	0x58024400
 8000a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a78:	02020200 	.word	0x02020200
 8000a7c:	01ff0000 	.word	0x01ff0000
 8000a80:	01010280 	.word	0x01010280
 8000a84:	5c001000 	.word	0x5c001000
 8000a88:	ffff0000 	.word	0xffff0000
 8000a8c:	51008108 	.word	0x51008108
 8000a90:	52004000 	.word	0x52004000

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a98:	f7ff ff74 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 fca1 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fc63 	bl	8000390 <main>
  bx  lr
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ad0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ad4:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000ad8:	0800745c 	.word	0x0800745c
  ldr r2, =_sbss
 8000adc:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000ae0:	240003f8 	.word	0x240003f8

08000ae4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC3_IRQHandler>

08000ae6 <buffer_append_int32>:
float motor_speed = 0.0f;
float motor_current = 0.0f;
int8_t motor_temperature = 0;
int8_t motor_error = 0;

static void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8000ae6:	b480      	push	{r7}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = (number >> 24) & 0xFF;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	0e18      	lsrs	r0, r3, #24
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	6011      	str	r1, [r2, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	b2c2      	uxtb	r2, r0
 8000b08:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = (number >> 16) & 0xFF;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1418      	asrs	r0, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c59      	adds	r1, r3, #1
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6011      	str	r1, [r2, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2c2      	uxtb	r2, r0
 8000b20:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = (number >> 8)  & 0xFF;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1218      	asrs	r0, r3, #8
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1c59      	adds	r1, r3, #1
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6011      	str	r1, [r2, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2c2      	uxtb	r2, r0
 8000b38:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number & 0xFF;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1c59      	adds	r1, r3, #1
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6011      	str	r1, [r2, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <comm_can_set_rpm>:
	buffer_append_int32(buffer, (int32_t)(motor_current * 1000.0f), &send_index);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index, hfdcan1);
}

// Velocity mode
void comm_can_set_rpm(uint8_t controller_id, float rpm, FDCAN_HandleTypeDef *hfdcan1) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b68:	6079      	str	r1, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
	printf("RPM is setting...\n");
 8000b6c:	4810      	ldr	r0, [pc, #64]	@ (8000bb0 <comm_can_set_rpm+0x54>)
 8000b6e:	f004 fb13 	bl	8005198 <puts>
	int32_t send_index = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 8000b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7e:	f107 0214 	add.w	r2, r7, #20
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	ee17 1a90 	vmov	r1, s15
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffab 	bl	8000ae6 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index, hfdcan1);
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	f443 7040 	orr.w	r0, r3, #768	@ 0x300
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	b2d9      	uxtb	r1, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f000 f807 	bl	8000bb4 <comm_can_transmit_eid>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08006fe4 	.word	0x08006fe4

08000bb4 <comm_can_transmit_eid>:
	buffer_append_int16(buffer + send_index + send_index1, RPA, &send_index1);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index + send_index1, hfdcan1);
}

// Transmit fonksiyonu (FDCAN kullanılarak)
static void comm_can_transmit_eid(uint32_t id, const uint8_t data, uint8_t len, FDCAN_HandleTypeDef *hfdcan1) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	72fb      	strb	r3, [r7, #11]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	72bb      	strb	r3, [r7, #10]
	if (len > 8) {
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d901      	bls.n	8000bd0 <comm_can_transmit_eid+0x1c>
		len = 8;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	72bb      	strb	r3, [r7, #10]
	}
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = id;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID; // Standart ID tipi
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Veri çerçevesi
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = len;           // Veri uzunluğu
 8000bdc:	7abb      	ldrb	r3, [r7, #10]
 8000bde:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &TxHeader, (uint8_t*)data) != HAL_OK)
 8000bec:	7afb      	ldrb	r3, [r7, #11]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 fc49 	bl	800148e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <comm_can_transmit_eid+0x52>
	{
		Error_Handler(); // Veri gönderme hatası
 8000c02:	f7ff fd11 	bl	8000628 <Error_Handler>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	@ 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <motor_receive>:

// motor_receive: CAN Rx mesajındaki veriyi işleyip global değişkenlere atar.
void motor_receive(uint8_t* rx_message)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af06      	add	r7, sp, #24
 8000c16:	6078      	str	r0, [r7, #4]
	int16_t pos_int = rx_message[0] << 8 | rx_message[1];
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3301      	adds	r3, #1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	81fb      	strh	r3, [r7, #14]
	int16_t spd_int = rx_message[2] << 8 | rx_message[3];
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3302      	adds	r3, #2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3303      	adds	r3, #3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	81bb      	strh	r3, [r7, #12]
	int16_t cur_int = rx_message[4] << 8 | rx_message[5];
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3305      	adds	r3, #5
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	817b      	strh	r3, [r7, #10]

	motor_position= (float)( pos_int * 0.1f); // Motor Position
 8000c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000d10 <motor_receive+0x100>
 8000c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c72:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <motor_receive+0x104>)
 8000c74:	edc3 7a00 	vstr	s15, [r3]
	motor_speed= (float)( spd_int * 10.0f);// Motor Speed
 8000c78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <motor_receive+0x108>)
 8000c8e:	edc3 7a00 	vstr	s15, [r3]
	motor_current= (float) ( cur_int * 0.01f);// Motor Current
 8000c92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000d1c <motor_receive+0x10c>
 8000ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <motor_receive+0x110>)
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
	motor_temperature= rx_message[6] ;// Motor Temperature
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3306      	adds	r3, #6
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25a      	sxtb	r2, r3
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <motor_receive+0x114>)
 8000cb6:	701a      	strb	r2, [r3, #0]
	motor_error= rx_message[7] ;// Motor Error Code
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3307      	adds	r3, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <motor_receive+0x118>)
 8000cc2:	701a      	strb	r2, [r3, #0]
	printf("Recieving data:\n motor_position: %f\n motor_speed: %f\nmotor_current: %f\nmotor_temperature: %d\nmotor_error: %d\n",
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <motor_receive+0x104>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <motor_receive+0x108>)
 8000cd0:	edd3 7a00 	vldr	s15, [r3]
 8000cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <motor_receive+0x110>)
 8000cda:	edd3 6a00 	vldr	s13, [r3]
 8000cde:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <motor_receive+0x114>)
 8000ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <motor_receive+0x118>)
 8000cec:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf0:	9305      	str	r3, [sp, #20]
 8000cf2:	9204      	str	r2, [sp, #16]
 8000cf4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cf8:	ed8d 7b00 	vstr	d7, [sp]
 8000cfc:	ec53 2b15 	vmov	r2, r3, d5
 8000d00:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <motor_receive+0x11c>)
 8000d02:	f004 f9e1 	bl	80050c8 <iprintf>
			motor_position, motor_speed, motor_current, motor_temperature, motor_error);
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	3dcccccd 	.word	0x3dcccccd
 8000d14:	24000298 	.word	0x24000298
 8000d18:	2400029c 	.word	0x2400029c
 8000d1c:	3c23d70a 	.word	0x3c23d70a
 8000d20:	240002a0 	.word	0x240002a0
 8000d24:	240002a4 	.word	0x240002a4
 8000d28:	240002a5 	.word	0x240002a5
 8000d2c:	08006ff8 	.word	0x08006ff8

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 f96e 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d3c:	f001 ffe6 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_Init+0x68>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	4913      	ldr	r1, [pc, #76]	@ (8000d9c <HAL_Init+0x6c>)
 8000d4e:	5ccb      	ldrb	r3, [r1, r3]
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_Init+0x68>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <HAL_Init+0x6c>)
 8000d64:	5cd3      	ldrb	r3, [r2, r3]
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d70:	4a0b      	ldr	r2, [pc, #44]	@ (8000da0 <HAL_Init+0x70>)
 8000d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d74:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <HAL_Init+0x74>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f814 	bl	8000da8 <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e002      	b.n	8000d90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fc53 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	080070b4 	.word	0x080070b4
 8000da0:	24000004 	.word	0x24000004
 8000da4:	24000000 	.word	0x24000000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_InitTick+0x60>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e021      	b.n	8000e00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <HAL_InitTick+0x64>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_InitTick+0x60>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f945 	bl	8001062 <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f91d 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_InitTick+0x68>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2400000c 	.word	0x2400000c
 8000e0c:	24000000 	.word	0x24000000
 8000e10:	24000008 	.word	0x24000008

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	2400000c 	.word	0x2400000c
 8000e38:	240002a8 	.word	0x240002a8

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	240002a8 	.word	0x240002a8

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2400000c 	.word	0x2400000c

08000e9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetREVID+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0c1b      	lsrs	r3, r3, #16
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	5c001000 	.word	0x5c001000

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	05fa0000 	.word	0x05fa0000

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff47 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb2 	bl	8000fd4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b098      	sub	sp, #96	@ 0x60
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001084:	4a84      	ldr	r2, [pc, #528]	@ (8001298 <HAL_FDCAN_Init+0x21c>)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4611      	mov	r1, r2
 800108c:	224c      	movs	r2, #76	@ 0x4c
 800108e:	4618      	mov	r0, r3
 8001090:	f004 f9e1 	bl	8005456 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e1c6      	b.n	800142c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a7e      	ldr	r2, [pc, #504]	@ (800129c <HAL_FDCAN_Init+0x220>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d106      	bne.n	80010b6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff facc 	bl	8000668 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	699a      	ldr	r2, [r3, #24]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0210 	bic.w	r2, r2, #16
 80010de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e0:	f7ff feac 	bl	8000e3c <HAL_GetTick>
 80010e4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010e6:	e014      	b.n	8001112 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010e8:	f7ff fea8 	bl	8000e3c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d90d      	bls.n	8001112 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010fc:	f043 0201 	orr.w	r2, r3, #1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2203      	movs	r2, #3
 800110a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e18c      	b.n	800142c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b08      	cmp	r3, #8
 800111e:	d0e3      	beq.n	80010e8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	699a      	ldr	r2, [r3, #24]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff fe84 	bl	8000e3c <HAL_GetTick>
 8001134:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001136:	e014      	b.n	8001162 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001138:	f7ff fe80 	bl	8000e3c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b0a      	cmp	r3, #10
 8001144:	d90d      	bls.n	8001162 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e164      	b.n	800142c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0e3      	beq.n	8001138 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0202 	orr.w	r2, r2, #2
 800117e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7c1b      	ldrb	r3, [r3, #16]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001196:	619a      	str	r2, [r3, #24]
 8001198:	e007      	b.n	80011aa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7c5b      	ldrb	r3, [r3, #17]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011c0:	619a      	str	r2, [r3, #24]
 80011c2:	e007      	b.n	80011d4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7c9b      	ldrb	r3, [r3, #18]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e007      	b.n	80011fe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011fc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001222:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0210 	bic.w	r2, r2, #16
 8001232:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0204 	orr.w	r2, r2, #4
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	e030      	b.n	80012b0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d02c      	beq.n	80012b0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d020      	beq.n	80012a0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800126c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0210 	orr.w	r2, r2, #16
 800127c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d114      	bne.n	80012b0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	619a      	str	r2, [r3, #24]
 8001296:	e00b      	b.n	80012b0 <HAL_FDCAN_Init+0x234>
 8001298:	08007068 	.word	0x08007068
 800129c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	3b01      	subs	r3, #1
 80012be:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012c0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012c8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012d8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012da:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012e4:	d115      	bne.n	8001312 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f0:	3b01      	subs	r3, #1
 80012f2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	3b01      	subs	r3, #1
 80012fc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012fe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	3b01      	subs	r3, #1
 8001308:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800130e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001310:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001338:	4413      	add	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d011      	beq.n	8001362 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001346:	f023 0107 	bic.w	r1, r3, #7
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	3360      	adds	r3, #96	@ 0x60
 8001352:	443b      	add	r3, r7
 8001354:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d011      	beq.n	800138e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001372:	f023 0107 	bic.w	r1, r3, #7
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	3360      	adds	r3, #96	@ 0x60
 800137e:	443b      	add	r3, r7
 8001380:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001392:	2b00      	cmp	r3, #0
 8001394:	d012      	beq.n	80013bc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800139e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	3360      	adds	r3, #96	@ 0x60
 80013aa:	443b      	add	r3, r7
 80013ac:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80013b0:	011a      	lsls	r2, r3, #4
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d012      	beq.n	80013ea <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80013cc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3360      	adds	r3, #96	@ 0x60
 80013d8:	443b      	add	r3, r7
 80013da:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80013de:	021a      	lsls	r2, r3, #8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <HAL_FDCAN_Init+0x3b8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d107      	bne.n	8001404 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f022 0203 	bic.w	r2, r2, #3
 8001402:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fa77 	bl	8001910 <FDCAN_CalcultateRamBlockAddresses>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001428:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800142c:	4618      	mov	r0, r3
 800142e:	3760      	adds	r7, #96	@ 0x60
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	4000a000 	.word	0x4000a000

08001438 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d111      	bne.n	8001470 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e008      	b.n	8001482 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001476:	f043 0204 	orr.w	r2, r3, #4
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
  }
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d141      	bne.n	800152a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80014ae:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014bc:	f043 0220 	orr.w	r2, r3, #32
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e038      	b.n	800153c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e026      	b.n	800153c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fb89 	bl	8001c1c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800151a:	2201      	movs	r2, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e008      	b.n	800153c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001530:	f043 0208 	orr.w	r2, r3, #8
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
  }
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001544:	b480      	push	{r7}
 8001546:	b08b      	sub	sp, #44	@ 0x2c
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800155c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800155e:	7efb      	ldrb	r3, [r7, #27]
 8001560:	2b02      	cmp	r3, #2
 8001562:	f040 8149 	bne.w	80017f8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b40      	cmp	r3, #64	@ 0x40
 800156a:	d14c      	bne.n	8001606 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001574:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001582:	f043 0220 	orr.w	r2, r3, #32
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e13c      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e12a      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c4:	d10a      	bne.n	80015dc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80015ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015d6:	d101      	bne.n	80015dc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015d8:	2301      	movs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	69f9      	ldr	r1, [r7, #28]
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
 8001604:	e068      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b41      	cmp	r3, #65	@ 0x41
 800160a:	d14c      	bne.n	80016a6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001614:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001622:	f043 0220 	orr.w	r2, r3, #32
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0ec      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001646:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0da      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800165c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d10a      	bne.n	800167c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800166e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001676:	d101      	bne.n	800167c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	69f9      	ldr	r1, [r7, #28]
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a4:	e018      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d309      	bcc.n	80016c4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016b6:	f043 0220 	orr.w	r2, r3, #32
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0a2      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0c9b      	lsrs	r3, r3, #18
 80016f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e005      	b.n	8001708 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	3304      	adds	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0c1b      	lsrs	r3, r3, #16
 8001736:	f003 020f 	and.w	r2, r3, #15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0e1b      	lsrs	r3, r3, #24
 800175c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0fda      	lsrs	r2, r3, #31
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	3304      	adds	r3, #4
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	e00a      	b.n	8001794 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	441a      	add	r2, r3
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	440b      	add	r3, r1
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	3301      	adds	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	461a      	mov	r2, r3
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d3ec      	bcc.n	800177e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b40      	cmp	r3, #64	@ 0x40
 80017a8:	d105      	bne.n	80017b6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80017b4:	e01e      	b.n	80017f4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b41      	cmp	r3, #65	@ 0x41
 80017ba:	d105      	bne.n	80017c8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80017c6:	e015      	b.n	80017f4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b1f      	cmp	r3, #31
 80017cc:	d808      	bhi.n	80017e0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2101      	movs	r1, #1
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80017de:	e009      	b.n	80017f4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f003 021f 	and.w	r2, r3, #31
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e008      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017fe:	f043 0208 	orr.w	r2, r3, #8
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
  }
}
 800180a:	4618      	mov	r0, r3
 800180c:	372c      	adds	r7, #44	@ 0x2c
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	080070c4 	.word	0x080070c4

0800181c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800182e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d002      	beq.n	800183c <HAL_FDCAN_ActivateNotification+0x20>
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d155      	bne.n	80018e8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	65da      	str	r2, [r3, #92]	@ 0x5c
 800185a:	e014      	b.n	8001886 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4013      	ands	r3, r2
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	429a      	cmp	r2, r3
 800186a:	d108      	bne.n	800187e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0202 	orr.w	r2, r2, #2
 800187a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800187c:	e003      	b.n	8001886 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2203      	movs	r2, #3
 8001884:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	430a      	orrs	r2, r1
 80018a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	430a      	orrs	r2, r1
 80018be:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_FDCAN_ActivateNotification+0xec>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_FDCAN_ActivateNotification+0xf0>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0f9b      	lsrs	r3, r3, #30
 80018de:	490b      	ldr	r1, [pc, #44]	@ (800190c <HAL_FDCAN_ActivateNotification+0xf0>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e008      	b.n	80018fa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018ee:	f043 0202 	orr.w	r2, r3, #2
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	3fcfffff 	.word	0x3fcfffff
 800190c:	4000a800 	.word	0x4000a800

08001910 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001926:	4ba7      	ldr	r3, [pc, #668]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001928:	4013      	ands	r3, r2
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	0091      	lsls	r1, r2, #2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	430b      	orrs	r3, r1
 8001934:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001940:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	4413      	add	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001966:	4b97      	ldr	r3, [pc, #604]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001968:	4013      	ands	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	0091      	lsls	r1, r2, #2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	430b      	orrs	r3, r1
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001980:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001988:	041a      	lsls	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80019a8:	4b86      	ldr	r3, [pc, #536]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	0091      	lsls	r1, r2, #2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019c2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	041a      	lsls	r2, r3, #16
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	4413      	add	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019f0:	4b74      	ldr	r3, [pc, #464]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	0091      	lsls	r1, r2, #2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001a0a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	041a      	lsls	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001a38:	4b62      	ldr	r3, [pc, #392]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	0091      	lsls	r1, r2, #2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a64:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	0091      	lsls	r1, r2, #2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a7e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001aa6:	4b47      	ldr	r3, [pc, #284]	@ (8001bc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	0091      	lsls	r1, r2, #2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ac0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001adc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae4:	061a      	lsls	r2, r3, #24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af4:	4b34      	ldr	r3, [pc, #208]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001af6:	4413      	add	r3, r2
 8001af8:	009a      	lsls	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001b30:	441a      	add	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	441a      	add	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001bac:	441a      	add	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bba:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d915      	bls.n	8001bec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001bc0:	e006      	b.n	8001bd0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001bc2:	bf00      	nop
 8001bc4:	ffff0003 	.word	0xffff0003
 8001bc8:	10002b00 	.word	0x10002b00
 8001bcc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bd6:	f043 0220 	orr.w	r2, r3, #32
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2203      	movs	r2, #3
 8001be4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e010      	b.n	8001c0e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e005      	b.n	8001c00 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3f3      	bcc.n	8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001c3a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e00a      	b.n	8001c5e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001c50:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001c56:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c5c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c68:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c6e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001c74:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	3304      	adds	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e020      	b.n	8001cf6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ccc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	440b      	add	r3, r1
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cda:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	440a      	add	r2, r1
 8001ce2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ce4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3304      	adds	r3, #4
 8001cee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <FDCAN_CopyMessageToRAM+0xf8>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d3d6      	bcc.n	8001cb4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3724      	adds	r7, #36	@ 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	080070c4 	.word	0x080070c4

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d26:	4b89      	ldr	r3, [pc, #548]	@ (8001f4c <HAL_GPIO_Init+0x234>)
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2a:	e194      	b.n	8002056 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8186 	beq.w	8002050 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x44>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d017      	beq.n	8001dfa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d123      	bne.n	8001e4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	69b9      	ldr	r1, [r7, #24]
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0203 	and.w	r2, r3, #3
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80e0 	beq.w	8002050 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <HAL_GPIO_Init+0x238>)
 8001e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e96:	4a2e      	ldr	r2, [pc, #184]	@ (8001f50 <HAL_GPIO_Init+0x238>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_GPIO_Init+0x238>)
 8001ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a29      	ldr	r2, [pc, #164]	@ (8001f54 <HAL_GPIO_Init+0x23c>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	@ (8001f58 <HAL_GPIO_Init+0x240>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d052      	beq.n	8001f80 <HAL_GPIO_Init+0x268>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <HAL_GPIO_Init+0x244>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f60 <HAL_GPIO_Init+0x248>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <HAL_GPIO_Init+0x24c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <HAL_GPIO_Init+0x250>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_GPIO_Init+0x254>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_GPIO_Init+0x258>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_GPIO_Init+0x25c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x216>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_GPIO_Init+0x260>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <HAL_GPIO_Init+0x264>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f22:	2309      	movs	r3, #9
 8001f24:	e02d      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f26:	230a      	movs	r3, #10
 8001f28:	e02b      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e029      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e027      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f32:	2306      	movs	r3, #6
 8001f34:	e025      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f36:	2305      	movs	r3, #5
 8001f38:	e023      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e021      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e01f      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e01d      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e01b      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f4a:	bf00      	nop
 8001f4c:	58000080 	.word	0x58000080
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58000400 	.word	0x58000400
 8001f58:	58020000 	.word	0x58020000
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	58020800 	.word	0x58020800
 8001f64:	58020c00 	.word	0x58020c00
 8001f68:	58021000 	.word	0x58021000
 8001f6c:	58021400 	.word	0x58021400
 8001f70:	58021800 	.word	0x58021800
 8001f74:	58021c00 	.word	0x58021c00
 8001f78:	58022000 	.word	0x58022000
 8001f7c:	58022400 	.word	0x58022400
 8001f80:	2300      	movs	r3, #0
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f92:	4938      	ldr	r1, [pc, #224]	@ (8002074 <HAL_GPIO_Init+0x35c>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3301      	adds	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f ae63 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3724      	adds	r7, #36	@ 0x24
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	58000400 	.word	0x58000400

08002078 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_PWREx_ConfigSupply+0x70>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	d00a      	beq.n	80020a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_PWREx_ConfigSupply+0x70>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e01f      	b.n	80020de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e01d      	b.n	80020de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020a2:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_PWREx_ConfigSupply+0x70>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	490f      	ldr	r1, [pc, #60]	@ (80020e8 <HAL_PWREx_ConfigSupply+0x70>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020b2:	f7fe fec3 	bl	8000e3c <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020b8:	e009      	b.n	80020ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020ba:	f7fe febf 	bl	8000e3c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020c8:	d901      	bls.n	80020ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e007      	b.n	80020de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_PWREx_ConfigSupply+0x70>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020da:	d1ee      	bne.n	80020ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	58024800 	.word	0x58024800

080020ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	@ 0x30
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f000 bc48 	b.w	8002990 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8088 	beq.w	800221e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b99      	ldr	r3, [pc, #612]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002118:	4b96      	ldr	r3, [pc, #600]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800211e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002120:	2b10      	cmp	r3, #16
 8002122:	d007      	beq.n	8002134 <HAL_RCC_OscConfig+0x48>
 8002124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002126:	2b18      	cmp	r3, #24
 8002128:	d111      	bne.n	800214e <HAL_RCC_OscConfig+0x62>
 800212a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	4b8f      	ldr	r3, [pc, #572]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d06d      	beq.n	800221c <HAL_RCC_OscConfig+0x130>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d169      	bne.n	800221c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	f000 bc21 	b.w	8002990 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x7a>
 8002158:	4b86      	ldr	r3, [pc, #536]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a85      	ldr	r2, [pc, #532]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e02e      	b.n	80021c4 <HAL_RCC_OscConfig+0xd8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x9c>
 800216e:	4b81      	ldr	r3, [pc, #516]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a80      	ldr	r2, [pc, #512]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b7e      	ldr	r3, [pc, #504]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7d      	ldr	r2, [pc, #500]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002180:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xd8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0xc0>
 8002192:	4b78      	ldr	r3, [pc, #480]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a77      	ldr	r2, [pc, #476]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b75      	ldr	r3, [pc, #468]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a74      	ldr	r2, [pc, #464]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xd8>
 80021ac:	4b71      	ldr	r3, [pc, #452]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a70      	ldr	r2, [pc, #448]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fe36 	bl	8000e3c <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe fe32 	bl	8000e3c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	@ 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e3d4      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e6:	4b63      	ldr	r3, [pc, #396]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe8>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe22 	bl	8000e3c <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fe1e 	bl	8000e3c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e3c0      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800220e:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x110>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80ca 	beq.w	80023c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222c:	4b51      	ldr	r3, [pc, #324]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002234:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002236:	4b4f      	ldr	r3, [pc, #316]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_RCC_OscConfig+0x166>
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2b18      	cmp	r3, #24
 8002246:	d156      	bne.n	80022f6 <HAL_RCC_OscConfig+0x20a>
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d151      	bne.n	80022f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002252:	4b48      	ldr	r3, [pc, #288]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x17e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e392      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800226a:	4b42      	ldr	r3, [pc, #264]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0219 	bic.w	r2, r3, #25
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	493f      	ldr	r1, [pc, #252]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fdde 	bl	8000e3c <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe fdda 	bl	8000e3c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e37c      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	f7fe fdfb 	bl	8000e9c <HAL_GetREVID>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d817      	bhi.n	80022e0 <HAL_RCC_OscConfig+0x1f4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b40      	cmp	r3, #64	@ 0x40
 80022b6:	d108      	bne.n	80022ca <HAL_RCC_OscConfig+0x1de>
 80022b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80022c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c8:	e07a      	b.n	80023c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	031b      	lsls	r3, r3, #12
 80022d8:	4926      	ldr	r1, [pc, #152]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022de:	e06f      	b.n	80023c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	4921      	ldr	r1, [pc, #132]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f4:	e064      	b.n	80023c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d047      	beq.n	800238e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0219 	bic.w	r2, r3, #25
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	491a      	ldr	r1, [pc, #104]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fd94 	bl	8000e3c <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002318:	f7fe fd90 	bl	8000e3c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e332      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	f7fe fdb1 	bl	8000e9c <HAL_GetREVID>
 800233a:	4603      	mov	r3, r0
 800233c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002340:	4293      	cmp	r3, r2
 8002342:	d819      	bhi.n	8002378 <HAL_RCC_OscConfig+0x28c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b40      	cmp	r3, #64	@ 0x40
 800234a:	d108      	bne.n	800235e <HAL_RCC_OscConfig+0x272>
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002354:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235a:	6053      	str	r3, [r2, #4]
 800235c:	e030      	b.n	80023c0 <HAL_RCC_OscConfig+0x2d4>
 800235e:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	031b      	lsls	r3, r3, #12
 800236c:	4901      	ldr	r1, [pc, #4]	@ (8002374 <HAL_RCC_OscConfig+0x288>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
 8002372:	e025      	b.n	80023c0 <HAL_RCC_OscConfig+0x2d4>
 8002374:	58024400 	.word	0x58024400
 8002378:	4b9a      	ldr	r3, [pc, #616]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	4997      	ldr	r1, [pc, #604]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
 800238c:	e018      	b.n	80023c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b95      	ldr	r3, [pc, #596]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a94      	ldr	r2, [pc, #592]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fd4f 	bl	8000e3c <HAL_GetTick>
 800239e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe fd4b 	bl	8000e3c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e2ed      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b4:	4b8b      	ldr	r3, [pc, #556]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a9 	beq.w	8002520 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	4b85      	ldr	r3, [pc, #532]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d8:	4b82      	ldr	r3, [pc, #520]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d007      	beq.n	80023f4 <HAL_RCC_OscConfig+0x308>
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b18      	cmp	r3, #24
 80023e8:	d13a      	bne.n	8002460 <HAL_RCC_OscConfig+0x374>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d135      	bne.n	8002460 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023f4:	4b7b      	ldr	r3, [pc, #492]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_OscConfig+0x320>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b80      	cmp	r3, #128	@ 0x80
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e2c1      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800240c:	f7fe fd46 	bl	8000e9c <HAL_GetREVID>
 8002410:	4603      	mov	r3, r0
 8002412:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002416:	4293      	cmp	r3, r2
 8002418:	d817      	bhi.n	800244a <HAL_RCC_OscConfig+0x35e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	2b20      	cmp	r3, #32
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x348>
 8002422:	4b70      	ldr	r3, [pc, #448]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800242a:	4a6e      	ldr	r2, [pc, #440]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002430:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002432:	e075      	b.n	8002520 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002434:	4b6b      	ldr	r3, [pc, #428]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	4968      	ldr	r1, [pc, #416]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002448:	e06a      	b.n	8002520 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800244a:	4b66      	ldr	r3, [pc, #408]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	4962      	ldr	r1, [pc, #392]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800245e:	e05f      	b.n	8002520 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d042      	beq.n	80024ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002468:	4b5e      	ldr	r3, [pc, #376]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a5d      	ldr	r2, [pc, #372]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800246e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fce2 	bl	8000e3c <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800247c:	f7fe fcde 	bl	8000e3c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e280      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800248e:	4b55      	ldr	r3, [pc, #340]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800249a:	f7fe fcff 	bl	8000e9c <HAL_GetREVID>
 800249e:	4603      	mov	r3, r0
 80024a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d817      	bhi.n	80024d8 <HAL_RCC_OscConfig+0x3ec>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d108      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3d6>
 80024b0:	4b4c      	ldr	r3, [pc, #304]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024b8:	4a4a      	ldr	r2, [pc, #296]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024be:	6053      	str	r3, [r2, #4]
 80024c0:	e02e      	b.n	8002520 <HAL_RCC_OscConfig+0x434>
 80024c2:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	069b      	lsls	r3, r3, #26
 80024d0:	4944      	ldr	r1, [pc, #272]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	e023      	b.n	8002520 <HAL_RCC_OscConfig+0x434>
 80024d8:	4b42      	ldr	r3, [pc, #264]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	493f      	ldr	r1, [pc, #252]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
 80024ec:	e018      	b.n	8002520 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024ee:	4b3d      	ldr	r3, [pc, #244]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3c      	ldr	r2, [pc, #240]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fc9f 	bl	8000e3c <HAL_GetTick>
 80024fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002502:	f7fe fc9b 	bl	8000e3c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e23d      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002514:	4b33      	ldr	r3, [pc, #204]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d036      	beq.n	800259a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d019      	beq.n	8002568 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002538:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fc7c 	bl	8000e3c <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fc78 	bl	8000e3c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e21a      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800255a:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x45c>
 8002566:	e018      	b.n	800259a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fc62 	bl	8000e3c <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe fc5e 	bl	8000e3c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e200      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d039      	beq.n	800261a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025ae:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fc3f 	bl	8000e3c <HAL_GetTick>
 80025be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c2:	f7fe fc3b 	bl	8000e3c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1dd      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4d6>
 80025e0:	e01b      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a9a      	ldr	r2, [pc, #616]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80025ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fc22 	bl	8000e3c <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025fc:	f7fe fc1e 	bl	8000e3c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1c0      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800260e:	4b92      	ldr	r3, [pc, #584]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8081 	beq.w	800272a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002628:	4b8c      	ldr	r3, [pc, #560]	@ (800285c <HAL_RCC_OscConfig+0x770>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8b      	ldr	r2, [pc, #556]	@ (800285c <HAL_RCC_OscConfig+0x770>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002634:	f7fe fc02 	bl	8000e3c <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe fbfe 	bl	8000e3c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1a0      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264e:	4b83      	ldr	r3, [pc, #524]	@ (800285c <HAL_RCC_OscConfig+0x770>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x584>
 8002662:	4b7d      	ldr	r3, [pc, #500]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a7c      	ldr	r2, [pc, #496]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	e02d      	b.n	80026cc <HAL_RCC_OscConfig+0x5e0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x5a6>
 8002678:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	4a76      	ldr	r2, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	@ 0x70
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002688:	4a73      	ldr	r2, [pc, #460]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800268a:	f023 0304 	bic.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002690:	e01c      	b.n	80026cc <HAL_RCC_OscConfig+0x5e0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c8>
 800269a:	4b6f      	ldr	r3, [pc, #444]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	4a6e      	ldr	r2, [pc, #440]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0x5e0>
 80026b4:	4b68      	ldr	r3, [pc, #416]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	4a67      	ldr	r2, [pc, #412]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c0:	4b65      	ldr	r3, [pc, #404]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	4a64      	ldr	r2, [pc, #400]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fbb2 	bl	8000e3c <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fbae 	bl	8000e3c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e14e      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f2:	4b59      	ldr	r3, [pc, #356]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ee      	beq.n	80026dc <HAL_RCC_OscConfig+0x5f0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fb9c 	bl	8000e3c <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fb98 	bl	8000e3c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e138      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ee      	bne.n	8002708 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 812d 	beq.w	800298e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002734:	4b48      	ldr	r3, [pc, #288]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800273c:	2b18      	cmp	r3, #24
 800273e:	f000 80bd 	beq.w	80028bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 809e 	bne.w	8002888 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a41      	ldr	r2, [pc, #260]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fb70 	bl	8000e3c <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fb6c 	bl	8000e3c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e10e      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002772:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277e:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002782:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x774>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	430a      	orrs	r2, r1
 8002792:	4931      	ldr	r1, [pc, #196]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002794:	4313      	orrs	r3, r2
 8002796:	628b      	str	r3, [r1, #40]	@ 0x28
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	3b01      	subs	r3, #1
 800279e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	3b01      	subs	r3, #1
 80027a8:	025b      	lsls	r3, r3, #9
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c0:	3b01      	subs	r3, #1
 80027c2:	061b      	lsls	r3, r3, #24
 80027c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027c8:	4923      	ldr	r1, [pc, #140]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027da:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027de:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027e6:	00d2      	lsls	r2, r2, #3
 80027e8:	491b      	ldr	r1, [pc, #108]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	f023 020c 	bic.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4917      	ldr	r1, [pc, #92]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002800:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	f023 0202 	bic.w	r2, r3, #2
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	4912      	ldr	r1, [pc, #72]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002812:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	4a10      	ldr	r2, [pc, #64]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	4a0d      	ldr	r2, [pc, #52]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	4a07      	ldr	r2, [pc, #28]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <HAL_RCC_OscConfig+0x76c>)
 8002848:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe faf5 	bl	8000e3c <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002854:	e011      	b.n	800287a <HAL_RCC_OscConfig+0x78e>
 8002856:	bf00      	nop
 8002858:	58024400 	.word	0x58024400
 800285c:	58024800 	.word	0x58024800
 8002860:	fffffc0c 	.word	0xfffffc0c
 8002864:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fae8 	bl	8000e3c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e08a      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x77c>
 8002886:	e082      	b.n	800298e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b43      	ldr	r3, [pc, #268]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a42      	ldr	r2, [pc, #264]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 800288e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fad2 	bl	8000e3c <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe face 	bl	8000e3c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e070      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x7b0>
 80028ba:	e068      	b.n	800298e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028bc:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028c2:	4b35      	ldr	r3, [pc, #212]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d031      	beq.n	8002934 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0203 	and.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d12a      	bne.n	8002934 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d122      	bne.n	8002934 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d11a      	bne.n	8002934 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	0a5b      	lsrs	r3, r3, #9
 8002902:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d111      	bne.n	8002934 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	0e1b      	lsrs	r3, r3, #24
 8002926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e02b      	b.n	8002990 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002942:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d01f      	beq.n	800298e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	4a11      	ldr	r2, [pc, #68]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800295a:	f7fe fa6f 	bl	8000e3c <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002960:	bf00      	nop
 8002962:	f7fe fa6b 	bl	8000e3c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	4293      	cmp	r3, r2
 800296c:	d0f9      	beq.n	8002962 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 8002970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_RCC_OscConfig+0x8b0>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800297a:	00d2      	lsls	r2, r2, #3
 800297c:	4906      	ldr	r1, [pc, #24]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 800297e:	4313      	orrs	r3, r2
 8002980:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_RCC_OscConfig+0x8ac>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3730      	adds	r7, #48	@ 0x30
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	58024400 	.word	0x58024400
 800299c:	ffff0007 	.word	0xffff0007

080029a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e19c      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b8a      	ldr	r3, [pc, #552]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d910      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b87      	ldr	r3, [pc, #540]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 020f 	bic.w	r2, r3, #15
 80029ca:	4985      	ldr	r1, [pc, #532]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b83      	ldr	r3, [pc, #524]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e184      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	4b7b      	ldr	r3, [pc, #492]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d908      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a00:	4b78      	ldr	r3, [pc, #480]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	4975      	ldr	r1, [pc, #468]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	4b70      	ldr	r3, [pc, #448]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d908      	bls.n	8002a40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	496a      	ldr	r1, [pc, #424]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	4b64      	ldr	r3, [pc, #400]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d908      	bls.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a5c:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	495e      	ldr	r1, [pc, #376]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	4b59      	ldr	r3, [pc, #356]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d908      	bls.n	8002a9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a8a:	4b56      	ldr	r3, [pc, #344]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4953      	ldr	r1, [pc, #332]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d010      	beq.n	8002aca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d908      	bls.n	8002aca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f023 020f 	bic.w	r2, r3, #15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4947      	ldr	r1, [pc, #284]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d055      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ad6:	4b43      	ldr	r3, [pc, #268]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4940      	ldr	r1, [pc, #256]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af0:	4b3c      	ldr	r3, [pc, #240]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d121      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0f6      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b08:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d115      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ea      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b20:	4b30      	ldr	r3, [pc, #192]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0de      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b30:	4b2c      	ldr	r3, [pc, #176]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0d6      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f023 0207 	bic.w	r2, r3, #7
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b52:	f7fe f973 	bl	8000e3c <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5a:	f7fe f96f 	bl	8000e3c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e0be      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	4b1c      	ldr	r3, [pc, #112]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d1eb      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d208      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9e:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f023 020f 	bic.w	r2, r3, #15
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	490e      	ldr	r1, [pc, #56]	@ (8002be4 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d214      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	4906      	ldr	r1, [pc, #24]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <HAL_RCC_ClockConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e086      	b.n	8002cee <HAL_RCC_ClockConfig+0x34e>
 8002be0:	52002000 	.word	0x52002000
 8002be4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d208      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c04:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4939      	ldr	r1, [pc, #228]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d208      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	492e      	ldr	r1, [pc, #184]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d208      	bcs.n	8002c72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c60:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4922      	ldr	r1, [pc, #136]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d208      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4917      	ldr	r1, [pc, #92]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ca0:	f000 f834 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	4912      	ldr	r1, [pc, #72]	@ (8002cfc <HAL_RCC_ClockConfig+0x35c>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8002cfc <HAL_RCC_ClockConfig+0x35c>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <HAL_RCC_ClockConfig+0x360>)
 8002cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <HAL_RCC_ClockConfig+0x364>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_RCC_ClockConfig+0x368>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe f860 	bl	8000da8 <HAL_InitTick>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	080070b4 	.word	0x080070b4
 8002d00:	24000004 	.word	0x24000004
 8002d04:	24000000 	.word	0x24000000
 8002d08:	24000008 	.word	0x24000008

08002d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d12:	4bb3      	ldr	r3, [pc, #716]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d1a:	2b18      	cmp	r3, #24
 8002d1c:	f200 8155 	bhi.w	8002fca <HAL_RCC_GetSysClockFreq+0x2be>
 8002d20:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d8d 	.word	0x08002d8d
 8002d2c:	08002fcb 	.word	0x08002fcb
 8002d30:	08002fcb 	.word	0x08002fcb
 8002d34:	08002fcb 	.word	0x08002fcb
 8002d38:	08002fcb 	.word	0x08002fcb
 8002d3c:	08002fcb 	.word	0x08002fcb
 8002d40:	08002fcb 	.word	0x08002fcb
 8002d44:	08002fcb 	.word	0x08002fcb
 8002d48:	08002db3 	.word	0x08002db3
 8002d4c:	08002fcb 	.word	0x08002fcb
 8002d50:	08002fcb 	.word	0x08002fcb
 8002d54:	08002fcb 	.word	0x08002fcb
 8002d58:	08002fcb 	.word	0x08002fcb
 8002d5c:	08002fcb 	.word	0x08002fcb
 8002d60:	08002fcb 	.word	0x08002fcb
 8002d64:	08002fcb 	.word	0x08002fcb
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002fcb 	.word	0x08002fcb
 8002d70:	08002fcb 	.word	0x08002fcb
 8002d74:	08002fcb 	.word	0x08002fcb
 8002d78:	08002fcb 	.word	0x08002fcb
 8002d7c:	08002fcb 	.word	0x08002fcb
 8002d80:	08002fcb 	.word	0x08002fcb
 8002d84:	08002fcb 	.word	0x08002fcb
 8002d88:	08002dbf 	.word	0x08002dbf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d8c:	4b94      	ldr	r3, [pc, #592]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d98:	4b91      	ldr	r3, [pc, #580]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	4a90      	ldr	r2, [pc, #576]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002daa:	e111      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dac:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dae:	61bb      	str	r3, [r7, #24]
      break;
 8002db0:	e10e      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002db2:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002db4:	61bb      	str	r3, [r7, #24]
      break;
 8002db6:	e10b      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002db8:	4b8c      	ldr	r3, [pc, #560]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dba:	61bb      	str	r3, [r7, #24]
      break;
 8002dbc:	e108      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dbe:	4b88      	ldr	r3, [pc, #544]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dc8:	4b85      	ldr	r3, [pc, #532]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dd4:	4b82      	ldr	r3, [pc, #520]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dde:	4b80      	ldr	r3, [pc, #512]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de2:	08db      	lsrs	r3, r3, #3
 8002de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80e1 	beq.w	8002fc4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	f000 8083 	beq.w	8002f10 <HAL_RCC_GetSysClockFreq+0x204>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	f200 80a1 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x248>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x114>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d056      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e1e:	e099      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e20:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02d      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e56:	4b62      	ldr	r3, [pc, #392]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e86:	e087      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9a:	4b51      	ldr	r3, [pc, #324]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eca:	e065      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ff8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ede:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ef2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f0e:	e043      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f22:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f36:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f52:	e021      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ff8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f66:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f7a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f98:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	0a5b      	lsrs	r3, r3, #9
 8002f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fbc:	ee17 3a90 	vmov	r3, s15
 8002fc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
      break;
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fcc:	61bb      	str	r3, [r7, #24]
      break;
 8002fce:	bf00      	nop
  }

  return sysclockfreq;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	03d09000 	.word	0x03d09000
 8002fe8:	003d0900 	.word	0x003d0900
 8002fec:	007a1200 	.word	0x007a1200
 8002ff0:	46000000 	.word	0x46000000
 8002ff4:	4c742400 	.word	0x4c742400
 8002ff8:	4a742400 	.word	0x4a742400
 8002ffc:	4af42400 	.word	0x4af42400

08003000 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b0ca      	sub	sp, #296	@ 0x128
 8003006:	af00      	add	r7, sp, #0
 8003008:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003024:	2500      	movs	r5, #0
 8003026:	ea54 0305 	orrs.w	r3, r4, r5
 800302a:	d049      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003036:	d02f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800303c:	d828      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800303e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003042:	d01a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003048:	d822      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800304e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003052:	d007      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003054:	e01c      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003056:	4bb8      	ldr	r3, [pc, #736]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	4ab7      	ldr	r2, [pc, #732]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003062:	e01a      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003068:	3308      	adds	r3, #8
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f001 f9d1 	bl	8004414 <RCCEx_PLL2_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003078:	e00f      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307e:	3328      	adds	r3, #40	@ 0x28
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f001 fa78 	bl	8004578 <RCCEx_PLL3_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800308e:	e004      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030b0:	4aa1      	ldr	r2, [pc, #644]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030b2:	430b      	orrs	r3, r1
 80030b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80030b6:	e003      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80030cc:	f04f 0900 	mov.w	r9, #0
 80030d0:	ea58 0309 	orrs.w	r3, r8, r9
 80030d4:	d047      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d82a      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800310b 	.word	0x0800310b
 80030f0:	08003121 	.word	0x08003121
 80030f4:	0800313f 	.word	0x0800313f
 80030f8:	0800313f 	.word	0x0800313f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	4a8d      	ldr	r2, [pc, #564]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003108:	e01a      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	3308      	adds	r3, #8
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f97e 	bl	8004414 <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800311e:	e00f      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003124:	3328      	adds	r3, #40	@ 0x28
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fa25 	bl	8004578 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003134:	e004      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800313c:	e000      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800313e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003148:	4b7b      	ldr	r3, [pc, #492]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800314a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314c:	f023 0107 	bic.w	r1, r3, #7
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	4a78      	ldr	r2, [pc, #480]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003158:	430b      	orrs	r3, r1
 800315a:	6513      	str	r3, [r2, #80]	@ 0x50
 800315c:	e003      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003172:	f04f 0b00 	mov.w	fp, #0
 8003176:	ea5a 030b 	orrs.w	r3, sl, fp
 800317a:	d04c      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003186:	d030      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318c:	d829      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800318e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003190:	d02d      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003192:	2bc0      	cmp	r3, #192	@ 0xc0
 8003194:	d825      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d018      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d821      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031a2:	2b40      	cmp	r3, #64	@ 0x40
 80031a4:	d007      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80031a6:	e01c      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a8:	4b63      	ldr	r3, [pc, #396]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	4a62      	ldr	r2, [pc, #392]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031b4:	e01c      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ba:	3308      	adds	r3, #8
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 f928 	bl	8004414 <RCCEx_PLL2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031ca:	e011      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	3328      	adds	r3, #40	@ 0x28
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 f9cf 	bl	8004578 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	4a4c      	ldr	r2, [pc, #304]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003208:	430b      	orrs	r3, r1
 800320a:	6513      	str	r3, [r2, #80]	@ 0x50
 800320c:	e003      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003222:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800322c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003230:	460b      	mov	r3, r1
 8003232:	4313      	orrs	r3, r2
 8003234:	d053      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800323e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003242:	d035      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003248:	d82e      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800324a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800324e:	d031      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003250:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003254:	d828      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800325a:	d01a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800325c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003260:	d822      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800326a:	d007      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800326c:	e01c      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326e:	4b32      	ldr	r3, [pc, #200]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003272:	4a31      	ldr	r2, [pc, #196]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800327a:	e01c      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800327c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003280:	3308      	adds	r3, #8
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f8c5 	bl	8004414 <RCCEx_PLL2_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003290:	e011      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003296:	3328      	adds	r3, #40	@ 0x28
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f96c 	bl	8004578 <RCCEx_PLL3_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032a6:	e006      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ae:	e002      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032be:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d4:	e003      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80032f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80032f8:	460b      	mov	r3, r1
 80032fa:	4313      	orrs	r3, r2
 80032fc:	d056      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800330a:	d038      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800330c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003310:	d831      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003312:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003316:	d034      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003318:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800331c:	d82b      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800331e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003322:	d01d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003328:	d825      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800332e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003334:	e01f      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003336:	bf00      	nop
 8003338:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333c:	4ba2      	ldr	r3, [pc, #648]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	4aa1      	ldr	r2, [pc, #644]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003348:	e01c      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334e:	3308      	adds	r3, #8
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f85e 	bl	8004414 <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800335e:	e011      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	3328      	adds	r3, #40	@ 0x28
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f001 f905 	bl	8004578 <RCCEx_PLL3_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800337c:	e002      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800338c:	4b8e      	ldr	r3, [pc, #568]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003398:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800339c:	4a8a      	ldr	r2, [pc, #552]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80033b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80033bc:	2300      	movs	r3, #0
 80033be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80033c6:	460b      	mov	r3, r1
 80033c8:	4313      	orrs	r3, r2
 80033ca:	d03a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	2b30      	cmp	r3, #48	@ 0x30
 80033d4:	d01f      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033d6:	2b30      	cmp	r3, #48	@ 0x30
 80033d8:	d819      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d815      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d019      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d111      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ea:	4b77      	ldr	r3, [pc, #476]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	4a76      	ldr	r2, [pc, #472]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033f6:	e011      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fc:	3308      	adds	r3, #8
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f001 f807 	bl	8004414 <RCCEx_PLL2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800340c:	e006      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800341a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003424:	4b68      	ldr	r3, [pc, #416]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003428:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003434:	430b      	orrs	r3, r1
 8003436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003438:	e003      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800344e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003458:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d051      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346c:	d035      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800346e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003472:	d82e      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003474:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003478:	d031      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800347a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800347e:	d828      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003484:	d01a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348a:	d822      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003494:	d007      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003496:	e01c      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003498:	4b4b      	ldr	r3, [pc, #300]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4a4a      	ldr	r2, [pc, #296]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800349e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034a4:	e01c      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	3308      	adds	r3, #8
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 ffb0 	bl	8004414 <RCCEx_PLL2_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034ba:	e011      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	3328      	adds	r3, #40	@ 0x28
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f857 	bl	8004578 <RCCEx_PLL3_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034e8:	4b37      	ldr	r3, [pc, #220]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800351c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d056      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003530:	d033      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003532:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003536:	d82c      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800353c:	d02f      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800353e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003542:	d826      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003544:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003548:	d02b      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800354a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800354e:	d820      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003554:	d012      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003556:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800355a:	d81a      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d022      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d115      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	3308      	adds	r3, #8
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff50 	bl	8004414 <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800357a:	e015      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003580:	3328      	adds	r3, #40	@ 0x28
 8003582:	2101      	movs	r1, #1
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fff7 	bl	8004578 <RCCEx_PLL3_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003590:	e00a      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800359a:	bf00      	nop
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035be:	4a02      	ldr	r2, [pc, #8]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035c4:	e006      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035c6:	bf00      	nop
 80035c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4313      	orrs	r3, r2
 80035f2:	d055      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003600:	d033      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003606:	d82c      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d02f      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003612:	d826      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003618:	d02b      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800361a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800361e:	d820      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003624:	d012      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800362a:	d81a      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d022      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003634:	d115      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	3308      	adds	r3, #8
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fee8 	bl	8004414 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800364a:	e015      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	3328      	adds	r3, #40	@ 0x28
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ff8f 	bl	8004578 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003660:	e00a      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800366a:	bf00      	nop
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003680:	4ba3      	ldr	r3, [pc, #652]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003690:	4a9f      	ldr	r2, [pc, #636]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6593      	str	r3, [r2, #88]	@ 0x58
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80036ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d037      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ca:	d00e      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80036cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d0:	d816      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80036d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036da:	d111      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	4a8b      	ldr	r2, [pc, #556]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036e8:	e00f      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	3308      	adds	r3, #8
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fe8e 	bl	8004414 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003712:	4b7f      	ldr	r3, [pc, #508]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003716:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	4a7b      	ldr	r2, [pc, #492]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003722:	430b      	orrs	r3, r1
 8003724:	6513      	str	r3, [r2, #80]	@ 0x50
 8003726:	e003      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800373c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003746:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d039      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003756:	2b03      	cmp	r3, #3
 8003758:	d81c      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800375a:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	0800379d 	.word	0x0800379d
 8003764:	08003771 	.word	0x08003771
 8003768:	0800377f 	.word	0x0800377f
 800376c:	0800379d 	.word	0x0800379d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b67      	ldr	r3, [pc, #412]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	4a66      	ldr	r2, [pc, #408]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800377c:	e00f      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003782:	3308      	adds	r3, #8
 8003784:	2102      	movs	r1, #2
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fe44 	bl	8004414 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	f023 0103 	bic.w	r1, r3, #3
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	4a56      	ldr	r2, [pc, #344]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f000 809f 	beq.w	8003924 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f2:	f7fd fb23 	bl	8000e3c <HAL_GetTick>
 80037f6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fa:	e00b      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fd fb1e 	bl	8000e3c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	@ 0x64
 800380a:	d903      	bls.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003812:	e005      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003814:	4b3f      	ldr	r3, [pc, #252]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ed      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003824:	2b00      	cmp	r3, #0
 8003826:	d179      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003828:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800382a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003834:	4053      	eors	r3, r2
 8003836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800383e:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003846:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800384a:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	4a30      	ldr	r2, [pc, #192]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003854:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003856:	4b2e      	ldr	r3, [pc, #184]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	4a2d      	ldr	r2, [pc, #180]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003860:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003862:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003868:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003876:	d118      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fae0 	bl	8000e3c <HAL_GetTick>
 800387c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003880:	e00d      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fd fadb 	bl	8000e3c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003892:	429a      	cmp	r2, r3
 8003894:	d903      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800389c:	e005      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800389e:	4b1c      	ldr	r3, [pc, #112]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0eb      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80038aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d129      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c2:	d10e      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038c4:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038d4:	091a      	lsrs	r2, r3, #4
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80038d8:	4013      	ands	r3, r2
 80038da:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	6113      	str	r3, [r2, #16]
 80038e0:	e005      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038ec:	6113      	str	r3, [r2, #16]
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fe:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003900:	430b      	orrs	r3, r1
 8003902:	6713      	str	r3, [r2, #112]	@ 0x70
 8003904:	e00e      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003910:	58024400 	.word	0x58024400
 8003914:	58024800 	.word	0x58024800
 8003918:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f002 0301 	and.w	r3, r2, #1
 8003930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800393a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	f000 8089 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800394c:	2b28      	cmp	r3, #40	@ 0x28
 800394e:	d86b      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003950:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	08003a31 	.word	0x08003a31
 800395c:	08003a29 	.word	0x08003a29
 8003960:	08003a29 	.word	0x08003a29
 8003964:	08003a29 	.word	0x08003a29
 8003968:	08003a29 	.word	0x08003a29
 800396c:	08003a29 	.word	0x08003a29
 8003970:	08003a29 	.word	0x08003a29
 8003974:	08003a29 	.word	0x08003a29
 8003978:	080039fd 	.word	0x080039fd
 800397c:	08003a29 	.word	0x08003a29
 8003980:	08003a29 	.word	0x08003a29
 8003984:	08003a29 	.word	0x08003a29
 8003988:	08003a29 	.word	0x08003a29
 800398c:	08003a29 	.word	0x08003a29
 8003990:	08003a29 	.word	0x08003a29
 8003994:	08003a29 	.word	0x08003a29
 8003998:	08003a13 	.word	0x08003a13
 800399c:	08003a29 	.word	0x08003a29
 80039a0:	08003a29 	.word	0x08003a29
 80039a4:	08003a29 	.word	0x08003a29
 80039a8:	08003a29 	.word	0x08003a29
 80039ac:	08003a29 	.word	0x08003a29
 80039b0:	08003a29 	.word	0x08003a29
 80039b4:	08003a29 	.word	0x08003a29
 80039b8:	08003a31 	.word	0x08003a31
 80039bc:	08003a29 	.word	0x08003a29
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	08003a29 	.word	0x08003a29
 80039c8:	08003a29 	.word	0x08003a29
 80039cc:	08003a29 	.word	0x08003a29
 80039d0:	08003a29 	.word	0x08003a29
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a29 	.word	0x08003a29
 80039e0:	08003a29 	.word	0x08003a29
 80039e4:	08003a29 	.word	0x08003a29
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a29 	.word	0x08003a29
 80039f0:	08003a29 	.word	0x08003a29
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a31 	.word	0x08003a31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3308      	adds	r3, #8
 8003a02:	2101      	movs	r1, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd05 	bl	8004414 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a10:	e00f      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fdac 	bl	8004578 <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a26:	e004      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a3a:	4bbf      	ldr	r3, [pc, #764]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a48:	4abb      	ldr	r2, [pc, #748]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a4e:	e003      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f002 0302 	and.w	r3, r2, #2
 8003a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d041      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d824      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003a82:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003ad5 	.word	0x08003ad5
 8003a8c:	08003aa1 	.word	0x08003aa1
 8003a90:	08003ab7 	.word	0x08003ab7
 8003a94:	08003ad5 	.word	0x08003ad5
 8003a98:	08003ad5 	.word	0x08003ad5
 8003a9c:	08003ad5 	.word	0x08003ad5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fcb3 	bl	8004414 <RCCEx_PLL2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ab4:	e00f      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	3328      	adds	r3, #40	@ 0x28
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd5a 	bl	8004578 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aca:	e004      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ade:	4b96      	ldr	r3, [pc, #600]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	f023 0107 	bic.w	r1, r3, #7
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aec:	4a92      	ldr	r2, [pc, #584]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003af2:	e003      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f002 0304 	and.w	r3, r2, #4
 8003b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d044      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d825      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b7d 	.word	0x08003b7d
 8003b34:	08003b49 	.word	0x08003b49
 8003b38:	08003b5f 	.word	0x08003b5f
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b7d 	.word	0x08003b7d
 8003b44:	08003b7d 	.word	0x08003b7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fc5f 	bl	8004414 <RCCEx_PLL2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	3328      	adds	r3, #40	@ 0x28
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fd06 	bl	8004578 <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b72:	e004      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b86:	4b6c      	ldr	r3, [pc, #432]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8a:	f023 0107 	bic.w	r1, r3, #7
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b96:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f002 0320 	and.w	r3, r2, #32
 8003bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d055      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd2:	d033      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd8:	d82c      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bde:	d02f      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be4:	d826      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003be6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bea:	d02b      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003bec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bf0:	d820      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf6:	d012      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfc:	d81a      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d022      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c06:	d115      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fbff 	bl	8004414 <RCCEx_PLL2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c1c:	e015      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	3328      	adds	r3, #40	@ 0x28
 8003c24:	2102      	movs	r1, #2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fca6 	bl	8004578 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c32:	e00a      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3a:	e006      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c3c:	bf00      	nop
 8003c3e:	e004      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c40:	bf00      	nop
 8003c42:	e002      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c44:	bf00      	nop
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c52:	4b39      	ldr	r3, [pc, #228]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c62:	4a35      	ldr	r2, [pc, #212]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d058      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c9e:	d033      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ca0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ca4:	d82c      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003caa:	d02f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb0:	d826      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cb6:	d02b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003cb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cbc:	d820      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc2:	d012      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc8:	d81a      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d022      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd2:	d115      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	3308      	adds	r3, #8
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fb99 	bl	8004414 <RCCEx_PLL2_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e015      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	3328      	adds	r3, #40	@ 0x28
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fc40 	bl	8004578 <RCCEx_PLL3_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d06:	e006      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d08:	bf00      	nop
 8003d0a:	e004      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e002      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d10:	bf00      	nop
 8003d12:	e000      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10e      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d2e:	4a02      	ldr	r2, [pc, #8]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d055      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d70:	d033      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003d72:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d76:	d82c      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d7c:	d02f      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d82:	d826      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d88:	d02b      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003d8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d8e:	d820      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d94:	d012      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d9a:	d81a      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d022      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da4:	d115      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	3308      	adds	r3, #8
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb30 	bl	8004414 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dba:	e015      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	3328      	adds	r3, #40	@ 0x28
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fbd7 	bl	8004578 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003df0:	4ba1      	ldr	r3, [pc, #644]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e00:	4a9d      	ldr	r2, [pc, #628]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f002 0308 	and.w	r3, r2, #8
 8003e1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	d01e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	3328      	adds	r3, #40	@ 0x28
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fb96 	bl	8004578 <RCCEx_PLL3_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e58:	4b87      	ldr	r3, [pc, #540]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e68:	4a83      	ldr	r2, [pc, #524]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f002 0310 	and.w	r3, r2, #16
 8003e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	d01e      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea0:	3328      	adds	r3, #40	@ 0x28
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fb67 	bl	8004578 <RCCEx_PLL3_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eb6:	4b70      	ldr	r3, [pc, #448]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec6:	4a6c      	ldr	r2, [pc, #432]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ee2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d03e      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ef8:	d022      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003efe:	d81b      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f0a:	e015      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	3308      	adds	r3, #8
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fa7d 	bl	8004414 <RCCEx_PLL2_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f20:	e00f      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	3328      	adds	r3, #40	@ 0x28
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fb24 	bl	8004578 <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f36:	e004      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f5a:	4a47      	ldr	r2, [pc, #284]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f78:	2300      	movs	r3, #0
 8003f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f80:	460b      	mov	r3, r1
 8003f82:	4313      	orrs	r3, r2
 8003f84:	d03b      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f92:	d01f      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f98:	d818      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003fa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fa4:	d007      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003fa6:	e011      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa8:	4b33      	ldr	r3, [pc, #204]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	4a32      	ldr	r2, [pc, #200]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fb4:	e00f      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	3328      	adds	r3, #40	@ 0x28
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fada 	bl	8004578 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fde:	4b26      	ldr	r3, [pc, #152]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff4:	e003      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800400a:	673b      	str	r3, [r7, #112]	@ 0x70
 800400c:	2300      	movs	r3, #0
 800400e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004010:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d034      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004028:	d007      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800402a:	e011      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800402c:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	4a11      	ldr	r2, [pc, #68]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004038:	e00e      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	3308      	adds	r3, #8
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f9e6 	bl	8004414 <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004064:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406e:	4a02      	ldr	r2, [pc, #8]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004070:	430b      	orrs	r3, r1
 8004072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004092:	2300      	movs	r3, #0
 8004094:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004096:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800409a:	460b      	mov	r3, r1
 800409c:	4313      	orrs	r3, r2
 800409e:	d00c      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3328      	adds	r3, #40	@ 0x28
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa65 	bl	8004578 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80040c8:	2300      	movs	r3, #0
 80040ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80040cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040d0:	460b      	mov	r3, r1
 80040d2:	4313      	orrs	r3, r2
 80040d4:	d038      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e2:	d018      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80040e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e8:	d811      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ee:	d014      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f4:	d80b      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d011      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fe:	d106      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004100:	4bc3      	ldr	r3, [pc, #780]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	4ac2      	ldr	r2, [pc, #776]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800410c:	e008      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004114:	e004      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004128:	4bb9      	ldr	r3, [pc, #740]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004138:	4ab5      	ldr	r2, [pc, #724]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800413a:	430b      	orrs	r3, r1
 800413c:	6553      	str	r3, [r2, #84]	@ 0x54
 800413e:	e003      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004154:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004156:	2300      	movs	r3, #0
 8004158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800415a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004164:	4baa      	ldr	r3, [pc, #680]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004168:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	4aa7      	ldr	r2, [pc, #668]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004174:	430b      	orrs	r3, r1
 8004176:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004184:	653b      	str	r3, [r7, #80]	@ 0x50
 8004186:	2300      	movs	r3, #0
 8004188:	657b      	str	r3, [r7, #84]	@ 0x54
 800418a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800418e:	460b      	mov	r3, r1
 8004190:	4313      	orrs	r3, r2
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004194:	4b9e      	ldr	r3, [pc, #632]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041a4:	4a9a      	ldr	r2, [pc, #616]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b8:	2300      	movs	r3, #0
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041c6:	4b92      	ldr	r3, [pc, #584]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80041e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80041e8:	2300      	movs	r3, #0
 80041ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041f0:	460b      	mov	r3, r1
 80041f2:	4313      	orrs	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041f6:	4b86      	ldr	r3, [pc, #536]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	4a85      	ldr	r2, [pc, #532]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004200:	6113      	str	r3, [r2, #16]
 8004202:	4b83      	ldr	r3, [pc, #524]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800420e:	4a80      	ldr	r2, [pc, #512]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004222:	2300      	movs	r3, #0
 8004224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004226:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004230:	4b77      	ldr	r3, [pc, #476]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004234:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	4a74      	ldr	r2, [pc, #464]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004240:	430b      	orrs	r3, r1
 8004242:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004250:	633b      	str	r3, [r7, #48]	@ 0x30
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
 8004256:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004260:	4b6b      	ldr	r3, [pc, #428]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004264:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004270:	4a67      	ldr	r2, [pc, #412]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004272:	430b      	orrs	r3, r1
 8004274:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	2100      	movs	r1, #0
 8004280:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004288:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d011      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	3308      	adds	r3, #8
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f8ba 	bl	8004414 <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	2100      	movs	r1, #0
 80042c0:	6239      	str	r1, [r7, #32]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042cc:	460b      	mov	r3, r1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	d011      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	3308      	adds	r3, #8
 80042d8:	2101      	movs	r1, #1
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f89a 	bl	8004414 <RCCEx_PLL2_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	2100      	movs	r1, #0
 8004300:	61b9      	str	r1, [r7, #24]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d011      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	3308      	adds	r3, #8
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f87a 	bl	8004414 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	2100      	movs	r1, #0
 8004340:	6139      	str	r1, [r7, #16]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d011      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	3328      	adds	r3, #40	@ 0x28
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f90c 	bl	8004578 <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	2100      	movs	r1, #0
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800438c:	460b      	mov	r3, r1
 800438e:	4313      	orrs	r3, r2
 8004390:	d011      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	3328      	adds	r3, #40	@ 0x28
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f8ec 	bl	8004578 <RCCEx_PLL3_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	2100      	movs	r1, #0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f8cc 	bl	8004578 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80043f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
}
 8004404:	4618      	mov	r0, r3
 8004406:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800440a:	46bd      	mov	sp, r7
 800440c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004410:	58024400 	.word	0x58024400

08004414 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004422:	4b53      	ldr	r3, [pc, #332]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b03      	cmp	r3, #3
 800442c:	d101      	bne.n	8004432 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e099      	b.n	8004566 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004432:	4b4f      	ldr	r3, [pc, #316]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a4e      	ldr	r2, [pc, #312]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004438:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800443c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443e:	f7fc fcfd 	bl	8000e3c <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004444:	e008      	b.n	8004458 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004446:	f7fc fcf9 	bl	8000e3c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e086      	b.n	8004566 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004458:	4b45      	ldr	r3, [pc, #276]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004464:	4b42      	ldr	r3, [pc, #264]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	493f      	ldr	r1, [pc, #252]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004474:	4313      	orrs	r3, r2
 8004476:	628b      	str	r3, [r1, #40]	@ 0x28
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	3b01      	subs	r3, #1
 800447e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	3b01      	subs	r3, #1
 8004488:	025b      	lsls	r3, r3, #9
 800448a:	b29b      	uxth	r3, r3
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	3b01      	subs	r3, #1
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044a8:	4931      	ldr	r1, [pc, #196]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044ae:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	492d      	ldr	r1, [pc, #180]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	f023 0220 	bic.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	4928      	ldr	r1, [pc, #160]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044d2:	4b27      	ldr	r3, [pc, #156]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	4a26      	ldr	r2, [pc, #152]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044d8:	f023 0310 	bic.w	r3, r3, #16
 80044dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044de:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <RCCEx_PLL2_Config+0x160>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	69d2      	ldr	r2, [r2, #28]
 80044ea:	00d2      	lsls	r2, r2, #3
 80044ec:	4920      	ldr	r1, [pc, #128]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 80044f8:	f043 0310 	orr.w	r3, r3, #16
 80044fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004504:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	4a19      	ldr	r2, [pc, #100]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 800450a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800450e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004510:	e00f      	b.n	8004532 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004522:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004524:	e005      	b.n	8004532 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004526:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	4a11      	ldr	r2, [pc, #68]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 800452c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004530:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004532:	4b0f      	ldr	r3, [pc, #60]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a0e      	ldr	r2, [pc, #56]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 8004538:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453e:	f7fc fc7d 	bl	8000e3c <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004544:	e008      	b.n	8004558 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004546:	f7fc fc79 	bl	8000e3c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e006      	b.n	8004566 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <RCCEx_PLL2_Config+0x15c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
 8004574:	ffff0007 	.word	0xffff0007

08004578 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004586:	4b53      	ldr	r3, [pc, #332]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b03      	cmp	r3, #3
 8004590:	d101      	bne.n	8004596 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e099      	b.n	80046ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004596:	4b4f      	ldr	r3, [pc, #316]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4e      	ldr	r2, [pc, #312]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a2:	f7fc fc4b 	bl	8000e3c <HAL_GetTick>
 80045a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045a8:	e008      	b.n	80045bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045aa:	f7fc fc47 	bl	8000e3c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e086      	b.n	80046ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045bc:	4b45      	ldr	r3, [pc, #276]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045c8:	4b42      	ldr	r3, [pc, #264]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	051b      	lsls	r3, r3, #20
 80045d6:	493f      	ldr	r1, [pc, #252]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	628b      	str	r3, [r1, #40]	@ 0x28
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	025b      	lsls	r3, r3, #9
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	3b01      	subs	r3, #1
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800460c:	4931      	ldr	r1, [pc, #196]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004612:	4b30      	ldr	r3, [pc, #192]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	492d      	ldr	r1, [pc, #180]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004624:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	4928      	ldr	r1, [pc, #160]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004636:	4b27      	ldr	r3, [pc, #156]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	4a26      	ldr	r2, [pc, #152]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800463c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004642:	4b24      	ldr	r3, [pc, #144]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <RCCEx_PLL3_Config+0x160>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	69d2      	ldr	r2, [r2, #28]
 800464e:	00d2      	lsls	r2, r2, #3
 8004650:	4920      	ldr	r1, [pc, #128]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004656:	4b1f      	ldr	r3, [pc, #124]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	4a1e      	ldr	r2, [pc, #120]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004668:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800466e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004672:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004674:	e00f      	b.n	8004696 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d106      	bne.n	800468a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800467c:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	4a14      	ldr	r2, [pc, #80]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004682:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004686:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004688:	e005      	b.n	8004696 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800468a:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468e:	4a11      	ldr	r2, [pc, #68]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004690:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004694:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004696:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a0e      	ldr	r2, [pc, #56]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a2:	f7fc fbcb 	bl	8000e3c <HAL_GetTick>
 80046a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046a8:	e008      	b.n	80046bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046aa:	f7fc fbc7 	bl	8000e3c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <RCCEx_PLL3_Config+0x15c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	58024400 	.word	0x58024400
 80046d8:	ffff0007 	.word	0xffff0007

080046dc <__cvt>:
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046de:	ed2d 8b02 	vpush	{d8}
 80046e2:	eeb0 8b40 	vmov.f64	d8, d0
 80046e6:	b085      	sub	sp, #20
 80046e8:	4617      	mov	r7, r2
 80046ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80046ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046ee:	ee18 2a90 	vmov	r2, s17
 80046f2:	f025 0520 	bic.w	r5, r5, #32
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	bfb6      	itet	lt
 80046fa:	222d      	movlt	r2, #45	@ 0x2d
 80046fc:	2200      	movge	r2, #0
 80046fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8004702:	2d46      	cmp	r5, #70	@ 0x46
 8004704:	460c      	mov	r4, r1
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	d004      	beq.n	8004714 <__cvt+0x38>
 800470a:	2d45      	cmp	r5, #69	@ 0x45
 800470c:	d100      	bne.n	8004710 <__cvt+0x34>
 800470e:	3401      	adds	r4, #1
 8004710:	2102      	movs	r1, #2
 8004712:	e000      	b.n	8004716 <__cvt+0x3a>
 8004714:	2103      	movs	r1, #3
 8004716:	ab03      	add	r3, sp, #12
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	ab02      	add	r3, sp, #8
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4622      	mov	r2, r4
 8004720:	4633      	mov	r3, r6
 8004722:	eeb0 0b48 	vmov.f64	d0, d8
 8004726:	f000 ff2f 	bl	8005588 <_dtoa_r>
 800472a:	2d47      	cmp	r5, #71	@ 0x47
 800472c:	d114      	bne.n	8004758 <__cvt+0x7c>
 800472e:	07fb      	lsls	r3, r7, #31
 8004730:	d50a      	bpl.n	8004748 <__cvt+0x6c>
 8004732:	1902      	adds	r2, r0, r4
 8004734:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	bf08      	it	eq
 800473e:	9203      	streq	r2, [sp, #12]
 8004740:	2130      	movs	r1, #48	@ 0x30
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	4293      	cmp	r3, r2
 8004746:	d319      	bcc.n	800477c <__cvt+0xa0>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800474c:	1a1b      	subs	r3, r3, r0
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	b005      	add	sp, #20
 8004752:	ecbd 8b02 	vpop	{d8}
 8004756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004758:	2d46      	cmp	r5, #70	@ 0x46
 800475a:	eb00 0204 	add.w	r2, r0, r4
 800475e:	d1e9      	bne.n	8004734 <__cvt+0x58>
 8004760:	7803      	ldrb	r3, [r0, #0]
 8004762:	2b30      	cmp	r3, #48	@ 0x30
 8004764:	d107      	bne.n	8004776 <__cvt+0x9a>
 8004766:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	bf1c      	itt	ne
 8004770:	f1c4 0401 	rsbne	r4, r4, #1
 8004774:	6034      	strne	r4, [r6, #0]
 8004776:	6833      	ldr	r3, [r6, #0]
 8004778:	441a      	add	r2, r3
 800477a:	e7db      	b.n	8004734 <__cvt+0x58>
 800477c:	1c5c      	adds	r4, r3, #1
 800477e:	9403      	str	r4, [sp, #12]
 8004780:	7019      	strb	r1, [r3, #0]
 8004782:	e7de      	b.n	8004742 <__cvt+0x66>

08004784 <__exponent>:
 8004784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004786:	2900      	cmp	r1, #0
 8004788:	bfba      	itte	lt
 800478a:	4249      	neglt	r1, r1
 800478c:	232d      	movlt	r3, #45	@ 0x2d
 800478e:	232b      	movge	r3, #43	@ 0x2b
 8004790:	2909      	cmp	r1, #9
 8004792:	7002      	strb	r2, [r0, #0]
 8004794:	7043      	strb	r3, [r0, #1]
 8004796:	dd29      	ble.n	80047ec <__exponent+0x68>
 8004798:	f10d 0307 	add.w	r3, sp, #7
 800479c:	461d      	mov	r5, r3
 800479e:	270a      	movs	r7, #10
 80047a0:	461a      	mov	r2, r3
 80047a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80047a6:	fb07 1416 	mls	r4, r7, r6, r1
 80047aa:	3430      	adds	r4, #48	@ 0x30
 80047ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047b0:	460c      	mov	r4, r1
 80047b2:	2c63      	cmp	r4, #99	@ 0x63
 80047b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80047b8:	4631      	mov	r1, r6
 80047ba:	dcf1      	bgt.n	80047a0 <__exponent+0x1c>
 80047bc:	3130      	adds	r1, #48	@ 0x30
 80047be:	1e94      	subs	r4, r2, #2
 80047c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047c4:	1c41      	adds	r1, r0, #1
 80047c6:	4623      	mov	r3, r4
 80047c8:	42ab      	cmp	r3, r5
 80047ca:	d30a      	bcc.n	80047e2 <__exponent+0x5e>
 80047cc:	f10d 0309 	add.w	r3, sp, #9
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	42ac      	cmp	r4, r5
 80047d4:	bf88      	it	hi
 80047d6:	2300      	movhi	r3, #0
 80047d8:	3302      	adds	r3, #2
 80047da:	4403      	add	r3, r0
 80047dc:	1a18      	subs	r0, r3, r0
 80047de:	b003      	add	sp, #12
 80047e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047ea:	e7ed      	b.n	80047c8 <__exponent+0x44>
 80047ec:	2330      	movs	r3, #48	@ 0x30
 80047ee:	3130      	adds	r1, #48	@ 0x30
 80047f0:	7083      	strb	r3, [r0, #2]
 80047f2:	70c1      	strb	r1, [r0, #3]
 80047f4:	1d03      	adds	r3, r0, #4
 80047f6:	e7f1      	b.n	80047dc <__exponent+0x58>

080047f8 <_printf_float>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	b08d      	sub	sp, #52	@ 0x34
 80047fe:	460c      	mov	r4, r1
 8004800:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004804:	4616      	mov	r6, r2
 8004806:	461f      	mov	r7, r3
 8004808:	4605      	mov	r5, r0
 800480a:	f000 fdad 	bl	8005368 <_localeconv_r>
 800480e:	f8d0 b000 	ldr.w	fp, [r0]
 8004812:	4658      	mov	r0, fp
 8004814:	f7fb fdb4 	bl	8000380 <strlen>
 8004818:	2300      	movs	r3, #0
 800481a:	930a      	str	r3, [sp, #40]	@ 0x28
 800481c:	f8d8 3000 	ldr.w	r3, [r8]
 8004820:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	9005      	str	r0, [sp, #20]
 8004828:	3307      	adds	r3, #7
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	f103 0108 	add.w	r1, r3, #8
 8004832:	f8c8 1000 	str.w	r1, [r8]
 8004836:	ed93 0b00 	vldr	d0, [r3]
 800483a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004a98 <_printf_float+0x2a0>
 800483e:	eeb0 7bc0 	vabs.f64	d7, d0
 8004842:	eeb4 7b46 	vcmp.f64	d7, d6
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800484e:	dd24      	ble.n	800489a <_printf_float+0xa2>
 8004850:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	d502      	bpl.n	8004860 <_printf_float+0x68>
 800485a:	232d      	movs	r3, #45	@ 0x2d
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004860:	498f      	ldr	r1, [pc, #572]	@ (8004aa0 <_printf_float+0x2a8>)
 8004862:	4b90      	ldr	r3, [pc, #576]	@ (8004aa4 <_printf_float+0x2ac>)
 8004864:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004868:	bf8c      	ite	hi
 800486a:	4688      	movhi	r8, r1
 800486c:	4698      	movls	r8, r3
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	2303      	movs	r3, #3
 8004874:	6123      	str	r3, [r4, #16]
 8004876:	6022      	str	r2, [r4, #0]
 8004878:	f04f 0a00 	mov.w	sl, #0
 800487c:	9700      	str	r7, [sp, #0]
 800487e:	4633      	mov	r3, r6
 8004880:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f9d1 	bl	8004c2c <_printf_common>
 800488a:	3001      	adds	r0, #1
 800488c:	f040 8089 	bne.w	80049a2 <_printf_float+0x1aa>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	b00d      	add	sp, #52	@ 0x34
 8004896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489a:	eeb4 0b40 	vcmp.f64	d0, d0
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	d709      	bvc.n	80048b8 <_printf_float+0xc0>
 80048a4:	ee10 3a90 	vmov	r3, s1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bfbc      	itt	lt
 80048ac:	232d      	movlt	r3, #45	@ 0x2d
 80048ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048b2:	497d      	ldr	r1, [pc, #500]	@ (8004aa8 <_printf_float+0x2b0>)
 80048b4:	4b7d      	ldr	r3, [pc, #500]	@ (8004aac <_printf_float+0x2b4>)
 80048b6:	e7d5      	b.n	8004864 <_printf_float+0x6c>
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80048c0:	d139      	bne.n	8004936 <_printf_float+0x13e>
 80048c2:	2306      	movs	r3, #6
 80048c4:	6063      	str	r3, [r4, #4]
 80048c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048ca:	2300      	movs	r3, #0
 80048cc:	6022      	str	r2, [r4, #0]
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80048d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80048d6:	ab09      	add	r3, sp, #36	@ 0x24
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	6861      	ldr	r1, [r4, #4]
 80048dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048e0:	4628      	mov	r0, r5
 80048e2:	f7ff fefb 	bl	80046dc <__cvt>
 80048e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048ec:	4680      	mov	r8, r0
 80048ee:	d129      	bne.n	8004944 <_printf_float+0x14c>
 80048f0:	1cc8      	adds	r0, r1, #3
 80048f2:	db02      	blt.n	80048fa <_printf_float+0x102>
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	4299      	cmp	r1, r3
 80048f8:	dd41      	ble.n	800497e <_printf_float+0x186>
 80048fa:	f1a9 0902 	sub.w	r9, r9, #2
 80048fe:	fa5f f989 	uxtb.w	r9, r9
 8004902:	3901      	subs	r1, #1
 8004904:	464a      	mov	r2, r9
 8004906:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800490a:	9109      	str	r1, [sp, #36]	@ 0x24
 800490c:	f7ff ff3a 	bl	8004784 <__exponent>
 8004910:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004912:	1813      	adds	r3, r2, r0
 8004914:	2a01      	cmp	r2, #1
 8004916:	4682      	mov	sl, r0
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	dc02      	bgt.n	8004922 <_printf_float+0x12a>
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	07d2      	lsls	r2, r2, #31
 8004920:	d501      	bpl.n	8004926 <_printf_float+0x12e>
 8004922:	3301      	adds	r3, #1
 8004924:	6123      	str	r3, [r4, #16]
 8004926:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0a6      	beq.n	800487c <_printf_float+0x84>
 800492e:	232d      	movs	r3, #45	@ 0x2d
 8004930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004934:	e7a2      	b.n	800487c <_printf_float+0x84>
 8004936:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800493a:	d1c4      	bne.n	80048c6 <_printf_float+0xce>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1c2      	bne.n	80048c6 <_printf_float+0xce>
 8004940:	2301      	movs	r3, #1
 8004942:	e7bf      	b.n	80048c4 <_printf_float+0xcc>
 8004944:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004948:	d9db      	bls.n	8004902 <_printf_float+0x10a>
 800494a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800494e:	d118      	bne.n	8004982 <_printf_float+0x18a>
 8004950:	2900      	cmp	r1, #0
 8004952:	6863      	ldr	r3, [r4, #4]
 8004954:	dd0b      	ble.n	800496e <_printf_float+0x176>
 8004956:	6121      	str	r1, [r4, #16]
 8004958:	b913      	cbnz	r3, 8004960 <_printf_float+0x168>
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	07d0      	lsls	r0, r2, #31
 800495e:	d502      	bpl.n	8004966 <_printf_float+0x16e>
 8004960:	3301      	adds	r3, #1
 8004962:	440b      	add	r3, r1
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004968:	f04f 0a00 	mov.w	sl, #0
 800496c:	e7db      	b.n	8004926 <_printf_float+0x12e>
 800496e:	b913      	cbnz	r3, 8004976 <_printf_float+0x17e>
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	07d2      	lsls	r2, r2, #31
 8004974:	d501      	bpl.n	800497a <_printf_float+0x182>
 8004976:	3302      	adds	r3, #2
 8004978:	e7f4      	b.n	8004964 <_printf_float+0x16c>
 800497a:	2301      	movs	r3, #1
 800497c:	e7f2      	b.n	8004964 <_printf_float+0x16c>
 800497e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004984:	4299      	cmp	r1, r3
 8004986:	db05      	blt.n	8004994 <_printf_float+0x19c>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	6121      	str	r1, [r4, #16]
 800498c:	07d8      	lsls	r0, r3, #31
 800498e:	d5ea      	bpl.n	8004966 <_printf_float+0x16e>
 8004990:	1c4b      	adds	r3, r1, #1
 8004992:	e7e7      	b.n	8004964 <_printf_float+0x16c>
 8004994:	2900      	cmp	r1, #0
 8004996:	bfd4      	ite	le
 8004998:	f1c1 0202 	rsble	r2, r1, #2
 800499c:	2201      	movgt	r2, #1
 800499e:	4413      	add	r3, r2
 80049a0:	e7e0      	b.n	8004964 <_printf_float+0x16c>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	055a      	lsls	r2, r3, #21
 80049a6:	d407      	bmi.n	80049b8 <_printf_float+0x1c0>
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	4642      	mov	r2, r8
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	d12a      	bne.n	8004a0c <_printf_float+0x214>
 80049b6:	e76b      	b.n	8004890 <_printf_float+0x98>
 80049b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80049bc:	f240 80e0 	bls.w	8004b80 <_printf_float+0x388>
 80049c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80049c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	d133      	bne.n	8004a36 <_printf_float+0x23e>
 80049ce:	4a38      	ldr	r2, [pc, #224]	@ (8004ab0 <_printf_float+0x2b8>)
 80049d0:	2301      	movs	r3, #1
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	f43f af59 	beq.w	8004890 <_printf_float+0x98>
 80049de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049e2:	4543      	cmp	r3, r8
 80049e4:	db02      	blt.n	80049ec <_printf_float+0x1f4>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	07d8      	lsls	r0, r3, #31
 80049ea:	d50f      	bpl.n	8004a0c <_printf_float+0x214>
 80049ec:	9b05      	ldr	r3, [sp, #20]
 80049ee:	465a      	mov	r2, fp
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f af4a 	beq.w	8004890 <_printf_float+0x98>
 80049fc:	f04f 0900 	mov.w	r9, #0
 8004a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a04:	f104 0a1a 	add.w	sl, r4, #26
 8004a08:	45c8      	cmp	r8, r9
 8004a0a:	dc09      	bgt.n	8004a20 <_printf_float+0x228>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	079b      	lsls	r3, r3, #30
 8004a10:	f100 8107 	bmi.w	8004c22 <_printf_float+0x42a>
 8004a14:	68e0      	ldr	r0, [r4, #12]
 8004a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a18:	4298      	cmp	r0, r3
 8004a1a:	bfb8      	it	lt
 8004a1c:	4618      	movlt	r0, r3
 8004a1e:	e739      	b.n	8004894 <_printf_float+0x9c>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4652      	mov	r2, sl
 8004a24:	4631      	mov	r1, r6
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f43f af30 	beq.w	8004890 <_printf_float+0x98>
 8004a30:	f109 0901 	add.w	r9, r9, #1
 8004a34:	e7e8      	b.n	8004a08 <_printf_float+0x210>
 8004a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dc3b      	bgt.n	8004ab4 <_printf_float+0x2bc>
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <_printf_float+0x2b8>)
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	f43f af22 	beq.w	8004890 <_printf_float+0x98>
 8004a4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a50:	ea59 0303 	orrs.w	r3, r9, r3
 8004a54:	d102      	bne.n	8004a5c <_printf_float+0x264>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	07d9      	lsls	r1, r3, #31
 8004a5a:	d5d7      	bpl.n	8004a0c <_printf_float+0x214>
 8004a5c:	9b05      	ldr	r3, [sp, #20]
 8004a5e:	465a      	mov	r2, fp
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	f43f af12 	beq.w	8004890 <_printf_float+0x98>
 8004a6c:	f04f 0a00 	mov.w	sl, #0
 8004a70:	f104 0b1a 	add.w	fp, r4, #26
 8004a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a76:	425b      	negs	r3, r3
 8004a78:	4553      	cmp	r3, sl
 8004a7a:	dc01      	bgt.n	8004a80 <_printf_float+0x288>
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	e794      	b.n	80049aa <_printf_float+0x1b2>
 8004a80:	2301      	movs	r3, #1
 8004a82:	465a      	mov	r2, fp
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f43f af00 	beq.w	8004890 <_printf_float+0x98>
 8004a90:	f10a 0a01 	add.w	sl, sl, #1
 8004a94:	e7ee      	b.n	8004a74 <_printf_float+0x27c>
 8004a96:	bf00      	nop
 8004a98:	ffffffff 	.word	0xffffffff
 8004a9c:	7fefffff 	.word	0x7fefffff
 8004aa0:	080070d8 	.word	0x080070d8
 8004aa4:	080070d4 	.word	0x080070d4
 8004aa8:	080070e0 	.word	0x080070e0
 8004aac:	080070dc 	.word	0x080070dc
 8004ab0:	080070e4 	.word	0x080070e4
 8004ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004aba:	4553      	cmp	r3, sl
 8004abc:	bfa8      	it	ge
 8004abe:	4653      	movge	r3, sl
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	4699      	mov	r9, r3
 8004ac4:	dc37      	bgt.n	8004b36 <_printf_float+0x33e>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9307      	str	r3, [sp, #28]
 8004aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ace:	f104 021a 	add.w	r2, r4, #26
 8004ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ad4:	9907      	ldr	r1, [sp, #28]
 8004ad6:	9306      	str	r3, [sp, #24]
 8004ad8:	eba3 0309 	sub.w	r3, r3, r9
 8004adc:	428b      	cmp	r3, r1
 8004ade:	dc31      	bgt.n	8004b44 <_printf_float+0x34c>
 8004ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae2:	459a      	cmp	sl, r3
 8004ae4:	dc3b      	bgt.n	8004b5e <_printf_float+0x366>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	07da      	lsls	r2, r3, #31
 8004aea:	d438      	bmi.n	8004b5e <_printf_float+0x366>
 8004aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aee:	ebaa 0903 	sub.w	r9, sl, r3
 8004af2:	9b06      	ldr	r3, [sp, #24]
 8004af4:	ebaa 0303 	sub.w	r3, sl, r3
 8004af8:	4599      	cmp	r9, r3
 8004afa:	bfa8      	it	ge
 8004afc:	4699      	movge	r9, r3
 8004afe:	f1b9 0f00 	cmp.w	r9, #0
 8004b02:	dc34      	bgt.n	8004b6e <_printf_float+0x376>
 8004b04:	f04f 0800 	mov.w	r8, #0
 8004b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b0c:	f104 0b1a 	add.w	fp, r4, #26
 8004b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b12:	ebaa 0303 	sub.w	r3, sl, r3
 8004b16:	eba3 0309 	sub.w	r3, r3, r9
 8004b1a:	4543      	cmp	r3, r8
 8004b1c:	f77f af76 	ble.w	8004a0c <_printf_float+0x214>
 8004b20:	2301      	movs	r3, #1
 8004b22:	465a      	mov	r2, fp
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f aeb0 	beq.w	8004890 <_printf_float+0x98>
 8004b30:	f108 0801 	add.w	r8, r8, #1
 8004b34:	e7ec      	b.n	8004b10 <_printf_float+0x318>
 8004b36:	4642      	mov	r2, r8
 8004b38:	4631      	mov	r1, r6
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b8      	blx	r7
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d1c1      	bne.n	8004ac6 <_printf_float+0x2ce>
 8004b42:	e6a5      	b.n	8004890 <_printf_float+0x98>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	9206      	str	r2, [sp, #24]
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f ae9e 	beq.w	8004890 <_printf_float+0x98>
 8004b54:	9b07      	ldr	r3, [sp, #28]
 8004b56:	9a06      	ldr	r2, [sp, #24]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	9307      	str	r3, [sp, #28]
 8004b5c:	e7b9      	b.n	8004ad2 <_printf_float+0x2da>
 8004b5e:	9b05      	ldr	r3, [sp, #20]
 8004b60:	465a      	mov	r2, fp
 8004b62:	4631      	mov	r1, r6
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b8      	blx	r7
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d1bf      	bne.n	8004aec <_printf_float+0x2f4>
 8004b6c:	e690      	b.n	8004890 <_printf_float+0x98>
 8004b6e:	9a06      	ldr	r2, [sp, #24]
 8004b70:	464b      	mov	r3, r9
 8004b72:	4442      	add	r2, r8
 8004b74:	4631      	mov	r1, r6
 8004b76:	4628      	mov	r0, r5
 8004b78:	47b8      	blx	r7
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d1c2      	bne.n	8004b04 <_printf_float+0x30c>
 8004b7e:	e687      	b.n	8004890 <_printf_float+0x98>
 8004b80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004b84:	f1b9 0f01 	cmp.w	r9, #1
 8004b88:	dc01      	bgt.n	8004b8e <_printf_float+0x396>
 8004b8a:	07db      	lsls	r3, r3, #31
 8004b8c:	d536      	bpl.n	8004bfc <_printf_float+0x404>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4642      	mov	r2, r8
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f ae79 	beq.w	8004890 <_printf_float+0x98>
 8004b9e:	9b05      	ldr	r3, [sp, #20]
 8004ba0:	465a      	mov	r2, fp
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f ae71 	beq.w	8004890 <_printf_float+0x98>
 8004bae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	f109 39ff 	add.w	r9, r9, #4294967295
 8004bbe:	d018      	beq.n	8004bf2 <_printf_float+0x3fa>
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	f108 0201 	add.w	r2, r8, #1
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d10c      	bne.n	8004bea <_printf_float+0x3f2>
 8004bd0:	e65e      	b.n	8004890 <_printf_float+0x98>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	465a      	mov	r2, fp
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae57 	beq.w	8004890 <_printf_float+0x98>
 8004be2:	f108 0801 	add.w	r8, r8, #1
 8004be6:	45c8      	cmp	r8, r9
 8004be8:	dbf3      	blt.n	8004bd2 <_printf_float+0x3da>
 8004bea:	4653      	mov	r3, sl
 8004bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bf0:	e6dc      	b.n	80049ac <_printf_float+0x1b4>
 8004bf2:	f04f 0800 	mov.w	r8, #0
 8004bf6:	f104 0b1a 	add.w	fp, r4, #26
 8004bfa:	e7f4      	b.n	8004be6 <_printf_float+0x3ee>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4642      	mov	r2, r8
 8004c00:	e7e1      	b.n	8004bc6 <_printf_float+0x3ce>
 8004c02:	2301      	movs	r3, #1
 8004c04:	464a      	mov	r2, r9
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f43f ae3f 	beq.w	8004890 <_printf_float+0x98>
 8004c12:	f108 0801 	add.w	r8, r8, #1
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c1a:	1a5b      	subs	r3, r3, r1
 8004c1c:	4543      	cmp	r3, r8
 8004c1e:	dcf0      	bgt.n	8004c02 <_printf_float+0x40a>
 8004c20:	e6f8      	b.n	8004a14 <_printf_float+0x21c>
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	f104 0919 	add.w	r9, r4, #25
 8004c2a:	e7f4      	b.n	8004c16 <_printf_float+0x41e>

08004c2c <_printf_common>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	4616      	mov	r6, r2
 8004c32:	4698      	mov	r8, r3
 8004c34:	688a      	ldr	r2, [r1, #8]
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	bfb8      	it	lt
 8004c40:	4613      	movlt	r3, r2
 8004c42:	6033      	str	r3, [r6, #0]
 8004c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c48:	4607      	mov	r7, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	b10a      	cbz	r2, 8004c52 <_printf_common+0x26>
 8004c4e:	3301      	adds	r3, #1
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0699      	lsls	r1, r3, #26
 8004c56:	bf42      	ittt	mi
 8004c58:	6833      	ldrmi	r3, [r6, #0]
 8004c5a:	3302      	addmi	r3, #2
 8004c5c:	6033      	strmi	r3, [r6, #0]
 8004c5e:	6825      	ldr	r5, [r4, #0]
 8004c60:	f015 0506 	ands.w	r5, r5, #6
 8004c64:	d106      	bne.n	8004c74 <_printf_common+0x48>
 8004c66:	f104 0a19 	add.w	sl, r4, #25
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	6832      	ldr	r2, [r6, #0]
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	dc26      	bgt.n	8004cc2 <_printf_common+0x96>
 8004c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	3b00      	subs	r3, #0
 8004c7c:	bf18      	it	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	0692      	lsls	r2, r2, #26
 8004c82:	d42b      	bmi.n	8004cdc <_printf_common+0xb0>
 8004c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c88:	4641      	mov	r1, r8
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c8      	blx	r9
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d01e      	beq.n	8004cd0 <_printf_common+0xa4>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf02      	ittt	eq
 8004c9e:	68e5      	ldreq	r5, [r4, #12]
 8004ca0:	6833      	ldreq	r3, [r6, #0]
 8004ca2:	1aed      	subeq	r5, r5, r3
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	bf0c      	ite	eq
 8004ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cac:	2500      	movne	r5, #0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bfc4      	itt	gt
 8004cb2:	1a9b      	subgt	r3, r3, r2
 8004cb4:	18ed      	addgt	r5, r5, r3
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	341a      	adds	r4, #26
 8004cba:	42b5      	cmp	r5, r6
 8004cbc:	d11a      	bne.n	8004cf4 <_printf_common+0xc8>
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e008      	b.n	8004cd4 <_printf_common+0xa8>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4652      	mov	r2, sl
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	4638      	mov	r0, r7
 8004cca:	47c8      	blx	r9
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d103      	bne.n	8004cd8 <_printf_common+0xac>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd8:	3501      	adds	r5, #1
 8004cda:	e7c6      	b.n	8004c6a <_printf_common+0x3e>
 8004cdc:	18e1      	adds	r1, r4, r3
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	2030      	movs	r0, #48	@ 0x30
 8004ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ce6:	4422      	add	r2, r4
 8004ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	e7c7      	b.n	8004c84 <_printf_common+0x58>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	47c8      	blx	r9
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d0e6      	beq.n	8004cd0 <_printf_common+0xa4>
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7d9      	b.n	8004cba <_printf_common+0x8e>
	...

08004d08 <_printf_i>:
 8004d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	7e0f      	ldrb	r7, [r1, #24]
 8004d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d10:	2f78      	cmp	r7, #120	@ 0x78
 8004d12:	4691      	mov	r9, r2
 8004d14:	4680      	mov	r8, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	469a      	mov	sl, r3
 8004d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d1e:	d807      	bhi.n	8004d30 <_printf_i+0x28>
 8004d20:	2f62      	cmp	r7, #98	@ 0x62
 8004d22:	d80a      	bhi.n	8004d3a <_printf_i+0x32>
 8004d24:	2f00      	cmp	r7, #0
 8004d26:	f000 80d1 	beq.w	8004ecc <_printf_i+0x1c4>
 8004d2a:	2f58      	cmp	r7, #88	@ 0x58
 8004d2c:	f000 80b8 	beq.w	8004ea0 <_printf_i+0x198>
 8004d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d38:	e03a      	b.n	8004db0 <_printf_i+0xa8>
 8004d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d3e:	2b15      	cmp	r3, #21
 8004d40:	d8f6      	bhi.n	8004d30 <_printf_i+0x28>
 8004d42:	a101      	add	r1, pc, #4	@ (adr r1, 8004d48 <_printf_i+0x40>)
 8004d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d48:	08004da1 	.word	0x08004da1
 8004d4c:	08004db5 	.word	0x08004db5
 8004d50:	08004d31 	.word	0x08004d31
 8004d54:	08004d31 	.word	0x08004d31
 8004d58:	08004d31 	.word	0x08004d31
 8004d5c:	08004d31 	.word	0x08004d31
 8004d60:	08004db5 	.word	0x08004db5
 8004d64:	08004d31 	.word	0x08004d31
 8004d68:	08004d31 	.word	0x08004d31
 8004d6c:	08004d31 	.word	0x08004d31
 8004d70:	08004d31 	.word	0x08004d31
 8004d74:	08004eb3 	.word	0x08004eb3
 8004d78:	08004ddf 	.word	0x08004ddf
 8004d7c:	08004e6d 	.word	0x08004e6d
 8004d80:	08004d31 	.word	0x08004d31
 8004d84:	08004d31 	.word	0x08004d31
 8004d88:	08004ed5 	.word	0x08004ed5
 8004d8c:	08004d31 	.word	0x08004d31
 8004d90:	08004ddf 	.word	0x08004ddf
 8004d94:	08004d31 	.word	0x08004d31
 8004d98:	08004d31 	.word	0x08004d31
 8004d9c:	08004e75 	.word	0x08004e75
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6032      	str	r2, [r6, #0]
 8004da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db0:	2301      	movs	r3, #1
 8004db2:	e09c      	b.n	8004eee <_printf_i+0x1e6>
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	6031      	str	r1, [r6, #0]
 8004dbc:	0606      	lsls	r6, r0, #24
 8004dbe:	d501      	bpl.n	8004dc4 <_printf_i+0xbc>
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <_printf_i+0xc4>
 8004dc4:	0645      	lsls	r5, r0, #25
 8004dc6:	d5fb      	bpl.n	8004dc0 <_printf_i+0xb8>
 8004dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	da03      	bge.n	8004dd8 <_printf_i+0xd0>
 8004dd0:	232d      	movs	r3, #45	@ 0x2d
 8004dd2:	426d      	negs	r5, r5
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd8:	4858      	ldr	r0, [pc, #352]	@ (8004f3c <_printf_i+0x234>)
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e011      	b.n	8004e02 <_printf_i+0xfa>
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	0608      	lsls	r0, r1, #24
 8004de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004de8:	d402      	bmi.n	8004df0 <_printf_i+0xe8>
 8004dea:	0649      	lsls	r1, r1, #25
 8004dec:	bf48      	it	mi
 8004dee:	b2ad      	uxthmi	r5, r5
 8004df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004df2:	4852      	ldr	r0, [pc, #328]	@ (8004f3c <_printf_i+0x234>)
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	bf14      	ite	ne
 8004df8:	230a      	movne	r3, #10
 8004dfa:	2308      	moveq	r3, #8
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e02:	6866      	ldr	r6, [r4, #4]
 8004e04:	60a6      	str	r6, [r4, #8]
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	db05      	blt.n	8004e16 <_printf_i+0x10e>
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	432e      	orrs	r6, r5
 8004e0e:	f021 0104 	bic.w	r1, r1, #4
 8004e12:	6021      	str	r1, [r4, #0]
 8004e14:	d04b      	beq.n	8004eae <_printf_i+0x1a6>
 8004e16:	4616      	mov	r6, r2
 8004e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e20:	5dc7      	ldrb	r7, [r0, r7]
 8004e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e26:	462f      	mov	r7, r5
 8004e28:	42bb      	cmp	r3, r7
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	d9f4      	bls.n	8004e18 <_printf_i+0x110>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d10b      	bne.n	8004e4a <_printf_i+0x142>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07df      	lsls	r7, r3, #31
 8004e36:	d508      	bpl.n	8004e4a <_printf_i+0x142>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6861      	ldr	r1, [r4, #4]
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	bfde      	ittt	le
 8004e40:	2330      	movle	r3, #48	@ 0x30
 8004e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e4a:	1b92      	subs	r2, r2, r6
 8004e4c:	6122      	str	r2, [r4, #16]
 8004e4e:	f8cd a000 	str.w	sl, [sp]
 8004e52:	464b      	mov	r3, r9
 8004e54:	aa03      	add	r2, sp, #12
 8004e56:	4621      	mov	r1, r4
 8004e58:	4640      	mov	r0, r8
 8004e5a:	f7ff fee7 	bl	8004c2c <_printf_common>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d14a      	bne.n	8004ef8 <_printf_i+0x1f0>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b004      	add	sp, #16
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	f043 0320 	orr.w	r3, r3, #32
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	4832      	ldr	r0, [pc, #200]	@ (8004f40 <_printf_i+0x238>)
 8004e76:	2778      	movs	r7, #120	@ 0x78
 8004e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	6831      	ldr	r1, [r6, #0]
 8004e80:	061f      	lsls	r7, r3, #24
 8004e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e86:	d402      	bmi.n	8004e8e <_printf_i+0x186>
 8004e88:	065f      	lsls	r7, r3, #25
 8004e8a:	bf48      	it	mi
 8004e8c:	b2ad      	uxthmi	r5, r5
 8004e8e:	6031      	str	r1, [r6, #0]
 8004e90:	07d9      	lsls	r1, r3, #31
 8004e92:	bf44      	itt	mi
 8004e94:	f043 0320 	orrmi.w	r3, r3, #32
 8004e98:	6023      	strmi	r3, [r4, #0]
 8004e9a:	b11d      	cbz	r5, 8004ea4 <_printf_i+0x19c>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	e7ad      	b.n	8004dfc <_printf_i+0xf4>
 8004ea0:	4826      	ldr	r0, [pc, #152]	@ (8004f3c <_printf_i+0x234>)
 8004ea2:	e7e9      	b.n	8004e78 <_printf_i+0x170>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	e7f6      	b.n	8004e9c <_printf_i+0x194>
 8004eae:	4616      	mov	r6, r2
 8004eb0:	e7bd      	b.n	8004e2e <_printf_i+0x126>
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	6961      	ldr	r1, [r4, #20]
 8004eb8:	1d18      	adds	r0, r3, #4
 8004eba:	6030      	str	r0, [r6, #0]
 8004ebc:	062e      	lsls	r6, r5, #24
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_i+0x1be>
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	e002      	b.n	8004ecc <_printf_i+0x1c4>
 8004ec6:	0668      	lsls	r0, r5, #25
 8004ec8:	d5fb      	bpl.n	8004ec2 <_printf_i+0x1ba>
 8004eca:	8019      	strh	r1, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	e7bc      	b.n	8004e4e <_printf_i+0x146>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	6032      	str	r2, [r6, #0]
 8004eda:	681e      	ldr	r6, [r3, #0]
 8004edc:	6862      	ldr	r2, [r4, #4]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7fb f9fd 	bl	80002e0 <memchr>
 8004ee6:	b108      	cbz	r0, 8004eec <_printf_i+0x1e4>
 8004ee8:	1b80      	subs	r0, r0, r6
 8004eea:	6060      	str	r0, [r4, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef6:	e7aa      	b.n	8004e4e <_printf_i+0x146>
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	4632      	mov	r2, r6
 8004efc:	4649      	mov	r1, r9
 8004efe:	4640      	mov	r0, r8
 8004f00:	47d0      	blx	sl
 8004f02:	3001      	adds	r0, #1
 8004f04:	d0ad      	beq.n	8004e62 <_printf_i+0x15a>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	d413      	bmi.n	8004f34 <_printf_i+0x22c>
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bfb8      	it	lt
 8004f14:	4618      	movlt	r0, r3
 8004f16:	e7a6      	b.n	8004e66 <_printf_i+0x15e>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4640      	mov	r0, r8
 8004f20:	47d0      	blx	sl
 8004f22:	3001      	adds	r0, #1
 8004f24:	d09d      	beq.n	8004e62 <_printf_i+0x15a>
 8004f26:	3501      	adds	r5, #1
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	1a5b      	subs	r3, r3, r1
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dcf2      	bgt.n	8004f18 <_printf_i+0x210>
 8004f32:	e7eb      	b.n	8004f0c <_printf_i+0x204>
 8004f34:	2500      	movs	r5, #0
 8004f36:	f104 0619 	add.w	r6, r4, #25
 8004f3a:	e7f5      	b.n	8004f28 <_printf_i+0x220>
 8004f3c:	080070e6 	.word	0x080070e6
 8004f40:	080070f7 	.word	0x080070f7

08004f44 <std>:
 8004f44:	2300      	movs	r3, #0
 8004f46:	b510      	push	{r4, lr}
 8004f48:	4604      	mov	r4, r0
 8004f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f52:	6083      	str	r3, [r0, #8]
 8004f54:	8181      	strh	r1, [r0, #12]
 8004f56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f58:	81c2      	strh	r2, [r0, #14]
 8004f5a:	6183      	str	r3, [r0, #24]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	2208      	movs	r2, #8
 8004f60:	305c      	adds	r0, #92	@ 0x5c
 8004f62:	f000 f9f9 	bl	8005358 <memset>
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <std+0x58>)
 8004f68:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <std+0x5c>)
 8004f6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <std+0x60>)
 8004f70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <std+0x64>)
 8004f74:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <std+0x68>)
 8004f78:	6224      	str	r4, [r4, #32]
 8004f7a:	429c      	cmp	r4, r3
 8004f7c:	d006      	beq.n	8004f8c <std+0x48>
 8004f7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f82:	4294      	cmp	r4, r2
 8004f84:	d002      	beq.n	8004f8c <std+0x48>
 8004f86:	33d0      	adds	r3, #208	@ 0xd0
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	d105      	bne.n	8004f98 <std+0x54>
 8004f8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f94:	f000 ba5c 	b.w	8005450 <__retarget_lock_init_recursive>
 8004f98:	bd10      	pop	{r4, pc}
 8004f9a:	bf00      	nop
 8004f9c:	080051a9 	.word	0x080051a9
 8004fa0:	080051cb 	.word	0x080051cb
 8004fa4:	08005203 	.word	0x08005203
 8004fa8:	08005227 	.word	0x08005227
 8004fac:	240002ac 	.word	0x240002ac

08004fb0 <stdio_exit_handler>:
 8004fb0:	4a02      	ldr	r2, [pc, #8]	@ (8004fbc <stdio_exit_handler+0xc>)
 8004fb2:	4903      	ldr	r1, [pc, #12]	@ (8004fc0 <stdio_exit_handler+0x10>)
 8004fb4:	4803      	ldr	r0, [pc, #12]	@ (8004fc4 <stdio_exit_handler+0x14>)
 8004fb6:	f000 b869 	b.w	800508c <_fwalk_sglue>
 8004fba:	bf00      	nop
 8004fbc:	24000010 	.word	0x24000010
 8004fc0:	08006cc5 	.word	0x08006cc5
 8004fc4:	24000020 	.word	0x24000020

08004fc8 <cleanup_stdio>:
 8004fc8:	6841      	ldr	r1, [r0, #4]
 8004fca:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <cleanup_stdio+0x34>)
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	d001      	beq.n	8004fd8 <cleanup_stdio+0x10>
 8004fd4:	f001 fe76 	bl	8006cc4 <_fflush_r>
 8004fd8:	68a1      	ldr	r1, [r4, #8]
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <cleanup_stdio+0x38>)
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	d002      	beq.n	8004fe6 <cleanup_stdio+0x1e>
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 fe6f 	bl	8006cc4 <_fflush_r>
 8004fe6:	68e1      	ldr	r1, [r4, #12]
 8004fe8:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <cleanup_stdio+0x3c>)
 8004fea:	4299      	cmp	r1, r3
 8004fec:	d004      	beq.n	8004ff8 <cleanup_stdio+0x30>
 8004fee:	4620      	mov	r0, r4
 8004ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff4:	f001 be66 	b.w	8006cc4 <_fflush_r>
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	bf00      	nop
 8004ffc:	240002ac 	.word	0x240002ac
 8005000:	24000314 	.word	0x24000314
 8005004:	2400037c 	.word	0x2400037c

08005008 <global_stdio_init.part.0>:
 8005008:	b510      	push	{r4, lr}
 800500a:	4b0b      	ldr	r3, [pc, #44]	@ (8005038 <global_stdio_init.part.0+0x30>)
 800500c:	4c0b      	ldr	r4, [pc, #44]	@ (800503c <global_stdio_init.part.0+0x34>)
 800500e:	4a0c      	ldr	r2, [pc, #48]	@ (8005040 <global_stdio_init.part.0+0x38>)
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	4620      	mov	r0, r4
 8005014:	2200      	movs	r2, #0
 8005016:	2104      	movs	r1, #4
 8005018:	f7ff ff94 	bl	8004f44 <std>
 800501c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005020:	2201      	movs	r2, #1
 8005022:	2109      	movs	r1, #9
 8005024:	f7ff ff8e 	bl	8004f44 <std>
 8005028:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800502c:	2202      	movs	r2, #2
 800502e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005032:	2112      	movs	r1, #18
 8005034:	f7ff bf86 	b.w	8004f44 <std>
 8005038:	240003e4 	.word	0x240003e4
 800503c:	240002ac 	.word	0x240002ac
 8005040:	08004fb1 	.word	0x08004fb1

08005044 <__sfp_lock_acquire>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__sfp_lock_acquire+0x8>)
 8005046:	f000 ba04 	b.w	8005452 <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	240003ed 	.word	0x240003ed

08005050 <__sfp_lock_release>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__sfp_lock_release+0x8>)
 8005052:	f000 b9ff 	b.w	8005454 <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	240003ed 	.word	0x240003ed

0800505c <__sinit>:
 800505c:	b510      	push	{r4, lr}
 800505e:	4604      	mov	r4, r0
 8005060:	f7ff fff0 	bl	8005044 <__sfp_lock_acquire>
 8005064:	6a23      	ldr	r3, [r4, #32]
 8005066:	b11b      	cbz	r3, 8005070 <__sinit+0x14>
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f7ff bff0 	b.w	8005050 <__sfp_lock_release>
 8005070:	4b04      	ldr	r3, [pc, #16]	@ (8005084 <__sinit+0x28>)
 8005072:	6223      	str	r3, [r4, #32]
 8005074:	4b04      	ldr	r3, [pc, #16]	@ (8005088 <__sinit+0x2c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f5      	bne.n	8005068 <__sinit+0xc>
 800507c:	f7ff ffc4 	bl	8005008 <global_stdio_init.part.0>
 8005080:	e7f2      	b.n	8005068 <__sinit+0xc>
 8005082:	bf00      	nop
 8005084:	08004fc9 	.word	0x08004fc9
 8005088:	240003e4 	.word	0x240003e4

0800508c <_fwalk_sglue>:
 800508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005090:	4607      	mov	r7, r0
 8005092:	4688      	mov	r8, r1
 8005094:	4614      	mov	r4, r2
 8005096:	2600      	movs	r6, #0
 8005098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800509c:	f1b9 0901 	subs.w	r9, r9, #1
 80050a0:	d505      	bpl.n	80050ae <_fwalk_sglue+0x22>
 80050a2:	6824      	ldr	r4, [r4, #0]
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	d1f7      	bne.n	8005098 <_fwalk_sglue+0xc>
 80050a8:	4630      	mov	r0, r6
 80050aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ae:	89ab      	ldrh	r3, [r5, #12]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d907      	bls.n	80050c4 <_fwalk_sglue+0x38>
 80050b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050b8:	3301      	adds	r3, #1
 80050ba:	d003      	beq.n	80050c4 <_fwalk_sglue+0x38>
 80050bc:	4629      	mov	r1, r5
 80050be:	4638      	mov	r0, r7
 80050c0:	47c0      	blx	r8
 80050c2:	4306      	orrs	r6, r0
 80050c4:	3568      	adds	r5, #104	@ 0x68
 80050c6:	e7e9      	b.n	800509c <_fwalk_sglue+0x10>

080050c8 <iprintf>:
 80050c8:	b40f      	push	{r0, r1, r2, r3}
 80050ca:	b507      	push	{r0, r1, r2, lr}
 80050cc:	4906      	ldr	r1, [pc, #24]	@ (80050e8 <iprintf+0x20>)
 80050ce:	ab04      	add	r3, sp, #16
 80050d0:	6808      	ldr	r0, [r1, #0]
 80050d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d6:	6881      	ldr	r1, [r0, #8]
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	f001 fc57 	bl	800698c <_vfiprintf_r>
 80050de:	b003      	add	sp, #12
 80050e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr
 80050e8:	2400001c 	.word	0x2400001c

080050ec <_puts_r>:
 80050ec:	6a03      	ldr	r3, [r0, #32]
 80050ee:	b570      	push	{r4, r5, r6, lr}
 80050f0:	6884      	ldr	r4, [r0, #8]
 80050f2:	4605      	mov	r5, r0
 80050f4:	460e      	mov	r6, r1
 80050f6:	b90b      	cbnz	r3, 80050fc <_puts_r+0x10>
 80050f8:	f7ff ffb0 	bl	800505c <__sinit>
 80050fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050fe:	07db      	lsls	r3, r3, #31
 8005100:	d405      	bmi.n	800510e <_puts_r+0x22>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	0598      	lsls	r0, r3, #22
 8005106:	d402      	bmi.n	800510e <_puts_r+0x22>
 8005108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800510a:	f000 f9a2 	bl	8005452 <__retarget_lock_acquire_recursive>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	0719      	lsls	r1, r3, #28
 8005112:	d502      	bpl.n	800511a <_puts_r+0x2e>
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d135      	bne.n	8005186 <_puts_r+0x9a>
 800511a:	4621      	mov	r1, r4
 800511c:	4628      	mov	r0, r5
 800511e:	f000 f8c5 	bl	80052ac <__swsetup_r>
 8005122:	b380      	cbz	r0, 8005186 <_puts_r+0x9a>
 8005124:	f04f 35ff 	mov.w	r5, #4294967295
 8005128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800512a:	07da      	lsls	r2, r3, #31
 800512c:	d405      	bmi.n	800513a <_puts_r+0x4e>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	059b      	lsls	r3, r3, #22
 8005132:	d402      	bmi.n	800513a <_puts_r+0x4e>
 8005134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005136:	f000 f98d 	bl	8005454 <__retarget_lock_release_recursive>
 800513a:	4628      	mov	r0, r5
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	2b00      	cmp	r3, #0
 8005140:	da04      	bge.n	800514c <_puts_r+0x60>
 8005142:	69a2      	ldr	r2, [r4, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	dc17      	bgt.n	8005178 <_puts_r+0x8c>
 8005148:	290a      	cmp	r1, #10
 800514a:	d015      	beq.n	8005178 <_puts_r+0x8c>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	7019      	strb	r1, [r3, #0]
 8005154:	68a3      	ldr	r3, [r4, #8]
 8005156:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800515a:	3b01      	subs	r3, #1
 800515c:	60a3      	str	r3, [r4, #8]
 800515e:	2900      	cmp	r1, #0
 8005160:	d1ed      	bne.n	800513e <_puts_r+0x52>
 8005162:	2b00      	cmp	r3, #0
 8005164:	da11      	bge.n	800518a <_puts_r+0x9e>
 8005166:	4622      	mov	r2, r4
 8005168:	210a      	movs	r1, #10
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f85f 	bl	800522e <__swbuf_r>
 8005170:	3001      	adds	r0, #1
 8005172:	d0d7      	beq.n	8005124 <_puts_r+0x38>
 8005174:	250a      	movs	r5, #10
 8005176:	e7d7      	b.n	8005128 <_puts_r+0x3c>
 8005178:	4622      	mov	r2, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f857 	bl	800522e <__swbuf_r>
 8005180:	3001      	adds	r0, #1
 8005182:	d1e7      	bne.n	8005154 <_puts_r+0x68>
 8005184:	e7ce      	b.n	8005124 <_puts_r+0x38>
 8005186:	3e01      	subs	r6, #1
 8005188:	e7e4      	b.n	8005154 <_puts_r+0x68>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	220a      	movs	r2, #10
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e7ee      	b.n	8005174 <_puts_r+0x88>
	...

08005198 <puts>:
 8005198:	4b02      	ldr	r3, [pc, #8]	@ (80051a4 <puts+0xc>)
 800519a:	4601      	mov	r1, r0
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	f7ff bfa5 	b.w	80050ec <_puts_r>
 80051a2:	bf00      	nop
 80051a4:	2400001c 	.word	0x2400001c

080051a8 <__sread>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	460c      	mov	r4, r1
 80051ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b0:	f000 f900 	bl	80053b4 <_read_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	bfab      	itete	ge
 80051b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051ba:	89a3      	ldrhlt	r3, [r4, #12]
 80051bc:	181b      	addge	r3, r3, r0
 80051be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051c2:	bfac      	ite	ge
 80051c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051c6:	81a3      	strhlt	r3, [r4, #12]
 80051c8:	bd10      	pop	{r4, pc}

080051ca <__swrite>:
 80051ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ce:	461f      	mov	r7, r3
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	05db      	lsls	r3, r3, #23
 80051d4:	4605      	mov	r5, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4616      	mov	r6, r2
 80051da:	d505      	bpl.n	80051e8 <__swrite+0x1e>
 80051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e0:	2302      	movs	r3, #2
 80051e2:	2200      	movs	r2, #0
 80051e4:	f000 f8d4 	bl	8005390 <_lseek_r>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	4632      	mov	r2, r6
 80051f6:	463b      	mov	r3, r7
 80051f8:	4628      	mov	r0, r5
 80051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fe:	f000 b8eb 	b.w	80053d8 <_write_r>

08005202 <__sseek>:
 8005202:	b510      	push	{r4, lr}
 8005204:	460c      	mov	r4, r1
 8005206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520a:	f000 f8c1 	bl	8005390 <_lseek_r>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	bf15      	itete	ne
 8005214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800521a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800521e:	81a3      	strheq	r3, [r4, #12]
 8005220:	bf18      	it	ne
 8005222:	81a3      	strhne	r3, [r4, #12]
 8005224:	bd10      	pop	{r4, pc}

08005226 <__sclose>:
 8005226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522a:	f000 b8a1 	b.w	8005370 <_close_r>

0800522e <__swbuf_r>:
 800522e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005230:	460e      	mov	r6, r1
 8005232:	4614      	mov	r4, r2
 8005234:	4605      	mov	r5, r0
 8005236:	b118      	cbz	r0, 8005240 <__swbuf_r+0x12>
 8005238:	6a03      	ldr	r3, [r0, #32]
 800523a:	b90b      	cbnz	r3, 8005240 <__swbuf_r+0x12>
 800523c:	f7ff ff0e 	bl	800505c <__sinit>
 8005240:	69a3      	ldr	r3, [r4, #24]
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	071a      	lsls	r2, r3, #28
 8005248:	d501      	bpl.n	800524e <__swbuf_r+0x20>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b943      	cbnz	r3, 8005260 <__swbuf_r+0x32>
 800524e:	4621      	mov	r1, r4
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f82b 	bl	80052ac <__swsetup_r>
 8005256:	b118      	cbz	r0, 8005260 <__swbuf_r+0x32>
 8005258:	f04f 37ff 	mov.w	r7, #4294967295
 800525c:	4638      	mov	r0, r7
 800525e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	6922      	ldr	r2, [r4, #16]
 8005264:	1a98      	subs	r0, r3, r2
 8005266:	6963      	ldr	r3, [r4, #20]
 8005268:	b2f6      	uxtb	r6, r6
 800526a:	4283      	cmp	r3, r0
 800526c:	4637      	mov	r7, r6
 800526e:	dc05      	bgt.n	800527c <__swbuf_r+0x4e>
 8005270:	4621      	mov	r1, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f001 fd26 	bl	8006cc4 <_fflush_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	d1ed      	bne.n	8005258 <__swbuf_r+0x2a>
 800527c:	68a3      	ldr	r3, [r4, #8]
 800527e:	3b01      	subs	r3, #1
 8005280:	60a3      	str	r3, [r4, #8]
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	6022      	str	r2, [r4, #0]
 8005288:	701e      	strb	r6, [r3, #0]
 800528a:	6962      	ldr	r2, [r4, #20]
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	429a      	cmp	r2, r3
 8005290:	d004      	beq.n	800529c <__swbuf_r+0x6e>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	07db      	lsls	r3, r3, #31
 8005296:	d5e1      	bpl.n	800525c <__swbuf_r+0x2e>
 8005298:	2e0a      	cmp	r6, #10
 800529a:	d1df      	bne.n	800525c <__swbuf_r+0x2e>
 800529c:	4621      	mov	r1, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	f001 fd10 	bl	8006cc4 <_fflush_r>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d0d9      	beq.n	800525c <__swbuf_r+0x2e>
 80052a8:	e7d6      	b.n	8005258 <__swbuf_r+0x2a>
	...

080052ac <__swsetup_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <__swsetup_r+0xa8>)
 80052b0:	4605      	mov	r5, r0
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	460c      	mov	r4, r1
 80052b6:	b118      	cbz	r0, 80052c0 <__swsetup_r+0x14>
 80052b8:	6a03      	ldr	r3, [r0, #32]
 80052ba:	b90b      	cbnz	r3, 80052c0 <__swsetup_r+0x14>
 80052bc:	f7ff fece 	bl	800505c <__sinit>
 80052c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052c4:	0719      	lsls	r1, r3, #28
 80052c6:	d422      	bmi.n	800530e <__swsetup_r+0x62>
 80052c8:	06da      	lsls	r2, r3, #27
 80052ca:	d407      	bmi.n	80052dc <__swsetup_r+0x30>
 80052cc:	2209      	movs	r2, #9
 80052ce:	602a      	str	r2, [r5, #0]
 80052d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	f04f 30ff 	mov.w	r0, #4294967295
 80052da:	e033      	b.n	8005344 <__swsetup_r+0x98>
 80052dc:	0758      	lsls	r0, r3, #29
 80052de:	d512      	bpl.n	8005306 <__swsetup_r+0x5a>
 80052e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052e2:	b141      	cbz	r1, 80052f6 <__swsetup_r+0x4a>
 80052e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052e8:	4299      	cmp	r1, r3
 80052ea:	d002      	beq.n	80052f2 <__swsetup_r+0x46>
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 fea9 	bl	8006044 <_free_r>
 80052f2:	2300      	movs	r3, #0
 80052f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	2300      	movs	r3, #0
 8005300:	6063      	str	r3, [r4, #4]
 8005302:	6923      	ldr	r3, [r4, #16]
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	b94b      	cbnz	r3, 8005326 <__swsetup_r+0x7a>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531c:	d003      	beq.n	8005326 <__swsetup_r+0x7a>
 800531e:	4621      	mov	r1, r4
 8005320:	4628      	mov	r0, r5
 8005322:	f001 fd1d 	bl	8006d60 <__smakebuf_r>
 8005326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532a:	f013 0201 	ands.w	r2, r3, #1
 800532e:	d00a      	beq.n	8005346 <__swsetup_r+0x9a>
 8005330:	2200      	movs	r2, #0
 8005332:	60a2      	str	r2, [r4, #8]
 8005334:	6962      	ldr	r2, [r4, #20]
 8005336:	4252      	negs	r2, r2
 8005338:	61a2      	str	r2, [r4, #24]
 800533a:	6922      	ldr	r2, [r4, #16]
 800533c:	b942      	cbnz	r2, 8005350 <__swsetup_r+0xa4>
 800533e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005342:	d1c5      	bne.n	80052d0 <__swsetup_r+0x24>
 8005344:	bd38      	pop	{r3, r4, r5, pc}
 8005346:	0799      	lsls	r1, r3, #30
 8005348:	bf58      	it	pl
 800534a:	6962      	ldrpl	r2, [r4, #20]
 800534c:	60a2      	str	r2, [r4, #8]
 800534e:	e7f4      	b.n	800533a <__swsetup_r+0x8e>
 8005350:	2000      	movs	r0, #0
 8005352:	e7f7      	b.n	8005344 <__swsetup_r+0x98>
 8005354:	2400001c 	.word	0x2400001c

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <_localeconv_r>:
 8005368:	4800      	ldr	r0, [pc, #0]	@ (800536c <_localeconv_r+0x4>)
 800536a:	4770      	bx	lr
 800536c:	2400015c 	.word	0x2400015c

08005370 <_close_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d06      	ldr	r5, [pc, #24]	@ (800538c <_close_r+0x1c>)
 8005374:	2300      	movs	r3, #0
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	f7fb fa98 	bl	80008b0 <_close>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_close_r+0x1a>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_close_r+0x1a>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	240003e8 	.word	0x240003e8

08005390 <_lseek_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d07      	ldr	r5, [pc, #28]	@ (80053b0 <_lseek_r+0x20>)
 8005394:	4604      	mov	r4, r0
 8005396:	4608      	mov	r0, r1
 8005398:	4611      	mov	r1, r2
 800539a:	2200      	movs	r2, #0
 800539c:	602a      	str	r2, [r5, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f7fb faad 	bl	80008fe <_lseek>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_lseek_r+0x1e>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_lseek_r+0x1e>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	240003e8 	.word	0x240003e8

080053b4 <_read_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4d07      	ldr	r5, [pc, #28]	@ (80053d4 <_read_r+0x20>)
 80053b8:	4604      	mov	r4, r0
 80053ba:	4608      	mov	r0, r1
 80053bc:	4611      	mov	r1, r2
 80053be:	2200      	movs	r2, #0
 80053c0:	602a      	str	r2, [r5, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f7fb fa3b 	bl	800083e <_read>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_read_r+0x1e>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_read_r+0x1e>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	240003e8 	.word	0x240003e8

080053d8 <_write_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d07      	ldr	r5, [pc, #28]	@ (80053f8 <_write_r+0x20>)
 80053dc:	4604      	mov	r4, r0
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	602a      	str	r2, [r5, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fb fa46 	bl	8000878 <_write>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_write_r+0x1e>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_write_r+0x1e>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	240003e8 	.word	0x240003e8

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	@ (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2400001c 	.word	0x2400001c

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	@ (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	@ (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	@ (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	@ (800544c <__libc_init_array+0x44>)
 800541c:	f001 fdbe 	bl	8006f9c <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08007454 	.word	0x08007454
 8005444:	08007454 	.word	0x08007454
 8005448:	08007454 	.word	0x08007454
 800544c:	08007458 	.word	0x08007458

08005450 <__retarget_lock_init_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_acquire_recursive>:
 8005452:	4770      	bx	lr

08005454 <__retarget_lock_release_recursive>:
 8005454:	4770      	bx	lr

08005456 <memcpy>:
 8005456:	440a      	add	r2, r1
 8005458:	4291      	cmp	r1, r2
 800545a:	f100 33ff 	add.w	r3, r0, #4294967295
 800545e:	d100      	bne.n	8005462 <memcpy+0xc>
 8005460:	4770      	bx	lr
 8005462:	b510      	push	{r4, lr}
 8005464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800546c:	4291      	cmp	r1, r2
 800546e:	d1f9      	bne.n	8005464 <memcpy+0xe>
 8005470:	bd10      	pop	{r4, pc}

08005472 <quorem>:
 8005472:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005476:	6903      	ldr	r3, [r0, #16]
 8005478:	690c      	ldr	r4, [r1, #16]
 800547a:	42a3      	cmp	r3, r4
 800547c:	4607      	mov	r7, r0
 800547e:	db7e      	blt.n	800557e <quorem+0x10c>
 8005480:	3c01      	subs	r4, #1
 8005482:	f101 0814 	add.w	r8, r1, #20
 8005486:	00a3      	lsls	r3, r4, #2
 8005488:	f100 0514 	add.w	r5, r0, #20
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005498:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800549c:	3301      	adds	r3, #1
 800549e:	429a      	cmp	r2, r3
 80054a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80054a8:	d32e      	bcc.n	8005508 <quorem+0x96>
 80054aa:	f04f 0a00 	mov.w	sl, #0
 80054ae:	46c4      	mov	ip, r8
 80054b0:	46ae      	mov	lr, r5
 80054b2:	46d3      	mov	fp, sl
 80054b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054b8:	b298      	uxth	r0, r3
 80054ba:	fb06 a000 	mla	r0, r6, r0, sl
 80054be:	0c02      	lsrs	r2, r0, #16
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	fb06 2303 	mla	r3, r6, r3, r2
 80054c6:	f8de 2000 	ldr.w	r2, [lr]
 80054ca:	b280      	uxth	r0, r0
 80054cc:	b292      	uxth	r2, r2
 80054ce:	1a12      	subs	r2, r2, r0
 80054d0:	445a      	add	r2, fp
 80054d2:	f8de 0000 	ldr.w	r0, [lr]
 80054d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054da:	b29b      	uxth	r3, r3
 80054dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80054e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80054e4:	b292      	uxth	r2, r2
 80054e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80054ea:	45e1      	cmp	r9, ip
 80054ec:	f84e 2b04 	str.w	r2, [lr], #4
 80054f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80054f4:	d2de      	bcs.n	80054b4 <quorem+0x42>
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	58eb      	ldr	r3, [r5, r3]
 80054fa:	b92b      	cbnz	r3, 8005508 <quorem+0x96>
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	3b04      	subs	r3, #4
 8005500:	429d      	cmp	r5, r3
 8005502:	461a      	mov	r2, r3
 8005504:	d32f      	bcc.n	8005566 <quorem+0xf4>
 8005506:	613c      	str	r4, [r7, #16]
 8005508:	4638      	mov	r0, r7
 800550a:	f001 f90d 	bl	8006728 <__mcmp>
 800550e:	2800      	cmp	r0, #0
 8005510:	db25      	blt.n	800555e <quorem+0xec>
 8005512:	4629      	mov	r1, r5
 8005514:	2000      	movs	r0, #0
 8005516:	f858 2b04 	ldr.w	r2, [r8], #4
 800551a:	f8d1 c000 	ldr.w	ip, [r1]
 800551e:	fa1f fe82 	uxth.w	lr, r2
 8005522:	fa1f f38c 	uxth.w	r3, ip
 8005526:	eba3 030e 	sub.w	r3, r3, lr
 800552a:	4403      	add	r3, r0
 800552c:	0c12      	lsrs	r2, r2, #16
 800552e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005532:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005536:	b29b      	uxth	r3, r3
 8005538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800553c:	45c1      	cmp	r9, r8
 800553e:	f841 3b04 	str.w	r3, [r1], #4
 8005542:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005546:	d2e6      	bcs.n	8005516 <quorem+0xa4>
 8005548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800554c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005550:	b922      	cbnz	r2, 800555c <quorem+0xea>
 8005552:	3b04      	subs	r3, #4
 8005554:	429d      	cmp	r5, r3
 8005556:	461a      	mov	r2, r3
 8005558:	d30b      	bcc.n	8005572 <quorem+0x100>
 800555a:	613c      	str	r4, [r7, #16]
 800555c:	3601      	adds	r6, #1
 800555e:	4630      	mov	r0, r6
 8005560:	b003      	add	sp, #12
 8005562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	3b04      	subs	r3, #4
 800556a:	2a00      	cmp	r2, #0
 800556c:	d1cb      	bne.n	8005506 <quorem+0x94>
 800556e:	3c01      	subs	r4, #1
 8005570:	e7c6      	b.n	8005500 <quorem+0x8e>
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	3b04      	subs	r3, #4
 8005576:	2a00      	cmp	r2, #0
 8005578:	d1ef      	bne.n	800555a <quorem+0xe8>
 800557a:	3c01      	subs	r4, #1
 800557c:	e7ea      	b.n	8005554 <quorem+0xe2>
 800557e:	2000      	movs	r0, #0
 8005580:	e7ee      	b.n	8005560 <quorem+0xee>
 8005582:	0000      	movs	r0, r0
 8005584:	0000      	movs	r0, r0
	...

08005588 <_dtoa_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	ed2d 8b02 	vpush	{d8}
 8005590:	69c7      	ldr	r7, [r0, #28]
 8005592:	b091      	sub	sp, #68	@ 0x44
 8005594:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005598:	ec55 4b10 	vmov	r4, r5, d0
 800559c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800559e:	9107      	str	r1, [sp, #28]
 80055a0:	4681      	mov	r9, r0
 80055a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80055a6:	b97f      	cbnz	r7, 80055c8 <_dtoa_r+0x40>
 80055a8:	2010      	movs	r0, #16
 80055aa:	f000 fd95 	bl	80060d8 <malloc>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f8c9 001c 	str.w	r0, [r9, #28]
 80055b4:	b920      	cbnz	r0, 80055c0 <_dtoa_r+0x38>
 80055b6:	4ba0      	ldr	r3, [pc, #640]	@ (8005838 <_dtoa_r+0x2b0>)
 80055b8:	21ef      	movs	r1, #239	@ 0xef
 80055ba:	48a0      	ldr	r0, [pc, #640]	@ (800583c <_dtoa_r+0x2b4>)
 80055bc:	f001 fc3e 	bl	8006e3c <__assert_func>
 80055c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80055c4:	6007      	str	r7, [r0, #0]
 80055c6:	60c7      	str	r7, [r0, #12]
 80055c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	b159      	cbz	r1, 80055e8 <_dtoa_r+0x60>
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	604a      	str	r2, [r1, #4]
 80055d4:	2301      	movs	r3, #1
 80055d6:	4093      	lsls	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
 80055da:	4648      	mov	r0, r9
 80055dc:	f000 fe72 	bl	80062c4 <_Bfree>
 80055e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	1e2b      	subs	r3, r5, #0
 80055ea:	bfbb      	ittet	lt
 80055ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80055f0:	9303      	strlt	r3, [sp, #12]
 80055f2:	2300      	movge	r3, #0
 80055f4:	2201      	movlt	r2, #1
 80055f6:	bfac      	ite	ge
 80055f8:	6033      	strge	r3, [r6, #0]
 80055fa:	6032      	strlt	r2, [r6, #0]
 80055fc:	4b90      	ldr	r3, [pc, #576]	@ (8005840 <_dtoa_r+0x2b8>)
 80055fe:	9e03      	ldr	r6, [sp, #12]
 8005600:	43b3      	bics	r3, r6
 8005602:	d110      	bne.n	8005626 <_dtoa_r+0x9e>
 8005604:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005606:	f242 730f 	movw	r3, #9999	@ 0x270f
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005610:	4323      	orrs	r3, r4
 8005612:	f000 84e6 	beq.w	8005fe2 <_dtoa_r+0xa5a>
 8005616:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005618:	4f8a      	ldr	r7, [pc, #552]	@ (8005844 <_dtoa_r+0x2bc>)
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 84e8 	beq.w	8005ff0 <_dtoa_r+0xa68>
 8005620:	1cfb      	adds	r3, r7, #3
 8005622:	f000 bce3 	b.w	8005fec <_dtoa_r+0xa64>
 8005626:	ed9d 8b02 	vldr	d8, [sp, #8]
 800562a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005632:	d10a      	bne.n	800564a <_dtoa_r+0xc2>
 8005634:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005636:	2301      	movs	r3, #1
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800563c:	b113      	cbz	r3, 8005644 <_dtoa_r+0xbc>
 800563e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005640:	4b81      	ldr	r3, [pc, #516]	@ (8005848 <_dtoa_r+0x2c0>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4f81      	ldr	r7, [pc, #516]	@ (800584c <_dtoa_r+0x2c4>)
 8005646:	f000 bcd3 	b.w	8005ff0 <_dtoa_r+0xa68>
 800564a:	aa0e      	add	r2, sp, #56	@ 0x38
 800564c:	a90f      	add	r1, sp, #60	@ 0x3c
 800564e:	4648      	mov	r0, r9
 8005650:	eeb0 0b48 	vmov.f64	d0, d8
 8005654:	f001 f918 	bl	8006888 <__d2b>
 8005658:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800565c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800565e:	9001      	str	r0, [sp, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d045      	beq.n	80056f0 <_dtoa_r+0x168>
 8005664:	eeb0 7b48 	vmov.f64	d7, d8
 8005668:	ee18 1a90 	vmov	r1, s17
 800566c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005670:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005674:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005678:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800567c:	2500      	movs	r5, #0
 800567e:	ee07 1a90 	vmov	s15, r1
 8005682:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005686:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005820 <_dtoa_r+0x298>
 800568a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800568e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005828 <_dtoa_r+0x2a0>
 8005692:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005696:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005830 <_dtoa_r+0x2a8>
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80056a2:	eeb0 7b46 	vmov.f64	d7, d6
 80056a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80056aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80056ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b6:	ee16 8a90 	vmov	r8, s13
 80056ba:	d508      	bpl.n	80056ce <_dtoa_r+0x146>
 80056bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80056c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80056c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c8:	bf18      	it	ne
 80056ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 80056ce:	f1b8 0f16 	cmp.w	r8, #22
 80056d2:	d82b      	bhi.n	800572c <_dtoa_r+0x1a4>
 80056d4:	495e      	ldr	r1, [pc, #376]	@ (8005850 <_dtoa_r+0x2c8>)
 80056d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80056da:	ed91 7b00 	vldr	d7, [r1]
 80056de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80056e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e6:	d501      	bpl.n	80056ec <_dtoa_r+0x164>
 80056e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80056ec:	2100      	movs	r1, #0
 80056ee:	e01e      	b.n	800572e <_dtoa_r+0x1a6>
 80056f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056f2:	4413      	add	r3, r2
 80056f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80056f8:	2920      	cmp	r1, #32
 80056fa:	bfc1      	itttt	gt
 80056fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005700:	408e      	lslgt	r6, r1
 8005702:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005706:	fa24 f101 	lsrgt.w	r1, r4, r1
 800570a:	bfd6      	itet	le
 800570c:	f1c1 0120 	rsble	r1, r1, #32
 8005710:	4331      	orrgt	r1, r6
 8005712:	fa04 f101 	lslle.w	r1, r4, r1
 8005716:	ee07 1a90 	vmov	s15, r1
 800571a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800571e:	3b01      	subs	r3, #1
 8005720:	ee17 1a90 	vmov	r1, s15
 8005724:	2501      	movs	r5, #1
 8005726:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800572a:	e7a8      	b.n	800567e <_dtoa_r+0xf6>
 800572c:	2101      	movs	r1, #1
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	1e53      	subs	r3, r2, #1
 8005732:	9306      	str	r3, [sp, #24]
 8005734:	bf45      	ittet	mi
 8005736:	f1c2 0301 	rsbmi	r3, r2, #1
 800573a:	9304      	strmi	r3, [sp, #16]
 800573c:	2300      	movpl	r3, #0
 800573e:	2300      	movmi	r3, #0
 8005740:	bf4c      	ite	mi
 8005742:	9306      	strmi	r3, [sp, #24]
 8005744:	9304      	strpl	r3, [sp, #16]
 8005746:	f1b8 0f00 	cmp.w	r8, #0
 800574a:	910c      	str	r1, [sp, #48]	@ 0x30
 800574c:	db18      	blt.n	8005780 <_dtoa_r+0x1f8>
 800574e:	9b06      	ldr	r3, [sp, #24]
 8005750:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005754:	4443      	add	r3, r8
 8005756:	9306      	str	r3, [sp, #24]
 8005758:	2300      	movs	r3, #0
 800575a:	9a07      	ldr	r2, [sp, #28]
 800575c:	2a09      	cmp	r2, #9
 800575e:	d845      	bhi.n	80057ec <_dtoa_r+0x264>
 8005760:	2a05      	cmp	r2, #5
 8005762:	bfc4      	itt	gt
 8005764:	3a04      	subgt	r2, #4
 8005766:	9207      	strgt	r2, [sp, #28]
 8005768:	9a07      	ldr	r2, [sp, #28]
 800576a:	f1a2 0202 	sub.w	r2, r2, #2
 800576e:	bfcc      	ite	gt
 8005770:	2400      	movgt	r4, #0
 8005772:	2401      	movle	r4, #1
 8005774:	2a03      	cmp	r2, #3
 8005776:	d844      	bhi.n	8005802 <_dtoa_r+0x27a>
 8005778:	e8df f002 	tbb	[pc, r2]
 800577c:	0b173634 	.word	0x0b173634
 8005780:	9b04      	ldr	r3, [sp, #16]
 8005782:	2200      	movs	r2, #0
 8005784:	eba3 0308 	sub.w	r3, r3, r8
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	920a      	str	r2, [sp, #40]	@ 0x28
 800578c:	f1c8 0300 	rsb	r3, r8, #0
 8005790:	e7e3      	b.n	800575a <_dtoa_r+0x1d2>
 8005792:	2201      	movs	r2, #1
 8005794:	9208      	str	r2, [sp, #32]
 8005796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005798:	eb08 0b02 	add.w	fp, r8, r2
 800579c:	f10b 0a01 	add.w	sl, fp, #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	2a01      	cmp	r2, #1
 80057a4:	bfb8      	it	lt
 80057a6:	2201      	movlt	r2, #1
 80057a8:	e006      	b.n	80057b8 <_dtoa_r+0x230>
 80057aa:	2201      	movs	r2, #1
 80057ac:	9208      	str	r2, [sp, #32]
 80057ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	dd29      	ble.n	8005808 <_dtoa_r+0x280>
 80057b4:	4693      	mov	fp, r2
 80057b6:	4692      	mov	sl, r2
 80057b8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80057bc:	2100      	movs	r1, #0
 80057be:	2004      	movs	r0, #4
 80057c0:	f100 0614 	add.w	r6, r0, #20
 80057c4:	4296      	cmp	r6, r2
 80057c6:	d926      	bls.n	8005816 <_dtoa_r+0x28e>
 80057c8:	6079      	str	r1, [r7, #4]
 80057ca:	4648      	mov	r0, r9
 80057cc:	9305      	str	r3, [sp, #20]
 80057ce:	f000 fd39 	bl	8006244 <_Balloc>
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	4607      	mov	r7, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d13e      	bne.n	8005858 <_dtoa_r+0x2d0>
 80057da:	4b1e      	ldr	r3, [pc, #120]	@ (8005854 <_dtoa_r+0x2cc>)
 80057dc:	4602      	mov	r2, r0
 80057de:	f240 11af 	movw	r1, #431	@ 0x1af
 80057e2:	e6ea      	b.n	80055ba <_dtoa_r+0x32>
 80057e4:	2200      	movs	r2, #0
 80057e6:	e7e1      	b.n	80057ac <_dtoa_r+0x224>
 80057e8:	2200      	movs	r2, #0
 80057ea:	e7d3      	b.n	8005794 <_dtoa_r+0x20c>
 80057ec:	2401      	movs	r4, #1
 80057ee:	2200      	movs	r2, #0
 80057f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80057f4:	f04f 3bff 	mov.w	fp, #4294967295
 80057f8:	2100      	movs	r1, #0
 80057fa:	46da      	mov	sl, fp
 80057fc:	2212      	movs	r2, #18
 80057fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8005800:	e7da      	b.n	80057b8 <_dtoa_r+0x230>
 8005802:	2201      	movs	r2, #1
 8005804:	9208      	str	r2, [sp, #32]
 8005806:	e7f5      	b.n	80057f4 <_dtoa_r+0x26c>
 8005808:	f04f 0b01 	mov.w	fp, #1
 800580c:	46da      	mov	sl, fp
 800580e:	465a      	mov	r2, fp
 8005810:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005814:	e7d0      	b.n	80057b8 <_dtoa_r+0x230>
 8005816:	3101      	adds	r1, #1
 8005818:	0040      	lsls	r0, r0, #1
 800581a:	e7d1      	b.n	80057c0 <_dtoa_r+0x238>
 800581c:	f3af 8000 	nop.w
 8005820:	636f4361 	.word	0x636f4361
 8005824:	3fd287a7 	.word	0x3fd287a7
 8005828:	8b60c8b3 	.word	0x8b60c8b3
 800582c:	3fc68a28 	.word	0x3fc68a28
 8005830:	509f79fb 	.word	0x509f79fb
 8005834:	3fd34413 	.word	0x3fd34413
 8005838:	08007115 	.word	0x08007115
 800583c:	0800712c 	.word	0x0800712c
 8005840:	7ff00000 	.word	0x7ff00000
 8005844:	08007111 	.word	0x08007111
 8005848:	080070e5 	.word	0x080070e5
 800584c:	080070e4 	.word	0x080070e4
 8005850:	08007280 	.word	0x08007280
 8005854:	08007184 	.word	0x08007184
 8005858:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800585c:	f1ba 0f0e 	cmp.w	sl, #14
 8005860:	6010      	str	r0, [r2, #0]
 8005862:	d86e      	bhi.n	8005942 <_dtoa_r+0x3ba>
 8005864:	2c00      	cmp	r4, #0
 8005866:	d06c      	beq.n	8005942 <_dtoa_r+0x3ba>
 8005868:	f1b8 0f00 	cmp.w	r8, #0
 800586c:	f340 80b4 	ble.w	80059d8 <_dtoa_r+0x450>
 8005870:	4ac8      	ldr	r2, [pc, #800]	@ (8005b94 <_dtoa_r+0x60c>)
 8005872:	f008 010f 	and.w	r1, r8, #15
 8005876:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800587a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800587e:	ed92 7b00 	vldr	d7, [r2]
 8005882:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005886:	f000 809b 	beq.w	80059c0 <_dtoa_r+0x438>
 800588a:	4ac3      	ldr	r2, [pc, #780]	@ (8005b98 <_dtoa_r+0x610>)
 800588c:	ed92 6b08 	vldr	d6, [r2, #32]
 8005890:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005894:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005898:	f001 010f 	and.w	r1, r1, #15
 800589c:	2203      	movs	r2, #3
 800589e:	48be      	ldr	r0, [pc, #760]	@ (8005b98 <_dtoa_r+0x610>)
 80058a0:	2900      	cmp	r1, #0
 80058a2:	f040 808f 	bne.w	80059c4 <_dtoa_r+0x43c>
 80058a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80058aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80058ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80058b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058b8:	2900      	cmp	r1, #0
 80058ba:	f000 80b3 	beq.w	8005a24 <_dtoa_r+0x49c>
 80058be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80058c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80058c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ca:	f140 80ab 	bpl.w	8005a24 <_dtoa_r+0x49c>
 80058ce:	f1ba 0f00 	cmp.w	sl, #0
 80058d2:	f000 80a7 	beq.w	8005a24 <_dtoa_r+0x49c>
 80058d6:	f1bb 0f00 	cmp.w	fp, #0
 80058da:	dd30      	ble.n	800593e <_dtoa_r+0x3b6>
 80058dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80058e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80058ec:	9105      	str	r1, [sp, #20]
 80058ee:	3201      	adds	r2, #1
 80058f0:	465c      	mov	r4, fp
 80058f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80058f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80058fa:	ee07 2a90 	vmov	s15, r2
 80058fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005902:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005906:	ee15 2a90 	vmov	r2, s11
 800590a:	ec51 0b15 	vmov	r0, r1, d5
 800590e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005912:	2c00      	cmp	r4, #0
 8005914:	f040 808a 	bne.w	8005a2c <_dtoa_r+0x4a4>
 8005918:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800591c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005920:	ec41 0b17 	vmov	d7, r0, r1
 8005924:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592c:	f300 826a 	bgt.w	8005e04 <_dtoa_r+0x87c>
 8005930:	eeb1 7b47 	vneg.f64	d7, d7
 8005934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	d423      	bmi.n	8005986 <_dtoa_r+0x3fe>
 800593e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005942:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005944:	2a00      	cmp	r2, #0
 8005946:	f2c0 8129 	blt.w	8005b9c <_dtoa_r+0x614>
 800594a:	f1b8 0f0e 	cmp.w	r8, #14
 800594e:	f300 8125 	bgt.w	8005b9c <_dtoa_r+0x614>
 8005952:	4b90      	ldr	r3, [pc, #576]	@ (8005b94 <_dtoa_r+0x60c>)
 8005954:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005958:	ed93 6b00 	vldr	d6, [r3]
 800595c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	f280 80c8 	bge.w	8005af4 <_dtoa_r+0x56c>
 8005964:	f1ba 0f00 	cmp.w	sl, #0
 8005968:	f300 80c4 	bgt.w	8005af4 <_dtoa_r+0x56c>
 800596c:	d10b      	bne.n	8005986 <_dtoa_r+0x3fe>
 800596e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005972:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005976:	ed9d 7b02 	vldr	d7, [sp, #8]
 800597a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800597e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005982:	f2c0 823c 	blt.w	8005dfe <_dtoa_r+0x876>
 8005986:	2400      	movs	r4, #0
 8005988:	4625      	mov	r5, r4
 800598a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800598c:	43db      	mvns	r3, r3
 800598e:	9305      	str	r3, [sp, #20]
 8005990:	463e      	mov	r6, r7
 8005992:	f04f 0800 	mov.w	r8, #0
 8005996:	4621      	mov	r1, r4
 8005998:	4648      	mov	r0, r9
 800599a:	f000 fc93 	bl	80062c4 <_Bfree>
 800599e:	2d00      	cmp	r5, #0
 80059a0:	f000 80a2 	beq.w	8005ae8 <_dtoa_r+0x560>
 80059a4:	f1b8 0f00 	cmp.w	r8, #0
 80059a8:	d005      	beq.n	80059b6 <_dtoa_r+0x42e>
 80059aa:	45a8      	cmp	r8, r5
 80059ac:	d003      	beq.n	80059b6 <_dtoa_r+0x42e>
 80059ae:	4641      	mov	r1, r8
 80059b0:	4648      	mov	r0, r9
 80059b2:	f000 fc87 	bl	80062c4 <_Bfree>
 80059b6:	4629      	mov	r1, r5
 80059b8:	4648      	mov	r0, r9
 80059ba:	f000 fc83 	bl	80062c4 <_Bfree>
 80059be:	e093      	b.n	8005ae8 <_dtoa_r+0x560>
 80059c0:	2202      	movs	r2, #2
 80059c2:	e76c      	b.n	800589e <_dtoa_r+0x316>
 80059c4:	07cc      	lsls	r4, r1, #31
 80059c6:	d504      	bpl.n	80059d2 <_dtoa_r+0x44a>
 80059c8:	ed90 6b00 	vldr	d6, [r0]
 80059cc:	3201      	adds	r2, #1
 80059ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059d2:	1049      	asrs	r1, r1, #1
 80059d4:	3008      	adds	r0, #8
 80059d6:	e763      	b.n	80058a0 <_dtoa_r+0x318>
 80059d8:	d022      	beq.n	8005a20 <_dtoa_r+0x498>
 80059da:	f1c8 0100 	rsb	r1, r8, #0
 80059de:	4a6d      	ldr	r2, [pc, #436]	@ (8005b94 <_dtoa_r+0x60c>)
 80059e0:	f001 000f 	and.w	r0, r1, #15
 80059e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80059e8:	ed92 7b00 	vldr	d7, [r2]
 80059ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80059f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059f4:	4868      	ldr	r0, [pc, #416]	@ (8005b98 <_dtoa_r+0x610>)
 80059f6:	1109      	asrs	r1, r1, #4
 80059f8:	2400      	movs	r4, #0
 80059fa:	2202      	movs	r2, #2
 80059fc:	b929      	cbnz	r1, 8005a0a <_dtoa_r+0x482>
 80059fe:	2c00      	cmp	r4, #0
 8005a00:	f43f af57 	beq.w	80058b2 <_dtoa_r+0x32a>
 8005a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a08:	e753      	b.n	80058b2 <_dtoa_r+0x32a>
 8005a0a:	07ce      	lsls	r6, r1, #31
 8005a0c:	d505      	bpl.n	8005a1a <_dtoa_r+0x492>
 8005a0e:	ed90 6b00 	vldr	d6, [r0]
 8005a12:	3201      	adds	r2, #1
 8005a14:	2401      	movs	r4, #1
 8005a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a1a:	1049      	asrs	r1, r1, #1
 8005a1c:	3008      	adds	r0, #8
 8005a1e:	e7ed      	b.n	80059fc <_dtoa_r+0x474>
 8005a20:	2202      	movs	r2, #2
 8005a22:	e746      	b.n	80058b2 <_dtoa_r+0x32a>
 8005a24:	f8cd 8014 	str.w	r8, [sp, #20]
 8005a28:	4654      	mov	r4, sl
 8005a2a:	e762      	b.n	80058f2 <_dtoa_r+0x36a>
 8005a2c:	4a59      	ldr	r2, [pc, #356]	@ (8005b94 <_dtoa_r+0x60c>)
 8005a2e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005a32:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005a36:	9a08      	ldr	r2, [sp, #32]
 8005a38:	ec41 0b17 	vmov	d7, r0, r1
 8005a3c:	443c      	add	r4, r7
 8005a3e:	b34a      	cbz	r2, 8005a94 <_dtoa_r+0x50c>
 8005a40:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005a44:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005a48:	463e      	mov	r6, r7
 8005a4a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005a4e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005a52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a56:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005a5a:	ee14 2a90 	vmov	r2, s9
 8005a5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005a62:	3230      	adds	r2, #48	@ 0x30
 8005a64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005a68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a70:	f806 2b01 	strb.w	r2, [r6], #1
 8005a74:	d438      	bmi.n	8005ae8 <_dtoa_r+0x560>
 8005a76:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005a7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a82:	d46e      	bmi.n	8005b62 <_dtoa_r+0x5da>
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	f43f af5a 	beq.w	800593e <_dtoa_r+0x3b6>
 8005a8a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005a8e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005a92:	e7e0      	b.n	8005a56 <_dtoa_r+0x4ce>
 8005a94:	4621      	mov	r1, r4
 8005a96:	463e      	mov	r6, r7
 8005a98:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005a9c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005aa0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005aa4:	ee14 2a90 	vmov	r2, s9
 8005aa8:	3230      	adds	r2, #48	@ 0x30
 8005aaa:	f806 2b01 	strb.w	r2, [r6], #1
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005ab4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005ab8:	d119      	bne.n	8005aee <_dtoa_r+0x566>
 8005aba:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005abe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005ac2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	dc4a      	bgt.n	8005b62 <_dtoa_r+0x5da>
 8005acc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005ad0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad8:	f57f af31 	bpl.w	800593e <_dtoa_r+0x3b6>
 8005adc:	460e      	mov	r6, r1
 8005ade:	3901      	subs	r1, #1
 8005ae0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ae4:	2b30      	cmp	r3, #48	@ 0x30
 8005ae6:	d0f9      	beq.n	8005adc <_dtoa_r+0x554>
 8005ae8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005aec:	e027      	b.n	8005b3e <_dtoa_r+0x5b6>
 8005aee:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005af2:	e7d5      	b.n	8005aa0 <_dtoa_r+0x518>
 8005af4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005af8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005afc:	463e      	mov	r6, r7
 8005afe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005b02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005b06:	ee15 3a10 	vmov	r3, s10
 8005b0a:	3330      	adds	r3, #48	@ 0x30
 8005b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8005b10:	1bf3      	subs	r3, r6, r7
 8005b12:	459a      	cmp	sl, r3
 8005b14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005b18:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005b1c:	d132      	bne.n	8005b84 <_dtoa_r+0x5fc>
 8005b1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	dc18      	bgt.n	8005b5e <_dtoa_r+0x5d6>
 8005b2c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b34:	d103      	bne.n	8005b3e <_dtoa_r+0x5b6>
 8005b36:	ee15 3a10 	vmov	r3, s10
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d40f      	bmi.n	8005b5e <_dtoa_r+0x5d6>
 8005b3e:	9901      	ldr	r1, [sp, #4]
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fbbf 	bl	80062c4 <_Bfree>
 8005b46:	2300      	movs	r3, #0
 8005b48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b4a:	7033      	strb	r3, [r6, #0]
 8005b4c:	f108 0301 	add.w	r3, r8, #1
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 824b 	beq.w	8005ff0 <_dtoa_r+0xa68>
 8005b5a:	601e      	str	r6, [r3, #0]
 8005b5c:	e248      	b.n	8005ff0 <_dtoa_r+0xa68>
 8005b5e:	f8cd 8014 	str.w	r8, [sp, #20]
 8005b62:	4633      	mov	r3, r6
 8005b64:	461e      	mov	r6, r3
 8005b66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b6a:	2a39      	cmp	r2, #57	@ 0x39
 8005b6c:	d106      	bne.n	8005b7c <_dtoa_r+0x5f4>
 8005b6e:	429f      	cmp	r7, r3
 8005b70:	d1f8      	bne.n	8005b64 <_dtoa_r+0x5dc>
 8005b72:	9a05      	ldr	r2, [sp, #20]
 8005b74:	3201      	adds	r2, #1
 8005b76:	9205      	str	r2, [sp, #20]
 8005b78:	2230      	movs	r2, #48	@ 0x30
 8005b7a:	703a      	strb	r2, [r7, #0]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	3201      	adds	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e7b1      	b.n	8005ae8 <_dtoa_r+0x560>
 8005b84:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005b88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	d1b5      	bne.n	8005afe <_dtoa_r+0x576>
 8005b92:	e7d4      	b.n	8005b3e <_dtoa_r+0x5b6>
 8005b94:	08007280 	.word	0x08007280
 8005b98:	08007258 	.word	0x08007258
 8005b9c:	9908      	ldr	r1, [sp, #32]
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	f000 80e9 	beq.w	8005d76 <_dtoa_r+0x7ee>
 8005ba4:	9907      	ldr	r1, [sp, #28]
 8005ba6:	2901      	cmp	r1, #1
 8005ba8:	f300 80cb 	bgt.w	8005d42 <_dtoa_r+0x7ba>
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	f000 80c4 	beq.w	8005d3a <_dtoa_r+0x7b2>
 8005bb2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005bb6:	9e04      	ldr	r6, [sp, #16]
 8005bb8:	461c      	mov	r4, r3
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	9b04      	ldr	r3, [sp, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	9b06      	ldr	r3, [sp, #24]
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	4648      	mov	r0, r9
 8005bca:	9306      	str	r3, [sp, #24]
 8005bcc:	f000 fc2e 	bl	800642c <__i2b>
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	b166      	cbz	r6, 8005bf0 <_dtoa_r+0x668>
 8005bd6:	9a06      	ldr	r2, [sp, #24]
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	dd09      	ble.n	8005bf0 <_dtoa_r+0x668>
 8005bdc:	42b2      	cmp	r2, r6
 8005bde:	9904      	ldr	r1, [sp, #16]
 8005be0:	bfa8      	it	ge
 8005be2:	4632      	movge	r2, r6
 8005be4:	1a89      	subs	r1, r1, r2
 8005be6:	9104      	str	r1, [sp, #16]
 8005be8:	9906      	ldr	r1, [sp, #24]
 8005bea:	1ab6      	subs	r6, r6, r2
 8005bec:	1a8a      	subs	r2, r1, r2
 8005bee:	9206      	str	r2, [sp, #24]
 8005bf0:	b30b      	cbz	r3, 8005c36 <_dtoa_r+0x6ae>
 8005bf2:	9a08      	ldr	r2, [sp, #32]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	f000 80c5 	beq.w	8005d84 <_dtoa_r+0x7fc>
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	f000 80bf 	beq.w	8005d7e <_dtoa_r+0x7f6>
 8005c00:	4629      	mov	r1, r5
 8005c02:	4622      	mov	r2, r4
 8005c04:	4648      	mov	r0, r9
 8005c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c08:	f000 fcc8 	bl	800659c <__pow5mult>
 8005c0c:	9a01      	ldr	r2, [sp, #4]
 8005c0e:	4601      	mov	r1, r0
 8005c10:	4605      	mov	r5, r0
 8005c12:	4648      	mov	r0, r9
 8005c14:	f000 fc20 	bl	8006458 <__multiply>
 8005c18:	9901      	ldr	r1, [sp, #4]
 8005c1a:	9005      	str	r0, [sp, #20]
 8005c1c:	4648      	mov	r0, r9
 8005c1e:	f000 fb51 	bl	80062c4 <_Bfree>
 8005c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c24:	1b1b      	subs	r3, r3, r4
 8005c26:	f000 80b0 	beq.w	8005d8a <_dtoa_r+0x802>
 8005c2a:	9905      	ldr	r1, [sp, #20]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4648      	mov	r0, r9
 8005c30:	f000 fcb4 	bl	800659c <__pow5mult>
 8005c34:	9001      	str	r0, [sp, #4]
 8005c36:	2101      	movs	r1, #1
 8005c38:	4648      	mov	r0, r9
 8005c3a:	f000 fbf7 	bl	800642c <__i2b>
 8005c3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c40:	4604      	mov	r4, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 81da 	beq.w	8005ffc <_dtoa_r+0xa74>
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	4648      	mov	r0, r9
 8005c4e:	f000 fca5 	bl	800659c <__pow5mult>
 8005c52:	9b07      	ldr	r3, [sp, #28]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	4604      	mov	r4, r0
 8005c58:	f300 80a0 	bgt.w	8005d9c <_dtoa_r+0x814>
 8005c5c:	9b02      	ldr	r3, [sp, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 8096 	bne.w	8005d90 <_dtoa_r+0x808>
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	f040 8092 	bne.w	8005d94 <_dtoa_r+0x80c>
 8005c70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c74:	0d12      	lsrs	r2, r2, #20
 8005c76:	0512      	lsls	r2, r2, #20
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	f000 808d 	beq.w	8005d98 <_dtoa_r+0x810>
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	3301      	adds	r3, #1
 8005c82:	9304      	str	r3, [sp, #16]
 8005c84:	9b06      	ldr	r3, [sp, #24]
 8005c86:	3301      	adds	r3, #1
 8005c88:	9306      	str	r3, [sp, #24]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 81b9 	beq.w	8006008 <_dtoa_r+0xa80>
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005c9c:	6910      	ldr	r0, [r2, #16]
 8005c9e:	f000 fb79 	bl	8006394 <__hi0bits>
 8005ca2:	f1c0 0020 	rsb	r0, r0, #32
 8005ca6:	9b06      	ldr	r3, [sp, #24]
 8005ca8:	4418      	add	r0, r3
 8005caa:	f010 001f 	ands.w	r0, r0, #31
 8005cae:	f000 8081 	beq.w	8005db4 <_dtoa_r+0x82c>
 8005cb2:	f1c0 0220 	rsb	r2, r0, #32
 8005cb6:	2a04      	cmp	r2, #4
 8005cb8:	dd73      	ble.n	8005da2 <_dtoa_r+0x81a>
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	f1c0 001c 	rsb	r0, r0, #28
 8005cc0:	4403      	add	r3, r0
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	9b06      	ldr	r3, [sp, #24]
 8005cc6:	4406      	add	r6, r0
 8005cc8:	4403      	add	r3, r0
 8005cca:	9306      	str	r3, [sp, #24]
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dd05      	ble.n	8005cde <_dtoa_r+0x756>
 8005cd2:	9901      	ldr	r1, [sp, #4]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4648      	mov	r0, r9
 8005cd8:	f000 fcba 	bl	8006650 <__lshift>
 8005cdc:	9001      	str	r0, [sp, #4]
 8005cde:	9b06      	ldr	r3, [sp, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dd05      	ble.n	8005cf0 <_dtoa_r+0x768>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4648      	mov	r0, r9
 8005cea:	f000 fcb1 	bl	8006650 <__lshift>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d060      	beq.n	8005db8 <_dtoa_r+0x830>
 8005cf6:	9801      	ldr	r0, [sp, #4]
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	f000 fd15 	bl	8006728 <__mcmp>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	da5a      	bge.n	8005db8 <_dtoa_r+0x830>
 8005d02:	f108 33ff 	add.w	r3, r8, #4294967295
 8005d06:	9305      	str	r3, [sp, #20]
 8005d08:	9901      	ldr	r1, [sp, #4]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	220a      	movs	r2, #10
 8005d0e:	4648      	mov	r0, r9
 8005d10:	f000 fafa 	bl	8006308 <__multadd>
 8005d14:	9b08      	ldr	r3, [sp, #32]
 8005d16:	9001      	str	r0, [sp, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8177 	beq.w	800600c <_dtoa_r+0xa84>
 8005d1e:	4629      	mov	r1, r5
 8005d20:	2300      	movs	r3, #0
 8005d22:	220a      	movs	r2, #10
 8005d24:	4648      	mov	r0, r9
 8005d26:	f000 faef 	bl	8006308 <__multadd>
 8005d2a:	f1bb 0f00 	cmp.w	fp, #0
 8005d2e:	4605      	mov	r5, r0
 8005d30:	dc6e      	bgt.n	8005e10 <_dtoa_r+0x888>
 8005d32:	9b07      	ldr	r3, [sp, #28]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	dc48      	bgt.n	8005dca <_dtoa_r+0x842>
 8005d38:	e06a      	b.n	8005e10 <_dtoa_r+0x888>
 8005d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005d40:	e739      	b.n	8005bb6 <_dtoa_r+0x62e>
 8005d42:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	db07      	blt.n	8005d5a <_dtoa_r+0x7d2>
 8005d4a:	f1ba 0f00 	cmp.w	sl, #0
 8005d4e:	eba3 0404 	sub.w	r4, r3, r4
 8005d52:	db0b      	blt.n	8005d6c <_dtoa_r+0x7e4>
 8005d54:	9e04      	ldr	r6, [sp, #16]
 8005d56:	4652      	mov	r2, sl
 8005d58:	e72f      	b.n	8005bba <_dtoa_r+0x632>
 8005d5a:	1ae2      	subs	r2, r4, r3
 8005d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d5e:	9e04      	ldr	r6, [sp, #16]
 8005d60:	4413      	add	r3, r2
 8005d62:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d64:	4652      	mov	r2, sl
 8005d66:	4623      	mov	r3, r4
 8005d68:	2400      	movs	r4, #0
 8005d6a:	e726      	b.n	8005bba <_dtoa_r+0x632>
 8005d6c:	9a04      	ldr	r2, [sp, #16]
 8005d6e:	eba2 060a 	sub.w	r6, r2, sl
 8005d72:	2200      	movs	r2, #0
 8005d74:	e721      	b.n	8005bba <_dtoa_r+0x632>
 8005d76:	9e04      	ldr	r6, [sp, #16]
 8005d78:	9d08      	ldr	r5, [sp, #32]
 8005d7a:	461c      	mov	r4, r3
 8005d7c:	e72a      	b.n	8005bd4 <_dtoa_r+0x64c>
 8005d7e:	9a01      	ldr	r2, [sp, #4]
 8005d80:	9205      	str	r2, [sp, #20]
 8005d82:	e752      	b.n	8005c2a <_dtoa_r+0x6a2>
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	461a      	mov	r2, r3
 8005d88:	e751      	b.n	8005c2e <_dtoa_r+0x6a6>
 8005d8a:	9b05      	ldr	r3, [sp, #20]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	e752      	b.n	8005c36 <_dtoa_r+0x6ae>
 8005d90:	2300      	movs	r3, #0
 8005d92:	e77b      	b.n	8005c8c <_dtoa_r+0x704>
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	e779      	b.n	8005c8c <_dtoa_r+0x704>
 8005d98:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005d9a:	e778      	b.n	8005c8e <_dtoa_r+0x706>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005da0:	e779      	b.n	8005c96 <_dtoa_r+0x70e>
 8005da2:	d093      	beq.n	8005ccc <_dtoa_r+0x744>
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	321c      	adds	r2, #28
 8005da8:	4413      	add	r3, r2
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	9b06      	ldr	r3, [sp, #24]
 8005dae:	4416      	add	r6, r2
 8005db0:	4413      	add	r3, r2
 8005db2:	e78a      	b.n	8005cca <_dtoa_r+0x742>
 8005db4:	4602      	mov	r2, r0
 8005db6:	e7f5      	b.n	8005da4 <_dtoa_r+0x81c>
 8005db8:	f1ba 0f00 	cmp.w	sl, #0
 8005dbc:	f8cd 8014 	str.w	r8, [sp, #20]
 8005dc0:	46d3      	mov	fp, sl
 8005dc2:	dc21      	bgt.n	8005e08 <_dtoa_r+0x880>
 8005dc4:	9b07      	ldr	r3, [sp, #28]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	dd1e      	ble.n	8005e08 <_dtoa_r+0x880>
 8005dca:	f1bb 0f00 	cmp.w	fp, #0
 8005dce:	f47f addc 	bne.w	800598a <_dtoa_r+0x402>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	4648      	mov	r0, r9
 8005dda:	f000 fa95 	bl	8006308 <__multadd>
 8005dde:	4601      	mov	r1, r0
 8005de0:	4604      	mov	r4, r0
 8005de2:	9801      	ldr	r0, [sp, #4]
 8005de4:	f000 fca0 	bl	8006728 <__mcmp>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f77f adce 	ble.w	800598a <_dtoa_r+0x402>
 8005dee:	463e      	mov	r6, r7
 8005df0:	2331      	movs	r3, #49	@ 0x31
 8005df2:	f806 3b01 	strb.w	r3, [r6], #1
 8005df6:	9b05      	ldr	r3, [sp, #20]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	e5c9      	b.n	8005992 <_dtoa_r+0x40a>
 8005dfe:	f8cd 8014 	str.w	r8, [sp, #20]
 8005e02:	4654      	mov	r4, sl
 8005e04:	4625      	mov	r5, r4
 8005e06:	e7f2      	b.n	8005dee <_dtoa_r+0x866>
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8102 	beq.w	8006014 <_dtoa_r+0xa8c>
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	dd05      	ble.n	8005e20 <_dtoa_r+0x898>
 8005e14:	4629      	mov	r1, r5
 8005e16:	4632      	mov	r2, r6
 8005e18:	4648      	mov	r0, r9
 8005e1a:	f000 fc19 	bl	8006650 <__lshift>
 8005e1e:	4605      	mov	r5, r0
 8005e20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d058      	beq.n	8005ed8 <_dtoa_r+0x950>
 8005e26:	6869      	ldr	r1, [r5, #4]
 8005e28:	4648      	mov	r0, r9
 8005e2a:	f000 fa0b 	bl	8006244 <_Balloc>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	b928      	cbnz	r0, 8005e3e <_dtoa_r+0x8b6>
 8005e32:	4b82      	ldr	r3, [pc, #520]	@ (800603c <_dtoa_r+0xab4>)
 8005e34:	4602      	mov	r2, r0
 8005e36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e3a:	f7ff bbbe 	b.w	80055ba <_dtoa_r+0x32>
 8005e3e:	692a      	ldr	r2, [r5, #16]
 8005e40:	3202      	adds	r2, #2
 8005e42:	0092      	lsls	r2, r2, #2
 8005e44:	f105 010c 	add.w	r1, r5, #12
 8005e48:	300c      	adds	r0, #12
 8005e4a:	f7ff fb04 	bl	8005456 <memcpy>
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4631      	mov	r1, r6
 8005e52:	4648      	mov	r0, r9
 8005e54:	f000 fbfc 	bl	8006650 <__lshift>
 8005e58:	1c7b      	adds	r3, r7, #1
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	eb07 030b 	add.w	r3, r7, fp
 8005e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e62:	9b02      	ldr	r3, [sp, #8]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	46a8      	mov	r8, r5
 8005e6a:	9308      	str	r3, [sp, #32]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	9801      	ldr	r0, [sp, #4]
 8005e72:	4621      	mov	r1, r4
 8005e74:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e78:	f7ff fafb 	bl	8005472 <quorem>
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	9002      	str	r0, [sp, #8]
 8005e80:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005e84:	9801      	ldr	r0, [sp, #4]
 8005e86:	f000 fc4f 	bl	8006728 <__mcmp>
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	9006      	str	r0, [sp, #24]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4648      	mov	r0, r9
 8005e92:	f000 fc65 	bl	8006760 <__mdiff>
 8005e96:	68c2      	ldr	r2, [r0, #12]
 8005e98:	4606      	mov	r6, r0
 8005e9a:	b9fa      	cbnz	r2, 8005edc <_dtoa_r+0x954>
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	9801      	ldr	r0, [sp, #4]
 8005ea0:	f000 fc42 	bl	8006728 <__mcmp>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4648      	mov	r0, r9
 8005eaa:	920a      	str	r2, [sp, #40]	@ 0x28
 8005eac:	f000 fa0a 	bl	80062c4 <_Bfree>
 8005eb0:	9b07      	ldr	r3, [sp, #28]
 8005eb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eb4:	9e04      	ldr	r6, [sp, #16]
 8005eb6:	ea42 0103 	orr.w	r1, r2, r3
 8005eba:	9b08      	ldr	r3, [sp, #32]
 8005ebc:	4319      	orrs	r1, r3
 8005ebe:	d10f      	bne.n	8005ee0 <_dtoa_r+0x958>
 8005ec0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005ec4:	d028      	beq.n	8005f18 <_dtoa_r+0x990>
 8005ec6:	9b06      	ldr	r3, [sp, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd02      	ble.n	8005ed2 <_dtoa_r+0x94a>
 8005ecc:	9b02      	ldr	r3, [sp, #8]
 8005ece:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005ed2:	f88b a000 	strb.w	sl, [fp]
 8005ed6:	e55e      	b.n	8005996 <_dtoa_r+0x40e>
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e7bd      	b.n	8005e58 <_dtoa_r+0x8d0>
 8005edc:	2201      	movs	r2, #1
 8005ede:	e7e2      	b.n	8005ea6 <_dtoa_r+0x91e>
 8005ee0:	9b06      	ldr	r3, [sp, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	db04      	blt.n	8005ef0 <_dtoa_r+0x968>
 8005ee6:	9907      	ldr	r1, [sp, #28]
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	9908      	ldr	r1, [sp, #32]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	d120      	bne.n	8005f32 <_dtoa_r+0x9aa>
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	ddee      	ble.n	8005ed2 <_dtoa_r+0x94a>
 8005ef4:	9901      	ldr	r1, [sp, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4648      	mov	r0, r9
 8005efa:	f000 fba9 	bl	8006650 <__lshift>
 8005efe:	4621      	mov	r1, r4
 8005f00:	9001      	str	r0, [sp, #4]
 8005f02:	f000 fc11 	bl	8006728 <__mcmp>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	dc03      	bgt.n	8005f12 <_dtoa_r+0x98a>
 8005f0a:	d1e2      	bne.n	8005ed2 <_dtoa_r+0x94a>
 8005f0c:	f01a 0f01 	tst.w	sl, #1
 8005f10:	d0df      	beq.n	8005ed2 <_dtoa_r+0x94a>
 8005f12:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005f16:	d1d9      	bne.n	8005ecc <_dtoa_r+0x944>
 8005f18:	2339      	movs	r3, #57	@ 0x39
 8005f1a:	f88b 3000 	strb.w	r3, [fp]
 8005f1e:	4633      	mov	r3, r6
 8005f20:	461e      	mov	r6, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f28:	2a39      	cmp	r2, #57	@ 0x39
 8005f2a:	d052      	beq.n	8005fd2 <_dtoa_r+0xa4a>
 8005f2c:	3201      	adds	r2, #1
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	e531      	b.n	8005996 <_dtoa_r+0x40e>
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	dd07      	ble.n	8005f46 <_dtoa_r+0x9be>
 8005f36:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005f3a:	d0ed      	beq.n	8005f18 <_dtoa_r+0x990>
 8005f3c:	f10a 0301 	add.w	r3, sl, #1
 8005f40:	f88b 3000 	strb.w	r3, [fp]
 8005f44:	e527      	b.n	8005996 <_dtoa_r+0x40e>
 8005f46:	9b04      	ldr	r3, [sp, #16]
 8005f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f4a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d029      	beq.n	8005fa6 <_dtoa_r+0xa1e>
 8005f52:	9901      	ldr	r1, [sp, #4]
 8005f54:	2300      	movs	r3, #0
 8005f56:	220a      	movs	r2, #10
 8005f58:	4648      	mov	r0, r9
 8005f5a:	f000 f9d5 	bl	8006308 <__multadd>
 8005f5e:	45a8      	cmp	r8, r5
 8005f60:	9001      	str	r0, [sp, #4]
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	f04f 020a 	mov.w	r2, #10
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	d107      	bne.n	8005f80 <_dtoa_r+0x9f8>
 8005f70:	f000 f9ca 	bl	8006308 <__multadd>
 8005f74:	4680      	mov	r8, r0
 8005f76:	4605      	mov	r5, r0
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	9304      	str	r3, [sp, #16]
 8005f7e:	e776      	b.n	8005e6e <_dtoa_r+0x8e6>
 8005f80:	f000 f9c2 	bl	8006308 <__multadd>
 8005f84:	4629      	mov	r1, r5
 8005f86:	4680      	mov	r8, r0
 8005f88:	2300      	movs	r3, #0
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 f9bb 	bl	8006308 <__multadd>
 8005f92:	4605      	mov	r5, r0
 8005f94:	e7f0      	b.n	8005f78 <_dtoa_r+0x9f0>
 8005f96:	f1bb 0f00 	cmp.w	fp, #0
 8005f9a:	bfcc      	ite	gt
 8005f9c:	465e      	movgt	r6, fp
 8005f9e:	2601      	movle	r6, #1
 8005fa0:	443e      	add	r6, r7
 8005fa2:	f04f 0800 	mov.w	r8, #0
 8005fa6:	9901      	ldr	r1, [sp, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4648      	mov	r0, r9
 8005fac:	f000 fb50 	bl	8006650 <__lshift>
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	9001      	str	r0, [sp, #4]
 8005fb4:	f000 fbb8 	bl	8006728 <__mcmp>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	dcb0      	bgt.n	8005f1e <_dtoa_r+0x996>
 8005fbc:	d102      	bne.n	8005fc4 <_dtoa_r+0xa3c>
 8005fbe:	f01a 0f01 	tst.w	sl, #1
 8005fc2:	d1ac      	bne.n	8005f1e <_dtoa_r+0x996>
 8005fc4:	4633      	mov	r3, r6
 8005fc6:	461e      	mov	r6, r3
 8005fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fcc:	2a30      	cmp	r2, #48	@ 0x30
 8005fce:	d0fa      	beq.n	8005fc6 <_dtoa_r+0xa3e>
 8005fd0:	e4e1      	b.n	8005996 <_dtoa_r+0x40e>
 8005fd2:	429f      	cmp	r7, r3
 8005fd4:	d1a4      	bne.n	8005f20 <_dtoa_r+0x998>
 8005fd6:	9b05      	ldr	r3, [sp, #20]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	2331      	movs	r3, #49	@ 0x31
 8005fde:	703b      	strb	r3, [r7, #0]
 8005fe0:	e4d9      	b.n	8005996 <_dtoa_r+0x40e>
 8005fe2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005fe4:	4f16      	ldr	r7, [pc, #88]	@ (8006040 <_dtoa_r+0xab8>)
 8005fe6:	b11b      	cbz	r3, 8005ff0 <_dtoa_r+0xa68>
 8005fe8:	f107 0308 	add.w	r3, r7, #8
 8005fec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	b011      	add	sp, #68	@ 0x44
 8005ff4:	ecbd 8b02 	vpop	{d8}
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	f77f ae2c 	ble.w	8005c5c <_dtoa_r+0x6d4>
 8006004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006008:	2001      	movs	r0, #1
 800600a:	e64c      	b.n	8005ca6 <_dtoa_r+0x71e>
 800600c:	f1bb 0f00 	cmp.w	fp, #0
 8006010:	f77f aed8 	ble.w	8005dc4 <_dtoa_r+0x83c>
 8006014:	463e      	mov	r6, r7
 8006016:	9801      	ldr	r0, [sp, #4]
 8006018:	4621      	mov	r1, r4
 800601a:	f7ff fa2a 	bl	8005472 <quorem>
 800601e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006022:	f806 ab01 	strb.w	sl, [r6], #1
 8006026:	1bf2      	subs	r2, r6, r7
 8006028:	4593      	cmp	fp, r2
 800602a:	ddb4      	ble.n	8005f96 <_dtoa_r+0xa0e>
 800602c:	9901      	ldr	r1, [sp, #4]
 800602e:	2300      	movs	r3, #0
 8006030:	220a      	movs	r2, #10
 8006032:	4648      	mov	r0, r9
 8006034:	f000 f968 	bl	8006308 <__multadd>
 8006038:	9001      	str	r0, [sp, #4]
 800603a:	e7ec      	b.n	8006016 <_dtoa_r+0xa8e>
 800603c:	08007184 	.word	0x08007184
 8006040:	08007108 	.word	0x08007108

08006044 <_free_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4605      	mov	r5, r0
 8006048:	2900      	cmp	r1, #0
 800604a:	d041      	beq.n	80060d0 <_free_r+0x8c>
 800604c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006050:	1f0c      	subs	r4, r1, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	bfb8      	it	lt
 8006056:	18e4      	addlt	r4, r4, r3
 8006058:	f000 f8e8 	bl	800622c <__malloc_lock>
 800605c:	4a1d      	ldr	r2, [pc, #116]	@ (80060d4 <_free_r+0x90>)
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	b933      	cbnz	r3, 8006070 <_free_r+0x2c>
 8006062:	6063      	str	r3, [r4, #4]
 8006064:	6014      	str	r4, [r2, #0]
 8006066:	4628      	mov	r0, r5
 8006068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800606c:	f000 b8e4 	b.w	8006238 <__malloc_unlock>
 8006070:	42a3      	cmp	r3, r4
 8006072:	d908      	bls.n	8006086 <_free_r+0x42>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	1821      	adds	r1, r4, r0
 8006078:	428b      	cmp	r3, r1
 800607a:	bf01      	itttt	eq
 800607c:	6819      	ldreq	r1, [r3, #0]
 800607e:	685b      	ldreq	r3, [r3, #4]
 8006080:	1809      	addeq	r1, r1, r0
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	e7ed      	b.n	8006062 <_free_r+0x1e>
 8006086:	461a      	mov	r2, r3
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b10b      	cbz	r3, 8006090 <_free_r+0x4c>
 800608c:	42a3      	cmp	r3, r4
 800608e:	d9fa      	bls.n	8006086 <_free_r+0x42>
 8006090:	6811      	ldr	r1, [r2, #0]
 8006092:	1850      	adds	r0, r2, r1
 8006094:	42a0      	cmp	r0, r4
 8006096:	d10b      	bne.n	80060b0 <_free_r+0x6c>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	4401      	add	r1, r0
 800609c:	1850      	adds	r0, r2, r1
 800609e:	4283      	cmp	r3, r0
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	d1e0      	bne.n	8006066 <_free_r+0x22>
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	6053      	str	r3, [r2, #4]
 80060aa:	4408      	add	r0, r1
 80060ac:	6010      	str	r0, [r2, #0]
 80060ae:	e7da      	b.n	8006066 <_free_r+0x22>
 80060b0:	d902      	bls.n	80060b8 <_free_r+0x74>
 80060b2:	230c      	movs	r3, #12
 80060b4:	602b      	str	r3, [r5, #0]
 80060b6:	e7d6      	b.n	8006066 <_free_r+0x22>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	1821      	adds	r1, r4, r0
 80060bc:	428b      	cmp	r3, r1
 80060be:	bf04      	itt	eq
 80060c0:	6819      	ldreq	r1, [r3, #0]
 80060c2:	685b      	ldreq	r3, [r3, #4]
 80060c4:	6063      	str	r3, [r4, #4]
 80060c6:	bf04      	itt	eq
 80060c8:	1809      	addeq	r1, r1, r0
 80060ca:	6021      	streq	r1, [r4, #0]
 80060cc:	6054      	str	r4, [r2, #4]
 80060ce:	e7ca      	b.n	8006066 <_free_r+0x22>
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	bf00      	nop
 80060d4:	240003f4 	.word	0x240003f4

080060d8 <malloc>:
 80060d8:	4b02      	ldr	r3, [pc, #8]	@ (80060e4 <malloc+0xc>)
 80060da:	4601      	mov	r1, r0
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	f000 b825 	b.w	800612c <_malloc_r>
 80060e2:	bf00      	nop
 80060e4:	2400001c 	.word	0x2400001c

080060e8 <sbrk_aligned>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006128 <sbrk_aligned+0x40>)
 80060ec:	460c      	mov	r4, r1
 80060ee:	6831      	ldr	r1, [r6, #0]
 80060f0:	4605      	mov	r5, r0
 80060f2:	b911      	cbnz	r1, 80060fa <sbrk_aligned+0x12>
 80060f4:	f000 fe92 	bl	8006e1c <_sbrk_r>
 80060f8:	6030      	str	r0, [r6, #0]
 80060fa:	4621      	mov	r1, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fe8d 	bl	8006e1c <_sbrk_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d103      	bne.n	800610e <sbrk_aligned+0x26>
 8006106:	f04f 34ff 	mov.w	r4, #4294967295
 800610a:	4620      	mov	r0, r4
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	1cc4      	adds	r4, r0, #3
 8006110:	f024 0403 	bic.w	r4, r4, #3
 8006114:	42a0      	cmp	r0, r4
 8006116:	d0f8      	beq.n	800610a <sbrk_aligned+0x22>
 8006118:	1a21      	subs	r1, r4, r0
 800611a:	4628      	mov	r0, r5
 800611c:	f000 fe7e 	bl	8006e1c <_sbrk_r>
 8006120:	3001      	adds	r0, #1
 8006122:	d1f2      	bne.n	800610a <sbrk_aligned+0x22>
 8006124:	e7ef      	b.n	8006106 <sbrk_aligned+0x1e>
 8006126:	bf00      	nop
 8006128:	240003f0 	.word	0x240003f0

0800612c <_malloc_r>:
 800612c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006130:	1ccd      	adds	r5, r1, #3
 8006132:	f025 0503 	bic.w	r5, r5, #3
 8006136:	3508      	adds	r5, #8
 8006138:	2d0c      	cmp	r5, #12
 800613a:	bf38      	it	cc
 800613c:	250c      	movcc	r5, #12
 800613e:	2d00      	cmp	r5, #0
 8006140:	4606      	mov	r6, r0
 8006142:	db01      	blt.n	8006148 <_malloc_r+0x1c>
 8006144:	42a9      	cmp	r1, r5
 8006146:	d904      	bls.n	8006152 <_malloc_r+0x26>
 8006148:	230c      	movs	r3, #12
 800614a:	6033      	str	r3, [r6, #0]
 800614c:	2000      	movs	r0, #0
 800614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006228 <_malloc_r+0xfc>
 8006156:	f000 f869 	bl	800622c <__malloc_lock>
 800615a:	f8d8 3000 	ldr.w	r3, [r8]
 800615e:	461c      	mov	r4, r3
 8006160:	bb44      	cbnz	r4, 80061b4 <_malloc_r+0x88>
 8006162:	4629      	mov	r1, r5
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff ffbf 	bl	80060e8 <sbrk_aligned>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	4604      	mov	r4, r0
 800616e:	d158      	bne.n	8006222 <_malloc_r+0xf6>
 8006170:	f8d8 4000 	ldr.w	r4, [r8]
 8006174:	4627      	mov	r7, r4
 8006176:	2f00      	cmp	r7, #0
 8006178:	d143      	bne.n	8006202 <_malloc_r+0xd6>
 800617a:	2c00      	cmp	r4, #0
 800617c:	d04b      	beq.n	8006216 <_malloc_r+0xea>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	4639      	mov	r1, r7
 8006182:	4630      	mov	r0, r6
 8006184:	eb04 0903 	add.w	r9, r4, r3
 8006188:	f000 fe48 	bl	8006e1c <_sbrk_r>
 800618c:	4581      	cmp	r9, r0
 800618e:	d142      	bne.n	8006216 <_malloc_r+0xea>
 8006190:	6821      	ldr	r1, [r4, #0]
 8006192:	1a6d      	subs	r5, r5, r1
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f7ff ffa6 	bl	80060e8 <sbrk_aligned>
 800619c:	3001      	adds	r0, #1
 800619e:	d03a      	beq.n	8006216 <_malloc_r+0xea>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	442b      	add	r3, r5
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	f8d8 3000 	ldr.w	r3, [r8]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	bb62      	cbnz	r2, 8006208 <_malloc_r+0xdc>
 80061ae:	f8c8 7000 	str.w	r7, [r8]
 80061b2:	e00f      	b.n	80061d4 <_malloc_r+0xa8>
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	1b52      	subs	r2, r2, r5
 80061b8:	d420      	bmi.n	80061fc <_malloc_r+0xd0>
 80061ba:	2a0b      	cmp	r2, #11
 80061bc:	d917      	bls.n	80061ee <_malloc_r+0xc2>
 80061be:	1961      	adds	r1, r4, r5
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	6025      	str	r5, [r4, #0]
 80061c4:	bf18      	it	ne
 80061c6:	6059      	strne	r1, [r3, #4]
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	bf08      	it	eq
 80061cc:	f8c8 1000 	streq.w	r1, [r8]
 80061d0:	5162      	str	r2, [r4, r5]
 80061d2:	604b      	str	r3, [r1, #4]
 80061d4:	4630      	mov	r0, r6
 80061d6:	f000 f82f 	bl	8006238 <__malloc_unlock>
 80061da:	f104 000b 	add.w	r0, r4, #11
 80061de:	1d23      	adds	r3, r4, #4
 80061e0:	f020 0007 	bic.w	r0, r0, #7
 80061e4:	1ac2      	subs	r2, r0, r3
 80061e6:	bf1c      	itt	ne
 80061e8:	1a1b      	subne	r3, r3, r0
 80061ea:	50a3      	strne	r3, [r4, r2]
 80061ec:	e7af      	b.n	800614e <_malloc_r+0x22>
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	bf0c      	ite	eq
 80061f4:	f8c8 2000 	streq.w	r2, [r8]
 80061f8:	605a      	strne	r2, [r3, #4]
 80061fa:	e7eb      	b.n	80061d4 <_malloc_r+0xa8>
 80061fc:	4623      	mov	r3, r4
 80061fe:	6864      	ldr	r4, [r4, #4]
 8006200:	e7ae      	b.n	8006160 <_malloc_r+0x34>
 8006202:	463c      	mov	r4, r7
 8006204:	687f      	ldr	r7, [r7, #4]
 8006206:	e7b6      	b.n	8006176 <_malloc_r+0x4a>
 8006208:	461a      	mov	r2, r3
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	42a3      	cmp	r3, r4
 800620e:	d1fb      	bne.n	8006208 <_malloc_r+0xdc>
 8006210:	2300      	movs	r3, #0
 8006212:	6053      	str	r3, [r2, #4]
 8006214:	e7de      	b.n	80061d4 <_malloc_r+0xa8>
 8006216:	230c      	movs	r3, #12
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	4630      	mov	r0, r6
 800621c:	f000 f80c 	bl	8006238 <__malloc_unlock>
 8006220:	e794      	b.n	800614c <_malloc_r+0x20>
 8006222:	6005      	str	r5, [r0, #0]
 8006224:	e7d6      	b.n	80061d4 <_malloc_r+0xa8>
 8006226:	bf00      	nop
 8006228:	240003f4 	.word	0x240003f4

0800622c <__malloc_lock>:
 800622c:	4801      	ldr	r0, [pc, #4]	@ (8006234 <__malloc_lock+0x8>)
 800622e:	f7ff b910 	b.w	8005452 <__retarget_lock_acquire_recursive>
 8006232:	bf00      	nop
 8006234:	240003ec 	.word	0x240003ec

08006238 <__malloc_unlock>:
 8006238:	4801      	ldr	r0, [pc, #4]	@ (8006240 <__malloc_unlock+0x8>)
 800623a:	f7ff b90b 	b.w	8005454 <__retarget_lock_release_recursive>
 800623e:	bf00      	nop
 8006240:	240003ec 	.word	0x240003ec

08006244 <_Balloc>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	69c6      	ldr	r6, [r0, #28]
 8006248:	4604      	mov	r4, r0
 800624a:	460d      	mov	r5, r1
 800624c:	b976      	cbnz	r6, 800626c <_Balloc+0x28>
 800624e:	2010      	movs	r0, #16
 8006250:	f7ff ff42 	bl	80060d8 <malloc>
 8006254:	4602      	mov	r2, r0
 8006256:	61e0      	str	r0, [r4, #28]
 8006258:	b920      	cbnz	r0, 8006264 <_Balloc+0x20>
 800625a:	4b18      	ldr	r3, [pc, #96]	@ (80062bc <_Balloc+0x78>)
 800625c:	4818      	ldr	r0, [pc, #96]	@ (80062c0 <_Balloc+0x7c>)
 800625e:	216b      	movs	r1, #107	@ 0x6b
 8006260:	f000 fdec 	bl	8006e3c <__assert_func>
 8006264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006268:	6006      	str	r6, [r0, #0]
 800626a:	60c6      	str	r6, [r0, #12]
 800626c:	69e6      	ldr	r6, [r4, #28]
 800626e:	68f3      	ldr	r3, [r6, #12]
 8006270:	b183      	cbz	r3, 8006294 <_Balloc+0x50>
 8006272:	69e3      	ldr	r3, [r4, #28]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800627a:	b9b8      	cbnz	r0, 80062ac <_Balloc+0x68>
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f605 	lsl.w	r6, r1, r5
 8006282:	1d72      	adds	r2, r6, #5
 8006284:	0092      	lsls	r2, r2, #2
 8006286:	4620      	mov	r0, r4
 8006288:	f000 fdf6 	bl	8006e78 <_calloc_r>
 800628c:	b160      	cbz	r0, 80062a8 <_Balloc+0x64>
 800628e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006292:	e00e      	b.n	80062b2 <_Balloc+0x6e>
 8006294:	2221      	movs	r2, #33	@ 0x21
 8006296:	2104      	movs	r1, #4
 8006298:	4620      	mov	r0, r4
 800629a:	f000 fded 	bl	8006e78 <_calloc_r>
 800629e:	69e3      	ldr	r3, [r4, #28]
 80062a0:	60f0      	str	r0, [r6, #12]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e4      	bne.n	8006272 <_Balloc+0x2e>
 80062a8:	2000      	movs	r0, #0
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	6802      	ldr	r2, [r0, #0]
 80062ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062b2:	2300      	movs	r3, #0
 80062b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062b8:	e7f7      	b.n	80062aa <_Balloc+0x66>
 80062ba:	bf00      	nop
 80062bc:	08007115 	.word	0x08007115
 80062c0:	08007195 	.word	0x08007195

080062c4 <_Bfree>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	69c6      	ldr	r6, [r0, #28]
 80062c8:	4605      	mov	r5, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b976      	cbnz	r6, 80062ec <_Bfree+0x28>
 80062ce:	2010      	movs	r0, #16
 80062d0:	f7ff ff02 	bl	80060d8 <malloc>
 80062d4:	4602      	mov	r2, r0
 80062d6:	61e8      	str	r0, [r5, #28]
 80062d8:	b920      	cbnz	r0, 80062e4 <_Bfree+0x20>
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <_Bfree+0x3c>)
 80062dc:	4809      	ldr	r0, [pc, #36]	@ (8006304 <_Bfree+0x40>)
 80062de:	218f      	movs	r1, #143	@ 0x8f
 80062e0:	f000 fdac 	bl	8006e3c <__assert_func>
 80062e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e8:	6006      	str	r6, [r0, #0]
 80062ea:	60c6      	str	r6, [r0, #12]
 80062ec:	b13c      	cbz	r4, 80062fe <_Bfree+0x3a>
 80062ee:	69eb      	ldr	r3, [r5, #28]
 80062f0:	6862      	ldr	r2, [r4, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062f8:	6021      	str	r1, [r4, #0]
 80062fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	08007115 	.word	0x08007115
 8006304:	08007195 	.word	0x08007195

08006308 <__multadd>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	690d      	ldr	r5, [r1, #16]
 800630e:	4607      	mov	r7, r0
 8006310:	460c      	mov	r4, r1
 8006312:	461e      	mov	r6, r3
 8006314:	f101 0c14 	add.w	ip, r1, #20
 8006318:	2000      	movs	r0, #0
 800631a:	f8dc 3000 	ldr.w	r3, [ip]
 800631e:	b299      	uxth	r1, r3
 8006320:	fb02 6101 	mla	r1, r2, r1, r6
 8006324:	0c1e      	lsrs	r6, r3, #16
 8006326:	0c0b      	lsrs	r3, r1, #16
 8006328:	fb02 3306 	mla	r3, r2, r6, r3
 800632c:	b289      	uxth	r1, r1
 800632e:	3001      	adds	r0, #1
 8006330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006334:	4285      	cmp	r5, r0
 8006336:	f84c 1b04 	str.w	r1, [ip], #4
 800633a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800633e:	dcec      	bgt.n	800631a <__multadd+0x12>
 8006340:	b30e      	cbz	r6, 8006386 <__multadd+0x7e>
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	42ab      	cmp	r3, r5
 8006346:	dc19      	bgt.n	800637c <__multadd+0x74>
 8006348:	6861      	ldr	r1, [r4, #4]
 800634a:	4638      	mov	r0, r7
 800634c:	3101      	adds	r1, #1
 800634e:	f7ff ff79 	bl	8006244 <_Balloc>
 8006352:	4680      	mov	r8, r0
 8006354:	b928      	cbnz	r0, 8006362 <__multadd+0x5a>
 8006356:	4602      	mov	r2, r0
 8006358:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <__multadd+0x84>)
 800635a:	480d      	ldr	r0, [pc, #52]	@ (8006390 <__multadd+0x88>)
 800635c:	21ba      	movs	r1, #186	@ 0xba
 800635e:	f000 fd6d 	bl	8006e3c <__assert_func>
 8006362:	6922      	ldr	r2, [r4, #16]
 8006364:	3202      	adds	r2, #2
 8006366:	f104 010c 	add.w	r1, r4, #12
 800636a:	0092      	lsls	r2, r2, #2
 800636c:	300c      	adds	r0, #12
 800636e:	f7ff f872 	bl	8005456 <memcpy>
 8006372:	4621      	mov	r1, r4
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff ffa5 	bl	80062c4 <_Bfree>
 800637a:	4644      	mov	r4, r8
 800637c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006380:	3501      	adds	r5, #1
 8006382:	615e      	str	r6, [r3, #20]
 8006384:	6125      	str	r5, [r4, #16]
 8006386:	4620      	mov	r0, r4
 8006388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800638c:	08007184 	.word	0x08007184
 8006390:	08007195 	.word	0x08007195

08006394 <__hi0bits>:
 8006394:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006398:	4603      	mov	r3, r0
 800639a:	bf36      	itet	cc
 800639c:	0403      	lslcc	r3, r0, #16
 800639e:	2000      	movcs	r0, #0
 80063a0:	2010      	movcc	r0, #16
 80063a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063a6:	bf3c      	itt	cc
 80063a8:	021b      	lslcc	r3, r3, #8
 80063aa:	3008      	addcc	r0, #8
 80063ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b0:	bf3c      	itt	cc
 80063b2:	011b      	lslcc	r3, r3, #4
 80063b4:	3004      	addcc	r0, #4
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	bf3c      	itt	cc
 80063bc:	009b      	lslcc	r3, r3, #2
 80063be:	3002      	addcc	r0, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db05      	blt.n	80063d0 <__hi0bits+0x3c>
 80063c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063c8:	f100 0001 	add.w	r0, r0, #1
 80063cc:	bf08      	it	eq
 80063ce:	2020      	moveq	r0, #32
 80063d0:	4770      	bx	lr

080063d2 <__lo0bits>:
 80063d2:	6803      	ldr	r3, [r0, #0]
 80063d4:	4602      	mov	r2, r0
 80063d6:	f013 0007 	ands.w	r0, r3, #7
 80063da:	d00b      	beq.n	80063f4 <__lo0bits+0x22>
 80063dc:	07d9      	lsls	r1, r3, #31
 80063de:	d421      	bmi.n	8006424 <__lo0bits+0x52>
 80063e0:	0798      	lsls	r0, r3, #30
 80063e2:	bf49      	itett	mi
 80063e4:	085b      	lsrmi	r3, r3, #1
 80063e6:	089b      	lsrpl	r3, r3, #2
 80063e8:	2001      	movmi	r0, #1
 80063ea:	6013      	strmi	r3, [r2, #0]
 80063ec:	bf5c      	itt	pl
 80063ee:	6013      	strpl	r3, [r2, #0]
 80063f0:	2002      	movpl	r0, #2
 80063f2:	4770      	bx	lr
 80063f4:	b299      	uxth	r1, r3
 80063f6:	b909      	cbnz	r1, 80063fc <__lo0bits+0x2a>
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	2010      	movs	r0, #16
 80063fc:	b2d9      	uxtb	r1, r3
 80063fe:	b909      	cbnz	r1, 8006404 <__lo0bits+0x32>
 8006400:	3008      	adds	r0, #8
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	bf04      	itt	eq
 8006408:	091b      	lsreq	r3, r3, #4
 800640a:	3004      	addeq	r0, #4
 800640c:	0799      	lsls	r1, r3, #30
 800640e:	bf04      	itt	eq
 8006410:	089b      	lsreq	r3, r3, #2
 8006412:	3002      	addeq	r0, #2
 8006414:	07d9      	lsls	r1, r3, #31
 8006416:	d403      	bmi.n	8006420 <__lo0bits+0x4e>
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	f100 0001 	add.w	r0, r0, #1
 800641e:	d003      	beq.n	8006428 <__lo0bits+0x56>
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	4770      	bx	lr
 8006424:	2000      	movs	r0, #0
 8006426:	4770      	bx	lr
 8006428:	2020      	movs	r0, #32
 800642a:	4770      	bx	lr

0800642c <__i2b>:
 800642c:	b510      	push	{r4, lr}
 800642e:	460c      	mov	r4, r1
 8006430:	2101      	movs	r1, #1
 8006432:	f7ff ff07 	bl	8006244 <_Balloc>
 8006436:	4602      	mov	r2, r0
 8006438:	b928      	cbnz	r0, 8006446 <__i2b+0x1a>
 800643a:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <__i2b+0x24>)
 800643c:	4805      	ldr	r0, [pc, #20]	@ (8006454 <__i2b+0x28>)
 800643e:	f240 1145 	movw	r1, #325	@ 0x145
 8006442:	f000 fcfb 	bl	8006e3c <__assert_func>
 8006446:	2301      	movs	r3, #1
 8006448:	6144      	str	r4, [r0, #20]
 800644a:	6103      	str	r3, [r0, #16]
 800644c:	bd10      	pop	{r4, pc}
 800644e:	bf00      	nop
 8006450:	08007184 	.word	0x08007184
 8006454:	08007195 	.word	0x08007195

08006458 <__multiply>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4617      	mov	r7, r2
 800645e:	690a      	ldr	r2, [r1, #16]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	bfa8      	it	ge
 8006466:	463b      	movge	r3, r7
 8006468:	4689      	mov	r9, r1
 800646a:	bfa4      	itt	ge
 800646c:	460f      	movge	r7, r1
 800646e:	4699      	movge	r9, r3
 8006470:	693d      	ldr	r5, [r7, #16]
 8006472:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	eb05 060a 	add.w	r6, r5, sl
 800647e:	42b3      	cmp	r3, r6
 8006480:	b085      	sub	sp, #20
 8006482:	bfb8      	it	lt
 8006484:	3101      	addlt	r1, #1
 8006486:	f7ff fedd 	bl	8006244 <_Balloc>
 800648a:	b930      	cbnz	r0, 800649a <__multiply+0x42>
 800648c:	4602      	mov	r2, r0
 800648e:	4b41      	ldr	r3, [pc, #260]	@ (8006594 <__multiply+0x13c>)
 8006490:	4841      	ldr	r0, [pc, #260]	@ (8006598 <__multiply+0x140>)
 8006492:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006496:	f000 fcd1 	bl	8006e3c <__assert_func>
 800649a:	f100 0414 	add.w	r4, r0, #20
 800649e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80064a2:	4623      	mov	r3, r4
 80064a4:	2200      	movs	r2, #0
 80064a6:	4573      	cmp	r3, lr
 80064a8:	d320      	bcc.n	80064ec <__multiply+0x94>
 80064aa:	f107 0814 	add.w	r8, r7, #20
 80064ae:	f109 0114 	add.w	r1, r9, #20
 80064b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80064b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	1beb      	subs	r3, r5, r7
 80064be:	3b15      	subs	r3, #21
 80064c0:	f023 0303 	bic.w	r3, r3, #3
 80064c4:	3304      	adds	r3, #4
 80064c6:	3715      	adds	r7, #21
 80064c8:	42bd      	cmp	r5, r7
 80064ca:	bf38      	it	cc
 80064cc:	2304      	movcc	r3, #4
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	9103      	str	r1, [sp, #12]
 80064d4:	428b      	cmp	r3, r1
 80064d6:	d80c      	bhi.n	80064f2 <__multiply+0x9a>
 80064d8:	2e00      	cmp	r6, #0
 80064da:	dd03      	ble.n	80064e4 <__multiply+0x8c>
 80064dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d055      	beq.n	8006590 <__multiply+0x138>
 80064e4:	6106      	str	r6, [r0, #16]
 80064e6:	b005      	add	sp, #20
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	f843 2b04 	str.w	r2, [r3], #4
 80064f0:	e7d9      	b.n	80064a6 <__multiply+0x4e>
 80064f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80064f6:	f1ba 0f00 	cmp.w	sl, #0
 80064fa:	d01f      	beq.n	800653c <__multiply+0xe4>
 80064fc:	46c4      	mov	ip, r8
 80064fe:	46a1      	mov	r9, r4
 8006500:	2700      	movs	r7, #0
 8006502:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006506:	f8d9 3000 	ldr.w	r3, [r9]
 800650a:	fa1f fb82 	uxth.w	fp, r2
 800650e:	b29b      	uxth	r3, r3
 8006510:	fb0a 330b 	mla	r3, sl, fp, r3
 8006514:	443b      	add	r3, r7
 8006516:	f8d9 7000 	ldr.w	r7, [r9]
 800651a:	0c12      	lsrs	r2, r2, #16
 800651c:	0c3f      	lsrs	r7, r7, #16
 800651e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006522:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652c:	4565      	cmp	r5, ip
 800652e:	f849 3b04 	str.w	r3, [r9], #4
 8006532:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006536:	d8e4      	bhi.n	8006502 <__multiply+0xaa>
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	50e7      	str	r7, [r4, r3]
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006542:	3104      	adds	r1, #4
 8006544:	f1b9 0f00 	cmp.w	r9, #0
 8006548:	d020      	beq.n	800658c <__multiply+0x134>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	4647      	mov	r7, r8
 800654e:	46a4      	mov	ip, r4
 8006550:	f04f 0a00 	mov.w	sl, #0
 8006554:	f8b7 b000 	ldrh.w	fp, [r7]
 8006558:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800655c:	fb09 220b 	mla	r2, r9, fp, r2
 8006560:	4452      	add	r2, sl
 8006562:	b29b      	uxth	r3, r3
 8006564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006568:	f84c 3b04 	str.w	r3, [ip], #4
 800656c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006570:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006574:	f8bc 3000 	ldrh.w	r3, [ip]
 8006578:	fb09 330a 	mla	r3, r9, sl, r3
 800657c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006580:	42bd      	cmp	r5, r7
 8006582:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006586:	d8e5      	bhi.n	8006554 <__multiply+0xfc>
 8006588:	9a01      	ldr	r2, [sp, #4]
 800658a:	50a3      	str	r3, [r4, r2]
 800658c:	3404      	adds	r4, #4
 800658e:	e79f      	b.n	80064d0 <__multiply+0x78>
 8006590:	3e01      	subs	r6, #1
 8006592:	e7a1      	b.n	80064d8 <__multiply+0x80>
 8006594:	08007184 	.word	0x08007184
 8006598:	08007195 	.word	0x08007195

0800659c <__pow5mult>:
 800659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4615      	mov	r5, r2
 80065a2:	f012 0203 	ands.w	r2, r2, #3
 80065a6:	4607      	mov	r7, r0
 80065a8:	460e      	mov	r6, r1
 80065aa:	d007      	beq.n	80065bc <__pow5mult+0x20>
 80065ac:	4c25      	ldr	r4, [pc, #148]	@ (8006644 <__pow5mult+0xa8>)
 80065ae:	3a01      	subs	r2, #1
 80065b0:	2300      	movs	r3, #0
 80065b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065b6:	f7ff fea7 	bl	8006308 <__multadd>
 80065ba:	4606      	mov	r6, r0
 80065bc:	10ad      	asrs	r5, r5, #2
 80065be:	d03d      	beq.n	800663c <__pow5mult+0xa0>
 80065c0:	69fc      	ldr	r4, [r7, #28]
 80065c2:	b97c      	cbnz	r4, 80065e4 <__pow5mult+0x48>
 80065c4:	2010      	movs	r0, #16
 80065c6:	f7ff fd87 	bl	80060d8 <malloc>
 80065ca:	4602      	mov	r2, r0
 80065cc:	61f8      	str	r0, [r7, #28]
 80065ce:	b928      	cbnz	r0, 80065dc <__pow5mult+0x40>
 80065d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <__pow5mult+0xac>)
 80065d2:	481e      	ldr	r0, [pc, #120]	@ (800664c <__pow5mult+0xb0>)
 80065d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065d8:	f000 fc30 	bl	8006e3c <__assert_func>
 80065dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e0:	6004      	str	r4, [r0, #0]
 80065e2:	60c4      	str	r4, [r0, #12]
 80065e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065ec:	b94c      	cbnz	r4, 8006602 <__pow5mult+0x66>
 80065ee:	f240 2171 	movw	r1, #625	@ 0x271
 80065f2:	4638      	mov	r0, r7
 80065f4:	f7ff ff1a 	bl	800642c <__i2b>
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80065fe:	4604      	mov	r4, r0
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	f04f 0900 	mov.w	r9, #0
 8006606:	07eb      	lsls	r3, r5, #31
 8006608:	d50a      	bpl.n	8006620 <__pow5mult+0x84>
 800660a:	4631      	mov	r1, r6
 800660c:	4622      	mov	r2, r4
 800660e:	4638      	mov	r0, r7
 8006610:	f7ff ff22 	bl	8006458 <__multiply>
 8006614:	4631      	mov	r1, r6
 8006616:	4680      	mov	r8, r0
 8006618:	4638      	mov	r0, r7
 800661a:	f7ff fe53 	bl	80062c4 <_Bfree>
 800661e:	4646      	mov	r6, r8
 8006620:	106d      	asrs	r5, r5, #1
 8006622:	d00b      	beq.n	800663c <__pow5mult+0xa0>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	b938      	cbnz	r0, 8006638 <__pow5mult+0x9c>
 8006628:	4622      	mov	r2, r4
 800662a:	4621      	mov	r1, r4
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ff13 	bl	8006458 <__multiply>
 8006632:	6020      	str	r0, [r4, #0]
 8006634:	f8c0 9000 	str.w	r9, [r0]
 8006638:	4604      	mov	r4, r0
 800663a:	e7e4      	b.n	8006606 <__pow5mult+0x6a>
 800663c:	4630      	mov	r0, r6
 800663e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006642:	bf00      	nop
 8006644:	08007248 	.word	0x08007248
 8006648:	08007115 	.word	0x08007115
 800664c:	08007195 	.word	0x08007195

08006650 <__lshift>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	460c      	mov	r4, r1
 8006656:	6849      	ldr	r1, [r1, #4]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	4607      	mov	r7, r0
 8006662:	4691      	mov	r9, r2
 8006664:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006668:	f108 0601 	add.w	r6, r8, #1
 800666c:	42b3      	cmp	r3, r6
 800666e:	db0b      	blt.n	8006688 <__lshift+0x38>
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff fde7 	bl	8006244 <_Balloc>
 8006676:	4605      	mov	r5, r0
 8006678:	b948      	cbnz	r0, 800668e <__lshift+0x3e>
 800667a:	4602      	mov	r2, r0
 800667c:	4b28      	ldr	r3, [pc, #160]	@ (8006720 <__lshift+0xd0>)
 800667e:	4829      	ldr	r0, [pc, #164]	@ (8006724 <__lshift+0xd4>)
 8006680:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006684:	f000 fbda 	bl	8006e3c <__assert_func>
 8006688:	3101      	adds	r1, #1
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	e7ee      	b.n	800666c <__lshift+0x1c>
 800668e:	2300      	movs	r3, #0
 8006690:	f100 0114 	add.w	r1, r0, #20
 8006694:	f100 0210 	add.w	r2, r0, #16
 8006698:	4618      	mov	r0, r3
 800669a:	4553      	cmp	r3, sl
 800669c:	db33      	blt.n	8006706 <__lshift+0xb6>
 800669e:	6920      	ldr	r0, [r4, #16]
 80066a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066a4:	f104 0314 	add.w	r3, r4, #20
 80066a8:	f019 091f 	ands.w	r9, r9, #31
 80066ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066b4:	d02b      	beq.n	800670e <__lshift+0xbe>
 80066b6:	f1c9 0e20 	rsb	lr, r9, #32
 80066ba:	468a      	mov	sl, r1
 80066bc:	2200      	movs	r2, #0
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	fa00 f009 	lsl.w	r0, r0, r9
 80066c4:	4310      	orrs	r0, r2
 80066c6:	f84a 0b04 	str.w	r0, [sl], #4
 80066ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ce:	459c      	cmp	ip, r3
 80066d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80066d4:	d8f3      	bhi.n	80066be <__lshift+0x6e>
 80066d6:	ebac 0304 	sub.w	r3, ip, r4
 80066da:	3b15      	subs	r3, #21
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	3304      	adds	r3, #4
 80066e2:	f104 0015 	add.w	r0, r4, #21
 80066e6:	4560      	cmp	r0, ip
 80066e8:	bf88      	it	hi
 80066ea:	2304      	movhi	r3, #4
 80066ec:	50ca      	str	r2, [r1, r3]
 80066ee:	b10a      	cbz	r2, 80066f4 <__lshift+0xa4>
 80066f0:	f108 0602 	add.w	r6, r8, #2
 80066f4:	3e01      	subs	r6, #1
 80066f6:	4638      	mov	r0, r7
 80066f8:	612e      	str	r6, [r5, #16]
 80066fa:	4621      	mov	r1, r4
 80066fc:	f7ff fde2 	bl	80062c4 <_Bfree>
 8006700:	4628      	mov	r0, r5
 8006702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006706:	f842 0f04 	str.w	r0, [r2, #4]!
 800670a:	3301      	adds	r3, #1
 800670c:	e7c5      	b.n	800669a <__lshift+0x4a>
 800670e:	3904      	subs	r1, #4
 8006710:	f853 2b04 	ldr.w	r2, [r3], #4
 8006714:	f841 2f04 	str.w	r2, [r1, #4]!
 8006718:	459c      	cmp	ip, r3
 800671a:	d8f9      	bhi.n	8006710 <__lshift+0xc0>
 800671c:	e7ea      	b.n	80066f4 <__lshift+0xa4>
 800671e:	bf00      	nop
 8006720:	08007184 	.word	0x08007184
 8006724:	08007195 	.word	0x08007195

08006728 <__mcmp>:
 8006728:	690a      	ldr	r2, [r1, #16]
 800672a:	4603      	mov	r3, r0
 800672c:	6900      	ldr	r0, [r0, #16]
 800672e:	1a80      	subs	r0, r0, r2
 8006730:	b530      	push	{r4, r5, lr}
 8006732:	d10e      	bne.n	8006752 <__mcmp+0x2a>
 8006734:	3314      	adds	r3, #20
 8006736:	3114      	adds	r1, #20
 8006738:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800673c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006740:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006744:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006748:	4295      	cmp	r5, r2
 800674a:	d003      	beq.n	8006754 <__mcmp+0x2c>
 800674c:	d205      	bcs.n	800675a <__mcmp+0x32>
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	bd30      	pop	{r4, r5, pc}
 8006754:	42a3      	cmp	r3, r4
 8006756:	d3f3      	bcc.n	8006740 <__mcmp+0x18>
 8006758:	e7fb      	b.n	8006752 <__mcmp+0x2a>
 800675a:	2001      	movs	r0, #1
 800675c:	e7f9      	b.n	8006752 <__mcmp+0x2a>
	...

08006760 <__mdiff>:
 8006760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	4689      	mov	r9, r1
 8006766:	4606      	mov	r6, r0
 8006768:	4611      	mov	r1, r2
 800676a:	4648      	mov	r0, r9
 800676c:	4614      	mov	r4, r2
 800676e:	f7ff ffdb 	bl	8006728 <__mcmp>
 8006772:	1e05      	subs	r5, r0, #0
 8006774:	d112      	bne.n	800679c <__mdiff+0x3c>
 8006776:	4629      	mov	r1, r5
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff fd63 	bl	8006244 <_Balloc>
 800677e:	4602      	mov	r2, r0
 8006780:	b928      	cbnz	r0, 800678e <__mdiff+0x2e>
 8006782:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <__mdiff+0x120>)
 8006784:	f240 2137 	movw	r1, #567	@ 0x237
 8006788:	483e      	ldr	r0, [pc, #248]	@ (8006884 <__mdiff+0x124>)
 800678a:	f000 fb57 	bl	8006e3c <__assert_func>
 800678e:	2301      	movs	r3, #1
 8006790:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006794:	4610      	mov	r0, r2
 8006796:	b003      	add	sp, #12
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	bfbc      	itt	lt
 800679e:	464b      	movlt	r3, r9
 80067a0:	46a1      	movlt	r9, r4
 80067a2:	4630      	mov	r0, r6
 80067a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067a8:	bfba      	itte	lt
 80067aa:	461c      	movlt	r4, r3
 80067ac:	2501      	movlt	r5, #1
 80067ae:	2500      	movge	r5, #0
 80067b0:	f7ff fd48 	bl	8006244 <_Balloc>
 80067b4:	4602      	mov	r2, r0
 80067b6:	b918      	cbnz	r0, 80067c0 <__mdiff+0x60>
 80067b8:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <__mdiff+0x120>)
 80067ba:	f240 2145 	movw	r1, #581	@ 0x245
 80067be:	e7e3      	b.n	8006788 <__mdiff+0x28>
 80067c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067c4:	6926      	ldr	r6, [r4, #16]
 80067c6:	60c5      	str	r5, [r0, #12]
 80067c8:	f109 0310 	add.w	r3, r9, #16
 80067cc:	f109 0514 	add.w	r5, r9, #20
 80067d0:	f104 0e14 	add.w	lr, r4, #20
 80067d4:	f100 0b14 	add.w	fp, r0, #20
 80067d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80067dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	46d9      	mov	r9, fp
 80067e4:	f04f 0c00 	mov.w	ip, #0
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	fa1f f38a 	uxth.w	r3, sl
 80067f8:	4619      	mov	r1, r3
 80067fa:	b283      	uxth	r3, r0
 80067fc:	1acb      	subs	r3, r1, r3
 80067fe:	0c00      	lsrs	r0, r0, #16
 8006800:	4463      	add	r3, ip
 8006802:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006806:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800680a:	b29b      	uxth	r3, r3
 800680c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006810:	4576      	cmp	r6, lr
 8006812:	f849 3b04 	str.w	r3, [r9], #4
 8006816:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800681a:	d8e5      	bhi.n	80067e8 <__mdiff+0x88>
 800681c:	1b33      	subs	r3, r6, r4
 800681e:	3b15      	subs	r3, #21
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	3415      	adds	r4, #21
 8006826:	3304      	adds	r3, #4
 8006828:	42a6      	cmp	r6, r4
 800682a:	bf38      	it	cc
 800682c:	2304      	movcc	r3, #4
 800682e:	441d      	add	r5, r3
 8006830:	445b      	add	r3, fp
 8006832:	461e      	mov	r6, r3
 8006834:	462c      	mov	r4, r5
 8006836:	4544      	cmp	r4, r8
 8006838:	d30e      	bcc.n	8006858 <__mdiff+0xf8>
 800683a:	f108 0103 	add.w	r1, r8, #3
 800683e:	1b49      	subs	r1, r1, r5
 8006840:	f021 0103 	bic.w	r1, r1, #3
 8006844:	3d03      	subs	r5, #3
 8006846:	45a8      	cmp	r8, r5
 8006848:	bf38      	it	cc
 800684a:	2100      	movcc	r1, #0
 800684c:	440b      	add	r3, r1
 800684e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006852:	b191      	cbz	r1, 800687a <__mdiff+0x11a>
 8006854:	6117      	str	r7, [r2, #16]
 8006856:	e79d      	b.n	8006794 <__mdiff+0x34>
 8006858:	f854 1b04 	ldr.w	r1, [r4], #4
 800685c:	46e6      	mov	lr, ip
 800685e:	0c08      	lsrs	r0, r1, #16
 8006860:	fa1c fc81 	uxtah	ip, ip, r1
 8006864:	4471      	add	r1, lr
 8006866:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800686a:	b289      	uxth	r1, r1
 800686c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006870:	f846 1b04 	str.w	r1, [r6], #4
 8006874:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006878:	e7dd      	b.n	8006836 <__mdiff+0xd6>
 800687a:	3f01      	subs	r7, #1
 800687c:	e7e7      	b.n	800684e <__mdiff+0xee>
 800687e:	bf00      	nop
 8006880:	08007184 	.word	0x08007184
 8006884:	08007195 	.word	0x08007195

08006888 <__d2b>:
 8006888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800688c:	460f      	mov	r7, r1
 800688e:	2101      	movs	r1, #1
 8006890:	ec59 8b10 	vmov	r8, r9, d0
 8006894:	4616      	mov	r6, r2
 8006896:	f7ff fcd5 	bl	8006244 <_Balloc>
 800689a:	4604      	mov	r4, r0
 800689c:	b930      	cbnz	r0, 80068ac <__d2b+0x24>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b23      	ldr	r3, [pc, #140]	@ (8006930 <__d2b+0xa8>)
 80068a2:	4824      	ldr	r0, [pc, #144]	@ (8006934 <__d2b+0xac>)
 80068a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80068a8:	f000 fac8 	bl	8006e3c <__assert_func>
 80068ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068b4:	b10d      	cbz	r5, 80068ba <__d2b+0x32>
 80068b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	f1b8 0300 	subs.w	r3, r8, #0
 80068c0:	d023      	beq.n	800690a <__d2b+0x82>
 80068c2:	4668      	mov	r0, sp
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	f7ff fd84 	bl	80063d2 <__lo0bits>
 80068ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068ce:	b1d0      	cbz	r0, 8006906 <__d2b+0x7e>
 80068d0:	f1c0 0320 	rsb	r3, r0, #32
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	430b      	orrs	r3, r1
 80068da:	40c2      	lsrs	r2, r0
 80068dc:	6163      	str	r3, [r4, #20]
 80068de:	9201      	str	r2, [sp, #4]
 80068e0:	9b01      	ldr	r3, [sp, #4]
 80068e2:	61a3      	str	r3, [r4, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2201      	moveq	r2, #1
 80068ea:	2202      	movne	r2, #2
 80068ec:	6122      	str	r2, [r4, #16]
 80068ee:	b1a5      	cbz	r5, 800691a <__d2b+0x92>
 80068f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068f4:	4405      	add	r5, r0
 80068f6:	603d      	str	r5, [r7, #0]
 80068f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80068fc:	6030      	str	r0, [r6, #0]
 80068fe:	4620      	mov	r0, r4
 8006900:	b003      	add	sp, #12
 8006902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006906:	6161      	str	r1, [r4, #20]
 8006908:	e7ea      	b.n	80068e0 <__d2b+0x58>
 800690a:	a801      	add	r0, sp, #4
 800690c:	f7ff fd61 	bl	80063d2 <__lo0bits>
 8006910:	9b01      	ldr	r3, [sp, #4]
 8006912:	6163      	str	r3, [r4, #20]
 8006914:	3020      	adds	r0, #32
 8006916:	2201      	movs	r2, #1
 8006918:	e7e8      	b.n	80068ec <__d2b+0x64>
 800691a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800691e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006922:	6038      	str	r0, [r7, #0]
 8006924:	6918      	ldr	r0, [r3, #16]
 8006926:	f7ff fd35 	bl	8006394 <__hi0bits>
 800692a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800692e:	e7e5      	b.n	80068fc <__d2b+0x74>
 8006930:	08007184 	.word	0x08007184
 8006934:	08007195 	.word	0x08007195

08006938 <__sfputc_r>:
 8006938:	6893      	ldr	r3, [r2, #8]
 800693a:	3b01      	subs	r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	b410      	push	{r4}
 8006940:	6093      	str	r3, [r2, #8]
 8006942:	da08      	bge.n	8006956 <__sfputc_r+0x1e>
 8006944:	6994      	ldr	r4, [r2, #24]
 8006946:	42a3      	cmp	r3, r4
 8006948:	db01      	blt.n	800694e <__sfputc_r+0x16>
 800694a:	290a      	cmp	r1, #10
 800694c:	d103      	bne.n	8006956 <__sfputc_r+0x1e>
 800694e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006952:	f7fe bc6c 	b.w	800522e <__swbuf_r>
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	1c58      	adds	r0, r3, #1
 800695a:	6010      	str	r0, [r2, #0]
 800695c:	7019      	strb	r1, [r3, #0]
 800695e:	4608      	mov	r0, r1
 8006960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006964:	4770      	bx	lr

08006966 <__sfputs_r>:
 8006966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006968:	4606      	mov	r6, r0
 800696a:	460f      	mov	r7, r1
 800696c:	4614      	mov	r4, r2
 800696e:	18d5      	adds	r5, r2, r3
 8006970:	42ac      	cmp	r4, r5
 8006972:	d101      	bne.n	8006978 <__sfputs_r+0x12>
 8006974:	2000      	movs	r0, #0
 8006976:	e007      	b.n	8006988 <__sfputs_r+0x22>
 8006978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697c:	463a      	mov	r2, r7
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff ffda 	bl	8006938 <__sfputc_r>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d1f3      	bne.n	8006970 <__sfputs_r+0xa>
 8006988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800698c <_vfiprintf_r>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	460d      	mov	r5, r1
 8006992:	b09d      	sub	sp, #116	@ 0x74
 8006994:	4614      	mov	r4, r2
 8006996:	4698      	mov	r8, r3
 8006998:	4606      	mov	r6, r0
 800699a:	b118      	cbz	r0, 80069a4 <_vfiprintf_r+0x18>
 800699c:	6a03      	ldr	r3, [r0, #32]
 800699e:	b90b      	cbnz	r3, 80069a4 <_vfiprintf_r+0x18>
 80069a0:	f7fe fb5c 	bl	800505c <__sinit>
 80069a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	d405      	bmi.n	80069b6 <_vfiprintf_r+0x2a>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	059a      	lsls	r2, r3, #22
 80069ae:	d402      	bmi.n	80069b6 <_vfiprintf_r+0x2a>
 80069b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069b2:	f7fe fd4e 	bl	8005452 <__retarget_lock_acquire_recursive>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	d501      	bpl.n	80069c0 <_vfiprintf_r+0x34>
 80069bc:	692b      	ldr	r3, [r5, #16]
 80069be:	b99b      	cbnz	r3, 80069e8 <_vfiprintf_r+0x5c>
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7fe fc72 	bl	80052ac <__swsetup_r>
 80069c8:	b170      	cbz	r0, 80069e8 <_vfiprintf_r+0x5c>
 80069ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069cc:	07dc      	lsls	r4, r3, #31
 80069ce:	d504      	bpl.n	80069da <_vfiprintf_r+0x4e>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	b01d      	add	sp, #116	@ 0x74
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	0598      	lsls	r0, r3, #22
 80069de:	d4f7      	bmi.n	80069d0 <_vfiprintf_r+0x44>
 80069e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069e2:	f7fe fd37 	bl	8005454 <__retarget_lock_release_recursive>
 80069e6:	e7f3      	b.n	80069d0 <_vfiprintf_r+0x44>
 80069e8:	2300      	movs	r3, #0
 80069ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ec:	2320      	movs	r3, #32
 80069ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80069f6:	2330      	movs	r3, #48	@ 0x30
 80069f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ba8 <_vfiprintf_r+0x21c>
 80069fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a00:	f04f 0901 	mov.w	r9, #1
 8006a04:	4623      	mov	r3, r4
 8006a06:	469a      	mov	sl, r3
 8006a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a0c:	b10a      	cbz	r2, 8006a12 <_vfiprintf_r+0x86>
 8006a0e:	2a25      	cmp	r2, #37	@ 0x25
 8006a10:	d1f9      	bne.n	8006a06 <_vfiprintf_r+0x7a>
 8006a12:	ebba 0b04 	subs.w	fp, sl, r4
 8006a16:	d00b      	beq.n	8006a30 <_vfiprintf_r+0xa4>
 8006a18:	465b      	mov	r3, fp
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ffa1 	bl	8006966 <__sfputs_r>
 8006a24:	3001      	adds	r0, #1
 8006a26:	f000 80a7 	beq.w	8006b78 <_vfiprintf_r+0x1ec>
 8006a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a2c:	445a      	add	r2, fp
 8006a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a30:	f89a 3000 	ldrb.w	r3, [sl]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 809f 	beq.w	8006b78 <_vfiprintf_r+0x1ec>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a44:	f10a 0a01 	add.w	sl, sl, #1
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	9307      	str	r3, [sp, #28]
 8006a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a52:	4654      	mov	r4, sl
 8006a54:	2205      	movs	r2, #5
 8006a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5a:	4853      	ldr	r0, [pc, #332]	@ (8006ba8 <_vfiprintf_r+0x21c>)
 8006a5c:	f7f9 fc40 	bl	80002e0 <memchr>
 8006a60:	9a04      	ldr	r2, [sp, #16]
 8006a62:	b9d8      	cbnz	r0, 8006a9c <_vfiprintf_r+0x110>
 8006a64:	06d1      	lsls	r1, r2, #27
 8006a66:	bf44      	itt	mi
 8006a68:	2320      	movmi	r3, #32
 8006a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a6e:	0713      	lsls	r3, r2, #28
 8006a70:	bf44      	itt	mi
 8006a72:	232b      	movmi	r3, #43	@ 0x2b
 8006a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a78:	f89a 3000 	ldrb.w	r3, [sl]
 8006a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a7e:	d015      	beq.n	8006aac <_vfiprintf_r+0x120>
 8006a80:	9a07      	ldr	r2, [sp, #28]
 8006a82:	4654      	mov	r4, sl
 8006a84:	2000      	movs	r0, #0
 8006a86:	f04f 0c0a 	mov.w	ip, #10
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a90:	3b30      	subs	r3, #48	@ 0x30
 8006a92:	2b09      	cmp	r3, #9
 8006a94:	d94b      	bls.n	8006b2e <_vfiprintf_r+0x1a2>
 8006a96:	b1b0      	cbz	r0, 8006ac6 <_vfiprintf_r+0x13a>
 8006a98:	9207      	str	r2, [sp, #28]
 8006a9a:	e014      	b.n	8006ac6 <_vfiprintf_r+0x13a>
 8006a9c:	eba0 0308 	sub.w	r3, r0, r8
 8006aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	46a2      	mov	sl, r4
 8006aaa:	e7d2      	b.n	8006a52 <_vfiprintf_r+0xc6>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	1d19      	adds	r1, r3, #4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	9103      	str	r1, [sp, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bfbb      	ittet	lt
 8006ab8:	425b      	neglt	r3, r3
 8006aba:	f042 0202 	orrlt.w	r2, r2, #2
 8006abe:	9307      	strge	r3, [sp, #28]
 8006ac0:	9307      	strlt	r3, [sp, #28]
 8006ac2:	bfb8      	it	lt
 8006ac4:	9204      	strlt	r2, [sp, #16]
 8006ac6:	7823      	ldrb	r3, [r4, #0]
 8006ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006aca:	d10a      	bne.n	8006ae2 <_vfiprintf_r+0x156>
 8006acc:	7863      	ldrb	r3, [r4, #1]
 8006ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad0:	d132      	bne.n	8006b38 <_vfiprintf_r+0x1ac>
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	1d1a      	adds	r2, r3, #4
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	9203      	str	r2, [sp, #12]
 8006ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ade:	3402      	adds	r4, #2
 8006ae0:	9305      	str	r3, [sp, #20]
 8006ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bb8 <_vfiprintf_r+0x22c>
 8006ae6:	7821      	ldrb	r1, [r4, #0]
 8006ae8:	2203      	movs	r2, #3
 8006aea:	4650      	mov	r0, sl
 8006aec:	f7f9 fbf8 	bl	80002e0 <memchr>
 8006af0:	b138      	cbz	r0, 8006b02 <_vfiprintf_r+0x176>
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	eba0 000a 	sub.w	r0, r0, sl
 8006af8:	2240      	movs	r2, #64	@ 0x40
 8006afa:	4082      	lsls	r2, r0
 8006afc:	4313      	orrs	r3, r2
 8006afe:	3401      	adds	r4, #1
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b06:	4829      	ldr	r0, [pc, #164]	@ (8006bac <_vfiprintf_r+0x220>)
 8006b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b0c:	2206      	movs	r2, #6
 8006b0e:	f7f9 fbe7 	bl	80002e0 <memchr>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d03f      	beq.n	8006b96 <_vfiprintf_r+0x20a>
 8006b16:	4b26      	ldr	r3, [pc, #152]	@ (8006bb0 <_vfiprintf_r+0x224>)
 8006b18:	bb1b      	cbnz	r3, 8006b62 <_vfiprintf_r+0x1d6>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	3307      	adds	r3, #7
 8006b1e:	f023 0307 	bic.w	r3, r3, #7
 8006b22:	3308      	adds	r3, #8
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	443b      	add	r3, r7
 8006b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b2c:	e76a      	b.n	8006a04 <_vfiprintf_r+0x78>
 8006b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b32:	460c      	mov	r4, r1
 8006b34:	2001      	movs	r0, #1
 8006b36:	e7a8      	b.n	8006a8a <_vfiprintf_r+0xfe>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	3401      	adds	r4, #1
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f04f 0c0a 	mov.w	ip, #10
 8006b44:	4620      	mov	r0, r4
 8006b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b4a:	3a30      	subs	r2, #48	@ 0x30
 8006b4c:	2a09      	cmp	r2, #9
 8006b4e:	d903      	bls.n	8006b58 <_vfiprintf_r+0x1cc>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0c6      	beq.n	8006ae2 <_vfiprintf_r+0x156>
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	e7c4      	b.n	8006ae2 <_vfiprintf_r+0x156>
 8006b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e7f0      	b.n	8006b44 <_vfiprintf_r+0x1b8>
 8006b62:	ab03      	add	r3, sp, #12
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	462a      	mov	r2, r5
 8006b68:	4b12      	ldr	r3, [pc, #72]	@ (8006bb4 <_vfiprintf_r+0x228>)
 8006b6a:	a904      	add	r1, sp, #16
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7fd fe43 	bl	80047f8 <_printf_float>
 8006b72:	4607      	mov	r7, r0
 8006b74:	1c78      	adds	r0, r7, #1
 8006b76:	d1d6      	bne.n	8006b26 <_vfiprintf_r+0x19a>
 8006b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b7a:	07d9      	lsls	r1, r3, #31
 8006b7c:	d405      	bmi.n	8006b8a <_vfiprintf_r+0x1fe>
 8006b7e:	89ab      	ldrh	r3, [r5, #12]
 8006b80:	059a      	lsls	r2, r3, #22
 8006b82:	d402      	bmi.n	8006b8a <_vfiprintf_r+0x1fe>
 8006b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b86:	f7fe fc65 	bl	8005454 <__retarget_lock_release_recursive>
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	065b      	lsls	r3, r3, #25
 8006b8e:	f53f af1f 	bmi.w	80069d0 <_vfiprintf_r+0x44>
 8006b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b94:	e71e      	b.n	80069d4 <_vfiprintf_r+0x48>
 8006b96:	ab03      	add	r3, sp, #12
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	462a      	mov	r2, r5
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <_vfiprintf_r+0x228>)
 8006b9e:	a904      	add	r1, sp, #16
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7fe f8b1 	bl	8004d08 <_printf_i>
 8006ba6:	e7e4      	b.n	8006b72 <_vfiprintf_r+0x1e6>
 8006ba8:	080071ee 	.word	0x080071ee
 8006bac:	080071f8 	.word	0x080071f8
 8006bb0:	080047f9 	.word	0x080047f9
 8006bb4:	08006967 	.word	0x08006967
 8006bb8:	080071f4 	.word	0x080071f4

08006bbc <__sflush_r>:
 8006bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc4:	0716      	lsls	r6, r2, #28
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	460c      	mov	r4, r1
 8006bca:	d454      	bmi.n	8006c76 <__sflush_r+0xba>
 8006bcc:	684b      	ldr	r3, [r1, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dc02      	bgt.n	8006bd8 <__sflush_r+0x1c>
 8006bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd48      	ble.n	8006c6a <__sflush_r+0xae>
 8006bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d045      	beq.n	8006c6a <__sflush_r+0xae>
 8006bde:	2300      	movs	r3, #0
 8006be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006be4:	682f      	ldr	r7, [r5, #0]
 8006be6:	6a21      	ldr	r1, [r4, #32]
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	d030      	beq.n	8006c4e <__sflush_r+0x92>
 8006bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	0759      	lsls	r1, r3, #29
 8006bf2:	d505      	bpl.n	8006c00 <__sflush_r+0x44>
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bfa:	b10b      	cbz	r3, 8006c00 <__sflush_r+0x44>
 8006bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bfe:	1ad2      	subs	r2, r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b0      	blx	r6
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	d106      	bne.n	8006c1e <__sflush_r+0x62>
 8006c10:	6829      	ldr	r1, [r5, #0]
 8006c12:	291d      	cmp	r1, #29
 8006c14:	d82b      	bhi.n	8006c6e <__sflush_r+0xb2>
 8006c16:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc0 <__sflush_r+0x104>)
 8006c18:	40ca      	lsrs	r2, r1
 8006c1a:	07d6      	lsls	r6, r2, #31
 8006c1c:	d527      	bpl.n	8006c6e <__sflush_r+0xb2>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	6062      	str	r2, [r4, #4]
 8006c22:	04d9      	lsls	r1, r3, #19
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	6022      	str	r2, [r4, #0]
 8006c28:	d504      	bpl.n	8006c34 <__sflush_r+0x78>
 8006c2a:	1c42      	adds	r2, r0, #1
 8006c2c:	d101      	bne.n	8006c32 <__sflush_r+0x76>
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	b903      	cbnz	r3, 8006c34 <__sflush_r+0x78>
 8006c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c36:	602f      	str	r7, [r5, #0]
 8006c38:	b1b9      	cbz	r1, 8006c6a <__sflush_r+0xae>
 8006c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	d002      	beq.n	8006c48 <__sflush_r+0x8c>
 8006c42:	4628      	mov	r0, r5
 8006c44:	f7ff f9fe 	bl	8006044 <_free_r>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c4c:	e00d      	b.n	8006c6a <__sflush_r+0xae>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b0      	blx	r6
 8006c54:	4602      	mov	r2, r0
 8006c56:	1c50      	adds	r0, r2, #1
 8006c58:	d1c9      	bne.n	8006bee <__sflush_r+0x32>
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0c6      	beq.n	8006bee <__sflush_r+0x32>
 8006c60:	2b1d      	cmp	r3, #29
 8006c62:	d001      	beq.n	8006c68 <__sflush_r+0xac>
 8006c64:	2b16      	cmp	r3, #22
 8006c66:	d11e      	bne.n	8006ca6 <__sflush_r+0xea>
 8006c68:	602f      	str	r7, [r5, #0]
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e022      	b.n	8006cb4 <__sflush_r+0xf8>
 8006c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c72:	b21b      	sxth	r3, r3
 8006c74:	e01b      	b.n	8006cae <__sflush_r+0xf2>
 8006c76:	690f      	ldr	r7, [r1, #16]
 8006c78:	2f00      	cmp	r7, #0
 8006c7a:	d0f6      	beq.n	8006c6a <__sflush_r+0xae>
 8006c7c:	0793      	lsls	r3, r2, #30
 8006c7e:	680e      	ldr	r6, [r1, #0]
 8006c80:	bf08      	it	eq
 8006c82:	694b      	ldreq	r3, [r1, #20]
 8006c84:	600f      	str	r7, [r1, #0]
 8006c86:	bf18      	it	ne
 8006c88:	2300      	movne	r3, #0
 8006c8a:	eba6 0807 	sub.w	r8, r6, r7
 8006c8e:	608b      	str	r3, [r1, #8]
 8006c90:	f1b8 0f00 	cmp.w	r8, #0
 8006c94:	dde9      	ble.n	8006c6a <__sflush_r+0xae>
 8006c96:	6a21      	ldr	r1, [r4, #32]
 8006c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c9a:	4643      	mov	r3, r8
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b0      	blx	r6
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	dc08      	bgt.n	8006cb8 <__sflush_r+0xfc>
 8006ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb8:	4407      	add	r7, r0
 8006cba:	eba8 0800 	sub.w	r8, r8, r0
 8006cbe:	e7e7      	b.n	8006c90 <__sflush_r+0xd4>
 8006cc0:	20400001 	.word	0x20400001

08006cc4 <_fflush_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b913      	cbnz	r3, 8006cd4 <_fflush_r+0x10>
 8006cce:	2500      	movs	r5, #0
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	b118      	cbz	r0, 8006cde <_fflush_r+0x1a>
 8006cd6:	6a03      	ldr	r3, [r0, #32]
 8006cd8:	b90b      	cbnz	r3, 8006cde <_fflush_r+0x1a>
 8006cda:	f7fe f9bf 	bl	800505c <__sinit>
 8006cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f3      	beq.n	8006cce <_fflush_r+0xa>
 8006ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ce8:	07d0      	lsls	r0, r2, #31
 8006cea:	d404      	bmi.n	8006cf6 <_fflush_r+0x32>
 8006cec:	0599      	lsls	r1, r3, #22
 8006cee:	d402      	bmi.n	8006cf6 <_fflush_r+0x32>
 8006cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cf2:	f7fe fbae 	bl	8005452 <__retarget_lock_acquire_recursive>
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	f7ff ff5f 	bl	8006bbc <__sflush_r>
 8006cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d00:	07da      	lsls	r2, r3, #31
 8006d02:	4605      	mov	r5, r0
 8006d04:	d4e4      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	059b      	lsls	r3, r3, #22
 8006d0a:	d4e1      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d0e:	f7fe fba1 	bl	8005454 <__retarget_lock_release_recursive>
 8006d12:	e7dd      	b.n	8006cd0 <_fflush_r+0xc>

08006d14 <__swhatbuf_r>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	460c      	mov	r4, r1
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	b096      	sub	sp, #88	@ 0x58
 8006d20:	4615      	mov	r5, r2
 8006d22:	461e      	mov	r6, r3
 8006d24:	da0d      	bge.n	8006d42 <__swhatbuf_r+0x2e>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d2c:	f04f 0100 	mov.w	r1, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2340      	movne	r3, #64	@ 0x40
 8006d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d38:	2000      	movs	r0, #0
 8006d3a:	6031      	str	r1, [r6, #0]
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	b016      	add	sp, #88	@ 0x58
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
 8006d42:	466a      	mov	r2, sp
 8006d44:	f000 f848 	bl	8006dd8 <_fstat_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	dbec      	blt.n	8006d26 <__swhatbuf_r+0x12>
 8006d4c:	9901      	ldr	r1, [sp, #4]
 8006d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d56:	4259      	negs	r1, r3
 8006d58:	4159      	adcs	r1, r3
 8006d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d5e:	e7eb      	b.n	8006d38 <__swhatbuf_r+0x24>

08006d60 <__smakebuf_r>:
 8006d60:	898b      	ldrh	r3, [r1, #12]
 8006d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d64:	079d      	lsls	r5, r3, #30
 8006d66:	4606      	mov	r6, r0
 8006d68:	460c      	mov	r4, r1
 8006d6a:	d507      	bpl.n	8006d7c <__smakebuf_r+0x1c>
 8006d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	2301      	movs	r3, #1
 8006d76:	6163      	str	r3, [r4, #20]
 8006d78:	b003      	add	sp, #12
 8006d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7c:	ab01      	add	r3, sp, #4
 8006d7e:	466a      	mov	r2, sp
 8006d80:	f7ff ffc8 	bl	8006d14 <__swhatbuf_r>
 8006d84:	9f00      	ldr	r7, [sp, #0]
 8006d86:	4605      	mov	r5, r0
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff f9ce 	bl	800612c <_malloc_r>
 8006d90:	b948      	cbnz	r0, 8006da6 <__smakebuf_r+0x46>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	059a      	lsls	r2, r3, #22
 8006d98:	d4ee      	bmi.n	8006d78 <__smakebuf_r+0x18>
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	f043 0302 	orr.w	r3, r3, #2
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	e7e2      	b.n	8006d6c <__smakebuf_r+0xc>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	6020      	str	r0, [r4, #0]
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006db6:	b15b      	cbz	r3, 8006dd0 <__smakebuf_r+0x70>
 8006db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f000 f81d 	bl	8006dfc <_isatty_r>
 8006dc2:	b128      	cbz	r0, 8006dd0 <__smakebuf_r+0x70>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	431d      	orrs	r5, r3
 8006dd4:	81a5      	strh	r5, [r4, #12]
 8006dd6:	e7cf      	b.n	8006d78 <__smakebuf_r+0x18>

08006dd8 <_fstat_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	@ (8006df8 <_fstat_r+0x20>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	f7f9 fd6f 	bl	80008c8 <_fstat>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d102      	bne.n	8006df4 <_fstat_r+0x1c>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	b103      	cbz	r3, 8006df4 <_fstat_r+0x1c>
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	240003e8 	.word	0x240003e8

08006dfc <_isatty_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d06      	ldr	r5, [pc, #24]	@ (8006e18 <_isatty_r+0x1c>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7f9 fd6e 	bl	80008e8 <_isatty>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_isatty_r+0x1a>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_isatty_r+0x1a>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	240003e8 	.word	0x240003e8

08006e1c <_sbrk_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	@ (8006e38 <_sbrk_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7f9 fd76 	bl	8000918 <_sbrk>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_sbrk_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_sbrk_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	240003e8 	.word	0x240003e8

08006e3c <__assert_func>:
 8006e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e3e:	4614      	mov	r4, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b09      	ldr	r3, [pc, #36]	@ (8006e68 <__assert_func+0x2c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4605      	mov	r5, r0
 8006e48:	68d8      	ldr	r0, [r3, #12]
 8006e4a:	b14c      	cbz	r4, 8006e60 <__assert_func+0x24>
 8006e4c:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <__assert_func+0x30>)
 8006e4e:	9100      	str	r1, [sp, #0]
 8006e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e54:	4906      	ldr	r1, [pc, #24]	@ (8006e70 <__assert_func+0x34>)
 8006e56:	462b      	mov	r3, r5
 8006e58:	f000 f842 	bl	8006ee0 <fiprintf>
 8006e5c:	f000 f852 	bl	8006f04 <abort>
 8006e60:	4b04      	ldr	r3, [pc, #16]	@ (8006e74 <__assert_func+0x38>)
 8006e62:	461c      	mov	r4, r3
 8006e64:	e7f3      	b.n	8006e4e <__assert_func+0x12>
 8006e66:	bf00      	nop
 8006e68:	2400001c 	.word	0x2400001c
 8006e6c:	08007209 	.word	0x08007209
 8006e70:	08007216 	.word	0x08007216
 8006e74:	08007244 	.word	0x08007244

08006e78 <_calloc_r>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	fba1 5402 	umull	r5, r4, r1, r2
 8006e7e:	b934      	cbnz	r4, 8006e8e <_calloc_r+0x16>
 8006e80:	4629      	mov	r1, r5
 8006e82:	f7ff f953 	bl	800612c <_malloc_r>
 8006e86:	4606      	mov	r6, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <_calloc_r+0x1e>
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	220c      	movs	r2, #12
 8006e90:	6002      	str	r2, [r0, #0]
 8006e92:	2600      	movs	r6, #0
 8006e94:	e7f9      	b.n	8006e8a <_calloc_r+0x12>
 8006e96:	462a      	mov	r2, r5
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f7fe fa5d 	bl	8005358 <memset>
 8006e9e:	e7f4      	b.n	8006e8a <_calloc_r+0x12>

08006ea0 <__ascii_mbtowc>:
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	b901      	cbnz	r1, 8006ea6 <__ascii_mbtowc+0x6>
 8006ea4:	a901      	add	r1, sp, #4
 8006ea6:	b142      	cbz	r2, 8006eba <__ascii_mbtowc+0x1a>
 8006ea8:	b14b      	cbz	r3, 8006ebe <__ascii_mbtowc+0x1e>
 8006eaa:	7813      	ldrb	r3, [r2, #0]
 8006eac:	600b      	str	r3, [r1, #0]
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	1e10      	subs	r0, r2, #0
 8006eb2:	bf18      	it	ne
 8006eb4:	2001      	movne	r0, #1
 8006eb6:	b002      	add	sp, #8
 8006eb8:	4770      	bx	lr
 8006eba:	4610      	mov	r0, r2
 8006ebc:	e7fb      	b.n	8006eb6 <__ascii_mbtowc+0x16>
 8006ebe:	f06f 0001 	mvn.w	r0, #1
 8006ec2:	e7f8      	b.n	8006eb6 <__ascii_mbtowc+0x16>

08006ec4 <__ascii_wctomb>:
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	b141      	cbz	r1, 8006edc <__ascii_wctomb+0x18>
 8006eca:	2aff      	cmp	r2, #255	@ 0xff
 8006ecc:	d904      	bls.n	8006ed8 <__ascii_wctomb+0x14>
 8006ece:	228a      	movs	r2, #138	@ 0x8a
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	4770      	bx	lr
 8006ed8:	700a      	strb	r2, [r1, #0]
 8006eda:	2001      	movs	r0, #1
 8006edc:	4770      	bx	lr
	...

08006ee0 <fiprintf>:
 8006ee0:	b40e      	push	{r1, r2, r3}
 8006ee2:	b503      	push	{r0, r1, lr}
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	4805      	ldr	r0, [pc, #20]	@ (8006f00 <fiprintf+0x20>)
 8006eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eee:	6800      	ldr	r0, [r0, #0]
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	f7ff fd4b 	bl	800698c <_vfiprintf_r>
 8006ef6:	b002      	add	sp, #8
 8006ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006efc:	b003      	add	sp, #12
 8006efe:	4770      	bx	lr
 8006f00:	2400001c 	.word	0x2400001c

08006f04 <abort>:
 8006f04:	b508      	push	{r3, lr}
 8006f06:	2006      	movs	r0, #6
 8006f08:	f000 f82c 	bl	8006f64 <raise>
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f7f9 fc8b 	bl	8000828 <_exit>

08006f12 <_raise_r>:
 8006f12:	291f      	cmp	r1, #31
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4605      	mov	r5, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	d904      	bls.n	8006f26 <_raise_r+0x14>
 8006f1c:	2316      	movs	r3, #22
 8006f1e:	6003      	str	r3, [r0, #0]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	bd38      	pop	{r3, r4, r5, pc}
 8006f26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f28:	b112      	cbz	r2, 8006f30 <_raise_r+0x1e>
 8006f2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f2e:	b94b      	cbnz	r3, 8006f44 <_raise_r+0x32>
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 f831 	bl	8006f98 <_getpid_r>
 8006f36:	4622      	mov	r2, r4
 8006f38:	4601      	mov	r1, r0
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f40:	f000 b818 	b.w	8006f74 <_kill_r>
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d00a      	beq.n	8006f5e <_raise_r+0x4c>
 8006f48:	1c59      	adds	r1, r3, #1
 8006f4a:	d103      	bne.n	8006f54 <_raise_r+0x42>
 8006f4c:	2316      	movs	r3, #22
 8006f4e:	6003      	str	r3, [r0, #0]
 8006f50:	2001      	movs	r0, #1
 8006f52:	e7e7      	b.n	8006f24 <_raise_r+0x12>
 8006f54:	2100      	movs	r1, #0
 8006f56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4798      	blx	r3
 8006f5e:	2000      	movs	r0, #0
 8006f60:	e7e0      	b.n	8006f24 <_raise_r+0x12>
	...

08006f64 <raise>:
 8006f64:	4b02      	ldr	r3, [pc, #8]	@ (8006f70 <raise+0xc>)
 8006f66:	4601      	mov	r1, r0
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	f7ff bfd2 	b.w	8006f12 <_raise_r>
 8006f6e:	bf00      	nop
 8006f70:	2400001c 	.word	0x2400001c

08006f74 <_kill_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	@ (8006f94 <_kill_r+0x20>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f7f9 fc41 	bl	8000808 <_kill>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d102      	bne.n	8006f90 <_kill_r+0x1c>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	b103      	cbz	r3, 8006f90 <_kill_r+0x1c>
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	240003e8 	.word	0x240003e8

08006f98 <_getpid_r>:
 8006f98:	f7f9 bc2e 	b.w	80007f8 <_getpid>

08006f9c <_init>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_fini>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr
