
dcmaxon_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d1c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08006fc0  08006fc0  00007fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800745c  0800745c  0000845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007460  08007460  00008460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08007464  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c0  240001d8  0800763c  000091d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000498  0800763c  00009498  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e070  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e1b  00000000  00000000  00017276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba0  00000000  00000000  00019098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008b9  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003964b  00000000  00000000  0001a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e02b  00000000  00000000  00053b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171a9e  00000000  00000000  00061b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3605  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e60  00000000  00000000  001d3648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001d74a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006fa4 	.word	0x08006fa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08006fa4 	.word	0x08006fa4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <main>:
void Error_Handler(void);

FDCAN_HandleTypeDef hfdcan1;

int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	/* Sistem başlatma */
	printf("Main start...\n");
 8000396:	4812      	ldr	r0, [pc, #72]	@ (80003e0 <main+0x50>)
 8000398:	f004 ff02 	bl	80051a0 <puts>
	HAL_Init();
 800039c:	f000 fcca 	bl	8000d34 <HAL_Init>
	SystemClock_Config();
 80003a0:	f000 f824 	bl	80003ec <SystemClock_Config>
	MX_GPIO_Init();
 80003a4:	f000 f910 	bl	80005c8 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80003a8:	f000 f8a0 	bl	80004ec <MX_FDCAN1_Init>

	/* FDCAN'ı başlat */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <main+0x54>)
 80003ae:	f001 f845 	bl	800143c <HAL_FDCAN_Start>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <main+0x2c>
	{
		Error_Handler(); // FDCAN başlatma hatası
 80003b8:	f000 f936 	bl	8000628 <Error_Handler>
	}

	uint8_t controller_id = CAN_PACKET_SET_RPM;
 80003bc:	2303      	movs	r3, #3
 80003be:	71fb      	strb	r3, [r7, #7]
	//float target_rpm = 0.0f;  // Hedef RPM değeri

	while (1)
	{
		/* RPM komutunu FDCAN üzerinden gönder */
		comm_can_set_rpm(controller_id, motor_speed);
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <main+0x58>)
 80003c2:	edd3 7a00 	vldr	s15, [r3]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	eeb0 0a67 	vmov.f32	s0, s15
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 fbc5 	bl	8000b5c <comm_can_set_rpm>

		/* 1 saniye bekle */
		HAL_Delay(1000);
 80003d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003d6:	f000 fd3f 	bl	8000e58 <HAL_Delay>
		comm_can_set_rpm(controller_id, motor_speed);
 80003da:	bf00      	nop
 80003dc:	e7f0      	b.n	80003c0 <main+0x30>
 80003de:	bf00      	nop
 80003e0:	08006fc0 	.word	0x08006fc0
 80003e4:	240001f4 	.word	0x240001f4
 80003e8:	2400033c 	.word	0x2400033c

080003ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b09c      	sub	sp, #112	@ 0x70
 80003f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f6:	224c      	movs	r2, #76	@ 0x4c
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 ffb0 	bl	8005360 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2220      	movs	r2, #32
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f004 ffaa 	bl	8005360 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800040c:	2002      	movs	r0, #2
 800040e:	f001 fe35 	bl	800207c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	4b33      	ldr	r3, [pc, #204]	@ (80004e4 <SystemClock_Config+0xf8>)
 8000418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800041a:	4a32      	ldr	r2, [pc, #200]	@ (80004e4 <SystemClock_Config+0xf8>)
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000422:	4b30      	ldr	r3, [pc, #192]	@ (80004e4 <SystemClock_Config+0xf8>)
 8000424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	4b2e      	ldr	r3, [pc, #184]	@ (80004e8 <SystemClock_Config+0xfc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000434:	4a2c      	ldr	r2, [pc, #176]	@ (80004e8 <SystemClock_Config+0xfc>)
 8000436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b2a      	ldr	r3, [pc, #168]	@ (80004e8 <SystemClock_Config+0xfc>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000448:	bf00      	nop
 800044a:	4b27      	ldr	r3, [pc, #156]	@ (80004e8 <SystemClock_Config+0xfc>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000456:	d1f8      	bne.n	800044a <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000458:	2303      	movs	r3, #3
 800045a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800045c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000460:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000462:	2301      	movs	r3, #1
 8000464:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000466:	2340      	movs	r3, #64	@ 0x40
 8000468:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046e:	2302      	movs	r3, #2
 8000470:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000472:	2301      	movs	r3, #1
 8000474:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000476:	2318      	movs	r3, #24
 8000478:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800047a:	2302      	movs	r3, #2
 800047c:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800047e:	2304      	movs	r3, #4
 8000480:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000482:	2302      	movs	r3, #2
 8000484:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000486:	230c      	movs	r3, #12
 8000488:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800048a:	2300      	movs	r3, #0
 800048c:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fe2a 	bl	80020f0 <HAL_RCC_OscConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80004a2:	f000 f8c1 	bl	8000628 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a6:	233f      	movs	r3, #63	@ 0x3f
 80004a8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ba:	2340      	movs	r3, #64	@ 0x40
 80004bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fa6a 	bl	80029a4 <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0xee>
	{
		Error_Handler();
 80004d6:	f000 f8a7 	bl	8000628 <Error_Handler>
	}
}
 80004da:	bf00      	nop
 80004dc:	3770      	adds	r7, #112	@ 0x70
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	58000400 	.word	0x58000400
 80004e8:	58024800 	.word	0x58024800

080004ec <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	hfdcan1.Instance = FDCAN1;
 80004f0:	4b33      	ldr	r3, [pc, #204]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 80004f2:	4a34      	ldr	r2, [pc, #208]	@ (80005c4 <MX_FDCAN1_Init+0xd8>)
 80004f4:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004f6:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004fc:	4b30      	ldr	r3, [pc, #192]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000502:	4b2f      	ldr	r3, [pc, #188]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000504:	2200      	movs	r2, #0
 8000506:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000508:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800050a:	2200      	movs	r2, #0
 800050c:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 800050e:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000510:	2200      	movs	r2, #0
 8000512:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000514:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000516:	2210      	movs	r2, #16
 8000518:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000522:	2202      	movs	r2, #2
 8000524:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000526:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000528:	2202      	movs	r2, #2
 800052a:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800052e:	2201      	movs	r2, #1
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000534:	2201      	movs	r2, #1
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800053a:	2201      	movs	r2, #1
 800053c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000540:	2201      	movs	r2, #1
 8000542:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800054c:	2200      	movs	r2, #0
 800054e:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000552:	2200      	movs	r2, #0
 8000554:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000558:	2200      	movs	r2, #0
 800055a:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800055e:	2204      	movs	r2, #4
 8000560:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000564:	2200      	movs	r2, #0
 8000566:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800056a:	2204      	movs	r2, #4
 800056c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000570:	2200      	movs	r2, #0
 8000572:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000576:	2204      	movs	r2, #4
 8000578:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800057c:	2200      	movs	r2, #0
 800057e:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000582:	2200      	movs	r2, #0
 8000584:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000588:	2200      	movs	r2, #0
 800058a:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800058e:	2200      	movs	r2, #0
 8000590:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 8000594:	2204      	movs	r2, #4
 8000596:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 800059a:	f000 fd71 	bl	8001080 <HAL_FDCAN_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_FDCAN1_Init+0xbc>
	{
		Error_Handler();
 80005a4:	f000 f840 	bl	8000628 <Error_Handler>
	}

	/* FDCAN RX interrupt'ını etkinleştir */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, NULL) != HAL_OK)
 80005a8:	2200      	movs	r2, #0
 80005aa:	2101      	movs	r1, #1
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_FDCAN1_Init+0xd4>)
 80005ae:	f001 f937 	bl	8001820 <HAL_FDCAN_ActivateNotification>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_FDCAN1_Init+0xd0>
	{
		Error_Handler(); // FDCAN interrupt hatası
 80005b8:	f000 f836 	bl	8000628 <Error_Handler>
	}
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	240001f4 	.word	0x240001f4
 80005c4:	4000a000 	.word	0x4000a000

080005c8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

	/* FDCAN1 pinlerini (PD0: RX, PD1: TX) yapılandır */
	__HAL_RCC_GPIOD_CLK_ENABLE();  // GPIOD için saat aktif et
 80005dc:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <MX_GPIO_Init+0x58>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <MX_GPIO_Init+0x58>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <MX_GPIO_Init+0x58>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;  // FDCAN1 pin alternatifi
 800060a:	2309      	movs	r3, #9
 800060c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <MX_GPIO_Init+0x5c>)
 8000614:	f001 fb82 	bl	8001d1c <HAL_GPIO_Init>
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58024400 	.word	0x58024400
 8000624:	58020c00 	.word	0x58020c00

08000628 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <Error_Handler+0x8>

08000634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_MspInit+0x30>)
 800063c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000640:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <HAL_MspInit+0x30>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_MspInit+0x30>)
 800064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	58024400 	.word	0x58024400

08000668 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0ba      	sub	sp, #232	@ 0xe8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	22c0      	movs	r2, #192	@ 0xc0
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fe69 	bl	8005360 <memset>
  if(hfdcan->Instance==FDCAN1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <HAL_FDCAN_MspInit+0xc8>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d146      	bne.n	8000726 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000698:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80006a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fca7 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80006bc:	f7ff ffb4 	bl	8000628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80006c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006cc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80006d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_FDCAN_MspInit+0xcc>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006fc:	2303      	movs	r3, #3
 80006fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000714:	2309      	movs	r3, #9
 8000716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <HAL_FDCAN_MspInit+0xd0>)
 8000722:	f001 fafb 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000726:	bf00      	nop
 8000728:	37e8      	adds	r7, #232	@ 0xe8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	4000a000 	.word	0x4000a000
 8000734:	58024400 	.word	0x58024400
 8000738:	58020c00 	.word	0x58020c00

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000792:	f000 fb41 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}

0800079a <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	@ 0x30
 80007bc:	af00      	add	r7, sp, #0
	printf("Interrupt is triggered...\n");
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <FDCAN1_IT0_IRQHandler+0x38>)
 80007c0:	f004 fcee 	bl	80051a0 <puts>
    FDCAN_RxHeaderTypeDef rx_msg;
    int8_t rx_data[8] = {0};  // Gelen veriyi tutacak array
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rx_msg, rx_data) == HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	2140      	movs	r1, #64	@ 0x40
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <FDCAN1_IT0_IRQHandler+0x3c>)
 80007d6:	f000 feb7 	bl	8001548 <HAL_FDCAN_GetRxMessage>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d103      	bne.n	80007e8 <FDCAN1_IT0_IRQHandler+0x30>
    {
        // Motor verisini al ve güncelle
        motor_receive(rx_data);
 80007e0:	463b      	mov	r3, r7
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fa18 	bl	8000c18 <motor_receive>
    }
}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08006fd0 	.word	0x08006fd0
 80007f4:	24000294 	.word	0x24000294

080007f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return 1;
 80007fc:	2301      	movs	r3, #1
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <_kill>:

int _kill(int pid, int sig)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000812:	f004 fdf7 	bl	8005404 <__errno>
 8000816:	4603      	mov	r3, r0
 8000818:	2216      	movs	r2, #22
 800081a:	601a      	str	r2, [r3, #0]
  return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <_exit>:

void _exit (int status)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffe7 	bl	8000808 <_kill>
  while (1) {}    /* Make sure we hang here */
 800083a:	bf00      	nop
 800083c:	e7fd      	b.n	800083a <_exit+0x12>

0800083e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e00a      	b.n	8000866 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000850:	f3af 8000 	nop.w
 8000854:	4601      	mov	r1, r0
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	60ba      	str	r2, [r7, #8]
 800085c:	b2ca      	uxtb	r2, r1
 800085e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	3301      	adds	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbf0      	blt.n	8000850 <_read+0x12>
  }

  return len;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e009      	b.n	800089e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbf1      	blt.n	800088a <_write+0x12>
  }
  return len;
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_close>:

int _close(int file)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d8:	605a      	str	r2, [r3, #4]
  return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_isatty>:

int _isatty(int file)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008f0:	2301      	movs	r3, #1
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f004 fd5c 	bl	8005404 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24080000 	.word	0x24080000
 8000978:	00000400 	.word	0x00000400
 800097c:	24000334 	.word	0x24000334
 8000980:	24000498 	.word	0x24000498

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000988:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <SystemInit+0xe4>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a36      	ldr	r2, [pc, #216]	@ (8000a68 <SystemInit+0xe4>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <SystemInit+0xe8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 030f 	and.w	r3, r3, #15
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d807      	bhi.n	80009b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <SystemInit+0xe8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f023 030f 	bic.w	r3, r3, #15
 80009ac:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <SystemInit+0xe8>)
 80009ae:	f043 0307 	orr.w	r3, r3, #7
 80009b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <SystemInit+0xec>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a70 <SystemInit+0xec>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a70 <SystemInit+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <SystemInit+0xec>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4929      	ldr	r1, [pc, #164]	@ (8000a70 <SystemInit+0xec>)
 80009cc:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <SystemInit+0xf0>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <SystemInit+0xe8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <SystemInit+0xe8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f023 030f 	bic.w	r3, r3, #15
 80009e6:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <SystemInit+0xe8>)
 80009e8:	f043 0307 	orr.w	r3, r3, #7
 80009ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <SystemInit+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <SystemInit+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <SystemInit+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <SystemInit+0xec>)
 8000a02:	4a1d      	ldr	r2, [pc, #116]	@ (8000a78 <SystemInit+0xf4>)
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <SystemInit+0xec>)
 8000a08:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <SystemInit+0xf8>)
 8000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <SystemInit+0xec>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <SystemInit+0xfc>)
 8000a10:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <SystemInit+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <SystemInit+0xec>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <SystemInit+0xfc>)
 8000a1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <SystemInit+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <SystemInit+0xec>)
 8000a26:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <SystemInit+0xfc>)
 8000a28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <SystemInit+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <SystemInit+0xec>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <SystemInit+0xec>)
 8000a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <SystemInit+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <SystemInit+0x100>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <SystemInit+0x104>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a4e:	d202      	bcs.n	8000a56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <SystemInit+0x108>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <SystemInit+0x10c>)
 8000a58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	52002000 	.word	0x52002000
 8000a70:	58024400 	.word	0x58024400
 8000a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a78:	02020200 	.word	0x02020200
 8000a7c:	01ff0000 	.word	0x01ff0000
 8000a80:	01010280 	.word	0x01010280
 8000a84:	5c001000 	.word	0x5c001000
 8000a88:	ffff0000 	.word	0xffff0000
 8000a8c:	51008108 	.word	0x51008108
 8000a90:	52004000 	.word	0x52004000

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a98:	f7ff ff74 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 fca5 	bl	8005410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fc63 	bl	8000390 <main>
  bx  lr
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ad0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ad4:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000ad8:	08007464 	.word	0x08007464
  ldr r2, =_sbss
 8000adc:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000ae0:	24000498 	.word	0x24000498

08000ae4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC3_IRQHandler>

08000ae6 <buffer_append_int32>:
float motor_speed = 0.0f;
float motor_current = 0.0f;
int8_t motor_temperature = 0;
int8_t motor_error = 0;

static void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8000ae6:	b480      	push	{r7}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = (number >> 24) & 0xFF;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	0e18      	lsrs	r0, r3, #24
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	6011      	str	r1, [r2, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	b2c2      	uxtb	r2, r0
 8000b08:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = (number >> 16) & 0xFF;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1418      	asrs	r0, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c59      	adds	r1, r3, #1
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6011      	str	r1, [r2, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2c2      	uxtb	r2, r0
 8000b20:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = (number >> 8)  & 0xFF;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1218      	asrs	r0, r3, #8
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1c59      	adds	r1, r3, #1
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6011      	str	r1, [r2, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2c2      	uxtb	r2, r0
 8000b38:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number & 0xFF;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1c59      	adds	r1, r3, #1
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6011      	str	r1, [r2, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <comm_can_set_rpm>:
	buffer_append_int32(buffer, (int32_t)(motor_current * 1000.0f), &send_index);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
}

// Velocity mode
void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	ed87 0a00 	vstr	s0, [r7]
 8000b68:	71fb      	strb	r3, [r7, #7]
	printf("RPM is setting...\n");
 8000b6a:	4810      	ldr	r0, [pc, #64]	@ (8000bac <comm_can_set_rpm+0x50>)
 8000b6c:	f004 fb18 	bl	80051a0 <puts>
	int32_t send_index = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 8000b74:	edd7 7a00 	vldr	s15, [r7]
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	f107 020c 	add.w	r2, r7, #12
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	ee17 1a90 	vmov	r1, s15
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffac 	bl	8000ae6 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	b2d1      	uxtb	r1, r2
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f806 	bl	8000bb0 <comm_can_transmit_eid>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08006fec 	.word	0x08006fec

08000bb0 <comm_can_transmit_eid>:
	buffer_append_int16(buffer + send_index + send_index1, RPA, &send_index1);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index + send_index1);
}

// Transmit fonksiyonu (FDCAN kullanılarak)
static void comm_can_transmit_eid(uint32_t id, const uint8_t data, uint8_t len) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0b4      	sub	sp, #208	@ 0xd0
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	70fb      	strb	r3, [r7, #3]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	70bb      	strb	r3, [r7, #2]
	if (len > 8) {
 8000bc0:	78bb      	ldrb	r3, [r7, #2]
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d901      	bls.n	8000bca <comm_can_transmit_eid+0x1a>
		len = 8;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	70bb      	strb	r3, [r7, #2]
	}
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = id;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	TxHeader.IdType = FDCAN_STANDARD_ID; // Standart ID tipi
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Veri çerçevesi
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	TxHeader.DataLength = len;           // Veri uzunluğu
 8000bdc:	78bb      	ldrb	r3, [r7, #2]
 8000bde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

	FDCAN_HandleTypeDef hfdcan1;
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*)data) != HAL_OK)
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fc46 	bl	8001492 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <comm_can_transmit_eid+0x60>
	{
		Error_Handler(); // Veri gönderme hatası
 8000c0c:	f7ff fd0c 	bl	8000628 <Error_Handler>
	}
}
 8000c10:	bf00      	nop
 8000c12:	37d0      	adds	r7, #208	@ 0xd0
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <motor_receive>:

// motor_receive: CAN Rx mesajındaki veriyi işleyip global değişkenlere atar.
void motor_receive(int8_t* rx_message)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af06      	add	r7, sp, #24
 8000c1e:	6078      	str	r0, [r7, #4]
	int16_t pos_int = rx_message[0] << 8 | rx_message[1];
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f993 3000 	ldrsb.w	r3, [r3]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	f992 2000 	ldrsb.w	r2, [r2]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	81fb      	strh	r3, [r7, #14]
	int16_t spd_int = rx_message[2] << 8 | rx_message[3];
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	3203      	adds	r2, #3
 8000c46:	f992 2000 	ldrsb.w	r2, [r2]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	81bb      	strh	r3, [r7, #12]
	int16_t cur_int = rx_message[4] << 8 | rx_message[5];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	f993 3000 	ldrsb.w	r3, [r3]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	3205      	adds	r2, #5
 8000c5e:	f992 2000 	ldrsb.w	r2, [r2]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	817b      	strh	r3, [r7, #10]

	motor_position= (float)( pos_int * 0.1f); // Motor Position
 8000c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000d14 <motor_receive+0xfc>
 8000c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <motor_receive+0x100>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
	motor_speed= (float)( spd_int * 10.0f);// Motor Speed
 8000c80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <motor_receive+0x104>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
	motor_current= (float) ( cur_int * 0.01f);// Motor Current
 8000c9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000d20 <motor_receive+0x108>
 8000caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <motor_receive+0x10c>)
 8000cb0:	edc3 7a00 	vstr	s15, [r3]
	motor_temperature= rx_message[6] ;// Motor Temperature
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <motor_receive+0x110>)
 8000cbc:	701a      	strb	r2, [r3, #0]
	motor_error= rx_message[7] ;// Motor Error Code
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f993 2007 	ldrsb.w	r2, [r3, #7]
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <motor_receive+0x114>)
 8000cc6:	701a      	strb	r2, [r3, #0]
	printf("Recieving data:\n motor_position: %f\n motor_speed: %f\nmotor_current: %f\nmotor_temperature: %d\nmotor_error: %d\n",
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <motor_receive+0x100>)
 8000cca:	edd3 7a00 	vldr	s15, [r3]
 8000cce:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <motor_receive+0x104>)
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <motor_receive+0x10c>)
 8000cde:	edd3 6a00 	vldr	s13, [r3]
 8000ce2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <motor_receive+0x110>)
 8000ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <motor_receive+0x114>)
 8000cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf4:	9305      	str	r3, [sp, #20]
 8000cf6:	9204      	str	r2, [sp, #16]
 8000cf8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cfc:	ed8d 7b00 	vstr	d7, [sp]
 8000d00:	ec53 2b15 	vmov	r2, r3, d5
 8000d04:	480a      	ldr	r0, [pc, #40]	@ (8000d30 <motor_receive+0x118>)
 8000d06:	f004 f9e3 	bl	80050d0 <iprintf>
			motor_position, motor_speed, motor_current, motor_temperature, motor_error);
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	3dcccccd 	.word	0x3dcccccd
 8000d18:	24000338 	.word	0x24000338
 8000d1c:	2400033c 	.word	0x2400033c
 8000d20:	3c23d70a 	.word	0x3c23d70a
 8000d24:	24000340 	.word	0x24000340
 8000d28:	24000344 	.word	0x24000344
 8000d2c:	24000345 	.word	0x24000345
 8000d30:	08007000 	.word	0x08007000

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f96e 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d40:	f001 ffe6 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8000d44:	4602      	mov	r2, r0
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_Init+0x68>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	4913      	ldr	r1, [pc, #76]	@ (8000da0 <HAL_Init+0x6c>)
 8000d52:	5ccb      	ldrb	r3, [r1, r3]
 8000d54:	f003 031f 	and.w	r3, r3, #31
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_Init+0x68>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	4a0e      	ldr	r2, [pc, #56]	@ (8000da0 <HAL_Init+0x6c>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <HAL_Init+0x70>)
 8000d76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d78:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_Init+0x74>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f814 	bl	8000dac <HAL_InitTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e002      	b.n	8000d94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8e:	f7ff fc51 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	080070bc 	.word	0x080070bc
 8000da4:	24000004 	.word	0x24000004
 8000da8:	24000000 	.word	0x24000000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_InitTick+0x60>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e021      	b.n	8000e04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <HAL_InitTick+0x64>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <HAL_InitTick+0x60>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f945 	bl	8001066 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f91d 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_InitTick+0x68>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2400000c 	.word	0x2400000c
 8000e10:	24000000 	.word	0x24000000
 8000e14:	24000008 	.word	0x24000008

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2400000c 	.word	0x2400000c
 8000e3c:	24000348 	.word	0x24000348

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	24000348 	.word	0x24000348

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2400000c 	.word	0x2400000c

08000ea0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetREVID+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	5c001000 	.word	0x5c001000

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0000 	.word	0x05fa0000

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	@ (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	@ 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff47 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff5e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff90 	bl	8000f70 <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5f 	bl	8000f1c <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffb2 	bl	8000fd8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b098      	sub	sp, #96	@ 0x60
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001088:	4a84      	ldr	r2, [pc, #528]	@ (800129c <HAL_FDCAN_Init+0x21c>)
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4611      	mov	r1, r2
 8001090:	224c      	movs	r2, #76	@ 0x4c
 8001092:	4618      	mov	r0, r3
 8001094:	f004 f9e3 	bl	800545e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e1c6      	b.n	8001430 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a7e      	ldr	r2, [pc, #504]	@ (80012a0 <HAL_FDCAN_Init+0x220>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d106      	bne.n	80010ba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff faca 	bl	8000668 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0210 	bic.w	r2, r2, #16
 80010e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e4:	f7ff feac 	bl	8000e40 <HAL_GetTick>
 80010e8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ea:	e014      	b.n	8001116 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010ec:	f7ff fea8 	bl	8000e40 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b0a      	cmp	r3, #10
 80010f8:	d90d      	bls.n	8001116 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001100:	f043 0201 	orr.w	r2, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2203      	movs	r2, #3
 800110e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e18c      	b.n	8001430 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b08      	cmp	r3, #8
 8001122:	d0e3      	beq.n	80010ec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001134:	f7ff fe84 	bl	8000e40 <HAL_GetTick>
 8001138:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800113a:	e014      	b.n	8001166 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800113c:	f7ff fe80 	bl	8000e40 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90d      	bls.n	8001166 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e164      	b.n	8001430 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0e3      	beq.n	800113c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0202 	orr.w	r2, r2, #2
 8001182:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7c1b      	ldrb	r3, [r3, #16]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d108      	bne.n	800119e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	e007      	b.n	80011ae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	e007      	b.n	80011d8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7c9b      	ldrb	r3, [r3, #18]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	e007      	b.n	8001202 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699a      	ldr	r2, [r3, #24]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001200:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001226:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0210 	bic.w	r2, r2, #16
 8001236:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0204 	orr.w	r2, r2, #4
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	e030      	b.n	80012b4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d02c      	beq.n	80012b4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d020      	beq.n	80012a4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001270:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0210 	orr.w	r2, r2, #16
 8001280:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d114      	bne.n	80012b4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	619a      	str	r2, [r3, #24]
 800129a:	e00b      	b.n	80012b4 <HAL_FDCAN_Init+0x234>
 800129c:	08007070 	.word	0x08007070
 80012a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0220 	orr.w	r2, r2, #32
 80012b2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012c4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012cc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012dc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012de:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012e8:	d115      	bne.n	8001316 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	3b01      	subs	r3, #1
 80012f6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	3b01      	subs	r3, #1
 8001300:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001302:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130a:	3b01      	subs	r3, #1
 800130c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001312:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001314:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00a      	beq.n	8001334 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133c:	4413      	add	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d011      	beq.n	8001366 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800134a:	f023 0107 	bic.w	r1, r3, #7
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	3360      	adds	r3, #96	@ 0x60
 8001356:	443b      	add	r3, r7
 8001358:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	d011      	beq.n	8001392 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001376:	f023 0107 	bic.w	r1, r3, #7
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	3360      	adds	r3, #96	@ 0x60
 8001382:	443b      	add	r3, r7
 8001384:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001396:	2b00      	cmp	r3, #0
 8001398:	d012      	beq.n	80013c0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80013a2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	3360      	adds	r3, #96	@ 0x60
 80013ae:	443b      	add	r3, r7
 80013b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80013b4:	011a      	lsls	r2, r3, #4
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d012      	beq.n	80013ee <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80013d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	3360      	adds	r3, #96	@ 0x60
 80013dc:	443b      	add	r3, r7
 80013de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80013e2:	021a      	lsls	r2, r3, #8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_FDCAN_Init+0x3b8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d107      	bne.n	8001408 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f022 0203 	bic.w	r2, r2, #3
 8001406:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa77 	bl	8001914 <FDCAN_CalcultateRamBlockAddresses>
 8001426:	4603      	mov	r3, r0
 8001428:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800142c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001430:	4618      	mov	r0, r3
 8001432:	3760      	adds	r7, #96	@ 0x60
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	4000a000 	.word	0x4000a000

0800143c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d111      	bne.n	8001474 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	e008      	b.n	8001486 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800147a:	f043 0204 	orr.w	r2, r3, #4
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
  }
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d141      	bne.n	800152e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80014b2:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c0:	f043 0220 	orr.w	r2, r3, #32
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e038      	b.n	8001540 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e026      	b.n	8001540 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fb89 	bl	8001c20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e008      	b.n	8001540 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001534:	f043 0208 	orr.w	r2, r3, #8
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
  }
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001548:	b480      	push	{r7}
 800154a:	b08b      	sub	sp, #44	@ 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001560:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001562:	7efb      	ldrb	r3, [r7, #27]
 8001564:	2b02      	cmp	r3, #2
 8001566:	f040 8149 	bne.w	80017fc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b40      	cmp	r3, #64	@ 0x40
 800156e:	d14c      	bne.n	800160a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001578:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001586:	f043 0220 	orr.w	r2, r3, #32
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e13c      	b.n	800180e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800159c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e12a      	b.n	800180e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c8:	d10a      	bne.n	80015e0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80015d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015da:	d101      	bne.n	80015e0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	69f9      	ldr	r1, [r7, #28]
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
 8001608:	e068      	b.n	80016dc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b41      	cmp	r3, #65	@ 0x41
 800160e:	d14c      	bne.n	80016aa <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001618:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001626:	f043 0220 	orr.w	r2, r3, #32
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0ec      	b.n	800180e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800163c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800164a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0da      	b.n	800180e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001668:	d10a      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800167a:	d101      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169c:	69f9      	ldr	r1, [r7, #28]
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a8:	e018      	b.n	80016dc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d309      	bcc.n	80016c8 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0a2      	b.n	800180e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d107      	bne.n	8001700 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0c9b      	lsrs	r3, r3, #18
 80016f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e005      	b.n	800170c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	3304      	adds	r3, #4
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0c1b      	lsrs	r3, r3, #16
 800173a:	f003 020f 	and.w	r2, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0e1b      	lsrs	r3, r3, #24
 8001760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0fda      	lsrs	r2, r3, #31
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	3304      	adds	r3, #4
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	e00a      	b.n	8001798 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	441a      	add	r2, r3
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	440b      	add	r3, r1
 800178e:	7812      	ldrb	r2, [r2, #0]
 8001790:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	3301      	adds	r3, #1
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a1f      	ldr	r2, [pc, #124]	@ (800181c <HAL_FDCAN_GetRxMessage+0x2d4>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	461a      	mov	r2, r3
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d3ec      	bcc.n	8001782 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b40      	cmp	r3, #64	@ 0x40
 80017ac:	d105      	bne.n	80017ba <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80017b8:	e01e      	b.n	80017f8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b41      	cmp	r3, #65	@ 0x41
 80017be:	d105      	bne.n	80017cc <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80017ca:	e015      	b.n	80017f8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b1f      	cmp	r3, #31
 80017d0:	d808      	bhi.n	80017e4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2101      	movs	r1, #1
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80017e2:	e009      	b.n	80017f8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f003 021f 	and.w	r2, r3, #31
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e008      	b.n	800180e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001802:	f043 0208 	orr.w	r2, r3, #8
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
  }
}
 800180e:	4618      	mov	r0, r3
 8001810:	372c      	adds	r7, #44	@ 0x2c
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	080070cc 	.word	0x080070cc

08001820 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001832:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d002      	beq.n	8001840 <HAL_FDCAN_ActivateNotification+0x20>
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d155      	bne.n	80018ec <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800185e:	e014      	b.n	800188a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	4013      	ands	r3, r2
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	d108      	bne.n	8001882 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0202 	orr.w	r2, r2, #2
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001880:	e003      	b.n	800188a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2203      	movs	r2, #3
 8001888:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_FDCAN_ActivateNotification+0xec>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <HAL_FDCAN_ActivateNotification+0xf0>)
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	0f9b      	lsrs	r3, r3, #30
 80018e2:	490b      	ldr	r1, [pc, #44]	@ (8001910 <HAL_FDCAN_ActivateNotification+0xf0>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e008      	b.n	80018fe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	3fcfffff 	.word	0x3fcfffff
 8001910:	4000a800 	.word	0x4000a800

08001914 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800192a:	4ba7      	ldr	r3, [pc, #668]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800192c:	4013      	ands	r3, r2
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	0091      	lsls	r1, r2, #2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	430b      	orrs	r3, r1
 8001938:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001944:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	4413      	add	r3, r2
 8001960:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800196a:	4b97      	ldr	r3, [pc, #604]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800196c:	4013      	ands	r3, r2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	0091      	lsls	r1, r2, #2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	430b      	orrs	r3, r1
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001984:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80019ac:	4b86      	ldr	r3, [pc, #536]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	0091      	lsls	r1, r2, #2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019f4:	4b74      	ldr	r3, [pc, #464]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	0091      	lsls	r1, r2, #2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001a0e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001a3c:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	0091      	lsls	r1, r2, #2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	0091      	lsls	r1, r2, #2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a82:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	041a      	lsls	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001aaa:	4b47      	ldr	r3, [pc, #284]	@ (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	0091      	lsls	r1, r2, #2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ac4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ae0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001afa:	4413      	add	r3, r2
 8001afc:	009a      	lsls	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	441a      	add	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	441a      	add	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001b34:	441a      	add	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001b4c:	441a      	add	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001b64:	441a      	add	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001bb0:	441a      	add	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d915      	bls.n	8001bf0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001bc4:	e006      	b.n	8001bd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001bc6:	bf00      	nop
 8001bc8:	ffff0003 	.word	0xffff0003
 8001bcc:	10002b00 	.word	0x10002b00
 8001bd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e010      	b.n	8001c12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e005      	b.n	8001c04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3f3      	bcc.n	8001bf8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001c3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e00a      	b.n	8001c62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001c54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001c5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001c78:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c8e:	6839      	ldr	r1, [r7, #0]
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e020      	b.n	8001cfa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3303      	adds	r3, #3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	440b      	add	r3, r1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cd0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	440b      	add	r3, r1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cde:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	440a      	add	r2, r1
 8001ce6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ce8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <FDCAN_CopyMessageToRAM+0xf8>)
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	461a      	mov	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d3d6      	bcc.n	8001cb8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	@ 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	080070cc 	.word	0x080070cc

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2a:	4b89      	ldr	r3, [pc, #548]	@ (8001f50 <HAL_GPIO_Init+0x234>)
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	e194      	b.n	800205a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8186 	beq.w	8002054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x44>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e0 	beq.w	8002054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_GPIO_Init+0x23c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <HAL_GPIO_Init+0x240>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d052      	beq.n	8001f84 <HAL_GPIO_Init+0x268>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_GPIO_Init+0x244>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_GPIO_Init+0x248>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x24c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_GPIO_Init+0x250>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_GPIO_Init+0x254>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_GPIO_Init+0x258>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_GPIO_Init+0x25c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x260>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_GPIO_Init+0x264>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e02d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e02b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e029      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e027      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e025      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e023      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e01f      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4e:	bf00      	nop
 8001f50:	58000080 	.word	0x58000080
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58000400 	.word	0x58000400
 8001f5c:	58020000 	.word	0x58020000
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58020800 	.word	0x58020800
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58021000 	.word	0x58021000
 8001f70:	58021400 	.word	0x58021400
 8001f74:	58021800 	.word	0x58021800
 8001f78:	58021c00 	.word	0x58021c00
 8001f7c:	58022000 	.word	0x58022000
 8001f80:	58022400 	.word	0x58022400
 8001f84:	2300      	movs	r3, #0
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f96:	4938      	ldr	r1, [pc, #224]	@ (8002078 <HAL_GPIO_Init+0x35c>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f ae63 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3724      	adds	r7, #36	@ 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00a      	beq.n	80020a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002090:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e01f      	b.n	80020e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e01d      	b.n	80020e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	490f      	ldr	r1, [pc, #60]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020b6:	f7fe fec3 	bl	8000e40 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020bc:	e009      	b.n	80020d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020be:	f7fe febf 	bl	8000e40 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020cc:	d901      	bls.n	80020d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e007      	b.n	80020e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020de:	d1ee      	bne.n	80020be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	58024800 	.word	0x58024800

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	@ 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	f000 bc48 	b.w	8002994 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8088 	beq.w	8002222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b99      	ldr	r3, [pc, #612]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800211c:	4b96      	ldr	r3, [pc, #600]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	2b10      	cmp	r3, #16
 8002126:	d007      	beq.n	8002138 <HAL_RCC_OscConfig+0x48>
 8002128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212a:	2b18      	cmp	r3, #24
 800212c:	d111      	bne.n	8002152 <HAL_RCC_OscConfig+0x62>
 800212e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	4b8f      	ldr	r3, [pc, #572]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d06d      	beq.n	8002220 <HAL_RCC_OscConfig+0x130>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d169      	bne.n	8002220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	f000 bc21 	b.w	8002994 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x7a>
 800215c:	4b86      	ldr	r3, [pc, #536]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a85      	ldr	r2, [pc, #532]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e02e      	b.n	80021c8 <HAL_RCC_OscConfig+0xd8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x9c>
 8002172:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a80      	ldr	r2, [pc, #512]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7d      	ldr	r2, [pc, #500]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002184:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xd8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xc0>
 8002196:	4b78      	ldr	r3, [pc, #480]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a77      	ldr	r2, [pc, #476]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a74      	ldr	r2, [pc, #464]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xd8>
 80021b0:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a70      	ldr	r2, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe36 	bl	8000e40 <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe fe32 	bl	8000e40 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e3d4      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ea:	4b63      	ldr	r3, [pc, #396]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe8>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fe22 	bl	8000e40 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe fe1e 	bl	8000e40 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e3c0      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002212:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x110>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80ca 	beq.w	80023c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002230:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002238:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800223a:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_RCC_OscConfig+0x166>
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	2b18      	cmp	r3, #24
 800224a:	d156      	bne.n	80022fa <HAL_RCC_OscConfig+0x20a>
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d151      	bne.n	80022fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002256:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x17e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e392      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800226e:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0219 	bic.w	r2, r3, #25
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	493f      	ldr	r1, [pc, #252]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fdde 	bl	8000e40 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002288:	f7fe fdda 	bl	8000e40 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e37c      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800229a:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	f7fe fdfb 	bl	8000ea0 <HAL_GetREVID>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d817      	bhi.n	80022e4 <HAL_RCC_OscConfig+0x1f4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	d108      	bne.n	80022ce <HAL_RCC_OscConfig+0x1de>
 80022bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80022c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022cc:	e07a      	b.n	80023c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	031b      	lsls	r3, r3, #12
 80022dc:	4926      	ldr	r1, [pc, #152]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e2:	e06f      	b.n	80023c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	4921      	ldr	r1, [pc, #132]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	e064      	b.n	80023c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d047      	beq.n	8002392 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0219 	bic.w	r2, r3, #25
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	491a      	ldr	r1, [pc, #104]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fd94 	bl	8000e40 <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7fe fd90 	bl	8000e40 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e332      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	f7fe fdb1 	bl	8000ea0 <HAL_GetREVID>
 800233e:	4603      	mov	r3, r0
 8002340:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002344:	4293      	cmp	r3, r2
 8002346:	d819      	bhi.n	800237c <HAL_RCC_OscConfig+0x28c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b40      	cmp	r3, #64	@ 0x40
 800234e:	d108      	bne.n	8002362 <HAL_RCC_OscConfig+0x272>
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 800235a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235e:	6053      	str	r3, [r2, #4]
 8002360:	e030      	b.n	80023c4 <HAL_RCC_OscConfig+0x2d4>
 8002362:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	031b      	lsls	r3, r3, #12
 8002370:	4901      	ldr	r1, [pc, #4]	@ (8002378 <HAL_RCC_OscConfig+0x288>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
 8002376:	e025      	b.n	80023c4 <HAL_RCC_OscConfig+0x2d4>
 8002378:	58024400 	.word	0x58024400
 800237c:	4b9a      	ldr	r3, [pc, #616]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	4997      	ldr	r1, [pc, #604]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e018      	b.n	80023c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b95      	ldr	r3, [pc, #596]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a94      	ldr	r2, [pc, #592]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fd4f 	bl	8000e40 <HAL_GetTick>
 80023a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fd4b 	bl	8000e40 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e2ed      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b8:	4b8b      	ldr	r3, [pc, #556]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a9 	beq.w	8002524 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d2:	4b85      	ldr	r3, [pc, #532]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023dc:	4b82      	ldr	r3, [pc, #520]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d007      	beq.n	80023f8 <HAL_RCC_OscConfig+0x308>
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b18      	cmp	r3, #24
 80023ec:	d13a      	bne.n	8002464 <HAL_RCC_OscConfig+0x374>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d135      	bne.n	8002464 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023f8:	4b7b      	ldr	r3, [pc, #492]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x320>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b80      	cmp	r3, #128	@ 0x80
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e2c1      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002410:	f7fe fd46 	bl	8000ea0 <HAL_GetREVID>
 8002414:	4603      	mov	r3, r0
 8002416:	f241 0203 	movw	r2, #4099	@ 0x1003
 800241a:	4293      	cmp	r3, r2
 800241c:	d817      	bhi.n	800244e <HAL_RCC_OscConfig+0x35e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	2b20      	cmp	r3, #32
 8002424:	d108      	bne.n	8002438 <HAL_RCC_OscConfig+0x348>
 8002426:	4b70      	ldr	r3, [pc, #448]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800242e:	4a6e      	ldr	r2, [pc, #440]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002434:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002436:	e075      	b.n	8002524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002438:	4b6b      	ldr	r3, [pc, #428]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	069b      	lsls	r3, r3, #26
 8002446:	4968      	ldr	r1, [pc, #416]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800244c:	e06a      	b.n	8002524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800244e:	4b66      	ldr	r3, [pc, #408]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	4962      	ldr	r1, [pc, #392]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002462:	e05f      	b.n	8002524 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d042      	beq.n	80024f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800246c:	4b5e      	ldr	r3, [pc, #376]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5d      	ldr	r2, [pc, #372]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fce2 	bl	8000e40 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002480:	f7fe fcde 	bl	8000e40 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e280      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002492:	4b55      	ldr	r3, [pc, #340]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800249e:	f7fe fcff 	bl	8000ea0 <HAL_GetREVID>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d817      	bhi.n	80024dc <HAL_RCC_OscConfig+0x3ec>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d108      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3d6>
 80024b4:	4b4c      	ldr	r3, [pc, #304]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024bc:	4a4a      	ldr	r2, [pc, #296]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024c2:	6053      	str	r3, [r2, #4]
 80024c4:	e02e      	b.n	8002524 <HAL_RCC_OscConfig+0x434>
 80024c6:	4b48      	ldr	r3, [pc, #288]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	4944      	ldr	r1, [pc, #272]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
 80024da:	e023      	b.n	8002524 <HAL_RCC_OscConfig+0x434>
 80024dc:	4b42      	ldr	r3, [pc, #264]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	493f      	ldr	r1, [pc, #252]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
 80024f0:	e018      	b.n	8002524 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024f2:	4b3d      	ldr	r3, [pc, #244]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3c      	ldr	r2, [pc, #240]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fc9f 	bl	8000e40 <HAL_GetTick>
 8002502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002506:	f7fe fc9b 	bl	8000e40 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e23d      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002518:	4b33      	ldr	r3, [pc, #204]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d036      	beq.n	800259e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d019      	beq.n	800256c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002538:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253c:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7fe fc7c 	bl	8000e40 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe fc78 	bl	8000e40 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e21a      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x45c>
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256c:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002570:	4a1d      	ldr	r2, [pc, #116]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe fc62 	bl	8000e40 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe fc5e 	bl	8000e40 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e200      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002592:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d039      	beq.n	800261e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01c      	beq.n	80025ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025be:	f7fe fc3f 	bl	8000e40 <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c6:	f7fe fc3b 	bl	8000e40 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1dd      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4d6>
 80025e4:	e01b      	b.n	800261e <HAL_RCC_OscConfig+0x52e>
 80025e6:	bf00      	nop
 80025e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025ec:	4b9b      	ldr	r3, [pc, #620]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a9a      	ldr	r2, [pc, #616]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80025f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fc22 	bl	8000e40 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002600:	f7fe fc1e 	bl	8000e40 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1c0      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002612:	4b92      	ldr	r3, [pc, #584]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8081 	beq.w	800272e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800262c:	4b8c      	ldr	r3, [pc, #560]	@ (8002860 <HAL_RCC_OscConfig+0x770>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a8b      	ldr	r2, [pc, #556]	@ (8002860 <HAL_RCC_OscConfig+0x770>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002638:	f7fe fc02 	bl	8000e40 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002640:	f7fe fbfe 	bl	8000e40 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	@ 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1a0      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002652:	4b83      	ldr	r3, [pc, #524]	@ (8002860 <HAL_RCC_OscConfig+0x770>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x584>
 8002666:	4b7d      	ldr	r3, [pc, #500]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	4a7c      	ldr	r2, [pc, #496]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	@ 0x70
 8002672:	e02d      	b.n	80026d0 <HAL_RCC_OscConfig+0x5e0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x5a6>
 800267c:	4b77      	ldr	r3, [pc, #476]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a76      	ldr	r2, [pc, #472]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
 8002688:	4b74      	ldr	r3, [pc, #464]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	4a73      	ldr	r2, [pc, #460]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	@ 0x70
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x5e0>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c8>
 800269e:	4b6f      	ldr	r3, [pc, #444]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	4a6e      	ldr	r2, [pc, #440]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026aa:	4b6c      	ldr	r3, [pc, #432]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	4a6b      	ldr	r2, [pc, #428]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x5e0>
 80026b8:	4b68      	ldr	r3, [pc, #416]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	4a67      	ldr	r2, [pc, #412]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c4:	4b65      	ldr	r3, [pc, #404]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c8:	4a64      	ldr	r2, [pc, #400]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fbb2 	bl	8000e40 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fbae 	bl	8000e40 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e14e      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f6:	4b59      	ldr	r3, [pc, #356]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ee      	beq.n	80026e0 <HAL_RCC_OscConfig+0x5f0>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fb9c 	bl	8000e40 <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fb98 	bl	8000e40 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e138      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002722:	4b4e      	ldr	r3, [pc, #312]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ee      	bne.n	800270c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 812d 	beq.w	8002992 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002738:	4b48      	ldr	r3, [pc, #288]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002740:	2b18      	cmp	r3, #24
 8002742:	f000 80bd 	beq.w	80028c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2b02      	cmp	r3, #2
 800274c:	f040 809e 	bne.w	800288c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b42      	ldr	r3, [pc, #264]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a41      	ldr	r2, [pc, #260]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fb70 	bl	8000e40 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fb6c 	bl	8000e40 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e10e      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002776:	4b39      	ldr	r3, [pc, #228]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002782:	4b36      	ldr	r3, [pc, #216]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002786:	4b37      	ldr	r3, [pc, #220]	@ (8002864 <HAL_RCC_OscConfig+0x774>)
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	430a      	orrs	r2, r1
 8002796:	4931      	ldr	r1, [pc, #196]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	628b      	str	r3, [r1, #40]	@ 0x28
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	3b01      	subs	r3, #1
 80027a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027aa:	3b01      	subs	r3, #1
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	3b01      	subs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c4:	3b01      	subs	r3, #1
 80027c6:	061b      	lsls	r3, r3, #24
 80027c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027cc:	4923      	ldr	r1, [pc, #140]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027d2:	4b22      	ldr	r3, [pc, #136]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	4a21      	ldr	r2, [pc, #132]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027de:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e2:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <HAL_RCC_OscConfig+0x778>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027ea:	00d2      	lsls	r2, r2, #3
 80027ec:	491b      	ldr	r1, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f6:	f023 020c 	bic.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	4917      	ldr	r1, [pc, #92]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002800:	4313      	orrs	r3, r2
 8002802:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002804:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	f023 0202 	bic.w	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	4912      	ldr	r1, [pc, #72]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800282c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800282e:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002832:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a04      	ldr	r2, [pc, #16]	@ (800285c <HAL_RCC_OscConfig+0x76c>)
 800284c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe faf5 	bl	8000e40 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002858:	e011      	b.n	800287e <HAL_RCC_OscConfig+0x78e>
 800285a:	bf00      	nop
 800285c:	58024400 	.word	0x58024400
 8002860:	58024800 	.word	0x58024800
 8002864:	fffffc0c 	.word	0xfffffc0c
 8002868:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fae8 	bl	8000e40 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e08a      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x77c>
 800288a:	e082      	b.n	8002992 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a42      	ldr	r2, [pc, #264]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fad2 	bl	8000e40 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe face 	bl	8000e40 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e070      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b2:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x7b0>
 80028be:	e068      	b.n	8002992 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028c0:	4b36      	ldr	r3, [pc, #216]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028c6:	4b35      	ldr	r3, [pc, #212]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d031      	beq.n	8002938 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0203 	and.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d12a      	bne.n	8002938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d122      	bne.n	8002938 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d11a      	bne.n	8002938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	0a5b      	lsrs	r3, r3, #9
 8002906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d111      	bne.n	8002938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002920:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0e1b      	lsrs	r3, r3, #24
 800292a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002932:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e02b      	b.n	8002994 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 800293e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002946:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	429a      	cmp	r2, r3
 8002950:	d01f      	beq.n	8002992 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002952:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	4a11      	ldr	r2, [pc, #68]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800295e:	f7fe fa6f 	bl	8000e40 <HAL_GetTick>
 8002962:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002964:	bf00      	nop
 8002966:	f7fe fa6b 	bl	8000e40 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	4293      	cmp	r3, r2
 8002970:	d0f9      	beq.n	8002966 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_RCC_OscConfig+0x8b0>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800297e:	00d2      	lsls	r2, r2, #3
 8002980:	4906      	ldr	r1, [pc, #24]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002982:	4313      	orrs	r3, r2
 8002984:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_RCC_OscConfig+0x8ac>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3730      	adds	r7, #48	@ 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58024400 	.word	0x58024400
 80029a0:	ffff0007 	.word	0xffff0007

080029a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e19c      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b8a      	ldr	r3, [pc, #552]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d910      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b87      	ldr	r3, [pc, #540]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 020f 	bic.w	r2, r3, #15
 80029ce:	4985      	ldr	r1, [pc, #532]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b83      	ldr	r3, [pc, #524]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e184      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	4b7b      	ldr	r3, [pc, #492]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d908      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a04:	4b78      	ldr	r3, [pc, #480]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4975      	ldr	r1, [pc, #468]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	4b70      	ldr	r3, [pc, #448]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d908      	bls.n	8002a44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	496a      	ldr	r1, [pc, #424]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	4b64      	ldr	r3, [pc, #400]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d908      	bls.n	8002a72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a60:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	495e      	ldr	r1, [pc, #376]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d010      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	4b59      	ldr	r3, [pc, #356]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d908      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a8e:	4b56      	ldr	r3, [pc, #344]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4953      	ldr	r1, [pc, #332]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d010      	beq.n	8002ace <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d908      	bls.n	8002ace <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f023 020f 	bic.w	r2, r3, #15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4947      	ldr	r1, [pc, #284]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d055      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ada:	4b43      	ldr	r3, [pc, #268]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4940      	ldr	r1, [pc, #256]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af4:	4b3c      	ldr	r3, [pc, #240]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d121      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0f6      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d115      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0ea      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b24:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0de      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b34:	4b2c      	ldr	r3, [pc, #176]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d6      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b44:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f023 0207 	bic.w	r2, r3, #7
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4925      	ldr	r1, [pc, #148]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b56:	f7fe f973 	bl	8000e40 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5e:	f7fe f96f 	bl	8000e40 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0be      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b74:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d1eb      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d208      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba2:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f023 020f 	bic.w	r2, r3, #15
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	490e      	ldr	r1, [pc, #56]	@ (8002be8 <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d214      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	4906      	ldr	r1, [pc, #24]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e086      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x34e>
 8002be4:	52002000 	.word	0x52002000
 8002be8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d208      	bcs.n	8002c1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c08:	4b3c      	ldr	r3, [pc, #240]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	4939      	ldr	r1, [pc, #228]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d010      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	4b34      	ldr	r3, [pc, #208]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d208      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c36:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	492e      	ldr	r1, [pc, #184]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d010      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d208      	bcs.n	8002c76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c64:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4922      	ldr	r1, [pc, #136]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d208      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c92:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4917      	ldr	r1, [pc, #92]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ca4:	f000 f834 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	4912      	ldr	r1, [pc, #72]	@ (8002d00 <HAL_RCC_ClockConfig+0x35c>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <HAL_RCC_ClockConfig+0x358>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <HAL_RCC_ClockConfig+0x35c>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <HAL_RCC_ClockConfig+0x360>)
 8002cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <HAL_RCC_ClockConfig+0x364>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_RCC_ClockConfig+0x368>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f860 	bl	8000dac <HAL_InitTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	080070bc 	.word	0x080070bc
 8002d04:	24000004 	.word	0x24000004
 8002d08:	24000000 	.word	0x24000000
 8002d0c:	24000008 	.word	0x24000008

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d16:	4bb3      	ldr	r3, [pc, #716]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d1e:	2b18      	cmp	r3, #24
 8002d20:	f200 8155 	bhi.w	8002fce <HAL_RCC_GetSysClockFreq+0x2be>
 8002d24:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002fcf 	.word	0x08002fcf
 8002d34:	08002fcf 	.word	0x08002fcf
 8002d38:	08002fcf 	.word	0x08002fcf
 8002d3c:	08002fcf 	.word	0x08002fcf
 8002d40:	08002fcf 	.word	0x08002fcf
 8002d44:	08002fcf 	.word	0x08002fcf
 8002d48:	08002fcf 	.word	0x08002fcf
 8002d4c:	08002db7 	.word	0x08002db7
 8002d50:	08002fcf 	.word	0x08002fcf
 8002d54:	08002fcf 	.word	0x08002fcf
 8002d58:	08002fcf 	.word	0x08002fcf
 8002d5c:	08002fcf 	.word	0x08002fcf
 8002d60:	08002fcf 	.word	0x08002fcf
 8002d64:	08002fcf 	.word	0x08002fcf
 8002d68:	08002fcf 	.word	0x08002fcf
 8002d6c:	08002dbd 	.word	0x08002dbd
 8002d70:	08002fcf 	.word	0x08002fcf
 8002d74:	08002fcf 	.word	0x08002fcf
 8002d78:	08002fcf 	.word	0x08002fcf
 8002d7c:	08002fcf 	.word	0x08002fcf
 8002d80:	08002fcf 	.word	0x08002fcf
 8002d84:	08002fcf 	.word	0x08002fcf
 8002d88:	08002fcf 	.word	0x08002fcf
 8002d8c:	08002dc3 	.word	0x08002dc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d90:	4b94      	ldr	r3, [pc, #592]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d9c:	4b91      	ldr	r3, [pc, #580]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	4a90      	ldr	r2, [pc, #576]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dae:	e111      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002db0:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db2:	61bb      	str	r3, [r7, #24]
      break;
 8002db4:	e10e      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002db6:	4b8d      	ldr	r3, [pc, #564]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002db8:	61bb      	str	r3, [r7, #24]
      break;
 8002dba:	e10b      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dbe:	61bb      	str	r3, [r7, #24]
      break;
 8002dc0:	e108      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dc2:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dcc:	4b85      	ldr	r3, [pc, #532]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dd8:	4b82      	ldr	r3, [pc, #520]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002de2:	4b80      	ldr	r3, [pc, #512]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80e1 	beq.w	8002fc8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	f000 8083 	beq.w	8002f14 <HAL_RCC_GetSysClockFreq+0x204>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f200 80a1 	bhi.w	8002f58 <HAL_RCC_GetSysClockFreq+0x248>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x114>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d056      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e22:	e099      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e24:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02d      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e30:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	08db      	lsrs	r3, r3, #3
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5a:	4b62      	ldr	r3, [pc, #392]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e8a:	e087      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ff8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9e:	4b51      	ldr	r3, [pc, #324]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ece:	e065      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee2:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ef6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f12:	e043      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003000 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f26:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f3a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f56:	e021      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f7e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	0a5b      	lsrs	r3, r3, #9
 8002fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	ee07 3a90 	vmov	s15, r3
 8002fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc0:	ee17 3a90 	vmov	r3, s15
 8002fc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
      break;
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd0:	61bb      	str	r3, [r7, #24]
      break;
 8002fd2:	bf00      	nop
  }

  return sysclockfreq;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	@ 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	03d09000 	.word	0x03d09000
 8002fec:	003d0900 	.word	0x003d0900
 8002ff0:	007a1200 	.word	0x007a1200
 8002ff4:	46000000 	.word	0x46000000
 8002ff8:	4c742400 	.word	0x4c742400
 8002ffc:	4a742400 	.word	0x4a742400
 8003000:	4af42400 	.word	0x4af42400

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003008:	b0ca      	sub	sp, #296	@ 0x128
 800300a:	af00      	add	r7, sp, #0
 800300c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800301c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003028:	2500      	movs	r5, #0
 800302a:	ea54 0305 	orrs.w	r3, r4, r5
 800302e:	d049      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003036:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800303a:	d02f      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800303c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003040:	d828      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003046:	d01a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003048:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800304c:	d822      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003056:	d007      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003058:	e01c      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305a:	4bb8      	ldr	r3, [pc, #736]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	4ab7      	ldr	r2, [pc, #732]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003066:	e01a      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	3308      	adds	r3, #8
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f9d1 	bl	8004418 <RCCEx_PLL2_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800307c:	e00f      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800307e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003082:	3328      	adds	r3, #40	@ 0x28
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fa78 	bl	800457c <RCCEx_PLL3_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800309c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030a6:	4ba5      	ldr	r3, [pc, #660]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030b4:	4aa1      	ldr	r2, [pc, #644]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80030ba:	e003      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80030d0:	f04f 0900 	mov.w	r9, #0
 80030d4:	ea58 0309 	orrs.w	r3, r8, r9
 80030d8:	d047      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d82a      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003101 	.word	0x08003101
 80030f0:	0800310f 	.word	0x0800310f
 80030f4:	08003125 	.word	0x08003125
 80030f8:	08003143 	.word	0x08003143
 80030fc:	08003143 	.word	0x08003143
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003100:	4b8e      	ldr	r3, [pc, #568]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	4a8d      	ldr	r2, [pc, #564]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800310c:	e01a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	3308      	adds	r3, #8
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f97e 	bl	8004418 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003122:	e00f      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	3328      	adds	r3, #40	@ 0x28
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fa25 	bl	800457c <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314c:	4b7b      	ldr	r3, [pc, #492]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800314e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003150:	f023 0107 	bic.w	r1, r3, #7
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	4a78      	ldr	r2, [pc, #480]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800315c:	430b      	orrs	r3, r1
 800315e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800316a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003176:	f04f 0b00 	mov.w	fp, #0
 800317a:	ea5a 030b 	orrs.w	r3, sl, fp
 800317e:	d04c      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318a:	d030      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800318c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003190:	d829      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003192:	2bc0      	cmp	r3, #192	@ 0xc0
 8003194:	d02d      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003196:	2bc0      	cmp	r3, #192	@ 0xc0
 8003198:	d825      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d018      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800319e:	2b80      	cmp	r3, #128	@ 0x80
 80031a0:	d821      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d007      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80031aa:	e01c      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ac:	4b63      	ldr	r3, [pc, #396]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	4a62      	ldr	r2, [pc, #392]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031b8:	e01c      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031be:	3308      	adds	r3, #8
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f928 	bl	8004418 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031ce:	e011      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	3328      	adds	r3, #40	@ 0x28
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f9cf 	bl	800457c <RCCEx_PLL3_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031e4:	e006      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ec:	e002      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031ee:	bf00      	nop
 80031f0:	e000      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031fc:	4b4f      	ldr	r3, [pc, #316]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003200:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	4a4c      	ldr	r2, [pc, #304]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800320c:	430b      	orrs	r3, r1
 800320e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003226:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003230:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003234:	460b      	mov	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	d053      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003246:	d035      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800324c:	d82e      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800324e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003252:	d031      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003254:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003258:	d828      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800325a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800325e:	d01a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003264:	d822      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800326a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800326e:	d007      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003270:	e01c      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003272:	4b32      	ldr	r3, [pc, #200]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	4a31      	ldr	r2, [pc, #196]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800327c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800327e:	e01c      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	3308      	adds	r3, #8
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f8c5 	bl	8004418 <RCCEx_PLL2_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329a:	3328      	adds	r3, #40	@ 0x28
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 f96c 	bl	800457c <RCCEx_PLL3_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032aa:	e006      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032b2:	e002      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032b4:	bf00      	nop
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032c2:	4b1e      	ldr	r3, [pc, #120]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032d2:	4a1a      	ldr	r2, [pc, #104]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80032f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80032fc:	460b      	mov	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d056      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800330a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800330e:	d038      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003314:	d831      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003316:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800331a:	d034      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800331c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003320:	d82b      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003326:	d01d      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800332c:	d825      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003338:	e01f      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003340:	4ba2      	ldr	r3, [pc, #648]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	4aa1      	ldr	r2, [pc, #644]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800334c:	e01c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003352:	3308      	adds	r3, #8
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f001 f85e 	bl	8004418 <RCCEx_PLL2_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003362:	e011      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003368:	3328      	adds	r3, #40	@ 0x28
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f905 	bl	800457c <RCCEx_PLL3_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003390:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033a0:	4a8a      	ldr	r2, [pc, #552]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80033bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d03a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d6:	2b30      	cmp	r3, #48	@ 0x30
 80033d8:	d01f      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033da:	2b30      	cmp	r3, #48	@ 0x30
 80033dc:	d819      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d00c      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d815      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d019      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d111      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ee:	4b77      	ldr	r3, [pc, #476]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	4a76      	ldr	r2, [pc, #472]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033fa:	e011      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	3308      	adds	r3, #8
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f807 	bl	8004418 <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003418:	e002      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800341e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003428:	4b68      	ldr	r3, [pc, #416]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	4a65      	ldr	r2, [pc, #404]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003438:	430b      	orrs	r3, r1
 800343a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343c:	e003      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003452:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800345c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003460:	460b      	mov	r3, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	d051      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003470:	d035      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003476:	d82e      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003478:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800347c:	d031      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800347e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003482:	d828      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003488:	d01a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348e:	d822      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003498:	d007      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800349a:	e01c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349c:	4b4b      	ldr	r3, [pc, #300]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	4a4a      	ldr	r2, [pc, #296]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034a8:	e01c      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ae:	3308      	adds	r3, #8
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 ffb0 	bl	8004418 <RCCEx_PLL2_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034be:	e011      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c4:	3328      	adds	r3, #40	@ 0x28
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 f857 	bl	800457c <RCCEx_PLL3_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034ec:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fa:	4a34      	ldr	r2, [pc, #208]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003516:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003520:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d056      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003534:	d033      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800353a:	d82c      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800353c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003540:	d02f      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003542:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003546:	d826      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003548:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800354c:	d02b      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800354e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003552:	d820      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003558:	d012      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800355a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800355e:	d81a      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d022      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d115      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	3308      	adds	r3, #8
 8003570:	2101      	movs	r1, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f000 ff50 	bl	8004418 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800357e:	e015      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	3328      	adds	r3, #40	@ 0x28
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fff7 	bl	800457c <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003594:	e00a      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359c:	e006      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c2:	4a02      	ldr	r2, [pc, #8]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d055      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003604:	d033      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800360a:	d82c      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003610:	d02f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d826      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800361c:	d02b      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800361e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003622:	d820      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003628:	d012      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800362a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800362e:	d81a      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d022      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003638:	d115      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	3308      	adds	r3, #8
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fee8 	bl	8004418 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800364e:	e015      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	3328      	adds	r3, #40	@ 0x28
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 ff8f 	bl	800457c <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003664:	e00a      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800366e:	bf00      	nop
 8003670:	e004      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003672:	bf00      	nop
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800367a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003684:	4ba3      	ldr	r3, [pc, #652]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003694:	4a9f      	ldr	r2, [pc, #636]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6593      	str	r3, [r2, #88]	@ 0x58
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80036b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d037      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ce:	d00e      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80036d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d4:	d816      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d018      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80036da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036de:	d111      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	4a8b      	ldr	r2, [pc, #556]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036ec:	e00f      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	3308      	adds	r3, #8
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fe8e 	bl	8004418 <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800370c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003716:	4b7f      	ldr	r3, [pc, #508]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003724:	4a7b      	ldr	r2, [pc, #492]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6513      	str	r3, [r2, #80]	@ 0x50
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800374a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d039      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375a:	2b03      	cmp	r3, #3
 800375c:	d81c      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800375e:	a201      	add	r2, pc, #4	@ (adr r2, 8003764 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	080037a1 	.word	0x080037a1
 8003768:	08003775 	.word	0x08003775
 800376c:	08003783 	.word	0x08003783
 8003770:	080037a1 	.word	0x080037a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b67      	ldr	r3, [pc, #412]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	4a66      	ldr	r2, [pc, #408]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003780:	e00f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	3308      	adds	r3, #8
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fe44 	bl	8004418 <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003796:	e004      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	f023 0103 	bic.w	r1, r3, #3
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b8:	4a56      	ldr	r2, [pc, #344]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f000 809f 	beq.w	8003928 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f6:	f7fd fb23 	bl	8000e40 <HAL_GetTick>
 80037fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fe:	e00b      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd fb1e 	bl	8000e40 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b64      	cmp	r3, #100	@ 0x64
 800380e:	d903      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003816:	e005      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003818:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ed      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003828:	2b00      	cmp	r3, #0
 800382a:	d179      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800382c:	4b39      	ldr	r3, [pc, #228]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800382e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003838:	4053      	eors	r3, r2
 800383a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d015      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003842:	4b34      	ldr	r3, [pc, #208]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800384e:	4b31      	ldr	r3, [pc, #196]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	4a30      	ldr	r2, [pc, #192]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800385a:	4b2e      	ldr	r3, [pc, #184]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a2d      	ldr	r2, [pc, #180]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003866:	4a2b      	ldr	r2, [pc, #172]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387a:	d118      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fae0 	bl	8000e40 <HAL_GetTick>
 8003880:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003884:	e00d      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fd fadb 	bl	8000e40 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003890:	1ad2      	subs	r2, r2, r3
 8003892:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003896:	429a      	cmp	r2, r3
 8003898:	d903      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80038a0:	e005      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0eb      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d129      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c6:	d10e      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038c8:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038d8:	091a      	lsrs	r2, r3, #4
 80038da:	4b10      	ldr	r3, [pc, #64]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80038dc:	4013      	ands	r3, r2
 80038de:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6113      	str	r3, [r2, #16]
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80038e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038f0:	6113      	str	r3, [r2, #16]
 80038f2:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003904:	430b      	orrs	r3, r1
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
 8003908:	e00e      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003912:	e009      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003914:	58024400 	.word	0x58024400
 8003918:	58024800 	.word	0x58024800
 800391c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f002 0301 	and.w	r3, r2, #1
 8003934:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800393e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	f000 8089 	beq.w	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003950:	2b28      	cmp	r3, #40	@ 0x28
 8003952:	d86b      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003a35 	.word	0x08003a35
 8003960:	08003a2d 	.word	0x08003a2d
 8003964:	08003a2d 	.word	0x08003a2d
 8003968:	08003a2d 	.word	0x08003a2d
 800396c:	08003a2d 	.word	0x08003a2d
 8003970:	08003a2d 	.word	0x08003a2d
 8003974:	08003a2d 	.word	0x08003a2d
 8003978:	08003a2d 	.word	0x08003a2d
 800397c:	08003a01 	.word	0x08003a01
 8003980:	08003a2d 	.word	0x08003a2d
 8003984:	08003a2d 	.word	0x08003a2d
 8003988:	08003a2d 	.word	0x08003a2d
 800398c:	08003a2d 	.word	0x08003a2d
 8003990:	08003a2d 	.word	0x08003a2d
 8003994:	08003a2d 	.word	0x08003a2d
 8003998:	08003a2d 	.word	0x08003a2d
 800399c:	08003a17 	.word	0x08003a17
 80039a0:	08003a2d 	.word	0x08003a2d
 80039a4:	08003a2d 	.word	0x08003a2d
 80039a8:	08003a2d 	.word	0x08003a2d
 80039ac:	08003a2d 	.word	0x08003a2d
 80039b0:	08003a2d 	.word	0x08003a2d
 80039b4:	08003a2d 	.word	0x08003a2d
 80039b8:	08003a2d 	.word	0x08003a2d
 80039bc:	08003a35 	.word	0x08003a35
 80039c0:	08003a2d 	.word	0x08003a2d
 80039c4:	08003a2d 	.word	0x08003a2d
 80039c8:	08003a2d 	.word	0x08003a2d
 80039cc:	08003a2d 	.word	0x08003a2d
 80039d0:	08003a2d 	.word	0x08003a2d
 80039d4:	08003a2d 	.word	0x08003a2d
 80039d8:	08003a2d 	.word	0x08003a2d
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a2d 	.word	0x08003a2d
 80039e4:	08003a2d 	.word	0x08003a2d
 80039e8:	08003a2d 	.word	0x08003a2d
 80039ec:	08003a2d 	.word	0x08003a2d
 80039f0:	08003a2d 	.word	0x08003a2d
 80039f4:	08003a2d 	.word	0x08003a2d
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a35 	.word	0x08003a35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a04:	3308      	adds	r3, #8
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fd05 	bl	8004418 <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a14:	e00f      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	3328      	adds	r3, #40	@ 0x28
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fdac 	bl	800457c <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a2a:	e004      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a3e:	4bbf      	ldr	r3, [pc, #764]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4c:	4abb      	ldr	r2, [pc, #748]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a52:	e003      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 0302 	and.w	r3, r2, #2
 8003a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a76:	460b      	mov	r3, r1
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	d041      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d824      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003a86:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ad9 	.word	0x08003ad9
 8003a90:	08003aa5 	.word	0x08003aa5
 8003a94:	08003abb 	.word	0x08003abb
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ad9 	.word	0x08003ad9
 8003aa0:	08003ad9 	.word	0x08003ad9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fcb3 	bl	8004418 <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e00f      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	3328      	adds	r3, #40	@ 0x28
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd5a 	bl	800457c <RCCEx_PLL3_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ae2:	4b96      	ldr	r3, [pc, #600]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae6:	f023 0107 	bic.w	r1, r3, #7
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af0:	4a92      	ldr	r2, [pc, #584]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f002 0304 	and.w	r3, r2, #4
 8003b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d044      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d825      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b4d 	.word	0x08003b4d
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b81 	.word	0x08003b81
 8003b44:	08003b81 	.word	0x08003b81
 8003b48:	08003b81 	.word	0x08003b81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	3308      	adds	r3, #8
 8003b52:	2101      	movs	r1, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fc5f 	bl	8004418 <RCCEx_PLL2_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b60:	e00f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	3328      	adds	r3, #40	@ 0x28
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fd06 	bl	800457c <RCCEx_PLL3_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b76:	e004      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8e:	f023 0107 	bic.w	r1, r3, #7
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b9a:	4a68      	ldr	r2, [pc, #416]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f002 0320 	and.w	r3, r2, #32
 8003bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	d055      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd6:	d033      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bdc:	d82c      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be2:	d02f      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d826      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bee:	d02b      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003bf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bf4:	d820      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfa:	d012      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c00:	d81a      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d022      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0a:	d115      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	3308      	adds	r3, #8
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fbff 	bl	8004418 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c20:	e015      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	3328      	adds	r3, #40	@ 0x28
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fca6 	bl	800457c <RCCEx_PLL3_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c36:	e00a      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3e:	e006      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c40:	bf00      	nop
 8003c42:	e004      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c44:	bf00      	nop
 8003c46:	e002      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c48:	bf00      	nop
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c56:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	4a35      	ldr	r2, [pc, #212]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4313      	orrs	r3, r2
 8003c94:	d058      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ca2:	d033      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ca4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ca8:	d82c      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	d02f      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb4:	d826      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cba:	d02b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003cbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cc0:	d820      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc6:	d012      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ccc:	d81a      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d022      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	3308      	adds	r3, #8
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fb99 	bl	8004418 <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cec:	e015      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	3328      	adds	r3, #40	@ 0x28
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fc40 	bl	800457c <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d02:	e00a      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0a:	e006      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d10:	bf00      	nop
 8003d12:	e002      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d32:	4a02      	ldr	r2, [pc, #8]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d055      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d74:	d033      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003d76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d7a:	d82c      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d80:	d02f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d86:	d826      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d8c:	d02b      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003d8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d92:	d820      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d98:	d012      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d9e:	d81a      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d022      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da8:	d115      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb30 	bl	8004418 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e015      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3328      	adds	r3, #40	@ 0x28
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fbd7 	bl	800457c <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dde:	bf00      	nop
 8003de0:	e004      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003df4:	4ba1      	ldr	r3, [pc, #644]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e04:	4a9d      	ldr	r2, [pc, #628]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e06:	430b      	orrs	r3, r1
 8003e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e0a:	e003      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f002 0308 	and.w	r3, r2, #8
 8003e20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d01e      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	3328      	adds	r3, #40	@ 0x28
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fb96 	bl	800457c <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e5c:	4b87      	ldr	r3, [pc, #540]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e6c:	4a83      	ldr	r2, [pc, #524]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f002 0310 	and.w	r3, r2, #16
 8003e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	d01e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	3328      	adds	r3, #40	@ 0x28
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fb67 	bl	800457c <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eba:	4b70      	ldr	r3, [pc, #448]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eca:	4a6c      	ldr	r2, [pc, #432]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ee6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d03e      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003efc:	d022      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f02:	d81b      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0c:	d00b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f0e:	e015      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	3308      	adds	r3, #8
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fa7d 	bl	8004418 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f24:	e00f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	3328      	adds	r3, #40	@ 0x28
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb24 	bl	800457c <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f3a:	e004      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f5e:	4a47      	ldr	r2, [pc, #284]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d03b      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f96:	d01f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f9c:	d818      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa2:	d003      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fa8:	d007      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003faa:	e011      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fac:	4b33      	ldr	r3, [pc, #204]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	4a32      	ldr	r2, [pc, #200]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fb8:	e00f      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	3328      	adds	r3, #40	@ 0x28
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fada 	bl	800457c <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fce:	e004      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe2:	4b26      	ldr	r3, [pc, #152]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	4a22      	ldr	r2, [pc, #136]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800400e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004010:	2300      	movs	r3, #0
 8004012:	677b      	str	r3, [r7, #116]	@ 0x74
 8004014:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004018:	460b      	mov	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	d034      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d007      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	4b12      	ldr	r3, [pc, #72]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	4a11      	ldr	r2, [pc, #68]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800403a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800403c:	e00e      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	3308      	adds	r3, #8
 8004044:	2102      	movs	r1, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f9e6 	bl	8004418 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800405a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004068:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004072:	4a02      	ldr	r2, [pc, #8]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004074:	430b      	orrs	r3, r1
 8004076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004078:	e006      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004096:	2300      	movs	r3, #0
 8004098:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800409a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d00c      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	3328      	adds	r3, #40	@ 0x28
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa65 	bl	800457c <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80040cc:	2300      	movs	r3, #0
 80040ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d038      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e6:	d018      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80040e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ec:	d811      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f2:	d014      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f8:	d80b      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d011      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004102:	d106      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4bc3      	ldr	r3, [pc, #780]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	4ac2      	ldr	r2, [pc, #776]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004110:	e008      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004118:	e004      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800412c:	4bb9      	ldr	r3, [pc, #740]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800413c:	4ab5      	ldr	r2, [pc, #724]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6553      	str	r3, [r2, #84]	@ 0x54
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800415a:	2300      	movs	r3, #0
 800415c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800415e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004168:	4baa      	ldr	r3, [pc, #680]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800416a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004176:	4aa7      	ldr	r2, [pc, #668]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004178:	430b      	orrs	r3, r1
 800417a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004188:	653b      	str	r3, [r7, #80]	@ 0x50
 800418a:	2300      	movs	r3, #0
 800418c:	657b      	str	r3, [r7, #84]	@ 0x54
 800418e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004192:	460b      	mov	r3, r1
 8004194:	4313      	orrs	r3, r2
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004198:	4b9e      	ldr	r3, [pc, #632]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041a8:	4a9a      	ldr	r2, [pc, #616]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041bc:	2300      	movs	r3, #0
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ca:	4b92      	ldr	r3, [pc, #584]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d8:	4a8e      	ldr	r2, [pc, #568]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041da:	430b      	orrs	r3, r1
 80041dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80041ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ec:	2300      	movs	r3, #0
 80041ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041fa:	4b86      	ldr	r3, [pc, #536]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4a85      	ldr	r2, [pc, #532]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004200:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004204:	6113      	str	r3, [r2, #16]
 8004206:	4b83      	ldr	r3, [pc, #524]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004208:	6919      	ldr	r1, [r3, #16]
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004212:	4a80      	ldr	r2, [pc, #512]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004224:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004226:	2300      	movs	r3, #0
 8004228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800422a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004234:	4b77      	ldr	r3, [pc, #476]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004238:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	4a74      	ldr	r2, [pc, #464]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004244:	430b      	orrs	r3, r1
 8004246:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004254:	633b      	str	r3, [r7, #48]	@ 0x30
 8004256:	2300      	movs	r3, #0
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
 800425a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004264:	4b6b      	ldr	r3, [pc, #428]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004274:	4a67      	ldr	r2, [pc, #412]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004276:	430b      	orrs	r3, r1
 8004278:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	2100      	movs	r1, #0
 8004284:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800428c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d011      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	3308      	adds	r3, #8
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f8ba 	bl	8004418 <RCCEx_PLL2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	2100      	movs	r1, #0
 80042c4:	6239      	str	r1, [r7, #32]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80042cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d011      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	3308      	adds	r3, #8
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f89a 	bl	8004418 <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	2100      	movs	r1, #0
 8004304:	61b9      	str	r1, [r7, #24]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d011      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3308      	adds	r3, #8
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f87a 	bl	8004418 <RCCEx_PLL2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	2100      	movs	r1, #0
 8004344:	6139      	str	r1, [r7, #16]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d011      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	3328      	adds	r3, #40	@ 0x28
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f90c 	bl	800457c <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800436a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	2100      	movs	r1, #0
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d011      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3328      	adds	r3, #40	@ 0x28
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f8ec 	bl	800457c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	2100      	movs	r1, #0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	3328      	adds	r3, #40	@ 0x28
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f8cc 	bl	800457c <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80043fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
}
 8004408:	4618      	mov	r0, r3
 800440a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800440e:	46bd      	mov	sp, r7
 8004410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004414:	58024400 	.word	0x58024400

08004418 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004426:	4b53      	ldr	r3, [pc, #332]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 8004428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d101      	bne.n	8004436 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e099      	b.n	800456a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004436:	4b4f      	ldr	r3, [pc, #316]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800443c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004442:	f7fc fcfd 	bl	8000e40 <HAL_GetTick>
 8004446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004448:	e008      	b.n	800445c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800444a:	f7fc fcf9 	bl	8000e40 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e086      	b.n	800456a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800445c:	4b45      	ldr	r3, [pc, #276]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004468:	4b42      	ldr	r3, [pc, #264]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	493f      	ldr	r1, [pc, #252]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	628b      	str	r3, [r1, #40]	@ 0x28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	3b01      	subs	r3, #1
 8004482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	3b01      	subs	r3, #1
 800448c:	025b      	lsls	r3, r3, #9
 800448e:	b29b      	uxth	r3, r3
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	3b01      	subs	r3, #1
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	061b      	lsls	r3, r3, #24
 80044a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044ac:	4931      	ldr	r1, [pc, #196]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044b2:	4b30      	ldr	r3, [pc, #192]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	492d      	ldr	r1, [pc, #180]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	f023 0220 	bic.w	r2, r3, #32
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4928      	ldr	r1, [pc, #160]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044d6:	4b27      	ldr	r3, [pc, #156]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	4a26      	ldr	r2, [pc, #152]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044dc:	f023 0310 	bic.w	r3, r3, #16
 80044e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <RCCEx_PLL2_Config+0x160>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	69d2      	ldr	r2, [r2, #28]
 80044ee:	00d2      	lsls	r2, r2, #3
 80044f0:	4920      	ldr	r1, [pc, #128]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	f043 0310 	orr.w	r3, r3, #16
 8004500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004508:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	4a19      	ldr	r2, [pc, #100]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800450e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004514:	e00f      	b.n	8004536 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d106      	bne.n	800452a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800451c:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	4a14      	ldr	r2, [pc, #80]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004528:	e005      	b.n	8004536 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	4a11      	ldr	r2, [pc, #68]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 8004530:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004534:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004536:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a0e      	ldr	r2, [pc, #56]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800453c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fc fc7d 	bl	8000e40 <HAL_GetTick>
 8004546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004548:	e008      	b.n	800455c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800454a:	f7fc fc79 	bl	8000e40 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e006      	b.n	800456a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <RCCEx_PLL2_Config+0x15c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
 8004578:	ffff0007 	.word	0xffff0007

0800457c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800458a:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b03      	cmp	r3, #3
 8004594:	d101      	bne.n	800459a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e099      	b.n	80046ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800459a:	4b4f      	ldr	r3, [pc, #316]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4e      	ldr	r2, [pc, #312]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a6:	f7fc fc4b 	bl	8000e40 <HAL_GetTick>
 80045aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045ac:	e008      	b.n	80045c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ae:	f7fc fc47 	bl	8000e40 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e086      	b.n	80046ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045c0:	4b45      	ldr	r3, [pc, #276]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f0      	bne.n	80045ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045cc:	4b42      	ldr	r3, [pc, #264]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	051b      	lsls	r3, r3, #20
 80045da:	493f      	ldr	r1, [pc, #252]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	628b      	str	r3, [r1, #40]	@ 0x28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	025b      	lsls	r3, r3, #9
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	3b01      	subs	r3, #1
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004610:	4931      	ldr	r1, [pc, #196]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004616:	4b30      	ldr	r3, [pc, #192]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	492d      	ldr	r1, [pc, #180]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004628:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	4928      	ldr	r1, [pc, #160]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800463a:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	4a26      	ldr	r2, [pc, #152]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004644:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <RCCEx_PLL3_Config+0x160>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	69d2      	ldr	r2, [r2, #28]
 8004652:	00d2      	lsls	r2, r2, #3
 8004654:	4920      	ldr	r1, [pc, #128]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800465a:	4b1f      	ldr	r3, [pc, #124]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	4a1e      	ldr	r2, [pc, #120]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004664:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800466c:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	4a19      	ldr	r2, [pc, #100]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004678:	e00f      	b.n	800469a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004680:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004686:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800468a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800468c:	e005      	b.n	800469a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800468e:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 8004694:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004698:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800469a:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0e      	ldr	r2, [pc, #56]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a6:	f7fc fbcb 	bl	8000e40 <HAL_GetTick>
 80046aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ae:	f7fc fbc7 	bl	8000e40 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e006      	b.n	80046ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <RCCEx_PLL3_Config+0x15c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	58024400 	.word	0x58024400
 80046dc:	ffff0007 	.word	0xffff0007

080046e0 <__cvt>:
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e2:	ed2d 8b02 	vpush	{d8}
 80046e6:	eeb0 8b40 	vmov.f64	d8, d0
 80046ea:	b085      	sub	sp, #20
 80046ec:	4617      	mov	r7, r2
 80046ee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80046f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046f2:	ee18 2a90 	vmov	r2, s17
 80046f6:	f025 0520 	bic.w	r5, r5, #32
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	bfb6      	itet	lt
 80046fe:	222d      	movlt	r2, #45	@ 0x2d
 8004700:	2200      	movge	r2, #0
 8004702:	eeb1 8b40 	vneglt.f64	d8, d0
 8004706:	2d46      	cmp	r5, #70	@ 0x46
 8004708:	460c      	mov	r4, r1
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	d004      	beq.n	8004718 <__cvt+0x38>
 800470e:	2d45      	cmp	r5, #69	@ 0x45
 8004710:	d100      	bne.n	8004714 <__cvt+0x34>
 8004712:	3401      	adds	r4, #1
 8004714:	2102      	movs	r1, #2
 8004716:	e000      	b.n	800471a <__cvt+0x3a>
 8004718:	2103      	movs	r1, #3
 800471a:	ab03      	add	r3, sp, #12
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	ab02      	add	r3, sp, #8
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4622      	mov	r2, r4
 8004724:	4633      	mov	r3, r6
 8004726:	eeb0 0b48 	vmov.f64	d0, d8
 800472a:	f000 ff31 	bl	8005590 <_dtoa_r>
 800472e:	2d47      	cmp	r5, #71	@ 0x47
 8004730:	d114      	bne.n	800475c <__cvt+0x7c>
 8004732:	07fb      	lsls	r3, r7, #31
 8004734:	d50a      	bpl.n	800474c <__cvt+0x6c>
 8004736:	1902      	adds	r2, r0, r4
 8004738:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004740:	bf08      	it	eq
 8004742:	9203      	streq	r2, [sp, #12]
 8004744:	2130      	movs	r1, #48	@ 0x30
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	4293      	cmp	r3, r2
 800474a:	d319      	bcc.n	8004780 <__cvt+0xa0>
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004750:	1a1b      	subs	r3, r3, r0
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	b005      	add	sp, #20
 8004756:	ecbd 8b02 	vpop	{d8}
 800475a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475c:	2d46      	cmp	r5, #70	@ 0x46
 800475e:	eb00 0204 	add.w	r2, r0, r4
 8004762:	d1e9      	bne.n	8004738 <__cvt+0x58>
 8004764:	7803      	ldrb	r3, [r0, #0]
 8004766:	2b30      	cmp	r3, #48	@ 0x30
 8004768:	d107      	bne.n	800477a <__cvt+0x9a>
 800476a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004772:	bf1c      	itt	ne
 8004774:	f1c4 0401 	rsbne	r4, r4, #1
 8004778:	6034      	strne	r4, [r6, #0]
 800477a:	6833      	ldr	r3, [r6, #0]
 800477c:	441a      	add	r2, r3
 800477e:	e7db      	b.n	8004738 <__cvt+0x58>
 8004780:	1c5c      	adds	r4, r3, #1
 8004782:	9403      	str	r4, [sp, #12]
 8004784:	7019      	strb	r1, [r3, #0]
 8004786:	e7de      	b.n	8004746 <__cvt+0x66>

08004788 <__exponent>:
 8004788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800478a:	2900      	cmp	r1, #0
 800478c:	bfba      	itte	lt
 800478e:	4249      	neglt	r1, r1
 8004790:	232d      	movlt	r3, #45	@ 0x2d
 8004792:	232b      	movge	r3, #43	@ 0x2b
 8004794:	2909      	cmp	r1, #9
 8004796:	7002      	strb	r2, [r0, #0]
 8004798:	7043      	strb	r3, [r0, #1]
 800479a:	dd29      	ble.n	80047f0 <__exponent+0x68>
 800479c:	f10d 0307 	add.w	r3, sp, #7
 80047a0:	461d      	mov	r5, r3
 80047a2:	270a      	movs	r7, #10
 80047a4:	461a      	mov	r2, r3
 80047a6:	fbb1 f6f7 	udiv	r6, r1, r7
 80047aa:	fb07 1416 	mls	r4, r7, r6, r1
 80047ae:	3430      	adds	r4, #48	@ 0x30
 80047b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047b4:	460c      	mov	r4, r1
 80047b6:	2c63      	cmp	r4, #99	@ 0x63
 80047b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80047bc:	4631      	mov	r1, r6
 80047be:	dcf1      	bgt.n	80047a4 <__exponent+0x1c>
 80047c0:	3130      	adds	r1, #48	@ 0x30
 80047c2:	1e94      	subs	r4, r2, #2
 80047c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047c8:	1c41      	adds	r1, r0, #1
 80047ca:	4623      	mov	r3, r4
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	d30a      	bcc.n	80047e6 <__exponent+0x5e>
 80047d0:	f10d 0309 	add.w	r3, sp, #9
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	42ac      	cmp	r4, r5
 80047d8:	bf88      	it	hi
 80047da:	2300      	movhi	r3, #0
 80047dc:	3302      	adds	r3, #2
 80047de:	4403      	add	r3, r0
 80047e0:	1a18      	subs	r0, r3, r0
 80047e2:	b003      	add	sp, #12
 80047e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047ee:	e7ed      	b.n	80047cc <__exponent+0x44>
 80047f0:	2330      	movs	r3, #48	@ 0x30
 80047f2:	3130      	adds	r1, #48	@ 0x30
 80047f4:	7083      	strb	r3, [r0, #2]
 80047f6:	70c1      	strb	r1, [r0, #3]
 80047f8:	1d03      	adds	r3, r0, #4
 80047fa:	e7f1      	b.n	80047e0 <__exponent+0x58>
 80047fc:	0000      	movs	r0, r0
	...

08004800 <_printf_float>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	b08d      	sub	sp, #52	@ 0x34
 8004806:	460c      	mov	r4, r1
 8004808:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800480c:	4616      	mov	r6, r2
 800480e:	461f      	mov	r7, r3
 8004810:	4605      	mov	r5, r0
 8004812:	f000 fdad 	bl	8005370 <_localeconv_r>
 8004816:	f8d0 b000 	ldr.w	fp, [r0]
 800481a:	4658      	mov	r0, fp
 800481c:	f7fb fdb0 	bl	8000380 <strlen>
 8004820:	2300      	movs	r3, #0
 8004822:	930a      	str	r3, [sp, #40]	@ 0x28
 8004824:	f8d8 3000 	ldr.w	r3, [r8]
 8004828:	f894 9018 	ldrb.w	r9, [r4, #24]
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	9005      	str	r0, [sp, #20]
 8004830:	3307      	adds	r3, #7
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	f103 0108 	add.w	r1, r3, #8
 800483a:	f8c8 1000 	str.w	r1, [r8]
 800483e:	ed93 0b00 	vldr	d0, [r3]
 8004842:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004aa0 <_printf_float+0x2a0>
 8004846:	eeb0 7bc0 	vabs.f64	d7, d0
 800484a:	eeb4 7b46 	vcmp.f64	d7, d6
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004856:	dd24      	ble.n	80048a2 <_printf_float+0xa2>
 8004858:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	d502      	bpl.n	8004868 <_printf_float+0x68>
 8004862:	232d      	movs	r3, #45	@ 0x2d
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004868:	498f      	ldr	r1, [pc, #572]	@ (8004aa8 <_printf_float+0x2a8>)
 800486a:	4b90      	ldr	r3, [pc, #576]	@ (8004aac <_printf_float+0x2ac>)
 800486c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004870:	bf8c      	ite	hi
 8004872:	4688      	movhi	r8, r1
 8004874:	4698      	movls	r8, r3
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	2303      	movs	r3, #3
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	6022      	str	r2, [r4, #0]
 8004880:	f04f 0a00 	mov.w	sl, #0
 8004884:	9700      	str	r7, [sp, #0]
 8004886:	4633      	mov	r3, r6
 8004888:	aa0b      	add	r2, sp, #44	@ 0x2c
 800488a:	4621      	mov	r1, r4
 800488c:	4628      	mov	r0, r5
 800488e:	f000 f9d1 	bl	8004c34 <_printf_common>
 8004892:	3001      	adds	r0, #1
 8004894:	f040 8089 	bne.w	80049aa <_printf_float+0x1aa>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b00d      	add	sp, #52	@ 0x34
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	d709      	bvc.n	80048c0 <_printf_float+0xc0>
 80048ac:	ee10 3a90 	vmov	r3, s1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bfbc      	itt	lt
 80048b4:	232d      	movlt	r3, #45	@ 0x2d
 80048b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048ba:	497d      	ldr	r1, [pc, #500]	@ (8004ab0 <_printf_float+0x2b0>)
 80048bc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ab4 <_printf_float+0x2b4>)
 80048be:	e7d5      	b.n	800486c <_printf_float+0x6c>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	1c59      	adds	r1, r3, #1
 80048c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80048c8:	d139      	bne.n	800493e <_printf_float+0x13e>
 80048ca:	2306      	movs	r3, #6
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048d2:	2300      	movs	r3, #0
 80048d4:	6022      	str	r2, [r4, #0]
 80048d6:	9303      	str	r3, [sp, #12]
 80048d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80048da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80048de:	ab09      	add	r3, sp, #36	@ 0x24
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	6861      	ldr	r1, [r4, #4]
 80048e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048e8:	4628      	mov	r0, r5
 80048ea:	f7ff fef9 	bl	80046e0 <__cvt>
 80048ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048f4:	4680      	mov	r8, r0
 80048f6:	d129      	bne.n	800494c <_printf_float+0x14c>
 80048f8:	1cc8      	adds	r0, r1, #3
 80048fa:	db02      	blt.n	8004902 <_printf_float+0x102>
 80048fc:	6863      	ldr	r3, [r4, #4]
 80048fe:	4299      	cmp	r1, r3
 8004900:	dd41      	ble.n	8004986 <_printf_float+0x186>
 8004902:	f1a9 0902 	sub.w	r9, r9, #2
 8004906:	fa5f f989 	uxtb.w	r9, r9
 800490a:	3901      	subs	r1, #1
 800490c:	464a      	mov	r2, r9
 800490e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004912:	9109      	str	r1, [sp, #36]	@ 0x24
 8004914:	f7ff ff38 	bl	8004788 <__exponent>
 8004918:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800491a:	1813      	adds	r3, r2, r0
 800491c:	2a01      	cmp	r2, #1
 800491e:	4682      	mov	sl, r0
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	dc02      	bgt.n	800492a <_printf_float+0x12a>
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	07d2      	lsls	r2, r2, #31
 8004928:	d501      	bpl.n	800492e <_printf_float+0x12e>
 800492a:	3301      	adds	r3, #1
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0a6      	beq.n	8004884 <_printf_float+0x84>
 8004936:	232d      	movs	r3, #45	@ 0x2d
 8004938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800493c:	e7a2      	b.n	8004884 <_printf_float+0x84>
 800493e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004942:	d1c4      	bne.n	80048ce <_printf_float+0xce>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1c2      	bne.n	80048ce <_printf_float+0xce>
 8004948:	2301      	movs	r3, #1
 800494a:	e7bf      	b.n	80048cc <_printf_float+0xcc>
 800494c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004950:	d9db      	bls.n	800490a <_printf_float+0x10a>
 8004952:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004956:	d118      	bne.n	800498a <_printf_float+0x18a>
 8004958:	2900      	cmp	r1, #0
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	dd0b      	ble.n	8004976 <_printf_float+0x176>
 800495e:	6121      	str	r1, [r4, #16]
 8004960:	b913      	cbnz	r3, 8004968 <_printf_float+0x168>
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	07d0      	lsls	r0, r2, #31
 8004966:	d502      	bpl.n	800496e <_printf_float+0x16e>
 8004968:	3301      	adds	r3, #1
 800496a:	440b      	add	r3, r1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004970:	f04f 0a00 	mov.w	sl, #0
 8004974:	e7db      	b.n	800492e <_printf_float+0x12e>
 8004976:	b913      	cbnz	r3, 800497e <_printf_float+0x17e>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	07d2      	lsls	r2, r2, #31
 800497c:	d501      	bpl.n	8004982 <_printf_float+0x182>
 800497e:	3302      	adds	r3, #2
 8004980:	e7f4      	b.n	800496c <_printf_float+0x16c>
 8004982:	2301      	movs	r3, #1
 8004984:	e7f2      	b.n	800496c <_printf_float+0x16c>
 8004986:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800498a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800498c:	4299      	cmp	r1, r3
 800498e:	db05      	blt.n	800499c <_printf_float+0x19c>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	6121      	str	r1, [r4, #16]
 8004994:	07d8      	lsls	r0, r3, #31
 8004996:	d5ea      	bpl.n	800496e <_printf_float+0x16e>
 8004998:	1c4b      	adds	r3, r1, #1
 800499a:	e7e7      	b.n	800496c <_printf_float+0x16c>
 800499c:	2900      	cmp	r1, #0
 800499e:	bfd4      	ite	le
 80049a0:	f1c1 0202 	rsble	r2, r1, #2
 80049a4:	2201      	movgt	r2, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	e7e0      	b.n	800496c <_printf_float+0x16c>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	055a      	lsls	r2, r3, #21
 80049ae:	d407      	bmi.n	80049c0 <_printf_float+0x1c0>
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	4642      	mov	r2, r8
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	d12a      	bne.n	8004a14 <_printf_float+0x214>
 80049be:	e76b      	b.n	8004898 <_printf_float+0x98>
 80049c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80049c4:	f240 80e0 	bls.w	8004b88 <_printf_float+0x388>
 80049c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80049cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80049d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d4:	d133      	bne.n	8004a3e <_printf_float+0x23e>
 80049d6:	4a38      	ldr	r2, [pc, #224]	@ (8004ab8 <_printf_float+0x2b8>)
 80049d8:	2301      	movs	r3, #1
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	47b8      	blx	r7
 80049e0:	3001      	adds	r0, #1
 80049e2:	f43f af59 	beq.w	8004898 <_printf_float+0x98>
 80049e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049ea:	4543      	cmp	r3, r8
 80049ec:	db02      	blt.n	80049f4 <_printf_float+0x1f4>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	07d8      	lsls	r0, r3, #31
 80049f2:	d50f      	bpl.n	8004a14 <_printf_float+0x214>
 80049f4:	9b05      	ldr	r3, [sp, #20]
 80049f6:	465a      	mov	r2, fp
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f af4a 	beq.w	8004898 <_printf_float+0x98>
 8004a04:	f04f 0900 	mov.w	r9, #0
 8004a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a0c:	f104 0a1a 	add.w	sl, r4, #26
 8004a10:	45c8      	cmp	r8, r9
 8004a12:	dc09      	bgt.n	8004a28 <_printf_float+0x228>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	079b      	lsls	r3, r3, #30
 8004a18:	f100 8107 	bmi.w	8004c2a <_printf_float+0x42a>
 8004a1c:	68e0      	ldr	r0, [r4, #12]
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a20:	4298      	cmp	r0, r3
 8004a22:	bfb8      	it	lt
 8004a24:	4618      	movlt	r0, r3
 8004a26:	e739      	b.n	800489c <_printf_float+0x9c>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4652      	mov	r2, sl
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af30 	beq.w	8004898 <_printf_float+0x98>
 8004a38:	f109 0901 	add.w	r9, r9, #1
 8004a3c:	e7e8      	b.n	8004a10 <_printf_float+0x210>
 8004a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dc3b      	bgt.n	8004abc <_printf_float+0x2bc>
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <_printf_float+0x2b8>)
 8004a46:	2301      	movs	r3, #1
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f af22 	beq.w	8004898 <_printf_float+0x98>
 8004a54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a58:	ea59 0303 	orrs.w	r3, r9, r3
 8004a5c:	d102      	bne.n	8004a64 <_printf_float+0x264>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	07d9      	lsls	r1, r3, #31
 8004a62:	d5d7      	bpl.n	8004a14 <_printf_float+0x214>
 8004a64:	9b05      	ldr	r3, [sp, #20]
 8004a66:	465a      	mov	r2, fp
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f af12 	beq.w	8004898 <_printf_float+0x98>
 8004a74:	f04f 0a00 	mov.w	sl, #0
 8004a78:	f104 0b1a 	add.w	fp, r4, #26
 8004a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a7e:	425b      	negs	r3, r3
 8004a80:	4553      	cmp	r3, sl
 8004a82:	dc01      	bgt.n	8004a88 <_printf_float+0x288>
 8004a84:	464b      	mov	r3, r9
 8004a86:	e794      	b.n	80049b2 <_printf_float+0x1b2>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	465a      	mov	r2, fp
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f af00 	beq.w	8004898 <_printf_float+0x98>
 8004a98:	f10a 0a01 	add.w	sl, sl, #1
 8004a9c:	e7ee      	b.n	8004a7c <_printf_float+0x27c>
 8004a9e:	bf00      	nop
 8004aa0:	ffffffff 	.word	0xffffffff
 8004aa4:	7fefffff 	.word	0x7fefffff
 8004aa8:	080070e0 	.word	0x080070e0
 8004aac:	080070dc 	.word	0x080070dc
 8004ab0:	080070e8 	.word	0x080070e8
 8004ab4:	080070e4 	.word	0x080070e4
 8004ab8:	080070ec 	.word	0x080070ec
 8004abc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004abe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ac2:	4553      	cmp	r3, sl
 8004ac4:	bfa8      	it	ge
 8004ac6:	4653      	movge	r3, sl
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	4699      	mov	r9, r3
 8004acc:	dc37      	bgt.n	8004b3e <_printf_float+0x33e>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9307      	str	r3, [sp, #28]
 8004ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ad6:	f104 021a 	add.w	r2, r4, #26
 8004ada:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004adc:	9907      	ldr	r1, [sp, #28]
 8004ade:	9306      	str	r3, [sp, #24]
 8004ae0:	eba3 0309 	sub.w	r3, r3, r9
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	dc31      	bgt.n	8004b4c <_printf_float+0x34c>
 8004ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aea:	459a      	cmp	sl, r3
 8004aec:	dc3b      	bgt.n	8004b66 <_printf_float+0x366>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	07da      	lsls	r2, r3, #31
 8004af2:	d438      	bmi.n	8004b66 <_printf_float+0x366>
 8004af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af6:	ebaa 0903 	sub.w	r9, sl, r3
 8004afa:	9b06      	ldr	r3, [sp, #24]
 8004afc:	ebaa 0303 	sub.w	r3, sl, r3
 8004b00:	4599      	cmp	r9, r3
 8004b02:	bfa8      	it	ge
 8004b04:	4699      	movge	r9, r3
 8004b06:	f1b9 0f00 	cmp.w	r9, #0
 8004b0a:	dc34      	bgt.n	8004b76 <_printf_float+0x376>
 8004b0c:	f04f 0800 	mov.w	r8, #0
 8004b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b14:	f104 0b1a 	add.w	fp, r4, #26
 8004b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004b1e:	eba3 0309 	sub.w	r3, r3, r9
 8004b22:	4543      	cmp	r3, r8
 8004b24:	f77f af76 	ble.w	8004a14 <_printf_float+0x214>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	465a      	mov	r2, fp
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	f43f aeb0 	beq.w	8004898 <_printf_float+0x98>
 8004b38:	f108 0801 	add.w	r8, r8, #1
 8004b3c:	e7ec      	b.n	8004b18 <_printf_float+0x318>
 8004b3e:	4642      	mov	r2, r8
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	d1c1      	bne.n	8004ace <_printf_float+0x2ce>
 8004b4a:	e6a5      	b.n	8004898 <_printf_float+0x98>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	9206      	str	r2, [sp, #24]
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	f43f ae9e 	beq.w	8004898 <_printf_float+0x98>
 8004b5c:	9b07      	ldr	r3, [sp, #28]
 8004b5e:	9a06      	ldr	r2, [sp, #24]
 8004b60:	3301      	adds	r3, #1
 8004b62:	9307      	str	r3, [sp, #28]
 8004b64:	e7b9      	b.n	8004ada <_printf_float+0x2da>
 8004b66:	9b05      	ldr	r3, [sp, #20]
 8004b68:	465a      	mov	r2, fp
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	d1bf      	bne.n	8004af4 <_printf_float+0x2f4>
 8004b74:	e690      	b.n	8004898 <_printf_float+0x98>
 8004b76:	9a06      	ldr	r2, [sp, #24]
 8004b78:	464b      	mov	r3, r9
 8004b7a:	4442      	add	r2, r8
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b8      	blx	r7
 8004b82:	3001      	adds	r0, #1
 8004b84:	d1c2      	bne.n	8004b0c <_printf_float+0x30c>
 8004b86:	e687      	b.n	8004898 <_printf_float+0x98>
 8004b88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004b8c:	f1b9 0f01 	cmp.w	r9, #1
 8004b90:	dc01      	bgt.n	8004b96 <_printf_float+0x396>
 8004b92:	07db      	lsls	r3, r3, #31
 8004b94:	d536      	bpl.n	8004c04 <_printf_float+0x404>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4642      	mov	r2, r8
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b8      	blx	r7
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	f43f ae79 	beq.w	8004898 <_printf_float+0x98>
 8004ba6:	9b05      	ldr	r3, [sp, #20]
 8004ba8:	465a      	mov	r2, fp
 8004baa:	4631      	mov	r1, r6
 8004bac:	4628      	mov	r0, r5
 8004bae:	47b8      	blx	r7
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	f43f ae71 	beq.w	8004898 <_printf_float+0x98>
 8004bb6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004bba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	f109 39ff 	add.w	r9, r9, #4294967295
 8004bc6:	d018      	beq.n	8004bfa <_printf_float+0x3fa>
 8004bc8:	464b      	mov	r3, r9
 8004bca:	f108 0201 	add.w	r2, r8, #1
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d10c      	bne.n	8004bf2 <_printf_float+0x3f2>
 8004bd8:	e65e      	b.n	8004898 <_printf_float+0x98>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	465a      	mov	r2, fp
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	f43f ae57 	beq.w	8004898 <_printf_float+0x98>
 8004bea:	f108 0801 	add.w	r8, r8, #1
 8004bee:	45c8      	cmp	r8, r9
 8004bf0:	dbf3      	blt.n	8004bda <_printf_float+0x3da>
 8004bf2:	4653      	mov	r3, sl
 8004bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bf8:	e6dc      	b.n	80049b4 <_printf_float+0x1b4>
 8004bfa:	f04f 0800 	mov.w	r8, #0
 8004bfe:	f104 0b1a 	add.w	fp, r4, #26
 8004c02:	e7f4      	b.n	8004bee <_printf_float+0x3ee>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4642      	mov	r2, r8
 8004c08:	e7e1      	b.n	8004bce <_printf_float+0x3ce>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	464a      	mov	r2, r9
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f ae3f 	beq.w	8004898 <_printf_float+0x98>
 8004c1a:	f108 0801 	add.w	r8, r8, #1
 8004c1e:	68e3      	ldr	r3, [r4, #12]
 8004c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c22:	1a5b      	subs	r3, r3, r1
 8004c24:	4543      	cmp	r3, r8
 8004c26:	dcf0      	bgt.n	8004c0a <_printf_float+0x40a>
 8004c28:	e6f8      	b.n	8004a1c <_printf_float+0x21c>
 8004c2a:	f04f 0800 	mov.w	r8, #0
 8004c2e:	f104 0919 	add.w	r9, r4, #25
 8004c32:	e7f4      	b.n	8004c1e <_printf_float+0x41e>

08004c34 <_printf_common>:
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	4616      	mov	r6, r2
 8004c3a:	4698      	mov	r8, r3
 8004c3c:	688a      	ldr	r2, [r1, #8]
 8004c3e:	690b      	ldr	r3, [r1, #16]
 8004c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c44:	4293      	cmp	r3, r2
 8004c46:	bfb8      	it	lt
 8004c48:	4613      	movlt	r3, r2
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c50:	4607      	mov	r7, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	b10a      	cbz	r2, 8004c5a <_printf_common+0x26>
 8004c56:	3301      	adds	r3, #1
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	0699      	lsls	r1, r3, #26
 8004c5e:	bf42      	ittt	mi
 8004c60:	6833      	ldrmi	r3, [r6, #0]
 8004c62:	3302      	addmi	r3, #2
 8004c64:	6033      	strmi	r3, [r6, #0]
 8004c66:	6825      	ldr	r5, [r4, #0]
 8004c68:	f015 0506 	ands.w	r5, r5, #6
 8004c6c:	d106      	bne.n	8004c7c <_printf_common+0x48>
 8004c6e:	f104 0a19 	add.w	sl, r4, #25
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	6832      	ldr	r2, [r6, #0]
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	dc26      	bgt.n	8004cca <_printf_common+0x96>
 8004c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	3b00      	subs	r3, #0
 8004c84:	bf18      	it	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	0692      	lsls	r2, r2, #26
 8004c8a:	d42b      	bmi.n	8004ce4 <_printf_common+0xb0>
 8004c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c90:	4641      	mov	r1, r8
 8004c92:	4638      	mov	r0, r7
 8004c94:	47c8      	blx	r9
 8004c96:	3001      	adds	r0, #1
 8004c98:	d01e      	beq.n	8004cd8 <_printf_common+0xa4>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	f003 0306 	and.w	r3, r3, #6
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf02      	ittt	eq
 8004ca6:	68e5      	ldreq	r5, [r4, #12]
 8004ca8:	6833      	ldreq	r3, [r6, #0]
 8004caa:	1aed      	subeq	r5, r5, r3
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	bf0c      	ite	eq
 8004cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb4:	2500      	movne	r5, #0
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bfc4      	itt	gt
 8004cba:	1a9b      	subgt	r3, r3, r2
 8004cbc:	18ed      	addgt	r5, r5, r3
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	341a      	adds	r4, #26
 8004cc2:	42b5      	cmp	r5, r6
 8004cc4:	d11a      	bne.n	8004cfc <_printf_common+0xc8>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e008      	b.n	8004cdc <_printf_common+0xa8>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4641      	mov	r1, r8
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	47c8      	blx	r9
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d103      	bne.n	8004ce0 <_printf_common+0xac>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7c6      	b.n	8004c72 <_printf_common+0x3e>
 8004ce4:	18e1      	adds	r1, r4, r3
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	2030      	movs	r0, #48	@ 0x30
 8004cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cee:	4422      	add	r2, r4
 8004cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	e7c7      	b.n	8004c8c <_printf_common+0x58>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4622      	mov	r2, r4
 8004d00:	4641      	mov	r1, r8
 8004d02:	4638      	mov	r0, r7
 8004d04:	47c8      	blx	r9
 8004d06:	3001      	adds	r0, #1
 8004d08:	d0e6      	beq.n	8004cd8 <_printf_common+0xa4>
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7d9      	b.n	8004cc2 <_printf_common+0x8e>
	...

08004d10 <_printf_i>:
 8004d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	7e0f      	ldrb	r7, [r1, #24]
 8004d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d18:	2f78      	cmp	r7, #120	@ 0x78
 8004d1a:	4691      	mov	r9, r2
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	469a      	mov	sl, r3
 8004d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d26:	d807      	bhi.n	8004d38 <_printf_i+0x28>
 8004d28:	2f62      	cmp	r7, #98	@ 0x62
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x32>
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	f000 80d1 	beq.w	8004ed4 <_printf_i+0x1c4>
 8004d32:	2f58      	cmp	r7, #88	@ 0x58
 8004d34:	f000 80b8 	beq.w	8004ea8 <_printf_i+0x198>
 8004d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d40:	e03a      	b.n	8004db8 <_printf_i+0xa8>
 8004d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d46:	2b15      	cmp	r3, #21
 8004d48:	d8f6      	bhi.n	8004d38 <_printf_i+0x28>
 8004d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d50 <_printf_i+0x40>)
 8004d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004d39 	.word	0x08004d39
 8004d5c:	08004d39 	.word	0x08004d39
 8004d60:	08004d39 	.word	0x08004d39
 8004d64:	08004d39 	.word	0x08004d39
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004d39 	.word	0x08004d39
 8004d70:	08004d39 	.word	0x08004d39
 8004d74:	08004d39 	.word	0x08004d39
 8004d78:	08004d39 	.word	0x08004d39
 8004d7c:	08004ebb 	.word	0x08004ebb
 8004d80:	08004de7 	.word	0x08004de7
 8004d84:	08004e75 	.word	0x08004e75
 8004d88:	08004d39 	.word	0x08004d39
 8004d8c:	08004d39 	.word	0x08004d39
 8004d90:	08004edd 	.word	0x08004edd
 8004d94:	08004d39 	.word	0x08004d39
 8004d98:	08004de7 	.word	0x08004de7
 8004d9c:	08004d39 	.word	0x08004d39
 8004da0:	08004d39 	.word	0x08004d39
 8004da4:	08004e7d 	.word	0x08004e7d
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6032      	str	r2, [r6, #0]
 8004db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db8:	2301      	movs	r3, #1
 8004dba:	e09c      	b.n	8004ef6 <_printf_i+0x1e6>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	6031      	str	r1, [r6, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xbc>
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	e003      	b.n	8004dd4 <_printf_i+0xc4>
 8004dcc:	0645      	lsls	r5, r0, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xb8>
 8004dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dd4:	2d00      	cmp	r5, #0
 8004dd6:	da03      	bge.n	8004de0 <_printf_i+0xd0>
 8004dd8:	232d      	movs	r3, #45	@ 0x2d
 8004dda:	426d      	negs	r5, r5
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de0:	4858      	ldr	r0, [pc, #352]	@ (8004f44 <_printf_i+0x234>)
 8004de2:	230a      	movs	r3, #10
 8004de4:	e011      	b.n	8004e0a <_printf_i+0xfa>
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	6833      	ldr	r3, [r6, #0]
 8004dea:	0608      	lsls	r0, r1, #24
 8004dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004df0:	d402      	bmi.n	8004df8 <_printf_i+0xe8>
 8004df2:	0649      	lsls	r1, r1, #25
 8004df4:	bf48      	it	mi
 8004df6:	b2ad      	uxthmi	r5, r5
 8004df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dfa:	4852      	ldr	r0, [pc, #328]	@ (8004f44 <_printf_i+0x234>)
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	bf14      	ite	ne
 8004e00:	230a      	movne	r3, #10
 8004e02:	2308      	moveq	r3, #8
 8004e04:	2100      	movs	r1, #0
 8004e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e0a:	6866      	ldr	r6, [r4, #4]
 8004e0c:	60a6      	str	r6, [r4, #8]
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	db05      	blt.n	8004e1e <_printf_i+0x10e>
 8004e12:	6821      	ldr	r1, [r4, #0]
 8004e14:	432e      	orrs	r6, r5
 8004e16:	f021 0104 	bic.w	r1, r1, #4
 8004e1a:	6021      	str	r1, [r4, #0]
 8004e1c:	d04b      	beq.n	8004eb6 <_printf_i+0x1a6>
 8004e1e:	4616      	mov	r6, r2
 8004e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e24:	fb03 5711 	mls	r7, r3, r1, r5
 8004e28:	5dc7      	ldrb	r7, [r0, r7]
 8004e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e2e:	462f      	mov	r7, r5
 8004e30:	42bb      	cmp	r3, r7
 8004e32:	460d      	mov	r5, r1
 8004e34:	d9f4      	bls.n	8004e20 <_printf_i+0x110>
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d10b      	bne.n	8004e52 <_printf_i+0x142>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	07df      	lsls	r7, r3, #31
 8004e3e:	d508      	bpl.n	8004e52 <_printf_i+0x142>
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	6861      	ldr	r1, [r4, #4]
 8004e44:	4299      	cmp	r1, r3
 8004e46:	bfde      	ittt	le
 8004e48:	2330      	movle	r3, #48	@ 0x30
 8004e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e52:	1b92      	subs	r2, r2, r6
 8004e54:	6122      	str	r2, [r4, #16]
 8004e56:	f8cd a000 	str.w	sl, [sp]
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	aa03      	add	r2, sp, #12
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4640      	mov	r0, r8
 8004e62:	f7ff fee7 	bl	8004c34 <_printf_common>
 8004e66:	3001      	adds	r0, #1
 8004e68:	d14a      	bne.n	8004f00 <_printf_i+0x1f0>
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	b004      	add	sp, #16
 8004e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	f043 0320 	orr.w	r3, r3, #32
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	4832      	ldr	r0, [pc, #200]	@ (8004f48 <_printf_i+0x238>)
 8004e7e:	2778      	movs	r7, #120	@ 0x78
 8004e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	6831      	ldr	r1, [r6, #0]
 8004e88:	061f      	lsls	r7, r3, #24
 8004e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e8e:	d402      	bmi.n	8004e96 <_printf_i+0x186>
 8004e90:	065f      	lsls	r7, r3, #25
 8004e92:	bf48      	it	mi
 8004e94:	b2ad      	uxthmi	r5, r5
 8004e96:	6031      	str	r1, [r6, #0]
 8004e98:	07d9      	lsls	r1, r3, #31
 8004e9a:	bf44      	itt	mi
 8004e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004ea0:	6023      	strmi	r3, [r4, #0]
 8004ea2:	b11d      	cbz	r5, 8004eac <_printf_i+0x19c>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	e7ad      	b.n	8004e04 <_printf_i+0xf4>
 8004ea8:	4826      	ldr	r0, [pc, #152]	@ (8004f44 <_printf_i+0x234>)
 8004eaa:	e7e9      	b.n	8004e80 <_printf_i+0x170>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f023 0320 	bic.w	r3, r3, #32
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	e7f6      	b.n	8004ea4 <_printf_i+0x194>
 8004eb6:	4616      	mov	r6, r2
 8004eb8:	e7bd      	b.n	8004e36 <_printf_i+0x126>
 8004eba:	6833      	ldr	r3, [r6, #0]
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	6961      	ldr	r1, [r4, #20]
 8004ec0:	1d18      	adds	r0, r3, #4
 8004ec2:	6030      	str	r0, [r6, #0]
 8004ec4:	062e      	lsls	r6, r5, #24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	d501      	bpl.n	8004ece <_printf_i+0x1be>
 8004eca:	6019      	str	r1, [r3, #0]
 8004ecc:	e002      	b.n	8004ed4 <_printf_i+0x1c4>
 8004ece:	0668      	lsls	r0, r5, #25
 8004ed0:	d5fb      	bpl.n	8004eca <_printf_i+0x1ba>
 8004ed2:	8019      	strh	r1, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	4616      	mov	r6, r2
 8004eda:	e7bc      	b.n	8004e56 <_printf_i+0x146>
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	6032      	str	r2, [r6, #0]
 8004ee2:	681e      	ldr	r6, [r3, #0]
 8004ee4:	6862      	ldr	r2, [r4, #4]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7fb f9f9 	bl	80002e0 <memchr>
 8004eee:	b108      	cbz	r0, 8004ef4 <_printf_i+0x1e4>
 8004ef0:	1b80      	subs	r0, r0, r6
 8004ef2:	6060      	str	r0, [r4, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efe:	e7aa      	b.n	8004e56 <_printf_i+0x146>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	4632      	mov	r2, r6
 8004f04:	4649      	mov	r1, r9
 8004f06:	4640      	mov	r0, r8
 8004f08:	47d0      	blx	sl
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d0ad      	beq.n	8004e6a <_printf_i+0x15a>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	079b      	lsls	r3, r3, #30
 8004f12:	d413      	bmi.n	8004f3c <_printf_i+0x22c>
 8004f14:	68e0      	ldr	r0, [r4, #12]
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	4298      	cmp	r0, r3
 8004f1a:	bfb8      	it	lt
 8004f1c:	4618      	movlt	r0, r3
 8004f1e:	e7a6      	b.n	8004e6e <_printf_i+0x15e>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4632      	mov	r2, r6
 8004f24:	4649      	mov	r1, r9
 8004f26:	4640      	mov	r0, r8
 8004f28:	47d0      	blx	sl
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d09d      	beq.n	8004e6a <_printf_i+0x15a>
 8004f2e:	3501      	adds	r5, #1
 8004f30:	68e3      	ldr	r3, [r4, #12]
 8004f32:	9903      	ldr	r1, [sp, #12]
 8004f34:	1a5b      	subs	r3, r3, r1
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	dcf2      	bgt.n	8004f20 <_printf_i+0x210>
 8004f3a:	e7eb      	b.n	8004f14 <_printf_i+0x204>
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	f104 0619 	add.w	r6, r4, #25
 8004f42:	e7f5      	b.n	8004f30 <_printf_i+0x220>
 8004f44:	080070ee 	.word	0x080070ee
 8004f48:	080070ff 	.word	0x080070ff

08004f4c <std>:
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	e9c0 3300 	strd	r3, r3, [r0]
 8004f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5a:	6083      	str	r3, [r0, #8]
 8004f5c:	8181      	strh	r1, [r0, #12]
 8004f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f60:	81c2      	strh	r2, [r0, #14]
 8004f62:	6183      	str	r3, [r0, #24]
 8004f64:	4619      	mov	r1, r3
 8004f66:	2208      	movs	r2, #8
 8004f68:	305c      	adds	r0, #92	@ 0x5c
 8004f6a:	f000 f9f9 	bl	8005360 <memset>
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <std+0x58>)
 8004f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <std+0x5c>)
 8004f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <std+0x60>)
 8004f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <std+0x64>)
 8004f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x68>)
 8004f80:	6224      	str	r4, [r4, #32]
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d006      	beq.n	8004f94 <std+0x48>
 8004f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f8a:	4294      	cmp	r4, r2
 8004f8c:	d002      	beq.n	8004f94 <std+0x48>
 8004f8e:	33d0      	adds	r3, #208	@ 0xd0
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d105      	bne.n	8004fa0 <std+0x54>
 8004f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9c:	f000 ba5c 	b.w	8005458 <__retarget_lock_init_recursive>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	080051b1 	.word	0x080051b1
 8004fa8:	080051d3 	.word	0x080051d3
 8004fac:	0800520b 	.word	0x0800520b
 8004fb0:	0800522f 	.word	0x0800522f
 8004fb4:	2400034c 	.word	0x2400034c

08004fb8 <stdio_exit_handler>:
 8004fb8:	4a02      	ldr	r2, [pc, #8]	@ (8004fc4 <stdio_exit_handler+0xc>)
 8004fba:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <stdio_exit_handler+0x10>)
 8004fbc:	4803      	ldr	r0, [pc, #12]	@ (8004fcc <stdio_exit_handler+0x14>)
 8004fbe:	f000 b869 	b.w	8005094 <_fwalk_sglue>
 8004fc2:	bf00      	nop
 8004fc4:	24000010 	.word	0x24000010
 8004fc8:	08006ccd 	.word	0x08006ccd
 8004fcc:	24000020 	.word	0x24000020

08004fd0 <cleanup_stdio>:
 8004fd0:	6841      	ldr	r1, [r0, #4]
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <cleanup_stdio+0x34>)
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	4604      	mov	r4, r0
 8004fda:	d001      	beq.n	8004fe0 <cleanup_stdio+0x10>
 8004fdc:	f001 fe76 	bl	8006ccc <_fflush_r>
 8004fe0:	68a1      	ldr	r1, [r4, #8]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <cleanup_stdio+0x38>)
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <cleanup_stdio+0x1e>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f001 fe6f 	bl	8006ccc <_fflush_r>
 8004fee:	68e1      	ldr	r1, [r4, #12]
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <cleanup_stdio+0x3c>)
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d004      	beq.n	8005000 <cleanup_stdio+0x30>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffc:	f001 be66 	b.w	8006ccc <_fflush_r>
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	2400034c 	.word	0x2400034c
 8005008:	240003b4 	.word	0x240003b4
 800500c:	2400041c 	.word	0x2400041c

08005010 <global_stdio_init.part.0>:
 8005010:	b510      	push	{r4, lr}
 8005012:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <global_stdio_init.part.0+0x30>)
 8005014:	4c0b      	ldr	r4, [pc, #44]	@ (8005044 <global_stdio_init.part.0+0x34>)
 8005016:	4a0c      	ldr	r2, [pc, #48]	@ (8005048 <global_stdio_init.part.0+0x38>)
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	4620      	mov	r0, r4
 800501c:	2200      	movs	r2, #0
 800501e:	2104      	movs	r1, #4
 8005020:	f7ff ff94 	bl	8004f4c <std>
 8005024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005028:	2201      	movs	r2, #1
 800502a:	2109      	movs	r1, #9
 800502c:	f7ff ff8e 	bl	8004f4c <std>
 8005030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005034:	2202      	movs	r2, #2
 8005036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503a:	2112      	movs	r1, #18
 800503c:	f7ff bf86 	b.w	8004f4c <std>
 8005040:	24000484 	.word	0x24000484
 8005044:	2400034c 	.word	0x2400034c
 8005048:	08004fb9 	.word	0x08004fb9

0800504c <__sfp_lock_acquire>:
 800504c:	4801      	ldr	r0, [pc, #4]	@ (8005054 <__sfp_lock_acquire+0x8>)
 800504e:	f000 ba04 	b.w	800545a <__retarget_lock_acquire_recursive>
 8005052:	bf00      	nop
 8005054:	2400048d 	.word	0x2400048d

08005058 <__sfp_lock_release>:
 8005058:	4801      	ldr	r0, [pc, #4]	@ (8005060 <__sfp_lock_release+0x8>)
 800505a:	f000 b9ff 	b.w	800545c <__retarget_lock_release_recursive>
 800505e:	bf00      	nop
 8005060:	2400048d 	.word	0x2400048d

08005064 <__sinit>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4604      	mov	r4, r0
 8005068:	f7ff fff0 	bl	800504c <__sfp_lock_acquire>
 800506c:	6a23      	ldr	r3, [r4, #32]
 800506e:	b11b      	cbz	r3, 8005078 <__sinit+0x14>
 8005070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005074:	f7ff bff0 	b.w	8005058 <__sfp_lock_release>
 8005078:	4b04      	ldr	r3, [pc, #16]	@ (800508c <__sinit+0x28>)
 800507a:	6223      	str	r3, [r4, #32]
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__sinit+0x2c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f5      	bne.n	8005070 <__sinit+0xc>
 8005084:	f7ff ffc4 	bl	8005010 <global_stdio_init.part.0>
 8005088:	e7f2      	b.n	8005070 <__sinit+0xc>
 800508a:	bf00      	nop
 800508c:	08004fd1 	.word	0x08004fd1
 8005090:	24000484 	.word	0x24000484

08005094 <_fwalk_sglue>:
 8005094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005098:	4607      	mov	r7, r0
 800509a:	4688      	mov	r8, r1
 800509c:	4614      	mov	r4, r2
 800509e:	2600      	movs	r6, #0
 80050a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a4:	f1b9 0901 	subs.w	r9, r9, #1
 80050a8:	d505      	bpl.n	80050b6 <_fwalk_sglue+0x22>
 80050aa:	6824      	ldr	r4, [r4, #0]
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d1f7      	bne.n	80050a0 <_fwalk_sglue+0xc>
 80050b0:	4630      	mov	r0, r6
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	89ab      	ldrh	r3, [r5, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d907      	bls.n	80050cc <_fwalk_sglue+0x38>
 80050bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c0:	3301      	adds	r3, #1
 80050c2:	d003      	beq.n	80050cc <_fwalk_sglue+0x38>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	4306      	orrs	r6, r0
 80050cc:	3568      	adds	r5, #104	@ 0x68
 80050ce:	e7e9      	b.n	80050a4 <_fwalk_sglue+0x10>

080050d0 <iprintf>:
 80050d0:	b40f      	push	{r0, r1, r2, r3}
 80050d2:	b507      	push	{r0, r1, r2, lr}
 80050d4:	4906      	ldr	r1, [pc, #24]	@ (80050f0 <iprintf+0x20>)
 80050d6:	ab04      	add	r3, sp, #16
 80050d8:	6808      	ldr	r0, [r1, #0]
 80050da:	f853 2b04 	ldr.w	r2, [r3], #4
 80050de:	6881      	ldr	r1, [r0, #8]
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	f001 fc57 	bl	8006994 <_vfiprintf_r>
 80050e6:	b003      	add	sp, #12
 80050e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ec:	b004      	add	sp, #16
 80050ee:	4770      	bx	lr
 80050f0:	2400001c 	.word	0x2400001c

080050f4 <_puts_r>:
 80050f4:	6a03      	ldr	r3, [r0, #32]
 80050f6:	b570      	push	{r4, r5, r6, lr}
 80050f8:	6884      	ldr	r4, [r0, #8]
 80050fa:	4605      	mov	r5, r0
 80050fc:	460e      	mov	r6, r1
 80050fe:	b90b      	cbnz	r3, 8005104 <_puts_r+0x10>
 8005100:	f7ff ffb0 	bl	8005064 <__sinit>
 8005104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005106:	07db      	lsls	r3, r3, #31
 8005108:	d405      	bmi.n	8005116 <_puts_r+0x22>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	0598      	lsls	r0, r3, #22
 800510e:	d402      	bmi.n	8005116 <_puts_r+0x22>
 8005110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005112:	f000 f9a2 	bl	800545a <__retarget_lock_acquire_recursive>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	0719      	lsls	r1, r3, #28
 800511a:	d502      	bpl.n	8005122 <_puts_r+0x2e>
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d135      	bne.n	800518e <_puts_r+0x9a>
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f8c5 	bl	80052b4 <__swsetup_r>
 800512a:	b380      	cbz	r0, 800518e <_puts_r+0x9a>
 800512c:	f04f 35ff 	mov.w	r5, #4294967295
 8005130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005132:	07da      	lsls	r2, r3, #31
 8005134:	d405      	bmi.n	8005142 <_puts_r+0x4e>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	059b      	lsls	r3, r3, #22
 800513a:	d402      	bmi.n	8005142 <_puts_r+0x4e>
 800513c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800513e:	f000 f98d 	bl	800545c <__retarget_lock_release_recursive>
 8005142:	4628      	mov	r0, r5
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	2b00      	cmp	r3, #0
 8005148:	da04      	bge.n	8005154 <_puts_r+0x60>
 800514a:	69a2      	ldr	r2, [r4, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	dc17      	bgt.n	8005180 <_puts_r+0x8c>
 8005150:	290a      	cmp	r1, #10
 8005152:	d015      	beq.n	8005180 <_puts_r+0x8c>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	7019      	strb	r1, [r3, #0]
 800515c:	68a3      	ldr	r3, [r4, #8]
 800515e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005162:	3b01      	subs	r3, #1
 8005164:	60a3      	str	r3, [r4, #8]
 8005166:	2900      	cmp	r1, #0
 8005168:	d1ed      	bne.n	8005146 <_puts_r+0x52>
 800516a:	2b00      	cmp	r3, #0
 800516c:	da11      	bge.n	8005192 <_puts_r+0x9e>
 800516e:	4622      	mov	r2, r4
 8005170:	210a      	movs	r1, #10
 8005172:	4628      	mov	r0, r5
 8005174:	f000 f85f 	bl	8005236 <__swbuf_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d0d7      	beq.n	800512c <_puts_r+0x38>
 800517c:	250a      	movs	r5, #10
 800517e:	e7d7      	b.n	8005130 <_puts_r+0x3c>
 8005180:	4622      	mov	r2, r4
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f857 	bl	8005236 <__swbuf_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d1e7      	bne.n	800515c <_puts_r+0x68>
 800518c:	e7ce      	b.n	800512c <_puts_r+0x38>
 800518e:	3e01      	subs	r6, #1
 8005190:	e7e4      	b.n	800515c <_puts_r+0x68>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	6022      	str	r2, [r4, #0]
 8005198:	220a      	movs	r2, #10
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e7ee      	b.n	800517c <_puts_r+0x88>
	...

080051a0 <puts>:
 80051a0:	4b02      	ldr	r3, [pc, #8]	@ (80051ac <puts+0xc>)
 80051a2:	4601      	mov	r1, r0
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	f7ff bfa5 	b.w	80050f4 <_puts_r>
 80051aa:	bf00      	nop
 80051ac:	2400001c 	.word	0x2400001c

080051b0 <__sread>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	460c      	mov	r4, r1
 80051b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b8:	f000 f900 	bl	80053bc <_read_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	bfab      	itete	ge
 80051c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051c2:	89a3      	ldrhlt	r3, [r4, #12]
 80051c4:	181b      	addge	r3, r3, r0
 80051c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051ca:	bfac      	ite	ge
 80051cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051ce:	81a3      	strhlt	r3, [r4, #12]
 80051d0:	bd10      	pop	{r4, pc}

080051d2 <__swrite>:
 80051d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d6:	461f      	mov	r7, r3
 80051d8:	898b      	ldrh	r3, [r1, #12]
 80051da:	05db      	lsls	r3, r3, #23
 80051dc:	4605      	mov	r5, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	4616      	mov	r6, r2
 80051e2:	d505      	bpl.n	80051f0 <__swrite+0x1e>
 80051e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e8:	2302      	movs	r3, #2
 80051ea:	2200      	movs	r2, #0
 80051ec:	f000 f8d4 	bl	8005398 <_lseek_r>
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051fa:	81a3      	strh	r3, [r4, #12]
 80051fc:	4632      	mov	r2, r6
 80051fe:	463b      	mov	r3, r7
 8005200:	4628      	mov	r0, r5
 8005202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005206:	f000 b8eb 	b.w	80053e0 <_write_r>

0800520a <__sseek>:
 800520a:	b510      	push	{r4, lr}
 800520c:	460c      	mov	r4, r1
 800520e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005212:	f000 f8c1 	bl	8005398 <_lseek_r>
 8005216:	1c43      	adds	r3, r0, #1
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	bf15      	itete	ne
 800521c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800521e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005226:	81a3      	strheq	r3, [r4, #12]
 8005228:	bf18      	it	ne
 800522a:	81a3      	strhne	r3, [r4, #12]
 800522c:	bd10      	pop	{r4, pc}

0800522e <__sclose>:
 800522e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005232:	f000 b8a1 	b.w	8005378 <_close_r>

08005236 <__swbuf_r>:
 8005236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005238:	460e      	mov	r6, r1
 800523a:	4614      	mov	r4, r2
 800523c:	4605      	mov	r5, r0
 800523e:	b118      	cbz	r0, 8005248 <__swbuf_r+0x12>
 8005240:	6a03      	ldr	r3, [r0, #32]
 8005242:	b90b      	cbnz	r3, 8005248 <__swbuf_r+0x12>
 8005244:	f7ff ff0e 	bl	8005064 <__sinit>
 8005248:	69a3      	ldr	r3, [r4, #24]
 800524a:	60a3      	str	r3, [r4, #8]
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	071a      	lsls	r2, r3, #28
 8005250:	d501      	bpl.n	8005256 <__swbuf_r+0x20>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	b943      	cbnz	r3, 8005268 <__swbuf_r+0x32>
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f000 f82b 	bl	80052b4 <__swsetup_r>
 800525e:	b118      	cbz	r0, 8005268 <__swbuf_r+0x32>
 8005260:	f04f 37ff 	mov.w	r7, #4294967295
 8005264:	4638      	mov	r0, r7
 8005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	6922      	ldr	r2, [r4, #16]
 800526c:	1a98      	subs	r0, r3, r2
 800526e:	6963      	ldr	r3, [r4, #20]
 8005270:	b2f6      	uxtb	r6, r6
 8005272:	4283      	cmp	r3, r0
 8005274:	4637      	mov	r7, r6
 8005276:	dc05      	bgt.n	8005284 <__swbuf_r+0x4e>
 8005278:	4621      	mov	r1, r4
 800527a:	4628      	mov	r0, r5
 800527c:	f001 fd26 	bl	8006ccc <_fflush_r>
 8005280:	2800      	cmp	r0, #0
 8005282:	d1ed      	bne.n	8005260 <__swbuf_r+0x2a>
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	3b01      	subs	r3, #1
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	6022      	str	r2, [r4, #0]
 8005290:	701e      	strb	r6, [r3, #0]
 8005292:	6962      	ldr	r2, [r4, #20]
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	429a      	cmp	r2, r3
 8005298:	d004      	beq.n	80052a4 <__swbuf_r+0x6e>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	07db      	lsls	r3, r3, #31
 800529e:	d5e1      	bpl.n	8005264 <__swbuf_r+0x2e>
 80052a0:	2e0a      	cmp	r6, #10
 80052a2:	d1df      	bne.n	8005264 <__swbuf_r+0x2e>
 80052a4:	4621      	mov	r1, r4
 80052a6:	4628      	mov	r0, r5
 80052a8:	f001 fd10 	bl	8006ccc <_fflush_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d0d9      	beq.n	8005264 <__swbuf_r+0x2e>
 80052b0:	e7d6      	b.n	8005260 <__swbuf_r+0x2a>
	...

080052b4 <__swsetup_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4b29      	ldr	r3, [pc, #164]	@ (800535c <__swsetup_r+0xa8>)
 80052b8:	4605      	mov	r5, r0
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	460c      	mov	r4, r1
 80052be:	b118      	cbz	r0, 80052c8 <__swsetup_r+0x14>
 80052c0:	6a03      	ldr	r3, [r0, #32]
 80052c2:	b90b      	cbnz	r3, 80052c8 <__swsetup_r+0x14>
 80052c4:	f7ff fece 	bl	8005064 <__sinit>
 80052c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052cc:	0719      	lsls	r1, r3, #28
 80052ce:	d422      	bmi.n	8005316 <__swsetup_r+0x62>
 80052d0:	06da      	lsls	r2, r3, #27
 80052d2:	d407      	bmi.n	80052e4 <__swsetup_r+0x30>
 80052d4:	2209      	movs	r2, #9
 80052d6:	602a      	str	r2, [r5, #0]
 80052d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	e033      	b.n	800534c <__swsetup_r+0x98>
 80052e4:	0758      	lsls	r0, r3, #29
 80052e6:	d512      	bpl.n	800530e <__swsetup_r+0x5a>
 80052e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052ea:	b141      	cbz	r1, 80052fe <__swsetup_r+0x4a>
 80052ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d002      	beq.n	80052fa <__swsetup_r+0x46>
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 fea9 	bl	800604c <_free_r>
 80052fa:	2300      	movs	r3, #0
 80052fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005304:	81a3      	strh	r3, [r4, #12]
 8005306:	2300      	movs	r3, #0
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f043 0308 	orr.w	r3, r3, #8
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	b94b      	cbnz	r3, 800532e <__swsetup_r+0x7a>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005324:	d003      	beq.n	800532e <__swsetup_r+0x7a>
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f001 fd1d 	bl	8006d68 <__smakebuf_r>
 800532e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005332:	f013 0201 	ands.w	r2, r3, #1
 8005336:	d00a      	beq.n	800534e <__swsetup_r+0x9a>
 8005338:	2200      	movs	r2, #0
 800533a:	60a2      	str	r2, [r4, #8]
 800533c:	6962      	ldr	r2, [r4, #20]
 800533e:	4252      	negs	r2, r2
 8005340:	61a2      	str	r2, [r4, #24]
 8005342:	6922      	ldr	r2, [r4, #16]
 8005344:	b942      	cbnz	r2, 8005358 <__swsetup_r+0xa4>
 8005346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800534a:	d1c5      	bne.n	80052d8 <__swsetup_r+0x24>
 800534c:	bd38      	pop	{r3, r4, r5, pc}
 800534e:	0799      	lsls	r1, r3, #30
 8005350:	bf58      	it	pl
 8005352:	6962      	ldrpl	r2, [r4, #20]
 8005354:	60a2      	str	r2, [r4, #8]
 8005356:	e7f4      	b.n	8005342 <__swsetup_r+0x8e>
 8005358:	2000      	movs	r0, #0
 800535a:	e7f7      	b.n	800534c <__swsetup_r+0x98>
 800535c:	2400001c 	.word	0x2400001c

08005360 <memset>:
 8005360:	4402      	add	r2, r0
 8005362:	4603      	mov	r3, r0
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	f803 1b01 	strb.w	r1, [r3], #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <_localeconv_r>:
 8005370:	4800      	ldr	r0, [pc, #0]	@ (8005374 <_localeconv_r+0x4>)
 8005372:	4770      	bx	lr
 8005374:	2400015c 	.word	0x2400015c

08005378 <_close_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d06      	ldr	r5, [pc, #24]	@ (8005394 <_close_r+0x1c>)
 800537c:	2300      	movs	r3, #0
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	f7fb fa94 	bl	80008b0 <_close>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_close_r+0x1a>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_close_r+0x1a>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	24000488 	.word	0x24000488

08005398 <_lseek_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d07      	ldr	r5, [pc, #28]	@ (80053b8 <_lseek_r+0x20>)
 800539c:	4604      	mov	r4, r0
 800539e:	4608      	mov	r0, r1
 80053a0:	4611      	mov	r1, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	602a      	str	r2, [r5, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f7fb faa9 	bl	80008fe <_lseek>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_lseek_r+0x1e>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_lseek_r+0x1e>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	24000488 	.word	0x24000488

080053bc <_read_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d07      	ldr	r5, [pc, #28]	@ (80053dc <_read_r+0x20>)
 80053c0:	4604      	mov	r4, r0
 80053c2:	4608      	mov	r0, r1
 80053c4:	4611      	mov	r1, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	602a      	str	r2, [r5, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f7fb fa37 	bl	800083e <_read>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_read_r+0x1e>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_read_r+0x1e>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	24000488 	.word	0x24000488

080053e0 <_write_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	@ (8005400 <_write_r+0x20>)
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fb fa42 	bl	8000878 <_write>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_write_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_write_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	24000488 	.word	0x24000488

08005404 <__errno>:
 8005404:	4b01      	ldr	r3, [pc, #4]	@ (800540c <__errno+0x8>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2400001c 	.word	0x2400001c

08005410 <__libc_init_array>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4d0d      	ldr	r5, [pc, #52]	@ (8005448 <__libc_init_array+0x38>)
 8005414:	4c0d      	ldr	r4, [pc, #52]	@ (800544c <__libc_init_array+0x3c>)
 8005416:	1b64      	subs	r4, r4, r5
 8005418:	10a4      	asrs	r4, r4, #2
 800541a:	2600      	movs	r6, #0
 800541c:	42a6      	cmp	r6, r4
 800541e:	d109      	bne.n	8005434 <__libc_init_array+0x24>
 8005420:	4d0b      	ldr	r5, [pc, #44]	@ (8005450 <__libc_init_array+0x40>)
 8005422:	4c0c      	ldr	r4, [pc, #48]	@ (8005454 <__libc_init_array+0x44>)
 8005424:	f001 fdbe 	bl	8006fa4 <_init>
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	2600      	movs	r6, #0
 800542e:	42a6      	cmp	r6, r4
 8005430:	d105      	bne.n	800543e <__libc_init_array+0x2e>
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	f855 3b04 	ldr.w	r3, [r5], #4
 8005438:	4798      	blx	r3
 800543a:	3601      	adds	r6, #1
 800543c:	e7ee      	b.n	800541c <__libc_init_array+0xc>
 800543e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005442:	4798      	blx	r3
 8005444:	3601      	adds	r6, #1
 8005446:	e7f2      	b.n	800542e <__libc_init_array+0x1e>
 8005448:	0800745c 	.word	0x0800745c
 800544c:	0800745c 	.word	0x0800745c
 8005450:	0800745c 	.word	0x0800745c
 8005454:	08007460 	.word	0x08007460

08005458 <__retarget_lock_init_recursive>:
 8005458:	4770      	bx	lr

0800545a <__retarget_lock_acquire_recursive>:
 800545a:	4770      	bx	lr

0800545c <__retarget_lock_release_recursive>:
 800545c:	4770      	bx	lr

0800545e <memcpy>:
 800545e:	440a      	add	r2, r1
 8005460:	4291      	cmp	r1, r2
 8005462:	f100 33ff 	add.w	r3, r0, #4294967295
 8005466:	d100      	bne.n	800546a <memcpy+0xc>
 8005468:	4770      	bx	lr
 800546a:	b510      	push	{r4, lr}
 800546c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005474:	4291      	cmp	r1, r2
 8005476:	d1f9      	bne.n	800546c <memcpy+0xe>
 8005478:	bd10      	pop	{r4, pc}

0800547a <quorem>:
 800547a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547e:	6903      	ldr	r3, [r0, #16]
 8005480:	690c      	ldr	r4, [r1, #16]
 8005482:	42a3      	cmp	r3, r4
 8005484:	4607      	mov	r7, r0
 8005486:	db7e      	blt.n	8005586 <quorem+0x10c>
 8005488:	3c01      	subs	r4, #1
 800548a:	f101 0814 	add.w	r8, r1, #20
 800548e:	00a3      	lsls	r3, r4, #2
 8005490:	f100 0514 	add.w	r5, r0, #20
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054a4:	3301      	adds	r3, #1
 80054a6:	429a      	cmp	r2, r3
 80054a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80054b0:	d32e      	bcc.n	8005510 <quorem+0x96>
 80054b2:	f04f 0a00 	mov.w	sl, #0
 80054b6:	46c4      	mov	ip, r8
 80054b8:	46ae      	mov	lr, r5
 80054ba:	46d3      	mov	fp, sl
 80054bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054c0:	b298      	uxth	r0, r3
 80054c2:	fb06 a000 	mla	r0, r6, r0, sl
 80054c6:	0c02      	lsrs	r2, r0, #16
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	fb06 2303 	mla	r3, r6, r3, r2
 80054ce:	f8de 2000 	ldr.w	r2, [lr]
 80054d2:	b280      	uxth	r0, r0
 80054d4:	b292      	uxth	r2, r2
 80054d6:	1a12      	subs	r2, r2, r0
 80054d8:	445a      	add	r2, fp
 80054da:	f8de 0000 	ldr.w	r0, [lr]
 80054de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80054e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80054ec:	b292      	uxth	r2, r2
 80054ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80054f2:	45e1      	cmp	r9, ip
 80054f4:	f84e 2b04 	str.w	r2, [lr], #4
 80054f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80054fc:	d2de      	bcs.n	80054bc <quorem+0x42>
 80054fe:	9b00      	ldr	r3, [sp, #0]
 8005500:	58eb      	ldr	r3, [r5, r3]
 8005502:	b92b      	cbnz	r3, 8005510 <quorem+0x96>
 8005504:	9b01      	ldr	r3, [sp, #4]
 8005506:	3b04      	subs	r3, #4
 8005508:	429d      	cmp	r5, r3
 800550a:	461a      	mov	r2, r3
 800550c:	d32f      	bcc.n	800556e <quorem+0xf4>
 800550e:	613c      	str	r4, [r7, #16]
 8005510:	4638      	mov	r0, r7
 8005512:	f001 f90d 	bl	8006730 <__mcmp>
 8005516:	2800      	cmp	r0, #0
 8005518:	db25      	blt.n	8005566 <quorem+0xec>
 800551a:	4629      	mov	r1, r5
 800551c:	2000      	movs	r0, #0
 800551e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005522:	f8d1 c000 	ldr.w	ip, [r1]
 8005526:	fa1f fe82 	uxth.w	lr, r2
 800552a:	fa1f f38c 	uxth.w	r3, ip
 800552e:	eba3 030e 	sub.w	r3, r3, lr
 8005532:	4403      	add	r3, r0
 8005534:	0c12      	lsrs	r2, r2, #16
 8005536:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800553a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005544:	45c1      	cmp	r9, r8
 8005546:	f841 3b04 	str.w	r3, [r1], #4
 800554a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800554e:	d2e6      	bcs.n	800551e <quorem+0xa4>
 8005550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005558:	b922      	cbnz	r2, 8005564 <quorem+0xea>
 800555a:	3b04      	subs	r3, #4
 800555c:	429d      	cmp	r5, r3
 800555e:	461a      	mov	r2, r3
 8005560:	d30b      	bcc.n	800557a <quorem+0x100>
 8005562:	613c      	str	r4, [r7, #16]
 8005564:	3601      	adds	r6, #1
 8005566:	4630      	mov	r0, r6
 8005568:	b003      	add	sp, #12
 800556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	3b04      	subs	r3, #4
 8005572:	2a00      	cmp	r2, #0
 8005574:	d1cb      	bne.n	800550e <quorem+0x94>
 8005576:	3c01      	subs	r4, #1
 8005578:	e7c6      	b.n	8005508 <quorem+0x8e>
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	3b04      	subs	r3, #4
 800557e:	2a00      	cmp	r2, #0
 8005580:	d1ef      	bne.n	8005562 <quorem+0xe8>
 8005582:	3c01      	subs	r4, #1
 8005584:	e7ea      	b.n	800555c <quorem+0xe2>
 8005586:	2000      	movs	r0, #0
 8005588:	e7ee      	b.n	8005568 <quorem+0xee>
 800558a:	0000      	movs	r0, r0
 800558c:	0000      	movs	r0, r0
	...

08005590 <_dtoa_r>:
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	ed2d 8b02 	vpush	{d8}
 8005598:	69c7      	ldr	r7, [r0, #28]
 800559a:	b091      	sub	sp, #68	@ 0x44
 800559c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80055a0:	ec55 4b10 	vmov	r4, r5, d0
 80055a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80055a6:	9107      	str	r1, [sp, #28]
 80055a8:	4681      	mov	r9, r0
 80055aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80055ae:	b97f      	cbnz	r7, 80055d0 <_dtoa_r+0x40>
 80055b0:	2010      	movs	r0, #16
 80055b2:	f000 fd95 	bl	80060e0 <malloc>
 80055b6:	4602      	mov	r2, r0
 80055b8:	f8c9 001c 	str.w	r0, [r9, #28]
 80055bc:	b920      	cbnz	r0, 80055c8 <_dtoa_r+0x38>
 80055be:	4ba0      	ldr	r3, [pc, #640]	@ (8005840 <_dtoa_r+0x2b0>)
 80055c0:	21ef      	movs	r1, #239	@ 0xef
 80055c2:	48a0      	ldr	r0, [pc, #640]	@ (8005844 <_dtoa_r+0x2b4>)
 80055c4:	f001 fc3e 	bl	8006e44 <__assert_func>
 80055c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80055cc:	6007      	str	r7, [r0, #0]
 80055ce:	60c7      	str	r7, [r0, #12]
 80055d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055d4:	6819      	ldr	r1, [r3, #0]
 80055d6:	b159      	cbz	r1, 80055f0 <_dtoa_r+0x60>
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	604a      	str	r2, [r1, #4]
 80055dc:	2301      	movs	r3, #1
 80055de:	4093      	lsls	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
 80055e2:	4648      	mov	r0, r9
 80055e4:	f000 fe72 	bl	80062cc <_Bfree>
 80055e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	1e2b      	subs	r3, r5, #0
 80055f2:	bfbb      	ittet	lt
 80055f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80055f8:	9303      	strlt	r3, [sp, #12]
 80055fa:	2300      	movge	r3, #0
 80055fc:	2201      	movlt	r2, #1
 80055fe:	bfac      	ite	ge
 8005600:	6033      	strge	r3, [r6, #0]
 8005602:	6032      	strlt	r2, [r6, #0]
 8005604:	4b90      	ldr	r3, [pc, #576]	@ (8005848 <_dtoa_r+0x2b8>)
 8005606:	9e03      	ldr	r6, [sp, #12]
 8005608:	43b3      	bics	r3, r6
 800560a:	d110      	bne.n	800562e <_dtoa_r+0x9e>
 800560c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800560e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005618:	4323      	orrs	r3, r4
 800561a:	f000 84e6 	beq.w	8005fea <_dtoa_r+0xa5a>
 800561e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005620:	4f8a      	ldr	r7, [pc, #552]	@ (800584c <_dtoa_r+0x2bc>)
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 84e8 	beq.w	8005ff8 <_dtoa_r+0xa68>
 8005628:	1cfb      	adds	r3, r7, #3
 800562a:	f000 bce3 	b.w	8005ff4 <_dtoa_r+0xa64>
 800562e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005632:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d10a      	bne.n	8005652 <_dtoa_r+0xc2>
 800563c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800563e:	2301      	movs	r3, #1
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005644:	b113      	cbz	r3, 800564c <_dtoa_r+0xbc>
 8005646:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005648:	4b81      	ldr	r3, [pc, #516]	@ (8005850 <_dtoa_r+0x2c0>)
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4f81      	ldr	r7, [pc, #516]	@ (8005854 <_dtoa_r+0x2c4>)
 800564e:	f000 bcd3 	b.w	8005ff8 <_dtoa_r+0xa68>
 8005652:	aa0e      	add	r2, sp, #56	@ 0x38
 8005654:	a90f      	add	r1, sp, #60	@ 0x3c
 8005656:	4648      	mov	r0, r9
 8005658:	eeb0 0b48 	vmov.f64	d0, d8
 800565c:	f001 f918 	bl	8006890 <__d2b>
 8005660:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005666:	9001      	str	r0, [sp, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d045      	beq.n	80056f8 <_dtoa_r+0x168>
 800566c:	eeb0 7b48 	vmov.f64	d7, d8
 8005670:	ee18 1a90 	vmov	r1, s17
 8005674:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005678:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800567c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005680:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005684:	2500      	movs	r5, #0
 8005686:	ee07 1a90 	vmov	s15, r1
 800568a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800568e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005828 <_dtoa_r+0x298>
 8005692:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005696:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005830 <_dtoa_r+0x2a0>
 800569a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800569e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005838 <_dtoa_r+0x2a8>
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80056aa:	eeb0 7b46 	vmov.f64	d7, d6
 80056ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80056b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80056b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056be:	ee16 8a90 	vmov	r8, s13
 80056c2:	d508      	bpl.n	80056d6 <_dtoa_r+0x146>
 80056c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80056c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80056cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d0:	bf18      	it	ne
 80056d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80056d6:	f1b8 0f16 	cmp.w	r8, #22
 80056da:	d82b      	bhi.n	8005734 <_dtoa_r+0x1a4>
 80056dc:	495e      	ldr	r1, [pc, #376]	@ (8005858 <_dtoa_r+0x2c8>)
 80056de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80056e2:	ed91 7b00 	vldr	d7, [r1]
 80056e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	d501      	bpl.n	80056f4 <_dtoa_r+0x164>
 80056f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80056f4:	2100      	movs	r1, #0
 80056f6:	e01e      	b.n	8005736 <_dtoa_r+0x1a6>
 80056f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005700:	2920      	cmp	r1, #32
 8005702:	bfc1      	itttt	gt
 8005704:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005708:	408e      	lslgt	r6, r1
 800570a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800570e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005712:	bfd6      	itet	le
 8005714:	f1c1 0120 	rsble	r1, r1, #32
 8005718:	4331      	orrgt	r1, r6
 800571a:	fa04 f101 	lslle.w	r1, r4, r1
 800571e:	ee07 1a90 	vmov	s15, r1
 8005722:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005726:	3b01      	subs	r3, #1
 8005728:	ee17 1a90 	vmov	r1, s15
 800572c:	2501      	movs	r5, #1
 800572e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005732:	e7a8      	b.n	8005686 <_dtoa_r+0xf6>
 8005734:	2101      	movs	r1, #1
 8005736:	1ad2      	subs	r2, r2, r3
 8005738:	1e53      	subs	r3, r2, #1
 800573a:	9306      	str	r3, [sp, #24]
 800573c:	bf45      	ittet	mi
 800573e:	f1c2 0301 	rsbmi	r3, r2, #1
 8005742:	9304      	strmi	r3, [sp, #16]
 8005744:	2300      	movpl	r3, #0
 8005746:	2300      	movmi	r3, #0
 8005748:	bf4c      	ite	mi
 800574a:	9306      	strmi	r3, [sp, #24]
 800574c:	9304      	strpl	r3, [sp, #16]
 800574e:	f1b8 0f00 	cmp.w	r8, #0
 8005752:	910c      	str	r1, [sp, #48]	@ 0x30
 8005754:	db18      	blt.n	8005788 <_dtoa_r+0x1f8>
 8005756:	9b06      	ldr	r3, [sp, #24]
 8005758:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800575c:	4443      	add	r3, r8
 800575e:	9306      	str	r3, [sp, #24]
 8005760:	2300      	movs	r3, #0
 8005762:	9a07      	ldr	r2, [sp, #28]
 8005764:	2a09      	cmp	r2, #9
 8005766:	d845      	bhi.n	80057f4 <_dtoa_r+0x264>
 8005768:	2a05      	cmp	r2, #5
 800576a:	bfc4      	itt	gt
 800576c:	3a04      	subgt	r2, #4
 800576e:	9207      	strgt	r2, [sp, #28]
 8005770:	9a07      	ldr	r2, [sp, #28]
 8005772:	f1a2 0202 	sub.w	r2, r2, #2
 8005776:	bfcc      	ite	gt
 8005778:	2400      	movgt	r4, #0
 800577a:	2401      	movle	r4, #1
 800577c:	2a03      	cmp	r2, #3
 800577e:	d844      	bhi.n	800580a <_dtoa_r+0x27a>
 8005780:	e8df f002 	tbb	[pc, r2]
 8005784:	0b173634 	.word	0x0b173634
 8005788:	9b04      	ldr	r3, [sp, #16]
 800578a:	2200      	movs	r2, #0
 800578c:	eba3 0308 	sub.w	r3, r3, r8
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	920a      	str	r2, [sp, #40]	@ 0x28
 8005794:	f1c8 0300 	rsb	r3, r8, #0
 8005798:	e7e3      	b.n	8005762 <_dtoa_r+0x1d2>
 800579a:	2201      	movs	r2, #1
 800579c:	9208      	str	r2, [sp, #32]
 800579e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057a0:	eb08 0b02 	add.w	fp, r8, r2
 80057a4:	f10b 0a01 	add.w	sl, fp, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	2a01      	cmp	r2, #1
 80057ac:	bfb8      	it	lt
 80057ae:	2201      	movlt	r2, #1
 80057b0:	e006      	b.n	80057c0 <_dtoa_r+0x230>
 80057b2:	2201      	movs	r2, #1
 80057b4:	9208      	str	r2, [sp, #32]
 80057b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	dd29      	ble.n	8005810 <_dtoa_r+0x280>
 80057bc:	4693      	mov	fp, r2
 80057be:	4692      	mov	sl, r2
 80057c0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80057c4:	2100      	movs	r1, #0
 80057c6:	2004      	movs	r0, #4
 80057c8:	f100 0614 	add.w	r6, r0, #20
 80057cc:	4296      	cmp	r6, r2
 80057ce:	d926      	bls.n	800581e <_dtoa_r+0x28e>
 80057d0:	6079      	str	r1, [r7, #4]
 80057d2:	4648      	mov	r0, r9
 80057d4:	9305      	str	r3, [sp, #20]
 80057d6:	f000 fd39 	bl	800624c <_Balloc>
 80057da:	9b05      	ldr	r3, [sp, #20]
 80057dc:	4607      	mov	r7, r0
 80057de:	2800      	cmp	r0, #0
 80057e0:	d13e      	bne.n	8005860 <_dtoa_r+0x2d0>
 80057e2:	4b1e      	ldr	r3, [pc, #120]	@ (800585c <_dtoa_r+0x2cc>)
 80057e4:	4602      	mov	r2, r0
 80057e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80057ea:	e6ea      	b.n	80055c2 <_dtoa_r+0x32>
 80057ec:	2200      	movs	r2, #0
 80057ee:	e7e1      	b.n	80057b4 <_dtoa_r+0x224>
 80057f0:	2200      	movs	r2, #0
 80057f2:	e7d3      	b.n	800579c <_dtoa_r+0x20c>
 80057f4:	2401      	movs	r4, #1
 80057f6:	2200      	movs	r2, #0
 80057f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80057fc:	f04f 3bff 	mov.w	fp, #4294967295
 8005800:	2100      	movs	r1, #0
 8005802:	46da      	mov	sl, fp
 8005804:	2212      	movs	r2, #18
 8005806:	9109      	str	r1, [sp, #36]	@ 0x24
 8005808:	e7da      	b.n	80057c0 <_dtoa_r+0x230>
 800580a:	2201      	movs	r2, #1
 800580c:	9208      	str	r2, [sp, #32]
 800580e:	e7f5      	b.n	80057fc <_dtoa_r+0x26c>
 8005810:	f04f 0b01 	mov.w	fp, #1
 8005814:	46da      	mov	sl, fp
 8005816:	465a      	mov	r2, fp
 8005818:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800581c:	e7d0      	b.n	80057c0 <_dtoa_r+0x230>
 800581e:	3101      	adds	r1, #1
 8005820:	0040      	lsls	r0, r0, #1
 8005822:	e7d1      	b.n	80057c8 <_dtoa_r+0x238>
 8005824:	f3af 8000 	nop.w
 8005828:	636f4361 	.word	0x636f4361
 800582c:	3fd287a7 	.word	0x3fd287a7
 8005830:	8b60c8b3 	.word	0x8b60c8b3
 8005834:	3fc68a28 	.word	0x3fc68a28
 8005838:	509f79fb 	.word	0x509f79fb
 800583c:	3fd34413 	.word	0x3fd34413
 8005840:	0800711d 	.word	0x0800711d
 8005844:	08007134 	.word	0x08007134
 8005848:	7ff00000 	.word	0x7ff00000
 800584c:	08007119 	.word	0x08007119
 8005850:	080070ed 	.word	0x080070ed
 8005854:	080070ec 	.word	0x080070ec
 8005858:	08007288 	.word	0x08007288
 800585c:	0800718c 	.word	0x0800718c
 8005860:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005864:	f1ba 0f0e 	cmp.w	sl, #14
 8005868:	6010      	str	r0, [r2, #0]
 800586a:	d86e      	bhi.n	800594a <_dtoa_r+0x3ba>
 800586c:	2c00      	cmp	r4, #0
 800586e:	d06c      	beq.n	800594a <_dtoa_r+0x3ba>
 8005870:	f1b8 0f00 	cmp.w	r8, #0
 8005874:	f340 80b4 	ble.w	80059e0 <_dtoa_r+0x450>
 8005878:	4ac8      	ldr	r2, [pc, #800]	@ (8005b9c <_dtoa_r+0x60c>)
 800587a:	f008 010f 	and.w	r1, r8, #15
 800587e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005882:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005886:	ed92 7b00 	vldr	d7, [r2]
 800588a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800588e:	f000 809b 	beq.w	80059c8 <_dtoa_r+0x438>
 8005892:	4ac3      	ldr	r2, [pc, #780]	@ (8005ba0 <_dtoa_r+0x610>)
 8005894:	ed92 6b08 	vldr	d6, [r2, #32]
 8005898:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800589c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80058a0:	f001 010f 	and.w	r1, r1, #15
 80058a4:	2203      	movs	r2, #3
 80058a6:	48be      	ldr	r0, [pc, #760]	@ (8005ba0 <_dtoa_r+0x610>)
 80058a8:	2900      	cmp	r1, #0
 80058aa:	f040 808f 	bne.w	80059cc <_dtoa_r+0x43c>
 80058ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80058b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80058b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80058bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	f000 80b3 	beq.w	8005a2c <_dtoa_r+0x49c>
 80058c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80058ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	f140 80ab 	bpl.w	8005a2c <_dtoa_r+0x49c>
 80058d6:	f1ba 0f00 	cmp.w	sl, #0
 80058da:	f000 80a7 	beq.w	8005a2c <_dtoa_r+0x49c>
 80058de:	f1bb 0f00 	cmp.w	fp, #0
 80058e2:	dd30      	ble.n	8005946 <_dtoa_r+0x3b6>
 80058e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80058e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80058f4:	9105      	str	r1, [sp, #20]
 80058f6:	3201      	adds	r2, #1
 80058f8:	465c      	mov	r4, fp
 80058fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80058fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005902:	ee07 2a90 	vmov	s15, r2
 8005906:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800590a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800590e:	ee15 2a90 	vmov	r2, s11
 8005912:	ec51 0b15 	vmov	r0, r1, d5
 8005916:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800591a:	2c00      	cmp	r4, #0
 800591c:	f040 808a 	bne.w	8005a34 <_dtoa_r+0x4a4>
 8005920:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005924:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005928:	ec41 0b17 	vmov	d7, r0, r1
 800592c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	f300 826a 	bgt.w	8005e0c <_dtoa_r+0x87c>
 8005938:	eeb1 7b47 	vneg.f64	d7, d7
 800593c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	d423      	bmi.n	800598e <_dtoa_r+0x3fe>
 8005946:	ed8d 8b02 	vstr	d8, [sp, #8]
 800594a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800594c:	2a00      	cmp	r2, #0
 800594e:	f2c0 8129 	blt.w	8005ba4 <_dtoa_r+0x614>
 8005952:	f1b8 0f0e 	cmp.w	r8, #14
 8005956:	f300 8125 	bgt.w	8005ba4 <_dtoa_r+0x614>
 800595a:	4b90      	ldr	r3, [pc, #576]	@ (8005b9c <_dtoa_r+0x60c>)
 800595c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005960:	ed93 6b00 	vldr	d6, [r3]
 8005964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	f280 80c8 	bge.w	8005afc <_dtoa_r+0x56c>
 800596c:	f1ba 0f00 	cmp.w	sl, #0
 8005970:	f300 80c4 	bgt.w	8005afc <_dtoa_r+0x56c>
 8005974:	d10b      	bne.n	800598e <_dtoa_r+0x3fe>
 8005976:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800597a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800597e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005982:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598a:	f2c0 823c 	blt.w	8005e06 <_dtoa_r+0x876>
 800598e:	2400      	movs	r4, #0
 8005990:	4625      	mov	r5, r4
 8005992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005994:	43db      	mvns	r3, r3
 8005996:	9305      	str	r3, [sp, #20]
 8005998:	463e      	mov	r6, r7
 800599a:	f04f 0800 	mov.w	r8, #0
 800599e:	4621      	mov	r1, r4
 80059a0:	4648      	mov	r0, r9
 80059a2:	f000 fc93 	bl	80062cc <_Bfree>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	f000 80a2 	beq.w	8005af0 <_dtoa_r+0x560>
 80059ac:	f1b8 0f00 	cmp.w	r8, #0
 80059b0:	d005      	beq.n	80059be <_dtoa_r+0x42e>
 80059b2:	45a8      	cmp	r8, r5
 80059b4:	d003      	beq.n	80059be <_dtoa_r+0x42e>
 80059b6:	4641      	mov	r1, r8
 80059b8:	4648      	mov	r0, r9
 80059ba:	f000 fc87 	bl	80062cc <_Bfree>
 80059be:	4629      	mov	r1, r5
 80059c0:	4648      	mov	r0, r9
 80059c2:	f000 fc83 	bl	80062cc <_Bfree>
 80059c6:	e093      	b.n	8005af0 <_dtoa_r+0x560>
 80059c8:	2202      	movs	r2, #2
 80059ca:	e76c      	b.n	80058a6 <_dtoa_r+0x316>
 80059cc:	07cc      	lsls	r4, r1, #31
 80059ce:	d504      	bpl.n	80059da <_dtoa_r+0x44a>
 80059d0:	ed90 6b00 	vldr	d6, [r0]
 80059d4:	3201      	adds	r2, #1
 80059d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059da:	1049      	asrs	r1, r1, #1
 80059dc:	3008      	adds	r0, #8
 80059de:	e763      	b.n	80058a8 <_dtoa_r+0x318>
 80059e0:	d022      	beq.n	8005a28 <_dtoa_r+0x498>
 80059e2:	f1c8 0100 	rsb	r1, r8, #0
 80059e6:	4a6d      	ldr	r2, [pc, #436]	@ (8005b9c <_dtoa_r+0x60c>)
 80059e8:	f001 000f 	and.w	r0, r1, #15
 80059ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80059f0:	ed92 7b00 	vldr	d7, [r2]
 80059f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80059f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059fc:	4868      	ldr	r0, [pc, #416]	@ (8005ba0 <_dtoa_r+0x610>)
 80059fe:	1109      	asrs	r1, r1, #4
 8005a00:	2400      	movs	r4, #0
 8005a02:	2202      	movs	r2, #2
 8005a04:	b929      	cbnz	r1, 8005a12 <_dtoa_r+0x482>
 8005a06:	2c00      	cmp	r4, #0
 8005a08:	f43f af57 	beq.w	80058ba <_dtoa_r+0x32a>
 8005a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a10:	e753      	b.n	80058ba <_dtoa_r+0x32a>
 8005a12:	07ce      	lsls	r6, r1, #31
 8005a14:	d505      	bpl.n	8005a22 <_dtoa_r+0x492>
 8005a16:	ed90 6b00 	vldr	d6, [r0]
 8005a1a:	3201      	adds	r2, #1
 8005a1c:	2401      	movs	r4, #1
 8005a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a22:	1049      	asrs	r1, r1, #1
 8005a24:	3008      	adds	r0, #8
 8005a26:	e7ed      	b.n	8005a04 <_dtoa_r+0x474>
 8005a28:	2202      	movs	r2, #2
 8005a2a:	e746      	b.n	80058ba <_dtoa_r+0x32a>
 8005a2c:	f8cd 8014 	str.w	r8, [sp, #20]
 8005a30:	4654      	mov	r4, sl
 8005a32:	e762      	b.n	80058fa <_dtoa_r+0x36a>
 8005a34:	4a59      	ldr	r2, [pc, #356]	@ (8005b9c <_dtoa_r+0x60c>)
 8005a36:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005a3a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005a3e:	9a08      	ldr	r2, [sp, #32]
 8005a40:	ec41 0b17 	vmov	d7, r0, r1
 8005a44:	443c      	add	r4, r7
 8005a46:	b34a      	cbz	r2, 8005a9c <_dtoa_r+0x50c>
 8005a48:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005a4c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005a50:	463e      	mov	r6, r7
 8005a52:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005a56:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005a5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a5e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005a62:	ee14 2a90 	vmov	r2, s9
 8005a66:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005a6a:	3230      	adds	r2, #48	@ 0x30
 8005a6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005a70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a78:	f806 2b01 	strb.w	r2, [r6], #1
 8005a7c:	d438      	bmi.n	8005af0 <_dtoa_r+0x560>
 8005a7e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005a82:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8a:	d46e      	bmi.n	8005b6a <_dtoa_r+0x5da>
 8005a8c:	42a6      	cmp	r6, r4
 8005a8e:	f43f af5a 	beq.w	8005946 <_dtoa_r+0x3b6>
 8005a92:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005a96:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005a9a:	e7e0      	b.n	8005a5e <_dtoa_r+0x4ce>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	463e      	mov	r6, r7
 8005aa0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005aa4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005aa8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005aac:	ee14 2a90 	vmov	r2, s9
 8005ab0:	3230      	adds	r2, #48	@ 0x30
 8005ab2:	f806 2b01 	strb.w	r2, [r6], #1
 8005ab6:	42a6      	cmp	r6, r4
 8005ab8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005abc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005ac0:	d119      	bne.n	8005af6 <_dtoa_r+0x566>
 8005ac2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005ac6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005aca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	dc4a      	bgt.n	8005b6a <_dtoa_r+0x5da>
 8005ad4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005ad8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	f57f af31 	bpl.w	8005946 <_dtoa_r+0x3b6>
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	3901      	subs	r1, #1
 8005ae8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d0f9      	beq.n	8005ae4 <_dtoa_r+0x554>
 8005af0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005af4:	e027      	b.n	8005b46 <_dtoa_r+0x5b6>
 8005af6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005afa:	e7d5      	b.n	8005aa8 <_dtoa_r+0x518>
 8005afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b00:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005b04:	463e      	mov	r6, r7
 8005b06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005b0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005b0e:	ee15 3a10 	vmov	r3, s10
 8005b12:	3330      	adds	r3, #48	@ 0x30
 8005b14:	f806 3b01 	strb.w	r3, [r6], #1
 8005b18:	1bf3      	subs	r3, r6, r7
 8005b1a:	459a      	cmp	sl, r3
 8005b1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005b20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005b24:	d132      	bne.n	8005b8c <_dtoa_r+0x5fc>
 8005b26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b32:	dc18      	bgt.n	8005b66 <_dtoa_r+0x5d6>
 8005b34:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	d103      	bne.n	8005b46 <_dtoa_r+0x5b6>
 8005b3e:	ee15 3a10 	vmov	r3, s10
 8005b42:	07db      	lsls	r3, r3, #31
 8005b44:	d40f      	bmi.n	8005b66 <_dtoa_r+0x5d6>
 8005b46:	9901      	ldr	r1, [sp, #4]
 8005b48:	4648      	mov	r0, r9
 8005b4a:	f000 fbbf 	bl	80062cc <_Bfree>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b52:	7033      	strb	r3, [r6, #0]
 8005b54:	f108 0301 	add.w	r3, r8, #1
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 824b 	beq.w	8005ff8 <_dtoa_r+0xa68>
 8005b62:	601e      	str	r6, [r3, #0]
 8005b64:	e248      	b.n	8005ff8 <_dtoa_r+0xa68>
 8005b66:	f8cd 8014 	str.w	r8, [sp, #20]
 8005b6a:	4633      	mov	r3, r6
 8005b6c:	461e      	mov	r6, r3
 8005b6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b72:	2a39      	cmp	r2, #57	@ 0x39
 8005b74:	d106      	bne.n	8005b84 <_dtoa_r+0x5f4>
 8005b76:	429f      	cmp	r7, r3
 8005b78:	d1f8      	bne.n	8005b6c <_dtoa_r+0x5dc>
 8005b7a:	9a05      	ldr	r2, [sp, #20]
 8005b7c:	3201      	adds	r2, #1
 8005b7e:	9205      	str	r2, [sp, #20]
 8005b80:	2230      	movs	r2, #48	@ 0x30
 8005b82:	703a      	strb	r2, [r7, #0]
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	3201      	adds	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e7b1      	b.n	8005af0 <_dtoa_r+0x560>
 8005b8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d1b5      	bne.n	8005b06 <_dtoa_r+0x576>
 8005b9a:	e7d4      	b.n	8005b46 <_dtoa_r+0x5b6>
 8005b9c:	08007288 	.word	0x08007288
 8005ba0:	08007260 	.word	0x08007260
 8005ba4:	9908      	ldr	r1, [sp, #32]
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	f000 80e9 	beq.w	8005d7e <_dtoa_r+0x7ee>
 8005bac:	9907      	ldr	r1, [sp, #28]
 8005bae:	2901      	cmp	r1, #1
 8005bb0:	f300 80cb 	bgt.w	8005d4a <_dtoa_r+0x7ba>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	f000 80c4 	beq.w	8005d42 <_dtoa_r+0x7b2>
 8005bba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005bbe:	9e04      	ldr	r6, [sp, #16]
 8005bc0:	461c      	mov	r4, r3
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	9306      	str	r3, [sp, #24]
 8005bd4:	f000 fc2e 	bl	8006434 <__i2b>
 8005bd8:	9b05      	ldr	r3, [sp, #20]
 8005bda:	4605      	mov	r5, r0
 8005bdc:	b166      	cbz	r6, 8005bf8 <_dtoa_r+0x668>
 8005bde:	9a06      	ldr	r2, [sp, #24]
 8005be0:	2a00      	cmp	r2, #0
 8005be2:	dd09      	ble.n	8005bf8 <_dtoa_r+0x668>
 8005be4:	42b2      	cmp	r2, r6
 8005be6:	9904      	ldr	r1, [sp, #16]
 8005be8:	bfa8      	it	ge
 8005bea:	4632      	movge	r2, r6
 8005bec:	1a89      	subs	r1, r1, r2
 8005bee:	9104      	str	r1, [sp, #16]
 8005bf0:	9906      	ldr	r1, [sp, #24]
 8005bf2:	1ab6      	subs	r6, r6, r2
 8005bf4:	1a8a      	subs	r2, r1, r2
 8005bf6:	9206      	str	r2, [sp, #24]
 8005bf8:	b30b      	cbz	r3, 8005c3e <_dtoa_r+0x6ae>
 8005bfa:	9a08      	ldr	r2, [sp, #32]
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	f000 80c5 	beq.w	8005d8c <_dtoa_r+0x7fc>
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	f000 80bf 	beq.w	8005d86 <_dtoa_r+0x7f6>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4648      	mov	r0, r9
 8005c0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c10:	f000 fcc8 	bl	80065a4 <__pow5mult>
 8005c14:	9a01      	ldr	r2, [sp, #4]
 8005c16:	4601      	mov	r1, r0
 8005c18:	4605      	mov	r5, r0
 8005c1a:	4648      	mov	r0, r9
 8005c1c:	f000 fc20 	bl	8006460 <__multiply>
 8005c20:	9901      	ldr	r1, [sp, #4]
 8005c22:	9005      	str	r0, [sp, #20]
 8005c24:	4648      	mov	r0, r9
 8005c26:	f000 fb51 	bl	80062cc <_Bfree>
 8005c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c2c:	1b1b      	subs	r3, r3, r4
 8005c2e:	f000 80b0 	beq.w	8005d92 <_dtoa_r+0x802>
 8005c32:	9905      	ldr	r1, [sp, #20]
 8005c34:	461a      	mov	r2, r3
 8005c36:	4648      	mov	r0, r9
 8005c38:	f000 fcb4 	bl	80065a4 <__pow5mult>
 8005c3c:	9001      	str	r0, [sp, #4]
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4648      	mov	r0, r9
 8005c42:	f000 fbf7 	bl	8006434 <__i2b>
 8005c46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c48:	4604      	mov	r4, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 81da 	beq.w	8006004 <_dtoa_r+0xa74>
 8005c50:	461a      	mov	r2, r3
 8005c52:	4601      	mov	r1, r0
 8005c54:	4648      	mov	r0, r9
 8005c56:	f000 fca5 	bl	80065a4 <__pow5mult>
 8005c5a:	9b07      	ldr	r3, [sp, #28]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	4604      	mov	r4, r0
 8005c60:	f300 80a0 	bgt.w	8005da4 <_dtoa_r+0x814>
 8005c64:	9b02      	ldr	r3, [sp, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 8096 	bne.w	8005d98 <_dtoa_r+0x808>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	f040 8092 	bne.w	8005d9c <_dtoa_r+0x80c>
 8005c78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c7c:	0d12      	lsrs	r2, r2, #20
 8005c7e:	0512      	lsls	r2, r2, #20
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	f000 808d 	beq.w	8005da0 <_dtoa_r+0x810>
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	9306      	str	r3, [sp, #24]
 8005c92:	2301      	movs	r3, #1
 8005c94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 81b9 	beq.w	8006010 <_dtoa_r+0xa80>
 8005c9e:	6922      	ldr	r2, [r4, #16]
 8005ca0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005ca4:	6910      	ldr	r0, [r2, #16]
 8005ca6:	f000 fb79 	bl	800639c <__hi0bits>
 8005caa:	f1c0 0020 	rsb	r0, r0, #32
 8005cae:	9b06      	ldr	r3, [sp, #24]
 8005cb0:	4418      	add	r0, r3
 8005cb2:	f010 001f 	ands.w	r0, r0, #31
 8005cb6:	f000 8081 	beq.w	8005dbc <_dtoa_r+0x82c>
 8005cba:	f1c0 0220 	rsb	r2, r0, #32
 8005cbe:	2a04      	cmp	r2, #4
 8005cc0:	dd73      	ble.n	8005daa <_dtoa_r+0x81a>
 8005cc2:	9b04      	ldr	r3, [sp, #16]
 8005cc4:	f1c0 001c 	rsb	r0, r0, #28
 8005cc8:	4403      	add	r3, r0
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	4406      	add	r6, r0
 8005cd0:	4403      	add	r3, r0
 8005cd2:	9306      	str	r3, [sp, #24]
 8005cd4:	9b04      	ldr	r3, [sp, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	dd05      	ble.n	8005ce6 <_dtoa_r+0x756>
 8005cda:	9901      	ldr	r1, [sp, #4]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4648      	mov	r0, r9
 8005ce0:	f000 fcba 	bl	8006658 <__lshift>
 8005ce4:	9001      	str	r0, [sp, #4]
 8005ce6:	9b06      	ldr	r3, [sp, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dd05      	ble.n	8005cf8 <_dtoa_r+0x768>
 8005cec:	4621      	mov	r1, r4
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4648      	mov	r0, r9
 8005cf2:	f000 fcb1 	bl	8006658 <__lshift>
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d060      	beq.n	8005dc0 <_dtoa_r+0x830>
 8005cfe:	9801      	ldr	r0, [sp, #4]
 8005d00:	4621      	mov	r1, r4
 8005d02:	f000 fd15 	bl	8006730 <__mcmp>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	da5a      	bge.n	8005dc0 <_dtoa_r+0x830>
 8005d0a:	f108 33ff 	add.w	r3, r8, #4294967295
 8005d0e:	9305      	str	r3, [sp, #20]
 8005d10:	9901      	ldr	r1, [sp, #4]
 8005d12:	2300      	movs	r3, #0
 8005d14:	220a      	movs	r2, #10
 8005d16:	4648      	mov	r0, r9
 8005d18:	f000 fafa 	bl	8006310 <__multadd>
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	9001      	str	r0, [sp, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8177 	beq.w	8006014 <_dtoa_r+0xa84>
 8005d26:	4629      	mov	r1, r5
 8005d28:	2300      	movs	r3, #0
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	f000 faef 	bl	8006310 <__multadd>
 8005d32:	f1bb 0f00 	cmp.w	fp, #0
 8005d36:	4605      	mov	r5, r0
 8005d38:	dc6e      	bgt.n	8005e18 <_dtoa_r+0x888>
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	dc48      	bgt.n	8005dd2 <_dtoa_r+0x842>
 8005d40:	e06a      	b.n	8005e18 <_dtoa_r+0x888>
 8005d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005d48:	e739      	b.n	8005bbe <_dtoa_r+0x62e>
 8005d4a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	db07      	blt.n	8005d62 <_dtoa_r+0x7d2>
 8005d52:	f1ba 0f00 	cmp.w	sl, #0
 8005d56:	eba3 0404 	sub.w	r4, r3, r4
 8005d5a:	db0b      	blt.n	8005d74 <_dtoa_r+0x7e4>
 8005d5c:	9e04      	ldr	r6, [sp, #16]
 8005d5e:	4652      	mov	r2, sl
 8005d60:	e72f      	b.n	8005bc2 <_dtoa_r+0x632>
 8005d62:	1ae2      	subs	r2, r4, r3
 8005d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d66:	9e04      	ldr	r6, [sp, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4623      	mov	r3, r4
 8005d70:	2400      	movs	r4, #0
 8005d72:	e726      	b.n	8005bc2 <_dtoa_r+0x632>
 8005d74:	9a04      	ldr	r2, [sp, #16]
 8005d76:	eba2 060a 	sub.w	r6, r2, sl
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	e721      	b.n	8005bc2 <_dtoa_r+0x632>
 8005d7e:	9e04      	ldr	r6, [sp, #16]
 8005d80:	9d08      	ldr	r5, [sp, #32]
 8005d82:	461c      	mov	r4, r3
 8005d84:	e72a      	b.n	8005bdc <_dtoa_r+0x64c>
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	9205      	str	r2, [sp, #20]
 8005d8a:	e752      	b.n	8005c32 <_dtoa_r+0x6a2>
 8005d8c:	9901      	ldr	r1, [sp, #4]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	e751      	b.n	8005c36 <_dtoa_r+0x6a6>
 8005d92:	9b05      	ldr	r3, [sp, #20]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	e752      	b.n	8005c3e <_dtoa_r+0x6ae>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e77b      	b.n	8005c94 <_dtoa_r+0x704>
 8005d9c:	9b02      	ldr	r3, [sp, #8]
 8005d9e:	e779      	b.n	8005c94 <_dtoa_r+0x704>
 8005da0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005da2:	e778      	b.n	8005c96 <_dtoa_r+0x706>
 8005da4:	2300      	movs	r3, #0
 8005da6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005da8:	e779      	b.n	8005c9e <_dtoa_r+0x70e>
 8005daa:	d093      	beq.n	8005cd4 <_dtoa_r+0x744>
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	321c      	adds	r2, #28
 8005db0:	4413      	add	r3, r2
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	4416      	add	r6, r2
 8005db8:	4413      	add	r3, r2
 8005dba:	e78a      	b.n	8005cd2 <_dtoa_r+0x742>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	e7f5      	b.n	8005dac <_dtoa_r+0x81c>
 8005dc0:	f1ba 0f00 	cmp.w	sl, #0
 8005dc4:	f8cd 8014 	str.w	r8, [sp, #20]
 8005dc8:	46d3      	mov	fp, sl
 8005dca:	dc21      	bgt.n	8005e10 <_dtoa_r+0x880>
 8005dcc:	9b07      	ldr	r3, [sp, #28]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	dd1e      	ble.n	8005e10 <_dtoa_r+0x880>
 8005dd2:	f1bb 0f00 	cmp.w	fp, #0
 8005dd6:	f47f addc 	bne.w	8005992 <_dtoa_r+0x402>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	465b      	mov	r3, fp
 8005dde:	2205      	movs	r2, #5
 8005de0:	4648      	mov	r0, r9
 8005de2:	f000 fa95 	bl	8006310 <__multadd>
 8005de6:	4601      	mov	r1, r0
 8005de8:	4604      	mov	r4, r0
 8005dea:	9801      	ldr	r0, [sp, #4]
 8005dec:	f000 fca0 	bl	8006730 <__mcmp>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f77f adce 	ble.w	8005992 <_dtoa_r+0x402>
 8005df6:	463e      	mov	r6, r7
 8005df8:	2331      	movs	r3, #49	@ 0x31
 8005dfa:	f806 3b01 	strb.w	r3, [r6], #1
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	3301      	adds	r3, #1
 8005e02:	9305      	str	r3, [sp, #20]
 8005e04:	e5c9      	b.n	800599a <_dtoa_r+0x40a>
 8005e06:	f8cd 8014 	str.w	r8, [sp, #20]
 8005e0a:	4654      	mov	r4, sl
 8005e0c:	4625      	mov	r5, r4
 8005e0e:	e7f2      	b.n	8005df6 <_dtoa_r+0x866>
 8005e10:	9b08      	ldr	r3, [sp, #32]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8102 	beq.w	800601c <_dtoa_r+0xa8c>
 8005e18:	2e00      	cmp	r6, #0
 8005e1a:	dd05      	ble.n	8005e28 <_dtoa_r+0x898>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4632      	mov	r2, r6
 8005e20:	4648      	mov	r0, r9
 8005e22:	f000 fc19 	bl	8006658 <__lshift>
 8005e26:	4605      	mov	r5, r0
 8005e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d058      	beq.n	8005ee0 <_dtoa_r+0x950>
 8005e2e:	6869      	ldr	r1, [r5, #4]
 8005e30:	4648      	mov	r0, r9
 8005e32:	f000 fa0b 	bl	800624c <_Balloc>
 8005e36:	4606      	mov	r6, r0
 8005e38:	b928      	cbnz	r0, 8005e46 <_dtoa_r+0x8b6>
 8005e3a:	4b82      	ldr	r3, [pc, #520]	@ (8006044 <_dtoa_r+0xab4>)
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e42:	f7ff bbbe 	b.w	80055c2 <_dtoa_r+0x32>
 8005e46:	692a      	ldr	r2, [r5, #16]
 8005e48:	3202      	adds	r2, #2
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	f105 010c 	add.w	r1, r5, #12
 8005e50:	300c      	adds	r0, #12
 8005e52:	f7ff fb04 	bl	800545e <memcpy>
 8005e56:	2201      	movs	r2, #1
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4648      	mov	r0, r9
 8005e5c:	f000 fbfc 	bl	8006658 <__lshift>
 8005e60:	1c7b      	adds	r3, r7, #1
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	eb07 030b 	add.w	r3, r7, fp
 8005e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	46a8      	mov	r8, r5
 8005e72:	9308      	str	r3, [sp, #32]
 8005e74:	4605      	mov	r5, r0
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	9801      	ldr	r0, [sp, #4]
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e80:	f7ff fafb 	bl	800547a <quorem>
 8005e84:	4641      	mov	r1, r8
 8005e86:	9002      	str	r0, [sp, #8]
 8005e88:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005e8c:	9801      	ldr	r0, [sp, #4]
 8005e8e:	f000 fc4f 	bl	8006730 <__mcmp>
 8005e92:	462a      	mov	r2, r5
 8005e94:	9006      	str	r0, [sp, #24]
 8005e96:	4621      	mov	r1, r4
 8005e98:	4648      	mov	r0, r9
 8005e9a:	f000 fc65 	bl	8006768 <__mdiff>
 8005e9e:	68c2      	ldr	r2, [r0, #12]
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	b9fa      	cbnz	r2, 8005ee4 <_dtoa_r+0x954>
 8005ea4:	4601      	mov	r1, r0
 8005ea6:	9801      	ldr	r0, [sp, #4]
 8005ea8:	f000 fc42 	bl	8006730 <__mcmp>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4648      	mov	r0, r9
 8005eb2:	920a      	str	r2, [sp, #40]	@ 0x28
 8005eb4:	f000 fa0a 	bl	80062cc <_Bfree>
 8005eb8:	9b07      	ldr	r3, [sp, #28]
 8005eba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ebc:	9e04      	ldr	r6, [sp, #16]
 8005ebe:	ea42 0103 	orr.w	r1, r2, r3
 8005ec2:	9b08      	ldr	r3, [sp, #32]
 8005ec4:	4319      	orrs	r1, r3
 8005ec6:	d10f      	bne.n	8005ee8 <_dtoa_r+0x958>
 8005ec8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005ecc:	d028      	beq.n	8005f20 <_dtoa_r+0x990>
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dd02      	ble.n	8005eda <_dtoa_r+0x94a>
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005eda:	f88b a000 	strb.w	sl, [fp]
 8005ede:	e55e      	b.n	800599e <_dtoa_r+0x40e>
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	e7bd      	b.n	8005e60 <_dtoa_r+0x8d0>
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	e7e2      	b.n	8005eae <_dtoa_r+0x91e>
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	db04      	blt.n	8005ef8 <_dtoa_r+0x968>
 8005eee:	9907      	ldr	r1, [sp, #28]
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	9908      	ldr	r1, [sp, #32]
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	d120      	bne.n	8005f3a <_dtoa_r+0x9aa>
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	ddee      	ble.n	8005eda <_dtoa_r+0x94a>
 8005efc:	9901      	ldr	r1, [sp, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	4648      	mov	r0, r9
 8005f02:	f000 fba9 	bl	8006658 <__lshift>
 8005f06:	4621      	mov	r1, r4
 8005f08:	9001      	str	r0, [sp, #4]
 8005f0a:	f000 fc11 	bl	8006730 <__mcmp>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	dc03      	bgt.n	8005f1a <_dtoa_r+0x98a>
 8005f12:	d1e2      	bne.n	8005eda <_dtoa_r+0x94a>
 8005f14:	f01a 0f01 	tst.w	sl, #1
 8005f18:	d0df      	beq.n	8005eda <_dtoa_r+0x94a>
 8005f1a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005f1e:	d1d9      	bne.n	8005ed4 <_dtoa_r+0x944>
 8005f20:	2339      	movs	r3, #57	@ 0x39
 8005f22:	f88b 3000 	strb.w	r3, [fp]
 8005f26:	4633      	mov	r3, r6
 8005f28:	461e      	mov	r6, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f30:	2a39      	cmp	r2, #57	@ 0x39
 8005f32:	d052      	beq.n	8005fda <_dtoa_r+0xa4a>
 8005f34:	3201      	adds	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e531      	b.n	800599e <_dtoa_r+0x40e>
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	dd07      	ble.n	8005f4e <_dtoa_r+0x9be>
 8005f3e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005f42:	d0ed      	beq.n	8005f20 <_dtoa_r+0x990>
 8005f44:	f10a 0301 	add.w	r3, sl, #1
 8005f48:	f88b 3000 	strb.w	r3, [fp]
 8005f4c:	e527      	b.n	800599e <_dtoa_r+0x40e>
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f52:	f803 ac01 	strb.w	sl, [r3, #-1]
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d029      	beq.n	8005fae <_dtoa_r+0xa1e>
 8005f5a:	9901      	ldr	r1, [sp, #4]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	220a      	movs	r2, #10
 8005f60:	4648      	mov	r0, r9
 8005f62:	f000 f9d5 	bl	8006310 <__multadd>
 8005f66:	45a8      	cmp	r8, r5
 8005f68:	9001      	str	r0, [sp, #4]
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	f04f 020a 	mov.w	r2, #10
 8005f72:	4641      	mov	r1, r8
 8005f74:	4648      	mov	r0, r9
 8005f76:	d107      	bne.n	8005f88 <_dtoa_r+0x9f8>
 8005f78:	f000 f9ca 	bl	8006310 <__multadd>
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4605      	mov	r5, r0
 8005f80:	9b04      	ldr	r3, [sp, #16]
 8005f82:	3301      	adds	r3, #1
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	e776      	b.n	8005e76 <_dtoa_r+0x8e6>
 8005f88:	f000 f9c2 	bl	8006310 <__multadd>
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4680      	mov	r8, r0
 8005f90:	2300      	movs	r3, #0
 8005f92:	220a      	movs	r2, #10
 8005f94:	4648      	mov	r0, r9
 8005f96:	f000 f9bb 	bl	8006310 <__multadd>
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	e7f0      	b.n	8005f80 <_dtoa_r+0x9f0>
 8005f9e:	f1bb 0f00 	cmp.w	fp, #0
 8005fa2:	bfcc      	ite	gt
 8005fa4:	465e      	movgt	r6, fp
 8005fa6:	2601      	movle	r6, #1
 8005fa8:	443e      	add	r6, r7
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	9901      	ldr	r1, [sp, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	4648      	mov	r0, r9
 8005fb4:	f000 fb50 	bl	8006658 <__lshift>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	9001      	str	r0, [sp, #4]
 8005fbc:	f000 fbb8 	bl	8006730 <__mcmp>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	dcb0      	bgt.n	8005f26 <_dtoa_r+0x996>
 8005fc4:	d102      	bne.n	8005fcc <_dtoa_r+0xa3c>
 8005fc6:	f01a 0f01 	tst.w	sl, #1
 8005fca:	d1ac      	bne.n	8005f26 <_dtoa_r+0x996>
 8005fcc:	4633      	mov	r3, r6
 8005fce:	461e      	mov	r6, r3
 8005fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fd4:	2a30      	cmp	r2, #48	@ 0x30
 8005fd6:	d0fa      	beq.n	8005fce <_dtoa_r+0xa3e>
 8005fd8:	e4e1      	b.n	800599e <_dtoa_r+0x40e>
 8005fda:	429f      	cmp	r7, r3
 8005fdc:	d1a4      	bne.n	8005f28 <_dtoa_r+0x998>
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	2331      	movs	r3, #49	@ 0x31
 8005fe6:	703b      	strb	r3, [r7, #0]
 8005fe8:	e4d9      	b.n	800599e <_dtoa_r+0x40e>
 8005fea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005fec:	4f16      	ldr	r7, [pc, #88]	@ (8006048 <_dtoa_r+0xab8>)
 8005fee:	b11b      	cbz	r3, 8005ff8 <_dtoa_r+0xa68>
 8005ff0:	f107 0308 	add.w	r3, r7, #8
 8005ff4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	b011      	add	sp, #68	@ 0x44
 8005ffc:	ecbd 8b02 	vpop	{d8}
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	2b01      	cmp	r3, #1
 8006008:	f77f ae2c 	ble.w	8005c64 <_dtoa_r+0x6d4>
 800600c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800600e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006010:	2001      	movs	r0, #1
 8006012:	e64c      	b.n	8005cae <_dtoa_r+0x71e>
 8006014:	f1bb 0f00 	cmp.w	fp, #0
 8006018:	f77f aed8 	ble.w	8005dcc <_dtoa_r+0x83c>
 800601c:	463e      	mov	r6, r7
 800601e:	9801      	ldr	r0, [sp, #4]
 8006020:	4621      	mov	r1, r4
 8006022:	f7ff fa2a 	bl	800547a <quorem>
 8006026:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800602a:	f806 ab01 	strb.w	sl, [r6], #1
 800602e:	1bf2      	subs	r2, r6, r7
 8006030:	4593      	cmp	fp, r2
 8006032:	ddb4      	ble.n	8005f9e <_dtoa_r+0xa0e>
 8006034:	9901      	ldr	r1, [sp, #4]
 8006036:	2300      	movs	r3, #0
 8006038:	220a      	movs	r2, #10
 800603a:	4648      	mov	r0, r9
 800603c:	f000 f968 	bl	8006310 <__multadd>
 8006040:	9001      	str	r0, [sp, #4]
 8006042:	e7ec      	b.n	800601e <_dtoa_r+0xa8e>
 8006044:	0800718c 	.word	0x0800718c
 8006048:	08007110 	.word	0x08007110

0800604c <_free_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	2900      	cmp	r1, #0
 8006052:	d041      	beq.n	80060d8 <_free_r+0x8c>
 8006054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006058:	1f0c      	subs	r4, r1, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfb8      	it	lt
 800605e:	18e4      	addlt	r4, r4, r3
 8006060:	f000 f8e8 	bl	8006234 <__malloc_lock>
 8006064:	4a1d      	ldr	r2, [pc, #116]	@ (80060dc <_free_r+0x90>)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	b933      	cbnz	r3, 8006078 <_free_r+0x2c>
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	4628      	mov	r0, r5
 8006070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006074:	f000 b8e4 	b.w	8006240 <__malloc_unlock>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d908      	bls.n	800608e <_free_r+0x42>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	e7ed      	b.n	800606a <_free_r+0x1e>
 800608e:	461a      	mov	r2, r3
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b10b      	cbz	r3, 8006098 <_free_r+0x4c>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d9fa      	bls.n	800608e <_free_r+0x42>
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	1850      	adds	r0, r2, r1
 800609c:	42a0      	cmp	r0, r4
 800609e:	d10b      	bne.n	80060b8 <_free_r+0x6c>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	4401      	add	r1, r0
 80060a4:	1850      	adds	r0, r2, r1
 80060a6:	4283      	cmp	r3, r0
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	d1e0      	bne.n	800606e <_free_r+0x22>
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	4408      	add	r0, r1
 80060b4:	6010      	str	r0, [r2, #0]
 80060b6:	e7da      	b.n	800606e <_free_r+0x22>
 80060b8:	d902      	bls.n	80060c0 <_free_r+0x74>
 80060ba:	230c      	movs	r3, #12
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	e7d6      	b.n	800606e <_free_r+0x22>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	1821      	adds	r1, r4, r0
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf04      	itt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	bf04      	itt	eq
 80060d0:	1809      	addeq	r1, r1, r0
 80060d2:	6021      	streq	r1, [r4, #0]
 80060d4:	6054      	str	r4, [r2, #4]
 80060d6:	e7ca      	b.n	800606e <_free_r+0x22>
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	24000494 	.word	0x24000494

080060e0 <malloc>:
 80060e0:	4b02      	ldr	r3, [pc, #8]	@ (80060ec <malloc+0xc>)
 80060e2:	4601      	mov	r1, r0
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	f000 b825 	b.w	8006134 <_malloc_r>
 80060ea:	bf00      	nop
 80060ec:	2400001c 	.word	0x2400001c

080060f0 <sbrk_aligned>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006130 <sbrk_aligned+0x40>)
 80060f4:	460c      	mov	r4, r1
 80060f6:	6831      	ldr	r1, [r6, #0]
 80060f8:	4605      	mov	r5, r0
 80060fa:	b911      	cbnz	r1, 8006102 <sbrk_aligned+0x12>
 80060fc:	f000 fe92 	bl	8006e24 <_sbrk_r>
 8006100:	6030      	str	r0, [r6, #0]
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 fe8d 	bl	8006e24 <_sbrk_r>
 800610a:	1c43      	adds	r3, r0, #1
 800610c:	d103      	bne.n	8006116 <sbrk_aligned+0x26>
 800610e:	f04f 34ff 	mov.w	r4, #4294967295
 8006112:	4620      	mov	r0, r4
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	1cc4      	adds	r4, r0, #3
 8006118:	f024 0403 	bic.w	r4, r4, #3
 800611c:	42a0      	cmp	r0, r4
 800611e:	d0f8      	beq.n	8006112 <sbrk_aligned+0x22>
 8006120:	1a21      	subs	r1, r4, r0
 8006122:	4628      	mov	r0, r5
 8006124:	f000 fe7e 	bl	8006e24 <_sbrk_r>
 8006128:	3001      	adds	r0, #1
 800612a:	d1f2      	bne.n	8006112 <sbrk_aligned+0x22>
 800612c:	e7ef      	b.n	800610e <sbrk_aligned+0x1e>
 800612e:	bf00      	nop
 8006130:	24000490 	.word	0x24000490

08006134 <_malloc_r>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	1ccd      	adds	r5, r1, #3
 800613a:	f025 0503 	bic.w	r5, r5, #3
 800613e:	3508      	adds	r5, #8
 8006140:	2d0c      	cmp	r5, #12
 8006142:	bf38      	it	cc
 8006144:	250c      	movcc	r5, #12
 8006146:	2d00      	cmp	r5, #0
 8006148:	4606      	mov	r6, r0
 800614a:	db01      	blt.n	8006150 <_malloc_r+0x1c>
 800614c:	42a9      	cmp	r1, r5
 800614e:	d904      	bls.n	800615a <_malloc_r+0x26>
 8006150:	230c      	movs	r3, #12
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	2000      	movs	r0, #0
 8006156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006230 <_malloc_r+0xfc>
 800615e:	f000 f869 	bl	8006234 <__malloc_lock>
 8006162:	f8d8 3000 	ldr.w	r3, [r8]
 8006166:	461c      	mov	r4, r3
 8006168:	bb44      	cbnz	r4, 80061bc <_malloc_r+0x88>
 800616a:	4629      	mov	r1, r5
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbf 	bl	80060f0 <sbrk_aligned>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	4604      	mov	r4, r0
 8006176:	d158      	bne.n	800622a <_malloc_r+0xf6>
 8006178:	f8d8 4000 	ldr.w	r4, [r8]
 800617c:	4627      	mov	r7, r4
 800617e:	2f00      	cmp	r7, #0
 8006180:	d143      	bne.n	800620a <_malloc_r+0xd6>
 8006182:	2c00      	cmp	r4, #0
 8006184:	d04b      	beq.n	800621e <_malloc_r+0xea>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	eb04 0903 	add.w	r9, r4, r3
 8006190:	f000 fe48 	bl	8006e24 <_sbrk_r>
 8006194:	4581      	cmp	r9, r0
 8006196:	d142      	bne.n	800621e <_malloc_r+0xea>
 8006198:	6821      	ldr	r1, [r4, #0]
 800619a:	1a6d      	subs	r5, r5, r1
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ffa6 	bl	80060f0 <sbrk_aligned>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d03a      	beq.n	800621e <_malloc_r+0xea>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	442b      	add	r3, r5
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	f8d8 3000 	ldr.w	r3, [r8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	bb62      	cbnz	r2, 8006210 <_malloc_r+0xdc>
 80061b6:	f8c8 7000 	str.w	r7, [r8]
 80061ba:	e00f      	b.n	80061dc <_malloc_r+0xa8>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	1b52      	subs	r2, r2, r5
 80061c0:	d420      	bmi.n	8006204 <_malloc_r+0xd0>
 80061c2:	2a0b      	cmp	r2, #11
 80061c4:	d917      	bls.n	80061f6 <_malloc_r+0xc2>
 80061c6:	1961      	adds	r1, r4, r5
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	6025      	str	r5, [r4, #0]
 80061cc:	bf18      	it	ne
 80061ce:	6059      	strne	r1, [r3, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	bf08      	it	eq
 80061d4:	f8c8 1000 	streq.w	r1, [r8]
 80061d8:	5162      	str	r2, [r4, r5]
 80061da:	604b      	str	r3, [r1, #4]
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 f82f 	bl	8006240 <__malloc_unlock>
 80061e2:	f104 000b 	add.w	r0, r4, #11
 80061e6:	1d23      	adds	r3, r4, #4
 80061e8:	f020 0007 	bic.w	r0, r0, #7
 80061ec:	1ac2      	subs	r2, r0, r3
 80061ee:	bf1c      	itt	ne
 80061f0:	1a1b      	subne	r3, r3, r0
 80061f2:	50a3      	strne	r3, [r4, r2]
 80061f4:	e7af      	b.n	8006156 <_malloc_r+0x22>
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	bf0c      	ite	eq
 80061fc:	f8c8 2000 	streq.w	r2, [r8]
 8006200:	605a      	strne	r2, [r3, #4]
 8006202:	e7eb      	b.n	80061dc <_malloc_r+0xa8>
 8006204:	4623      	mov	r3, r4
 8006206:	6864      	ldr	r4, [r4, #4]
 8006208:	e7ae      	b.n	8006168 <_malloc_r+0x34>
 800620a:	463c      	mov	r4, r7
 800620c:	687f      	ldr	r7, [r7, #4]
 800620e:	e7b6      	b.n	800617e <_malloc_r+0x4a>
 8006210:	461a      	mov	r2, r3
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	d1fb      	bne.n	8006210 <_malloc_r+0xdc>
 8006218:	2300      	movs	r3, #0
 800621a:	6053      	str	r3, [r2, #4]
 800621c:	e7de      	b.n	80061dc <_malloc_r+0xa8>
 800621e:	230c      	movs	r3, #12
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f80c 	bl	8006240 <__malloc_unlock>
 8006228:	e794      	b.n	8006154 <_malloc_r+0x20>
 800622a:	6005      	str	r5, [r0, #0]
 800622c:	e7d6      	b.n	80061dc <_malloc_r+0xa8>
 800622e:	bf00      	nop
 8006230:	24000494 	.word	0x24000494

08006234 <__malloc_lock>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__malloc_lock+0x8>)
 8006236:	f7ff b910 	b.w	800545a <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	2400048c 	.word	0x2400048c

08006240 <__malloc_unlock>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__malloc_unlock+0x8>)
 8006242:	f7ff b90b 	b.w	800545c <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	2400048c 	.word	0x2400048c

0800624c <_Balloc>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	69c6      	ldr	r6, [r0, #28]
 8006250:	4604      	mov	r4, r0
 8006252:	460d      	mov	r5, r1
 8006254:	b976      	cbnz	r6, 8006274 <_Balloc+0x28>
 8006256:	2010      	movs	r0, #16
 8006258:	f7ff ff42 	bl	80060e0 <malloc>
 800625c:	4602      	mov	r2, r0
 800625e:	61e0      	str	r0, [r4, #28]
 8006260:	b920      	cbnz	r0, 800626c <_Balloc+0x20>
 8006262:	4b18      	ldr	r3, [pc, #96]	@ (80062c4 <_Balloc+0x78>)
 8006264:	4818      	ldr	r0, [pc, #96]	@ (80062c8 <_Balloc+0x7c>)
 8006266:	216b      	movs	r1, #107	@ 0x6b
 8006268:	f000 fdec 	bl	8006e44 <__assert_func>
 800626c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006270:	6006      	str	r6, [r0, #0]
 8006272:	60c6      	str	r6, [r0, #12]
 8006274:	69e6      	ldr	r6, [r4, #28]
 8006276:	68f3      	ldr	r3, [r6, #12]
 8006278:	b183      	cbz	r3, 800629c <_Balloc+0x50>
 800627a:	69e3      	ldr	r3, [r4, #28]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006282:	b9b8      	cbnz	r0, 80062b4 <_Balloc+0x68>
 8006284:	2101      	movs	r1, #1
 8006286:	fa01 f605 	lsl.w	r6, r1, r5
 800628a:	1d72      	adds	r2, r6, #5
 800628c:	0092      	lsls	r2, r2, #2
 800628e:	4620      	mov	r0, r4
 8006290:	f000 fdf6 	bl	8006e80 <_calloc_r>
 8006294:	b160      	cbz	r0, 80062b0 <_Balloc+0x64>
 8006296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800629a:	e00e      	b.n	80062ba <_Balloc+0x6e>
 800629c:	2221      	movs	r2, #33	@ 0x21
 800629e:	2104      	movs	r1, #4
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fded 	bl	8006e80 <_calloc_r>
 80062a6:	69e3      	ldr	r3, [r4, #28]
 80062a8:	60f0      	str	r0, [r6, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e4      	bne.n	800627a <_Balloc+0x2e>
 80062b0:	2000      	movs	r0, #0
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	6802      	ldr	r2, [r0, #0]
 80062b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ba:	2300      	movs	r3, #0
 80062bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062c0:	e7f7      	b.n	80062b2 <_Balloc+0x66>
 80062c2:	bf00      	nop
 80062c4:	0800711d 	.word	0x0800711d
 80062c8:	0800719d 	.word	0x0800719d

080062cc <_Bfree>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	69c6      	ldr	r6, [r0, #28]
 80062d0:	4605      	mov	r5, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	b976      	cbnz	r6, 80062f4 <_Bfree+0x28>
 80062d6:	2010      	movs	r0, #16
 80062d8:	f7ff ff02 	bl	80060e0 <malloc>
 80062dc:	4602      	mov	r2, r0
 80062de:	61e8      	str	r0, [r5, #28]
 80062e0:	b920      	cbnz	r0, 80062ec <_Bfree+0x20>
 80062e2:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <_Bfree+0x3c>)
 80062e4:	4809      	ldr	r0, [pc, #36]	@ (800630c <_Bfree+0x40>)
 80062e6:	218f      	movs	r1, #143	@ 0x8f
 80062e8:	f000 fdac 	bl	8006e44 <__assert_func>
 80062ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062f0:	6006      	str	r6, [r0, #0]
 80062f2:	60c6      	str	r6, [r0, #12]
 80062f4:	b13c      	cbz	r4, 8006306 <_Bfree+0x3a>
 80062f6:	69eb      	ldr	r3, [r5, #28]
 80062f8:	6862      	ldr	r2, [r4, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006300:	6021      	str	r1, [r4, #0]
 8006302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	0800711d 	.word	0x0800711d
 800630c:	0800719d 	.word	0x0800719d

08006310 <__multadd>:
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	690d      	ldr	r5, [r1, #16]
 8006316:	4607      	mov	r7, r0
 8006318:	460c      	mov	r4, r1
 800631a:	461e      	mov	r6, r3
 800631c:	f101 0c14 	add.w	ip, r1, #20
 8006320:	2000      	movs	r0, #0
 8006322:	f8dc 3000 	ldr.w	r3, [ip]
 8006326:	b299      	uxth	r1, r3
 8006328:	fb02 6101 	mla	r1, r2, r1, r6
 800632c:	0c1e      	lsrs	r6, r3, #16
 800632e:	0c0b      	lsrs	r3, r1, #16
 8006330:	fb02 3306 	mla	r3, r2, r6, r3
 8006334:	b289      	uxth	r1, r1
 8006336:	3001      	adds	r0, #1
 8006338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800633c:	4285      	cmp	r5, r0
 800633e:	f84c 1b04 	str.w	r1, [ip], #4
 8006342:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006346:	dcec      	bgt.n	8006322 <__multadd+0x12>
 8006348:	b30e      	cbz	r6, 800638e <__multadd+0x7e>
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	42ab      	cmp	r3, r5
 800634e:	dc19      	bgt.n	8006384 <__multadd+0x74>
 8006350:	6861      	ldr	r1, [r4, #4]
 8006352:	4638      	mov	r0, r7
 8006354:	3101      	adds	r1, #1
 8006356:	f7ff ff79 	bl	800624c <_Balloc>
 800635a:	4680      	mov	r8, r0
 800635c:	b928      	cbnz	r0, 800636a <__multadd+0x5a>
 800635e:	4602      	mov	r2, r0
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <__multadd+0x84>)
 8006362:	480d      	ldr	r0, [pc, #52]	@ (8006398 <__multadd+0x88>)
 8006364:	21ba      	movs	r1, #186	@ 0xba
 8006366:	f000 fd6d 	bl	8006e44 <__assert_func>
 800636a:	6922      	ldr	r2, [r4, #16]
 800636c:	3202      	adds	r2, #2
 800636e:	f104 010c 	add.w	r1, r4, #12
 8006372:	0092      	lsls	r2, r2, #2
 8006374:	300c      	adds	r0, #12
 8006376:	f7ff f872 	bl	800545e <memcpy>
 800637a:	4621      	mov	r1, r4
 800637c:	4638      	mov	r0, r7
 800637e:	f7ff ffa5 	bl	80062cc <_Bfree>
 8006382:	4644      	mov	r4, r8
 8006384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006388:	3501      	adds	r5, #1
 800638a:	615e      	str	r6, [r3, #20]
 800638c:	6125      	str	r5, [r4, #16]
 800638e:	4620      	mov	r0, r4
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	0800718c 	.word	0x0800718c
 8006398:	0800719d 	.word	0x0800719d

0800639c <__hi0bits>:
 800639c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063a0:	4603      	mov	r3, r0
 80063a2:	bf36      	itet	cc
 80063a4:	0403      	lslcc	r3, r0, #16
 80063a6:	2000      	movcs	r0, #0
 80063a8:	2010      	movcc	r0, #16
 80063aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063ae:	bf3c      	itt	cc
 80063b0:	021b      	lslcc	r3, r3, #8
 80063b2:	3008      	addcc	r0, #8
 80063b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b8:	bf3c      	itt	cc
 80063ba:	011b      	lslcc	r3, r3, #4
 80063bc:	3004      	addcc	r0, #4
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c2:	bf3c      	itt	cc
 80063c4:	009b      	lslcc	r3, r3, #2
 80063c6:	3002      	addcc	r0, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	db05      	blt.n	80063d8 <__hi0bits+0x3c>
 80063cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063d0:	f100 0001 	add.w	r0, r0, #1
 80063d4:	bf08      	it	eq
 80063d6:	2020      	moveq	r0, #32
 80063d8:	4770      	bx	lr

080063da <__lo0bits>:
 80063da:	6803      	ldr	r3, [r0, #0]
 80063dc:	4602      	mov	r2, r0
 80063de:	f013 0007 	ands.w	r0, r3, #7
 80063e2:	d00b      	beq.n	80063fc <__lo0bits+0x22>
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	d421      	bmi.n	800642c <__lo0bits+0x52>
 80063e8:	0798      	lsls	r0, r3, #30
 80063ea:	bf49      	itett	mi
 80063ec:	085b      	lsrmi	r3, r3, #1
 80063ee:	089b      	lsrpl	r3, r3, #2
 80063f0:	2001      	movmi	r0, #1
 80063f2:	6013      	strmi	r3, [r2, #0]
 80063f4:	bf5c      	itt	pl
 80063f6:	6013      	strpl	r3, [r2, #0]
 80063f8:	2002      	movpl	r0, #2
 80063fa:	4770      	bx	lr
 80063fc:	b299      	uxth	r1, r3
 80063fe:	b909      	cbnz	r1, 8006404 <__lo0bits+0x2a>
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	2010      	movs	r0, #16
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	b909      	cbnz	r1, 800640c <__lo0bits+0x32>
 8006408:	3008      	adds	r0, #8
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	0719      	lsls	r1, r3, #28
 800640e:	bf04      	itt	eq
 8006410:	091b      	lsreq	r3, r3, #4
 8006412:	3004      	addeq	r0, #4
 8006414:	0799      	lsls	r1, r3, #30
 8006416:	bf04      	itt	eq
 8006418:	089b      	lsreq	r3, r3, #2
 800641a:	3002      	addeq	r0, #2
 800641c:	07d9      	lsls	r1, r3, #31
 800641e:	d403      	bmi.n	8006428 <__lo0bits+0x4e>
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	f100 0001 	add.w	r0, r0, #1
 8006426:	d003      	beq.n	8006430 <__lo0bits+0x56>
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4770      	bx	lr
 800642c:	2000      	movs	r0, #0
 800642e:	4770      	bx	lr
 8006430:	2020      	movs	r0, #32
 8006432:	4770      	bx	lr

08006434 <__i2b>:
 8006434:	b510      	push	{r4, lr}
 8006436:	460c      	mov	r4, r1
 8006438:	2101      	movs	r1, #1
 800643a:	f7ff ff07 	bl	800624c <_Balloc>
 800643e:	4602      	mov	r2, r0
 8006440:	b928      	cbnz	r0, 800644e <__i2b+0x1a>
 8006442:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <__i2b+0x24>)
 8006444:	4805      	ldr	r0, [pc, #20]	@ (800645c <__i2b+0x28>)
 8006446:	f240 1145 	movw	r1, #325	@ 0x145
 800644a:	f000 fcfb 	bl	8006e44 <__assert_func>
 800644e:	2301      	movs	r3, #1
 8006450:	6144      	str	r4, [r0, #20]
 8006452:	6103      	str	r3, [r0, #16]
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	0800718c 	.word	0x0800718c
 800645c:	0800719d 	.word	0x0800719d

08006460 <__multiply>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	4617      	mov	r7, r2
 8006466:	690a      	ldr	r2, [r1, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	429a      	cmp	r2, r3
 800646c:	bfa8      	it	ge
 800646e:	463b      	movge	r3, r7
 8006470:	4689      	mov	r9, r1
 8006472:	bfa4      	itt	ge
 8006474:	460f      	movge	r7, r1
 8006476:	4699      	movge	r9, r3
 8006478:	693d      	ldr	r5, [r7, #16]
 800647a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	eb05 060a 	add.w	r6, r5, sl
 8006486:	42b3      	cmp	r3, r6
 8006488:	b085      	sub	sp, #20
 800648a:	bfb8      	it	lt
 800648c:	3101      	addlt	r1, #1
 800648e:	f7ff fedd 	bl	800624c <_Balloc>
 8006492:	b930      	cbnz	r0, 80064a2 <__multiply+0x42>
 8006494:	4602      	mov	r2, r0
 8006496:	4b41      	ldr	r3, [pc, #260]	@ (800659c <__multiply+0x13c>)
 8006498:	4841      	ldr	r0, [pc, #260]	@ (80065a0 <__multiply+0x140>)
 800649a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800649e:	f000 fcd1 	bl	8006e44 <__assert_func>
 80064a2:	f100 0414 	add.w	r4, r0, #20
 80064a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80064aa:	4623      	mov	r3, r4
 80064ac:	2200      	movs	r2, #0
 80064ae:	4573      	cmp	r3, lr
 80064b0:	d320      	bcc.n	80064f4 <__multiply+0x94>
 80064b2:	f107 0814 	add.w	r8, r7, #20
 80064b6:	f109 0114 	add.w	r1, r9, #20
 80064ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80064be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	1beb      	subs	r3, r5, r7
 80064c6:	3b15      	subs	r3, #21
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	3304      	adds	r3, #4
 80064ce:	3715      	adds	r7, #21
 80064d0:	42bd      	cmp	r5, r7
 80064d2:	bf38      	it	cc
 80064d4:	2304      	movcc	r3, #4
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	9103      	str	r1, [sp, #12]
 80064dc:	428b      	cmp	r3, r1
 80064de:	d80c      	bhi.n	80064fa <__multiply+0x9a>
 80064e0:	2e00      	cmp	r6, #0
 80064e2:	dd03      	ble.n	80064ec <__multiply+0x8c>
 80064e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d055      	beq.n	8006598 <__multiply+0x138>
 80064ec:	6106      	str	r6, [r0, #16]
 80064ee:	b005      	add	sp, #20
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	f843 2b04 	str.w	r2, [r3], #4
 80064f8:	e7d9      	b.n	80064ae <__multiply+0x4e>
 80064fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80064fe:	f1ba 0f00 	cmp.w	sl, #0
 8006502:	d01f      	beq.n	8006544 <__multiply+0xe4>
 8006504:	46c4      	mov	ip, r8
 8006506:	46a1      	mov	r9, r4
 8006508:	2700      	movs	r7, #0
 800650a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800650e:	f8d9 3000 	ldr.w	r3, [r9]
 8006512:	fa1f fb82 	uxth.w	fp, r2
 8006516:	b29b      	uxth	r3, r3
 8006518:	fb0a 330b 	mla	r3, sl, fp, r3
 800651c:	443b      	add	r3, r7
 800651e:	f8d9 7000 	ldr.w	r7, [r9]
 8006522:	0c12      	lsrs	r2, r2, #16
 8006524:	0c3f      	lsrs	r7, r7, #16
 8006526:	fb0a 7202 	mla	r2, sl, r2, r7
 800652a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800652e:	b29b      	uxth	r3, r3
 8006530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006534:	4565      	cmp	r5, ip
 8006536:	f849 3b04 	str.w	r3, [r9], #4
 800653a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800653e:	d8e4      	bhi.n	800650a <__multiply+0xaa>
 8006540:	9b01      	ldr	r3, [sp, #4]
 8006542:	50e7      	str	r7, [r4, r3]
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800654a:	3104      	adds	r1, #4
 800654c:	f1b9 0f00 	cmp.w	r9, #0
 8006550:	d020      	beq.n	8006594 <__multiply+0x134>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	4647      	mov	r7, r8
 8006556:	46a4      	mov	ip, r4
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006560:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006564:	fb09 220b 	mla	r2, r9, fp, r2
 8006568:	4452      	add	r2, sl
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006570:	f84c 3b04 	str.w	r3, [ip], #4
 8006574:	f857 3b04 	ldr.w	r3, [r7], #4
 8006578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800657c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006580:	fb09 330a 	mla	r3, r9, sl, r3
 8006584:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006588:	42bd      	cmp	r5, r7
 800658a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800658e:	d8e5      	bhi.n	800655c <__multiply+0xfc>
 8006590:	9a01      	ldr	r2, [sp, #4]
 8006592:	50a3      	str	r3, [r4, r2]
 8006594:	3404      	adds	r4, #4
 8006596:	e79f      	b.n	80064d8 <__multiply+0x78>
 8006598:	3e01      	subs	r6, #1
 800659a:	e7a1      	b.n	80064e0 <__multiply+0x80>
 800659c:	0800718c 	.word	0x0800718c
 80065a0:	0800719d 	.word	0x0800719d

080065a4 <__pow5mult>:
 80065a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a8:	4615      	mov	r5, r2
 80065aa:	f012 0203 	ands.w	r2, r2, #3
 80065ae:	4607      	mov	r7, r0
 80065b0:	460e      	mov	r6, r1
 80065b2:	d007      	beq.n	80065c4 <__pow5mult+0x20>
 80065b4:	4c25      	ldr	r4, [pc, #148]	@ (800664c <__pow5mult+0xa8>)
 80065b6:	3a01      	subs	r2, #1
 80065b8:	2300      	movs	r3, #0
 80065ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065be:	f7ff fea7 	bl	8006310 <__multadd>
 80065c2:	4606      	mov	r6, r0
 80065c4:	10ad      	asrs	r5, r5, #2
 80065c6:	d03d      	beq.n	8006644 <__pow5mult+0xa0>
 80065c8:	69fc      	ldr	r4, [r7, #28]
 80065ca:	b97c      	cbnz	r4, 80065ec <__pow5mult+0x48>
 80065cc:	2010      	movs	r0, #16
 80065ce:	f7ff fd87 	bl	80060e0 <malloc>
 80065d2:	4602      	mov	r2, r0
 80065d4:	61f8      	str	r0, [r7, #28]
 80065d6:	b928      	cbnz	r0, 80065e4 <__pow5mult+0x40>
 80065d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006650 <__pow5mult+0xac>)
 80065da:	481e      	ldr	r0, [pc, #120]	@ (8006654 <__pow5mult+0xb0>)
 80065dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065e0:	f000 fc30 	bl	8006e44 <__assert_func>
 80065e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e8:	6004      	str	r4, [r0, #0]
 80065ea:	60c4      	str	r4, [r0, #12]
 80065ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065f4:	b94c      	cbnz	r4, 800660a <__pow5mult+0x66>
 80065f6:	f240 2171 	movw	r1, #625	@ 0x271
 80065fa:	4638      	mov	r0, r7
 80065fc:	f7ff ff1a 	bl	8006434 <__i2b>
 8006600:	2300      	movs	r3, #0
 8006602:	f8c8 0008 	str.w	r0, [r8, #8]
 8006606:	4604      	mov	r4, r0
 8006608:	6003      	str	r3, [r0, #0]
 800660a:	f04f 0900 	mov.w	r9, #0
 800660e:	07eb      	lsls	r3, r5, #31
 8006610:	d50a      	bpl.n	8006628 <__pow5mult+0x84>
 8006612:	4631      	mov	r1, r6
 8006614:	4622      	mov	r2, r4
 8006616:	4638      	mov	r0, r7
 8006618:	f7ff ff22 	bl	8006460 <__multiply>
 800661c:	4631      	mov	r1, r6
 800661e:	4680      	mov	r8, r0
 8006620:	4638      	mov	r0, r7
 8006622:	f7ff fe53 	bl	80062cc <_Bfree>
 8006626:	4646      	mov	r6, r8
 8006628:	106d      	asrs	r5, r5, #1
 800662a:	d00b      	beq.n	8006644 <__pow5mult+0xa0>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	b938      	cbnz	r0, 8006640 <__pow5mult+0x9c>
 8006630:	4622      	mov	r2, r4
 8006632:	4621      	mov	r1, r4
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ff13 	bl	8006460 <__multiply>
 800663a:	6020      	str	r0, [r4, #0]
 800663c:	f8c0 9000 	str.w	r9, [r0]
 8006640:	4604      	mov	r4, r0
 8006642:	e7e4      	b.n	800660e <__pow5mult+0x6a>
 8006644:	4630      	mov	r0, r6
 8006646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800664a:	bf00      	nop
 800664c:	08007250 	.word	0x08007250
 8006650:	0800711d 	.word	0x0800711d
 8006654:	0800719d 	.word	0x0800719d

08006658 <__lshift>:
 8006658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	460c      	mov	r4, r1
 800665e:	6849      	ldr	r1, [r1, #4]
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	4607      	mov	r7, r0
 800666a:	4691      	mov	r9, r2
 800666c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006670:	f108 0601 	add.w	r6, r8, #1
 8006674:	42b3      	cmp	r3, r6
 8006676:	db0b      	blt.n	8006690 <__lshift+0x38>
 8006678:	4638      	mov	r0, r7
 800667a:	f7ff fde7 	bl	800624c <_Balloc>
 800667e:	4605      	mov	r5, r0
 8006680:	b948      	cbnz	r0, 8006696 <__lshift+0x3e>
 8006682:	4602      	mov	r2, r0
 8006684:	4b28      	ldr	r3, [pc, #160]	@ (8006728 <__lshift+0xd0>)
 8006686:	4829      	ldr	r0, [pc, #164]	@ (800672c <__lshift+0xd4>)
 8006688:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800668c:	f000 fbda 	bl	8006e44 <__assert_func>
 8006690:	3101      	adds	r1, #1
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	e7ee      	b.n	8006674 <__lshift+0x1c>
 8006696:	2300      	movs	r3, #0
 8006698:	f100 0114 	add.w	r1, r0, #20
 800669c:	f100 0210 	add.w	r2, r0, #16
 80066a0:	4618      	mov	r0, r3
 80066a2:	4553      	cmp	r3, sl
 80066a4:	db33      	blt.n	800670e <__lshift+0xb6>
 80066a6:	6920      	ldr	r0, [r4, #16]
 80066a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066ac:	f104 0314 	add.w	r3, r4, #20
 80066b0:	f019 091f 	ands.w	r9, r9, #31
 80066b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066bc:	d02b      	beq.n	8006716 <__lshift+0xbe>
 80066be:	f1c9 0e20 	rsb	lr, r9, #32
 80066c2:	468a      	mov	sl, r1
 80066c4:	2200      	movs	r2, #0
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	fa00 f009 	lsl.w	r0, r0, r9
 80066cc:	4310      	orrs	r0, r2
 80066ce:	f84a 0b04 	str.w	r0, [sl], #4
 80066d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d6:	459c      	cmp	ip, r3
 80066d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80066dc:	d8f3      	bhi.n	80066c6 <__lshift+0x6e>
 80066de:	ebac 0304 	sub.w	r3, ip, r4
 80066e2:	3b15      	subs	r3, #21
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	3304      	adds	r3, #4
 80066ea:	f104 0015 	add.w	r0, r4, #21
 80066ee:	4560      	cmp	r0, ip
 80066f0:	bf88      	it	hi
 80066f2:	2304      	movhi	r3, #4
 80066f4:	50ca      	str	r2, [r1, r3]
 80066f6:	b10a      	cbz	r2, 80066fc <__lshift+0xa4>
 80066f8:	f108 0602 	add.w	r6, r8, #2
 80066fc:	3e01      	subs	r6, #1
 80066fe:	4638      	mov	r0, r7
 8006700:	612e      	str	r6, [r5, #16]
 8006702:	4621      	mov	r1, r4
 8006704:	f7ff fde2 	bl	80062cc <_Bfree>
 8006708:	4628      	mov	r0, r5
 800670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006712:	3301      	adds	r3, #1
 8006714:	e7c5      	b.n	80066a2 <__lshift+0x4a>
 8006716:	3904      	subs	r1, #4
 8006718:	f853 2b04 	ldr.w	r2, [r3], #4
 800671c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006720:	459c      	cmp	ip, r3
 8006722:	d8f9      	bhi.n	8006718 <__lshift+0xc0>
 8006724:	e7ea      	b.n	80066fc <__lshift+0xa4>
 8006726:	bf00      	nop
 8006728:	0800718c 	.word	0x0800718c
 800672c:	0800719d 	.word	0x0800719d

08006730 <__mcmp>:
 8006730:	690a      	ldr	r2, [r1, #16]
 8006732:	4603      	mov	r3, r0
 8006734:	6900      	ldr	r0, [r0, #16]
 8006736:	1a80      	subs	r0, r0, r2
 8006738:	b530      	push	{r4, r5, lr}
 800673a:	d10e      	bne.n	800675a <__mcmp+0x2a>
 800673c:	3314      	adds	r3, #20
 800673e:	3114      	adds	r1, #20
 8006740:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006744:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006748:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800674c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006750:	4295      	cmp	r5, r2
 8006752:	d003      	beq.n	800675c <__mcmp+0x2c>
 8006754:	d205      	bcs.n	8006762 <__mcmp+0x32>
 8006756:	f04f 30ff 	mov.w	r0, #4294967295
 800675a:	bd30      	pop	{r4, r5, pc}
 800675c:	42a3      	cmp	r3, r4
 800675e:	d3f3      	bcc.n	8006748 <__mcmp+0x18>
 8006760:	e7fb      	b.n	800675a <__mcmp+0x2a>
 8006762:	2001      	movs	r0, #1
 8006764:	e7f9      	b.n	800675a <__mcmp+0x2a>
	...

08006768 <__mdiff>:
 8006768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	4689      	mov	r9, r1
 800676e:	4606      	mov	r6, r0
 8006770:	4611      	mov	r1, r2
 8006772:	4648      	mov	r0, r9
 8006774:	4614      	mov	r4, r2
 8006776:	f7ff ffdb 	bl	8006730 <__mcmp>
 800677a:	1e05      	subs	r5, r0, #0
 800677c:	d112      	bne.n	80067a4 <__mdiff+0x3c>
 800677e:	4629      	mov	r1, r5
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff fd63 	bl	800624c <_Balloc>
 8006786:	4602      	mov	r2, r0
 8006788:	b928      	cbnz	r0, 8006796 <__mdiff+0x2e>
 800678a:	4b3f      	ldr	r3, [pc, #252]	@ (8006888 <__mdiff+0x120>)
 800678c:	f240 2137 	movw	r1, #567	@ 0x237
 8006790:	483e      	ldr	r0, [pc, #248]	@ (800688c <__mdiff+0x124>)
 8006792:	f000 fb57 	bl	8006e44 <__assert_func>
 8006796:	2301      	movs	r3, #1
 8006798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800679c:	4610      	mov	r0, r2
 800679e:	b003      	add	sp, #12
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	bfbc      	itt	lt
 80067a6:	464b      	movlt	r3, r9
 80067a8:	46a1      	movlt	r9, r4
 80067aa:	4630      	mov	r0, r6
 80067ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067b0:	bfba      	itte	lt
 80067b2:	461c      	movlt	r4, r3
 80067b4:	2501      	movlt	r5, #1
 80067b6:	2500      	movge	r5, #0
 80067b8:	f7ff fd48 	bl	800624c <_Balloc>
 80067bc:	4602      	mov	r2, r0
 80067be:	b918      	cbnz	r0, 80067c8 <__mdiff+0x60>
 80067c0:	4b31      	ldr	r3, [pc, #196]	@ (8006888 <__mdiff+0x120>)
 80067c2:	f240 2145 	movw	r1, #581	@ 0x245
 80067c6:	e7e3      	b.n	8006790 <__mdiff+0x28>
 80067c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067cc:	6926      	ldr	r6, [r4, #16]
 80067ce:	60c5      	str	r5, [r0, #12]
 80067d0:	f109 0310 	add.w	r3, r9, #16
 80067d4:	f109 0514 	add.w	r5, r9, #20
 80067d8:	f104 0e14 	add.w	lr, r4, #20
 80067dc:	f100 0b14 	add.w	fp, r0, #20
 80067e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80067e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	46d9      	mov	r9, fp
 80067ec:	f04f 0c00 	mov.w	ip, #0
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	fa1f f38a 	uxth.w	r3, sl
 8006800:	4619      	mov	r1, r3
 8006802:	b283      	uxth	r3, r0
 8006804:	1acb      	subs	r3, r1, r3
 8006806:	0c00      	lsrs	r0, r0, #16
 8006808:	4463      	add	r3, ip
 800680a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800680e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006812:	b29b      	uxth	r3, r3
 8006814:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006818:	4576      	cmp	r6, lr
 800681a:	f849 3b04 	str.w	r3, [r9], #4
 800681e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006822:	d8e5      	bhi.n	80067f0 <__mdiff+0x88>
 8006824:	1b33      	subs	r3, r6, r4
 8006826:	3b15      	subs	r3, #21
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	3415      	adds	r4, #21
 800682e:	3304      	adds	r3, #4
 8006830:	42a6      	cmp	r6, r4
 8006832:	bf38      	it	cc
 8006834:	2304      	movcc	r3, #4
 8006836:	441d      	add	r5, r3
 8006838:	445b      	add	r3, fp
 800683a:	461e      	mov	r6, r3
 800683c:	462c      	mov	r4, r5
 800683e:	4544      	cmp	r4, r8
 8006840:	d30e      	bcc.n	8006860 <__mdiff+0xf8>
 8006842:	f108 0103 	add.w	r1, r8, #3
 8006846:	1b49      	subs	r1, r1, r5
 8006848:	f021 0103 	bic.w	r1, r1, #3
 800684c:	3d03      	subs	r5, #3
 800684e:	45a8      	cmp	r8, r5
 8006850:	bf38      	it	cc
 8006852:	2100      	movcc	r1, #0
 8006854:	440b      	add	r3, r1
 8006856:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800685a:	b191      	cbz	r1, 8006882 <__mdiff+0x11a>
 800685c:	6117      	str	r7, [r2, #16]
 800685e:	e79d      	b.n	800679c <__mdiff+0x34>
 8006860:	f854 1b04 	ldr.w	r1, [r4], #4
 8006864:	46e6      	mov	lr, ip
 8006866:	0c08      	lsrs	r0, r1, #16
 8006868:	fa1c fc81 	uxtah	ip, ip, r1
 800686c:	4471      	add	r1, lr
 800686e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006872:	b289      	uxth	r1, r1
 8006874:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006878:	f846 1b04 	str.w	r1, [r6], #4
 800687c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006880:	e7dd      	b.n	800683e <__mdiff+0xd6>
 8006882:	3f01      	subs	r7, #1
 8006884:	e7e7      	b.n	8006856 <__mdiff+0xee>
 8006886:	bf00      	nop
 8006888:	0800718c 	.word	0x0800718c
 800688c:	0800719d 	.word	0x0800719d

08006890 <__d2b>:
 8006890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006894:	460f      	mov	r7, r1
 8006896:	2101      	movs	r1, #1
 8006898:	ec59 8b10 	vmov	r8, r9, d0
 800689c:	4616      	mov	r6, r2
 800689e:	f7ff fcd5 	bl	800624c <_Balloc>
 80068a2:	4604      	mov	r4, r0
 80068a4:	b930      	cbnz	r0, 80068b4 <__d2b+0x24>
 80068a6:	4602      	mov	r2, r0
 80068a8:	4b23      	ldr	r3, [pc, #140]	@ (8006938 <__d2b+0xa8>)
 80068aa:	4824      	ldr	r0, [pc, #144]	@ (800693c <__d2b+0xac>)
 80068ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80068b0:	f000 fac8 	bl	8006e44 <__assert_func>
 80068b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068bc:	b10d      	cbz	r5, 80068c2 <__d2b+0x32>
 80068be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	f1b8 0300 	subs.w	r3, r8, #0
 80068c8:	d023      	beq.n	8006912 <__d2b+0x82>
 80068ca:	4668      	mov	r0, sp
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	f7ff fd84 	bl	80063da <__lo0bits>
 80068d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068d6:	b1d0      	cbz	r0, 800690e <__d2b+0x7e>
 80068d8:	f1c0 0320 	rsb	r3, r0, #32
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	430b      	orrs	r3, r1
 80068e2:	40c2      	lsrs	r2, r0
 80068e4:	6163      	str	r3, [r4, #20]
 80068e6:	9201      	str	r2, [sp, #4]
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	61a3      	str	r3, [r4, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf0c      	ite	eq
 80068f0:	2201      	moveq	r2, #1
 80068f2:	2202      	movne	r2, #2
 80068f4:	6122      	str	r2, [r4, #16]
 80068f6:	b1a5      	cbz	r5, 8006922 <__d2b+0x92>
 80068f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068fc:	4405      	add	r5, r0
 80068fe:	603d      	str	r5, [r7, #0]
 8006900:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006904:	6030      	str	r0, [r6, #0]
 8006906:	4620      	mov	r0, r4
 8006908:	b003      	add	sp, #12
 800690a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800690e:	6161      	str	r1, [r4, #20]
 8006910:	e7ea      	b.n	80068e8 <__d2b+0x58>
 8006912:	a801      	add	r0, sp, #4
 8006914:	f7ff fd61 	bl	80063da <__lo0bits>
 8006918:	9b01      	ldr	r3, [sp, #4]
 800691a:	6163      	str	r3, [r4, #20]
 800691c:	3020      	adds	r0, #32
 800691e:	2201      	movs	r2, #1
 8006920:	e7e8      	b.n	80068f4 <__d2b+0x64>
 8006922:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006926:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800692a:	6038      	str	r0, [r7, #0]
 800692c:	6918      	ldr	r0, [r3, #16]
 800692e:	f7ff fd35 	bl	800639c <__hi0bits>
 8006932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006936:	e7e5      	b.n	8006904 <__d2b+0x74>
 8006938:	0800718c 	.word	0x0800718c
 800693c:	0800719d 	.word	0x0800719d

08006940 <__sfputc_r>:
 8006940:	6893      	ldr	r3, [r2, #8]
 8006942:	3b01      	subs	r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	b410      	push	{r4}
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	da08      	bge.n	800695e <__sfputc_r+0x1e>
 800694c:	6994      	ldr	r4, [r2, #24]
 800694e:	42a3      	cmp	r3, r4
 8006950:	db01      	blt.n	8006956 <__sfputc_r+0x16>
 8006952:	290a      	cmp	r1, #10
 8006954:	d103      	bne.n	800695e <__sfputc_r+0x1e>
 8006956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800695a:	f7fe bc6c 	b.w	8005236 <__swbuf_r>
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	1c58      	adds	r0, r3, #1
 8006962:	6010      	str	r0, [r2, #0]
 8006964:	7019      	strb	r1, [r3, #0]
 8006966:	4608      	mov	r0, r1
 8006968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800696c:	4770      	bx	lr

0800696e <__sfputs_r>:
 800696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	4614      	mov	r4, r2
 8006976:	18d5      	adds	r5, r2, r3
 8006978:	42ac      	cmp	r4, r5
 800697a:	d101      	bne.n	8006980 <__sfputs_r+0x12>
 800697c:	2000      	movs	r0, #0
 800697e:	e007      	b.n	8006990 <__sfputs_r+0x22>
 8006980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006984:	463a      	mov	r2, r7
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff ffda 	bl	8006940 <__sfputc_r>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d1f3      	bne.n	8006978 <__sfputs_r+0xa>
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006994 <_vfiprintf_r>:
 8006994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006998:	460d      	mov	r5, r1
 800699a:	b09d      	sub	sp, #116	@ 0x74
 800699c:	4614      	mov	r4, r2
 800699e:	4698      	mov	r8, r3
 80069a0:	4606      	mov	r6, r0
 80069a2:	b118      	cbz	r0, 80069ac <_vfiprintf_r+0x18>
 80069a4:	6a03      	ldr	r3, [r0, #32]
 80069a6:	b90b      	cbnz	r3, 80069ac <_vfiprintf_r+0x18>
 80069a8:	f7fe fb5c 	bl	8005064 <__sinit>
 80069ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	d405      	bmi.n	80069be <_vfiprintf_r+0x2a>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	059a      	lsls	r2, r3, #22
 80069b6:	d402      	bmi.n	80069be <_vfiprintf_r+0x2a>
 80069b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ba:	f7fe fd4e 	bl	800545a <__retarget_lock_acquire_recursive>
 80069be:	89ab      	ldrh	r3, [r5, #12]
 80069c0:	071b      	lsls	r3, r3, #28
 80069c2:	d501      	bpl.n	80069c8 <_vfiprintf_r+0x34>
 80069c4:	692b      	ldr	r3, [r5, #16]
 80069c6:	b99b      	cbnz	r3, 80069f0 <_vfiprintf_r+0x5c>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7fe fc72 	bl	80052b4 <__swsetup_r>
 80069d0:	b170      	cbz	r0, 80069f0 <_vfiprintf_r+0x5c>
 80069d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d4:	07dc      	lsls	r4, r3, #31
 80069d6:	d504      	bpl.n	80069e2 <_vfiprintf_r+0x4e>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	b01d      	add	sp, #116	@ 0x74
 80069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	0598      	lsls	r0, r3, #22
 80069e6:	d4f7      	bmi.n	80069d8 <_vfiprintf_r+0x44>
 80069e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ea:	f7fe fd37 	bl	800545c <__retarget_lock_release_recursive>
 80069ee:	e7f3      	b.n	80069d8 <_vfiprintf_r+0x44>
 80069f0:	2300      	movs	r3, #0
 80069f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f4:	2320      	movs	r3, #32
 80069f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fe:	2330      	movs	r3, #48	@ 0x30
 8006a00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bb0 <_vfiprintf_r+0x21c>
 8006a04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	469a      	mov	sl, r3
 8006a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a14:	b10a      	cbz	r2, 8006a1a <_vfiprintf_r+0x86>
 8006a16:	2a25      	cmp	r2, #37	@ 0x25
 8006a18:	d1f9      	bne.n	8006a0e <_vfiprintf_r+0x7a>
 8006a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1e:	d00b      	beq.n	8006a38 <_vfiprintf_r+0xa4>
 8006a20:	465b      	mov	r3, fp
 8006a22:	4622      	mov	r2, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f7ff ffa1 	bl	800696e <__sfputs_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f000 80a7 	beq.w	8006b80 <_vfiprintf_r+0x1ec>
 8006a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a34:	445a      	add	r2, fp
 8006a36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a38:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 809f 	beq.w	8006b80 <_vfiprintf_r+0x1ec>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a4c:	f10a 0a01 	add.w	sl, sl, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a5a:	4654      	mov	r4, sl
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4853      	ldr	r0, [pc, #332]	@ (8006bb0 <_vfiprintf_r+0x21c>)
 8006a64:	f7f9 fc3c 	bl	80002e0 <memchr>
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	b9d8      	cbnz	r0, 8006aa4 <_vfiprintf_r+0x110>
 8006a6c:	06d1      	lsls	r1, r2, #27
 8006a6e:	bf44      	itt	mi
 8006a70:	2320      	movmi	r3, #32
 8006a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a76:	0713      	lsls	r3, r2, #28
 8006a78:	bf44      	itt	mi
 8006a7a:	232b      	movmi	r3, #43	@ 0x2b
 8006a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a80:	f89a 3000 	ldrb.w	r3, [sl]
 8006a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a86:	d015      	beq.n	8006ab4 <_vfiprintf_r+0x120>
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	4654      	mov	r4, sl
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4621      	mov	r1, r4
 8006a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a98:	3b30      	subs	r3, #48	@ 0x30
 8006a9a:	2b09      	cmp	r3, #9
 8006a9c:	d94b      	bls.n	8006b36 <_vfiprintf_r+0x1a2>
 8006a9e:	b1b0      	cbz	r0, 8006ace <_vfiprintf_r+0x13a>
 8006aa0:	9207      	str	r2, [sp, #28]
 8006aa2:	e014      	b.n	8006ace <_vfiprintf_r+0x13a>
 8006aa4:	eba0 0308 	sub.w	r3, r0, r8
 8006aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8006aac:	4313      	orrs	r3, r2
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	46a2      	mov	sl, r4
 8006ab2:	e7d2      	b.n	8006a5a <_vfiprintf_r+0xc6>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	1d19      	adds	r1, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9103      	str	r1, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfbb      	ittet	lt
 8006ac0:	425b      	neglt	r3, r3
 8006ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac6:	9307      	strge	r3, [sp, #28]
 8006ac8:	9307      	strlt	r3, [sp, #28]
 8006aca:	bfb8      	it	lt
 8006acc:	9204      	strlt	r2, [sp, #16]
 8006ace:	7823      	ldrb	r3, [r4, #0]
 8006ad0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ad2:	d10a      	bne.n	8006aea <_vfiprintf_r+0x156>
 8006ad4:	7863      	ldrb	r3, [r4, #1]
 8006ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad8:	d132      	bne.n	8006b40 <_vfiprintf_r+0x1ac>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	9203      	str	r2, [sp, #12]
 8006ae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ae6:	3402      	adds	r4, #2
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bc0 <_vfiprintf_r+0x22c>
 8006aee:	7821      	ldrb	r1, [r4, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	4650      	mov	r0, sl
 8006af4:	f7f9 fbf4 	bl	80002e0 <memchr>
 8006af8:	b138      	cbz	r0, 8006b0a <_vfiprintf_r+0x176>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	eba0 000a 	sub.w	r0, r0, sl
 8006b00:	2240      	movs	r2, #64	@ 0x40
 8006b02:	4082      	lsls	r2, r0
 8006b04:	4313      	orrs	r3, r2
 8006b06:	3401      	adds	r4, #1
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0e:	4829      	ldr	r0, [pc, #164]	@ (8006bb4 <_vfiprintf_r+0x220>)
 8006b10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b14:	2206      	movs	r2, #6
 8006b16:	f7f9 fbe3 	bl	80002e0 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d03f      	beq.n	8006b9e <_vfiprintf_r+0x20a>
 8006b1e:	4b26      	ldr	r3, [pc, #152]	@ (8006bb8 <_vfiprintf_r+0x224>)
 8006b20:	bb1b      	cbnz	r3, 8006b6a <_vfiprintf_r+0x1d6>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	3307      	adds	r3, #7
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b30:	443b      	add	r3, r7
 8006b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b34:	e76a      	b.n	8006a0c <_vfiprintf_r+0x78>
 8006b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e7a8      	b.n	8006a92 <_vfiprintf_r+0xfe>
 8006b40:	2300      	movs	r3, #0
 8006b42:	3401      	adds	r4, #1
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	4619      	mov	r1, r3
 8006b48:	f04f 0c0a 	mov.w	ip, #10
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b52:	3a30      	subs	r2, #48	@ 0x30
 8006b54:	2a09      	cmp	r2, #9
 8006b56:	d903      	bls.n	8006b60 <_vfiprintf_r+0x1cc>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0c6      	beq.n	8006aea <_vfiprintf_r+0x156>
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	e7c4      	b.n	8006aea <_vfiprintf_r+0x156>
 8006b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b64:	4604      	mov	r4, r0
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7f0      	b.n	8006b4c <_vfiprintf_r+0x1b8>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <_vfiprintf_r+0x228>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7fd fe43 	bl	8004800 <_printf_float>
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	1c78      	adds	r0, r7, #1
 8006b7e:	d1d6      	bne.n	8006b2e <_vfiprintf_r+0x19a>
 8006b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_vfiprintf_r+0x1fe>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	059a      	lsls	r2, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_vfiprintf_r+0x1fe>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b8e:	f7fe fc65 	bl	800545c <__retarget_lock_release_recursive>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	065b      	lsls	r3, r3, #25
 8006b96:	f53f af1f 	bmi.w	80069d8 <_vfiprintf_r+0x44>
 8006b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b9c:	e71e      	b.n	80069dc <_vfiprintf_r+0x48>
 8006b9e:	ab03      	add	r3, sp, #12
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <_vfiprintf_r+0x228>)
 8006ba6:	a904      	add	r1, sp, #16
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7fe f8b1 	bl	8004d10 <_printf_i>
 8006bae:	e7e4      	b.n	8006b7a <_vfiprintf_r+0x1e6>
 8006bb0:	080071f6 	.word	0x080071f6
 8006bb4:	08007200 	.word	0x08007200
 8006bb8:	08004801 	.word	0x08004801
 8006bbc:	0800696f 	.word	0x0800696f
 8006bc0:	080071fc 	.word	0x080071fc

08006bc4 <__sflush_r>:
 8006bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	0716      	lsls	r6, r2, #28
 8006bce:	4605      	mov	r5, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	d454      	bmi.n	8006c7e <__sflush_r+0xba>
 8006bd4:	684b      	ldr	r3, [r1, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dc02      	bgt.n	8006be0 <__sflush_r+0x1c>
 8006bda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dd48      	ble.n	8006c72 <__sflush_r+0xae>
 8006be0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d045      	beq.n	8006c72 <__sflush_r+0xae>
 8006be6:	2300      	movs	r3, #0
 8006be8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bec:	682f      	ldr	r7, [r5, #0]
 8006bee:	6a21      	ldr	r1, [r4, #32]
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	d030      	beq.n	8006c56 <__sflush_r+0x92>
 8006bf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	0759      	lsls	r1, r3, #29
 8006bfa:	d505      	bpl.n	8006c08 <__sflush_r+0x44>
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	1ad2      	subs	r2, r2, r3
 8006c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c02:	b10b      	cbz	r3, 8006c08 <__sflush_r+0x44>
 8006c04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c06:	1ad2      	subs	r2, r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c0c:	6a21      	ldr	r1, [r4, #32]
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b0      	blx	r6
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	d106      	bne.n	8006c26 <__sflush_r+0x62>
 8006c18:	6829      	ldr	r1, [r5, #0]
 8006c1a:	291d      	cmp	r1, #29
 8006c1c:	d82b      	bhi.n	8006c76 <__sflush_r+0xb2>
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc8 <__sflush_r+0x104>)
 8006c20:	40ca      	lsrs	r2, r1
 8006c22:	07d6      	lsls	r6, r2, #31
 8006c24:	d527      	bpl.n	8006c76 <__sflush_r+0xb2>
 8006c26:	2200      	movs	r2, #0
 8006c28:	6062      	str	r2, [r4, #4]
 8006c2a:	04d9      	lsls	r1, r3, #19
 8006c2c:	6922      	ldr	r2, [r4, #16]
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	d504      	bpl.n	8006c3c <__sflush_r+0x78>
 8006c32:	1c42      	adds	r2, r0, #1
 8006c34:	d101      	bne.n	8006c3a <__sflush_r+0x76>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	b903      	cbnz	r3, 8006c3c <__sflush_r+0x78>
 8006c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c3e:	602f      	str	r7, [r5, #0]
 8006c40:	b1b9      	cbz	r1, 8006c72 <__sflush_r+0xae>
 8006c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d002      	beq.n	8006c50 <__sflush_r+0x8c>
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7ff f9fe 	bl	800604c <_free_r>
 8006c50:	2300      	movs	r3, #0
 8006c52:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c54:	e00d      	b.n	8006c72 <__sflush_r+0xae>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b0      	blx	r6
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	1c50      	adds	r0, r2, #1
 8006c60:	d1c9      	bne.n	8006bf6 <__sflush_r+0x32>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0c6      	beq.n	8006bf6 <__sflush_r+0x32>
 8006c68:	2b1d      	cmp	r3, #29
 8006c6a:	d001      	beq.n	8006c70 <__sflush_r+0xac>
 8006c6c:	2b16      	cmp	r3, #22
 8006c6e:	d11e      	bne.n	8006cae <__sflush_r+0xea>
 8006c70:	602f      	str	r7, [r5, #0]
 8006c72:	2000      	movs	r0, #0
 8006c74:	e022      	b.n	8006cbc <__sflush_r+0xf8>
 8006c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	e01b      	b.n	8006cb6 <__sflush_r+0xf2>
 8006c7e:	690f      	ldr	r7, [r1, #16]
 8006c80:	2f00      	cmp	r7, #0
 8006c82:	d0f6      	beq.n	8006c72 <__sflush_r+0xae>
 8006c84:	0793      	lsls	r3, r2, #30
 8006c86:	680e      	ldr	r6, [r1, #0]
 8006c88:	bf08      	it	eq
 8006c8a:	694b      	ldreq	r3, [r1, #20]
 8006c8c:	600f      	str	r7, [r1, #0]
 8006c8e:	bf18      	it	ne
 8006c90:	2300      	movne	r3, #0
 8006c92:	eba6 0807 	sub.w	r8, r6, r7
 8006c96:	608b      	str	r3, [r1, #8]
 8006c98:	f1b8 0f00 	cmp.w	r8, #0
 8006c9c:	dde9      	ble.n	8006c72 <__sflush_r+0xae>
 8006c9e:	6a21      	ldr	r1, [r4, #32]
 8006ca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ca2:	4643      	mov	r3, r8
 8006ca4:	463a      	mov	r2, r7
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b0      	blx	r6
 8006caa:	2800      	cmp	r0, #0
 8006cac:	dc08      	bgt.n	8006cc0 <__sflush_r+0xfc>
 8006cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc0:	4407      	add	r7, r0
 8006cc2:	eba8 0800 	sub.w	r8, r8, r0
 8006cc6:	e7e7      	b.n	8006c98 <__sflush_r+0xd4>
 8006cc8:	20400001 	.word	0x20400001

08006ccc <_fflush_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b913      	cbnz	r3, 8006cdc <_fflush_r+0x10>
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	b118      	cbz	r0, 8006ce6 <_fflush_r+0x1a>
 8006cde:	6a03      	ldr	r3, [r0, #32]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <_fflush_r+0x1a>
 8006ce2:	f7fe f9bf 	bl	8005064 <__sinit>
 8006ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f3      	beq.n	8006cd6 <_fflush_r+0xa>
 8006cee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cf0:	07d0      	lsls	r0, r2, #31
 8006cf2:	d404      	bmi.n	8006cfe <_fflush_r+0x32>
 8006cf4:	0599      	lsls	r1, r3, #22
 8006cf6:	d402      	bmi.n	8006cfe <_fflush_r+0x32>
 8006cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cfa:	f7fe fbae 	bl	800545a <__retarget_lock_acquire_recursive>
 8006cfe:	4628      	mov	r0, r5
 8006d00:	4621      	mov	r1, r4
 8006d02:	f7ff ff5f 	bl	8006bc4 <__sflush_r>
 8006d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d08:	07da      	lsls	r2, r3, #31
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	d4e4      	bmi.n	8006cd8 <_fflush_r+0xc>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	059b      	lsls	r3, r3, #22
 8006d12:	d4e1      	bmi.n	8006cd8 <_fflush_r+0xc>
 8006d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d16:	f7fe fba1 	bl	800545c <__retarget_lock_release_recursive>
 8006d1a:	e7dd      	b.n	8006cd8 <_fflush_r+0xc>

08006d1c <__swhatbuf_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	b096      	sub	sp, #88	@ 0x58
 8006d28:	4615      	mov	r5, r2
 8006d2a:	461e      	mov	r6, r3
 8006d2c:	da0d      	bge.n	8006d4a <__swhatbuf_r+0x2e>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d34:	f04f 0100 	mov.w	r1, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2340      	movne	r3, #64	@ 0x40
 8006d3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d40:	2000      	movs	r0, #0
 8006d42:	6031      	str	r1, [r6, #0]
 8006d44:	602b      	str	r3, [r5, #0]
 8006d46:	b016      	add	sp, #88	@ 0x58
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	466a      	mov	r2, sp
 8006d4c:	f000 f848 	bl	8006de0 <_fstat_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	dbec      	blt.n	8006d2e <__swhatbuf_r+0x12>
 8006d54:	9901      	ldr	r1, [sp, #4]
 8006d56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d5e:	4259      	negs	r1, r3
 8006d60:	4159      	adcs	r1, r3
 8006d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d66:	e7eb      	b.n	8006d40 <__swhatbuf_r+0x24>

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b003      	add	sp, #12
 8006d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffc8 	bl	8006d1c <__swhatbuf_r>
 8006d8c:	9f00      	ldr	r7, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4639      	mov	r1, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff f9ce 	bl	8006134 <_malloc_r>
 8006d98:	b948      	cbnz	r0, 8006dae <__smakebuf_r+0x46>
 8006d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9e:	059a      	lsls	r2, r3, #22
 8006da0:	d4ee      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da2:	f023 0303 	bic.w	r3, r3, #3
 8006da6:	f043 0302 	orr.w	r3, r3, #2
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	e7e2      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	6020      	str	r0, [r4, #0]
 8006db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	9b01      	ldr	r3, [sp, #4]
 8006dba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006dbe:	b15b      	cbz	r3, 8006dd8 <__smakebuf_r+0x70>
 8006dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f81d 	bl	8006e04 <_isatty_r>
 8006dca:	b128      	cbz	r0, 8006dd8 <__smakebuf_r+0x70>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	431d      	orrs	r5, r3
 8006ddc:	81a5      	strh	r5, [r4, #12]
 8006dde:	e7cf      	b.n	8006d80 <__smakebuf_r+0x18>

08006de0 <_fstat_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d07      	ldr	r5, [pc, #28]	@ (8006e00 <_fstat_r+0x20>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	f7f9 fd6b 	bl	80008c8 <_fstat>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d102      	bne.n	8006dfc <_fstat_r+0x1c>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	b103      	cbz	r3, 8006dfc <_fstat_r+0x1c>
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	24000488 	.word	0x24000488

08006e04 <_isatty_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	@ (8006e20 <_isatty_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7f9 fd6a 	bl	80008e8 <_isatty>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_isatty_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_isatty_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	24000488 	.word	0x24000488

08006e24 <_sbrk_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d06      	ldr	r5, [pc, #24]	@ (8006e40 <_sbrk_r+0x1c>)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	f7f9 fd72 	bl	8000918 <_sbrk>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_sbrk_r+0x1a>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_sbrk_r+0x1a>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	24000488 	.word	0x24000488

08006e44 <__assert_func>:
 8006e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e46:	4614      	mov	r4, r2
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b09      	ldr	r3, [pc, #36]	@ (8006e70 <__assert_func+0x2c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4605      	mov	r5, r0
 8006e50:	68d8      	ldr	r0, [r3, #12]
 8006e52:	b14c      	cbz	r4, 8006e68 <__assert_func+0x24>
 8006e54:	4b07      	ldr	r3, [pc, #28]	@ (8006e74 <__assert_func+0x30>)
 8006e56:	9100      	str	r1, [sp, #0]
 8006e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e5c:	4906      	ldr	r1, [pc, #24]	@ (8006e78 <__assert_func+0x34>)
 8006e5e:	462b      	mov	r3, r5
 8006e60:	f000 f842 	bl	8006ee8 <fiprintf>
 8006e64:	f000 f852 	bl	8006f0c <abort>
 8006e68:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__assert_func+0x38>)
 8006e6a:	461c      	mov	r4, r3
 8006e6c:	e7f3      	b.n	8006e56 <__assert_func+0x12>
 8006e6e:	bf00      	nop
 8006e70:	2400001c 	.word	0x2400001c
 8006e74:	08007211 	.word	0x08007211
 8006e78:	0800721e 	.word	0x0800721e
 8006e7c:	0800724c 	.word	0x0800724c

08006e80 <_calloc_r>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	fba1 5402 	umull	r5, r4, r1, r2
 8006e86:	b934      	cbnz	r4, 8006e96 <_calloc_r+0x16>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7ff f953 	bl	8006134 <_malloc_r>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	b928      	cbnz	r0, 8006e9e <_calloc_r+0x1e>
 8006e92:	4630      	mov	r0, r6
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
 8006e96:	220c      	movs	r2, #12
 8006e98:	6002      	str	r2, [r0, #0]
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	e7f9      	b.n	8006e92 <_calloc_r+0x12>
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f7fe fa5d 	bl	8005360 <memset>
 8006ea6:	e7f4      	b.n	8006e92 <_calloc_r+0x12>

08006ea8 <__ascii_mbtowc>:
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	b901      	cbnz	r1, 8006eae <__ascii_mbtowc+0x6>
 8006eac:	a901      	add	r1, sp, #4
 8006eae:	b142      	cbz	r2, 8006ec2 <__ascii_mbtowc+0x1a>
 8006eb0:	b14b      	cbz	r3, 8006ec6 <__ascii_mbtowc+0x1e>
 8006eb2:	7813      	ldrb	r3, [r2, #0]
 8006eb4:	600b      	str	r3, [r1, #0]
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	1e10      	subs	r0, r2, #0
 8006eba:	bf18      	it	ne
 8006ebc:	2001      	movne	r0, #1
 8006ebe:	b002      	add	sp, #8
 8006ec0:	4770      	bx	lr
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	e7fb      	b.n	8006ebe <__ascii_mbtowc+0x16>
 8006ec6:	f06f 0001 	mvn.w	r0, #1
 8006eca:	e7f8      	b.n	8006ebe <__ascii_mbtowc+0x16>

08006ecc <__ascii_wctomb>:
 8006ecc:	4603      	mov	r3, r0
 8006ece:	4608      	mov	r0, r1
 8006ed0:	b141      	cbz	r1, 8006ee4 <__ascii_wctomb+0x18>
 8006ed2:	2aff      	cmp	r2, #255	@ 0xff
 8006ed4:	d904      	bls.n	8006ee0 <__ascii_wctomb+0x14>
 8006ed6:	228a      	movs	r2, #138	@ 0x8a
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	4770      	bx	lr
 8006ee0:	700a      	strb	r2, [r1, #0]
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	4770      	bx	lr
	...

08006ee8 <fiprintf>:
 8006ee8:	b40e      	push	{r1, r2, r3}
 8006eea:	b503      	push	{r0, r1, lr}
 8006eec:	4601      	mov	r1, r0
 8006eee:	ab03      	add	r3, sp, #12
 8006ef0:	4805      	ldr	r0, [pc, #20]	@ (8006f08 <fiprintf+0x20>)
 8006ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef6:	6800      	ldr	r0, [r0, #0]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f7ff fd4b 	bl	8006994 <_vfiprintf_r>
 8006efe:	b002      	add	sp, #8
 8006f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f04:	b003      	add	sp, #12
 8006f06:	4770      	bx	lr
 8006f08:	2400001c 	.word	0x2400001c

08006f0c <abort>:
 8006f0c:	b508      	push	{r3, lr}
 8006f0e:	2006      	movs	r0, #6
 8006f10:	f000 f82c 	bl	8006f6c <raise>
 8006f14:	2001      	movs	r0, #1
 8006f16:	f7f9 fc87 	bl	8000828 <_exit>

08006f1a <_raise_r>:
 8006f1a:	291f      	cmp	r1, #31
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	d904      	bls.n	8006f2e <_raise_r+0x14>
 8006f24:	2316      	movs	r3, #22
 8006f26:	6003      	str	r3, [r0, #0]
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f30:	b112      	cbz	r2, 8006f38 <_raise_r+0x1e>
 8006f32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f36:	b94b      	cbnz	r3, 8006f4c <_raise_r+0x32>
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 f831 	bl	8006fa0 <_getpid_r>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	4601      	mov	r1, r0
 8006f42:	4628      	mov	r0, r5
 8006f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f48:	f000 b818 	b.w	8006f7c <_kill_r>
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d00a      	beq.n	8006f66 <_raise_r+0x4c>
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	d103      	bne.n	8006f5c <_raise_r+0x42>
 8006f54:	2316      	movs	r3, #22
 8006f56:	6003      	str	r3, [r0, #0]
 8006f58:	2001      	movs	r0, #1
 8006f5a:	e7e7      	b.n	8006f2c <_raise_r+0x12>
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f62:	4620      	mov	r0, r4
 8006f64:	4798      	blx	r3
 8006f66:	2000      	movs	r0, #0
 8006f68:	e7e0      	b.n	8006f2c <_raise_r+0x12>
	...

08006f6c <raise>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	@ (8006f78 <raise+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f7ff bfd2 	b.w	8006f1a <_raise_r>
 8006f76:	bf00      	nop
 8006f78:	2400001c 	.word	0x2400001c

08006f7c <_kill_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d07      	ldr	r5, [pc, #28]	@ (8006f9c <_kill_r+0x20>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	f7f9 fc3d 	bl	8000808 <_kill>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d102      	bne.n	8006f98 <_kill_r+0x1c>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	b103      	cbz	r3, 8006f98 <_kill_r+0x1c>
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	bf00      	nop
 8006f9c:	24000488 	.word	0x24000488

08006fa0 <_getpid_r>:
 8006fa0:	f7f9 bc2a 	b.w	80007f8 <_getpid>

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
