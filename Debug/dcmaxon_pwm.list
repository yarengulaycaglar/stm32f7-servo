
dcmaxon_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  24000000  08004c3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000210  2400006c  08004ca8  0000606c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400027c  08004ca8  0000627c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e072  00000000  00000000  0000609a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001e08  00000000  00000000  0001410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ba0  00000000  00000000  00015f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000008b9  00000000  00000000  00016ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003964b  00000000  00000000  00017371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e02e  00000000  00000000  000509bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00171aa8  00000000  00000000  0005e9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d0492  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003648  00000000  00000000  001d04d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001d3b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004b1c 	.word	0x08004b1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08004b1c 	.word	0x08004b1c

080002d8 <main>:
void Error_Handler(void);

FDCAN_HandleTypeDef hfdcan1;

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	/* Sistem başlatma */
	printf("Main start...\n");
 80002de:	4812      	ldr	r0, [pc, #72]	@ (8000328 <main+0x50>)
 80002e0:	f004 f87a 	bl	80043d8 <puts>
	HAL_Init();
 80002e4:	f000 fbf6 	bl	8000ad4 <HAL_Init>
	SystemClock_Config();
 80002e8:	f000 f822 	bl	8000330 <SystemClock_Config>
	MX_GPIO_Init();
 80002ec:	f000 f90e 	bl	800050c <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80002f0:	f000 f89e 	bl	8000430 <MX_FDCAN1_Init>

	/* FDCAN'ı başlat */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80002f4:	480d      	ldr	r0, [pc, #52]	@ (800032c <main+0x54>)
 80002f6:	f000 ff71 	bl	80011dc <HAL_FDCAN_Start>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <main+0x2c>
	{
		Error_Handler(); // FDCAN başlatma hatası
 8000300:	f000 f934 	bl	800056c <Error_Handler>
	}

	uint8_t controller_id = CAN_PACKET_SET_RPM;
 8000304:	2303      	movs	r3, #3
 8000306:	71fb      	strb	r3, [r7, #7]
	float target_rpm = 0.0f;  // Hedef RPM değeri
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	603b      	str	r3, [r7, #0]

	while (1)
	{
		/* RPM komutunu FDCAN üzerinden gönder */
		comm_can_set_rpm(controller_id, target_rpm);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	ed97 0a00 	vldr	s0, [r7]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb7f 	bl	8000a18 <comm_can_set_rpm>

		/* 1 saniye bekle */
		HAL_Delay(1000);
 800031a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800031e:	f000 fc6b 	bl	8000bf8 <HAL_Delay>
		comm_can_set_rpm(controller_id, target_rpm);
 8000322:	bf00      	nop
 8000324:	e7f3      	b.n	800030e <main+0x36>
 8000326:	bf00      	nop
 8000328:	08004b34 	.word	0x08004b34
 800032c:	24000088 	.word	0x24000088

08000330 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09c      	sub	sp, #112	@ 0x70
 8000334:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800033a:	224c      	movs	r2, #76	@ 0x4c
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f004 f92a 	bl	8004598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2220      	movs	r2, #32
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f004 f924 	bl	8004598 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000350:	2002      	movs	r0, #2
 8000352:	f001 fbf7 	bl	8001b44 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000356:	2300      	movs	r3, #0
 8000358:	603b      	str	r3, [r7, #0]
 800035a:	4b33      	ldr	r3, [pc, #204]	@ (8000428 <SystemClock_Config+0xf8>)
 800035c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800035e:	4a32      	ldr	r2, [pc, #200]	@ (8000428 <SystemClock_Config+0xf8>)
 8000360:	f023 0301 	bic.w	r3, r3, #1
 8000364:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000366:	4b30      	ldr	r3, [pc, #192]	@ (8000428 <SystemClock_Config+0xf8>)
 8000368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	4b2e      	ldr	r3, [pc, #184]	@ (800042c <SystemClock_Config+0xfc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000378:	4a2c      	ldr	r2, [pc, #176]	@ (800042c <SystemClock_Config+0xfc>)
 800037a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b2a      	ldr	r3, [pc, #168]	@ (800042c <SystemClock_Config+0xfc>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800038c:	bf00      	nop
 800038e:	4b27      	ldr	r3, [pc, #156]	@ (800042c <SystemClock_Config+0xfc>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800039a:	d1f8      	bne.n	800038e <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800039c:	2303      	movs	r3, #3
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80003a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003aa:	2340      	movs	r3, #64	@ 0x40
 80003ac:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2302      	movs	r3, #2
 80003b0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b2:	2302      	movs	r3, #2
 80003b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80003ba:	2318      	movs	r3, #24
 80003bc:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80003be:	2302      	movs	r3, #2
 80003c0:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80003c2:	2304      	movs	r3, #4
 80003c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003ca:	230c      	movs	r3, #12
 80003cc:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fbec 	bl	8001bb8 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xba>
	{
		Error_Handler();
 80003e6:	f000 f8c1 	bl	800056c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	233f      	movs	r3, #63	@ 0x3f
 80003ec:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003fe:	2340      	movs	r3, #64	@ 0x40
 8000400:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2101      	movs	r1, #1
 800040e:	4618      	mov	r0, r3
 8000410:	f002 f82c 	bl	800246c <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xee>
	{
		Error_Handler();
 800041a:	f000 f8a7 	bl	800056c <Error_Handler>
	}
}
 800041e:	bf00      	nop
 8000420:	3770      	adds	r7, #112	@ 0x70
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	58000400 	.word	0x58000400
 800042c:	58024800 	.word	0x58024800

08000430 <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	hfdcan1.Instance = FDCAN1;
 8000434:	4b33      	ldr	r3, [pc, #204]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000436:	4a34      	ldr	r2, [pc, #208]	@ (8000508 <MX_FDCAN1_Init+0xd8>)
 8000438:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800043a:	4b32      	ldr	r3, [pc, #200]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000440:	4b30      	ldr	r3, [pc, #192]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000446:	4b2f      	ldr	r3, [pc, #188]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000448:	2200      	movs	r2, #0
 800044a:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 800044c:	4b2d      	ldr	r3, [pc, #180]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800044e:	2200      	movs	r2, #0
 8000450:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000452:	4b2c      	ldr	r3, [pc, #176]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000454:	2200      	movs	r2, #0
 8000456:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000458:	4b2a      	ldr	r3, [pc, #168]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800045a:	2210      	movs	r2, #16
 800045c:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800045e:	4b29      	ldr	r3, [pc, #164]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000460:	2201      	movs	r2, #1
 8000462:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000464:	4b27      	ldr	r3, [pc, #156]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000466:	2202      	movs	r2, #2
 8000468:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 800046a:	4b26      	ldr	r3, [pc, #152]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800046c:	2202      	movs	r2, #2
 800046e:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000470:	4b24      	ldr	r3, [pc, #144]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000472:	2201      	movs	r2, #1
 8000474:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000476:	4b23      	ldr	r3, [pc, #140]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000478:	2201      	movs	r2, #1
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 800047c:	4b21      	ldr	r3, [pc, #132]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800047e:	2201      	movs	r2, #1
 8000480:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000482:	4b20      	ldr	r3, [pc, #128]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000484:	2201      	movs	r2, #1
 8000486:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000488:	4b1e      	ldr	r3, [pc, #120]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800048a:	2200      	movs	r2, #0
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 800048e:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000490:	2200      	movs	r2, #0
 8000492:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 8000496:	2200      	movs	r2, #0
 8000498:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 800049c:	2200      	movs	r2, #0
 800049e:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80004a6:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80004b8:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004d8:	2204      	movs	r2, #4
 80004da:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004de:	f000 fc9f 	bl	8000e20 <HAL_FDCAN_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_FDCAN1_Init+0xbc>
	{
		Error_Handler();
 80004e8:	f000 f840 	bl	800056c <Error_Handler>
	}

	/* FDCAN RX interrupt'ını etkinleştir */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, NULL) != HAL_OK)
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	4804      	ldr	r0, [pc, #16]	@ (8000504 <MX_FDCAN1_Init+0xd4>)
 80004f2:	f000 fef9 	bl	80012e8 <HAL_FDCAN_ActivateNotification>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_FDCAN1_Init+0xd0>
	{
		Error_Handler(); // FDCAN interrupt hatası
 80004fc:	f000 f836 	bl	800056c <Error_Handler>
	}
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	24000088 	.word	0x24000088
 8000508:	4000a000 	.word	0x4000a000

0800050c <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

	/* FDCAN1 pinlerini (PD0: RX, PD1: TX) yapılandır */
	__HAL_RCC_GPIOD_CLK_ENABLE();  // GPIOD için saat aktif et
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <MX_GPIO_Init+0x58>)
 8000522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000526:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <MX_GPIO_Init+0x58>)
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <MX_GPIO_Init+0x58>)
 8000532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800053e:	2303      	movs	r3, #3
 8000540:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	2302      	movs	r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;  // FDCAN1 pin alternatifi
 800054e:	2309      	movs	r3, #9
 8000550:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4804      	ldr	r0, [pc, #16]	@ (8000568 <MX_GPIO_Init+0x5c>)
 8000558:	f001 f944 	bl	80017e4 <HAL_GPIO_Init>
}
 800055c:	bf00      	nop
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	58024400 	.word	0x58024400
 8000568:	58020c00 	.word	0x58020c00

0800056c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <Error_Handler+0x8>

08000578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <HAL_MspInit+0x30>)
 8000580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000584:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <HAL_MspInit+0x30>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <HAL_MspInit+0x30>)
 8000590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000594:	f003 0302 	and.w	r3, r3, #2
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	58024400 	.word	0x58024400

080005ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b0ba      	sub	sp, #232	@ 0xe8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	22c0      	movs	r2, #192	@ 0xc0
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 ffe3 	bl	8004598 <memset>
  if(hfdcan->Instance==FDCAN1)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <HAL_FDCAN_MspInit+0xc8>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d146      	bne.n	800066a <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80005dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80005e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fa69 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000600:	f7ff ffb4 	bl	800056c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <HAL_FDCAN_MspInit+0xcc>)
 8000606:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800060a:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <HAL_FDCAN_MspInit+0xcc>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000610:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <HAL_FDCAN_MspInit+0xcc>)
 8000616:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800061a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <HAL_FDCAN_MspInit+0xcc>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000628:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <HAL_FDCAN_MspInit+0xcc>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <HAL_FDCAN_MspInit+0xcc>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000640:	2303      	movs	r3, #3
 8000642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000658:	2309      	movs	r3, #9
 800065a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <HAL_FDCAN_MspInit+0xd0>)
 8000666:	f001 f8bd 	bl	80017e4 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800066a:	bf00      	nop
 800066c:	37e8      	adds	r7, #232	@ 0xe8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	4000a000 	.word	0x4000a000
 8000678:	58024400 	.word	0x58024400
 800067c:	58020c00 	.word	0x58020c00

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <NMI_Handler+0x4>

08000688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <MemManage_Handler+0x4>

08000698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d6:	f000 fa6f 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e00a      	b.n	8000722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070c:	f3af 8000 	nop.w
 8000710:	4601      	mov	r1, r0
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60ba      	str	r2, [r7, #8]
 8000718:	b2ca      	uxtb	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbf0      	blt.n	800070c <_read+0x12>
  }

  return len;
 800072a:	687b      	ldr	r3, [r7, #4]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e009      	b.n	800075a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	429a      	cmp	r2, r3
 8000760:	dbf1      	blt.n	8000746 <_write+0x12>
  }
  return len;
 8000762:	687b      	ldr	r3, [r7, #4]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <_close>:

int _close(int file)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000794:	605a      	str	r2, [r3, #4]
  return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_isatty>:

int _isatty(int file)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ac:	2301      	movs	r3, #1
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b085      	sub	sp, #20
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	@ (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000804:	f003 ff16 	bl	8004634 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	24080000 	.word	0x24080000
 8000834:	00000400 	.word	0x00000400
 8000838:	24000128 	.word	0x24000128
 800083c:	24000280 	.word	0x24000280

08000840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000844:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <SystemInit+0xe4>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084a:	4a36      	ldr	r2, [pc, #216]	@ (8000924 <SystemInit+0xe4>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000854:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <SystemInit+0xe8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 030f 	and.w	r3, r3, #15
 800085c:	2b06      	cmp	r3, #6
 800085e:	d807      	bhi.n	8000870 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000860:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <SystemInit+0xe8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 030f 	bic.w	r3, r3, #15
 8000868:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <SystemInit+0xe8>)
 800086a:	f043 0307 	orr.w	r3, r3, #7
 800086e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000870:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <SystemInit+0xec>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a2d      	ldr	r2, [pc, #180]	@ (800092c <SystemInit+0xec>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800087c:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <SystemInit+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <SystemInit+0xec>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4929      	ldr	r1, [pc, #164]	@ (800092c <SystemInit+0xec>)
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <SystemInit+0xf0>)
 800088a:	4013      	ands	r3, r2
 800088c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <SystemInit+0xe8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d007      	beq.n	80008aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <SystemInit+0xe8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f023 030f 	bic.w	r3, r3, #15
 80008a2:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <SystemInit+0xe8>)
 80008a4:	f043 0307 	orr.w	r3, r3, #7
 80008a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <SystemInit+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <SystemInit+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <SystemInit+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <SystemInit+0xec>)
 80008be:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <SystemInit+0xf4>)
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <SystemInit+0xec>)
 80008c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <SystemInit+0xf8>)
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <SystemInit+0xec>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <SystemInit+0xfc>)
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <SystemInit+0xec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <SystemInit+0xec>)
 80008d6:	4a19      	ldr	r2, [pc, #100]	@ (800093c <SystemInit+0xfc>)
 80008d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <SystemInit+0xec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <SystemInit+0xec>)
 80008e2:	4a16      	ldr	r2, [pc, #88]	@ (800093c <SystemInit+0xfc>)
 80008e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <SystemInit+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <SystemInit+0xec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <SystemInit+0xec>)
 80008f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <SystemInit+0xec>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <SystemInit+0x100>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <SystemInit+0x104>)
 8000904:	4013      	ands	r3, r2
 8000906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800090a:	d202      	bcs.n	8000912 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <SystemInit+0x108>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <SystemInit+0x10c>)
 8000914:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000918:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	52002000 	.word	0x52002000
 800092c:	58024400 	.word	0x58024400
 8000930:	eaf6ed7f 	.word	0xeaf6ed7f
 8000934:	02020200 	.word	0x02020200
 8000938:	01ff0000 	.word	0x01ff0000
 800093c:	01010280 	.word	0x01010280
 8000940:	5c001000 	.word	0x5c001000
 8000944:	ffff0000 	.word	0xffff0000
 8000948:	51008108 	.word	0x51008108
 800094c:	52004000 	.word	0x52004000

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f7ff ff74 	bl	8000840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	@ (8000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	@ (800099c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f003 fe5f 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fca9 	bl	80002d8 <main>
  bx  lr
 8000986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800098c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000990:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000994:	08004c3c 	.word	0x08004c3c
  ldr r2, =_sbss
 8000998:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800099c:	2400027c 	.word	0x2400027c

080009a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC3_IRQHandler>

080009a2 <buffer_append_int32>:
float motor_speed = 0.0f;
float motor_current = 0.0f;
int8_t motor_temperature = 0;
int8_t motor_error = 0;

static void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 80009a2:	b480      	push	{r7}
 80009a4:	b085      	sub	sp, #20
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = (number >> 24) & 0xFF;
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	0e18      	lsrs	r0, r3, #24
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1c59      	adds	r1, r3, #1
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	6011      	str	r1, [r2, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2c2      	uxtb	r2, r0
 80009c4:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = (number >> 16) & 0xFF;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1418      	asrs	r0, r3, #16
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1c59      	adds	r1, r3, #1
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	6011      	str	r1, [r2, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	b2c2      	uxtb	r2, r0
 80009dc:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = (number >> 8)  & 0xFF;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1218      	asrs	r0, r3, #8
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1c59      	adds	r1, r3, #1
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4413      	add	r3, r2
 80009f2:	b2c2      	uxtb	r2, r0
 80009f4:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number & 0xFF;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1c59      	adds	r1, r3, #1
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	6011      	str	r1, [r2, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	701a      	strb	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <comm_can_set_rpm>:
	buffer_append_int32(buffer, (int32_t)(motor_current * 1000.0f), &send_index);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
}

// Velocity mode
void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	ed87 0a00 	vstr	s0, [r7]
 8000a24:	71fb      	strb	r3, [r7, #7]
	printf("RPM is setting...\n");
 8000a26:	4810      	ldr	r0, [pc, #64]	@ (8000a68 <comm_can_set_rpm+0x50>)
 8000a28:	f003 fcd6 	bl	80043d8 <puts>
	int32_t send_index = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 8000a30:	edd7 7a00 	vldr	s15, [r7]
 8000a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	ee17 1a90 	vmov	r1, s15
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ffac 	bl	80009a2 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a50:	f107 0208 	add.w	r2, r7, #8
 8000a54:	b2d1      	uxtb	r1, r2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f806 	bl	8000a6c <comm_can_transmit_eid>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	08004b44 	.word	0x08004b44

08000a6c <comm_can_transmit_eid>:
	buffer_append_int16(buffer + send_index + send_index1, RPA, &send_index1);
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index + send_index1);
}

// Transmit fonksiyonu (FDCAN kullanılarak)
static void comm_can_transmit_eid(uint32_t id, const uint8_t data, uint8_t len) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0b4      	sub	sp, #208	@ 0xd0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	70bb      	strb	r3, [r7, #2]
	if (len > 8) {
 8000a7c:	78bb      	ldrb	r3, [r7, #2]
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d901      	bls.n	8000a86 <comm_can_transmit_eid+0x1a>
		len = 8;
 8000a82:	2308      	movs	r3, #8
 8000a84:	70bb      	strb	r3, [r7, #2]
	}
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = id;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	TxHeader.IdType = FDCAN_STANDARD_ID; // Standart ID tipi
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Veri çerçevesi
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	TxHeader.DataLength = len;           // Veri uzunluğu
 8000a98:	78bb      	ldrb	r3, [r7, #2]
 8000a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

	FDCAN_HandleTypeDef hfdcan1;
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*)data) != HAL_OK)
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fbb8 	bl	8001232 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <comm_can_transmit_eid+0x60>
	{
		Error_Handler(); // Veri gönderme hatası
 8000ac8:	f7ff fd50 	bl	800056c <Error_Handler>
	}
}
 8000acc:	bf00      	nop
 8000ace:	37d0      	adds	r7, #208	@ 0xd0
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f96e 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ae0:	f001 fe7a 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_Init+0x68>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	f003 030f 	and.w	r3, r3, #15
 8000af0:	4913      	ldr	r1, [pc, #76]	@ (8000b40 <HAL_Init+0x6c>)
 8000af2:	5ccb      	ldrb	r3, [r1, r3]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_Init+0x68>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <HAL_Init+0x6c>)
 8000b08:	5cd3      	ldrb	r3, [r2, r3]
 8000b0a:	f003 031f 	and.w	r3, r3, #31
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	fa22 f303 	lsr.w	r3, r2, r3
 8000b14:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_Init+0x70>)
 8000b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b18:	4a0b      	ldr	r2, [pc, #44]	@ (8000b48 <HAL_Init+0x74>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f814 	bl	8000b4c <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e002      	b.n	8000b34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2e:	f7ff fd23 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	08004c14 	.word	0x08004c14
 8000b44:	24000004 	.word	0x24000004
 8000b48:	24000000 	.word	0x24000000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_InitTick+0x60>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e021      	b.n	8000ba4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_InitTick+0x64>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_InitTick+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f945 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f91d 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <HAL_InitTick+0x68>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2400000c 	.word	0x2400000c
 8000bb0:	24000000 	.word	0x24000000
 8000bb4:	24000008 	.word	0x24000008

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2400000c 	.word	0x2400000c
 8000bdc:	2400012c 	.word	0x2400012c

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2400012c 	.word	0x2400012c

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1e:	bf00      	nop
 8000c20:	f7ff ffde 	bl	8000be0 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2400000c 	.word	0x2400000c

08000c40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_GetREVID+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	0c1b      	lsrs	r3, r3, #16
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	5c001000 	.word	0x5c001000

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x40>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x40>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00
 8000c9c:	05fa0000 	.word	0x05fa0000

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff47 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff5e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff90 	bl	8000d10 <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5f 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffb2 	bl	8000d78 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b098      	sub	sp, #96	@ 0x60
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000e28:	4a84      	ldr	r2, [pc, #528]	@ (800103c <HAL_FDCAN_Init+0x21c>)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4611      	mov	r1, r2
 8000e30:	224c      	movs	r2, #76	@ 0x4c
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fc2b 	bl	800468e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e1c6      	b.n	80011d0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7e      	ldr	r2, [pc, #504]	@ (8001040 <HAL_FDCAN_Init+0x220>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d106      	bne.n	8000e5a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fb9c 	bl	80005ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0210 	bic.w	r2, r2, #16
 8000e82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e84:	f7ff feac 	bl	8000be0 <HAL_GetTick>
 8000e88:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e8a:	e014      	b.n	8000eb6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e8c:	f7ff fea8 	bl	8000be0 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d90d      	bls.n	8000eb6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e18c      	b.n	80011d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d0e3      	beq.n	8000e8c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed4:	f7ff fe84 	bl	8000be0 <HAL_GetTick>
 8000ed8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000eda:	e014      	b.n	8000f06 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000edc:	f7ff fe80 	bl	8000be0 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d90d      	bls.n	8000f06 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ef0:	f043 0201 	orr.w	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e164      	b.n	80011d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0e3      	beq.n	8000edc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0202 	orr.w	r2, r2, #2
 8000f22:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7c1b      	ldrb	r3, [r3, #16]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f3a:	619a      	str	r2, [r3, #24]
 8000f3c:	e007      	b.n	8000f4e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	699a      	ldr	r2, [r3, #24]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7c5b      	ldrb	r3, [r3, #17]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d108      	bne.n	8000f68 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699a      	ldr	r2, [r3, #24]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	e007      	b.n	8000f78 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000f76:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7c9b      	ldrb	r3, [r3, #18]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	e007      	b.n	8000fa2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000fa0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000fc6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0210 	bic.w	r2, r2, #16
 8000fd6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d108      	bne.n	8000ff2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0204 	orr.w	r2, r2, #4
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	e030      	b.n	8001054 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d02c      	beq.n	8001054 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d020      	beq.n	8001044 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001010:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0210 	orr.w	r2, r2, #16
 8001020:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d114      	bne.n	8001054 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699a      	ldr	r2, [r3, #24]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	619a      	str	r2, [r3, #24]
 800103a:	e00b      	b.n	8001054 <HAL_FDCAN_Init+0x234>
 800103c:	08004bc8 	.word	0x08004bc8
 8001040:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699a      	ldr	r2, [r3, #24]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0220 	orr.w	r2, r2, #32
 8001052:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	3b01      	subs	r3, #1
 800105a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	3b01      	subs	r3, #1
 8001062:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001064:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800106c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	3b01      	subs	r3, #1
 8001076:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800107c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800107e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001088:	d115      	bne.n	80010b6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	3b01      	subs	r3, #1
 8001096:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001098:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	3b01      	subs	r3, #1
 80010a0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010a2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	3b01      	subs	r3, #1
 80010ac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010b2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010b4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010dc:	4413      	add	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d011      	beq.n	8001106 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80010ea:	f023 0107 	bic.w	r1, r3, #7
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	3360      	adds	r3, #96	@ 0x60
 80010f6:	443b      	add	r3, r7
 80010f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d011      	beq.n	8001132 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001116:	f023 0107 	bic.w	r1, r3, #7
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	3360      	adds	r3, #96	@ 0x60
 8001122:	443b      	add	r3, r7
 8001124:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001142:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	3360      	adds	r3, #96	@ 0x60
 800114e:	443b      	add	r3, r7
 8001150:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001154:	011a      	lsls	r2, r3, #4
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001164:	2b00      	cmp	r3, #0
 8001166:	d012      	beq.n	800118e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001170:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	3360      	adds	r3, #96	@ 0x60
 800117c:	443b      	add	r3, r7
 800117e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001182:	021a      	lsls	r2, r3, #8
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a11      	ldr	r2, [pc, #68]	@ (80011d8 <HAL_FDCAN_Init+0x3b8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d107      	bne.n	80011a8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f022 0203 	bic.w	r2, r2, #3
 80011a6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f90b 	bl	80013dc <FDCAN_CalcultateRamBlockAddresses>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80011cc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3760      	adds	r7, #96	@ 0x60
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	4000a000 	.word	0x4000a000

080011dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d111      	bne.n	8001214 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699a      	ldr	r2, [r3, #24]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	e008      	b.n	8001226 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800121a:	f043 0204 	orr.w	r2, r3, #4
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
  }
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d141      	bne.n	80012ce <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001252:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001260:	f043 0220 	orr.w	r2, r3, #32
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e038      	b.n	80012e0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001284:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e026      	b.n	80012e0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800129a:	0c1b      	lsrs	r3, r3, #16
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fa1d 	bl	80016e8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80012be:	2201      	movs	r2, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e008      	b.n	80012e0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012d4:	f043 0208 	orr.w	r2, r3, #8
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
  }
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80012fa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d002      	beq.n	8001308 <HAL_FDCAN_ActivateNotification+0x20>
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d155      	bne.n	80013b4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001326:	e014      	b.n	8001352 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4013      	ands	r3, r2
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	429a      	cmp	r2, r3
 8001336:	d108      	bne.n	800134a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0202 	orr.w	r2, r2, #2
 8001346:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001348:	e003      	b.n	8001352 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2203      	movs	r2, #3
 8001350:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	430a      	orrs	r2, r1
 800136c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	430a      	orrs	r2, r1
 800138a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_FDCAN_ActivateNotification+0xec>)
 8001398:	4013      	ands	r3, r2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	430b      	orrs	r3, r1
 80013a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0f9b      	lsrs	r3, r3, #30
 80013aa:	490b      	ldr	r1, [pc, #44]	@ (80013d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e008      	b.n	80013c6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	3fcfffff 	.word	0x3fcfffff
 80013d8:	4000a800 	.word	0x4000a800

080013dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80013f2:	4ba7      	ldr	r3, [pc, #668]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	0091      	lsls	r1, r2, #2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	430b      	orrs	r3, r1
 8001400:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800140c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	4413      	add	r3, r2
 8001428:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001432:	4b97      	ldr	r3, [pc, #604]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001434:	4013      	ands	r3, r2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	0091      	lsls	r1, r2, #2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	430b      	orrs	r3, r1
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	4413      	add	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001474:	4b86      	ldr	r3, [pc, #536]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001476:	4013      	ands	r3, r2
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	0091      	lsls	r1, r2, #2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800148e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014bc:	4b74      	ldr	r3, [pc, #464]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80014be:	4013      	ands	r3, r2
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	0091      	lsls	r1, r2, #2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	430b      	orrs	r3, r1
 80014ca:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80014d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	041a      	lsls	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	4413      	add	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001504:	4b62      	ldr	r3, [pc, #392]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001506:	4013      	ands	r3, r2
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	0091      	lsls	r1, r2, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001530:	4b57      	ldr	r3, [pc, #348]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001532:	4013      	ands	r3, r2
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	0091      	lsls	r1, r2, #2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800154a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001574:	4013      	ands	r3, r2
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	0091      	lsls	r1, r2, #2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	430b      	orrs	r3, r1
 8001580:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800158c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80015a8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c0:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80015c2:	4413      	add	r3, r2
 80015c4:	009a      	lsls	r2, r3, #2
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	441a      	add	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	441a      	add	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80015fc:	441a      	add	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001614:	441a      	add	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800162c:	441a      	add	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	441a      	add	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	441a      	add	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001678:	441a      	add	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001686:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d915      	bls.n	80016b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800168c:	e006      	b.n	800169c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800168e:	bf00      	nop
 8001690:	ffff0003 	.word	0xffff0003
 8001694:	10002b00 	.word	0x10002b00
 8001698:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016a2:	f043 0220 	orr.w	r2, r3, #32
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2203      	movs	r2, #3
 80016b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e010      	b.n	80016da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e005      	b.n	80016cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3304      	adds	r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3f3      	bcc.n	80016c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001706:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800170e:	4313      	orrs	r3, r2
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e00a      	b.n	800172a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800171c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001722:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001728:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001734:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800173a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001740:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3304      	adds	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	3304      	adds	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e020      	b.n	80017c2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3303      	adds	r3, #3
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3302      	adds	r3, #2
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	440b      	add	r3, r1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001798:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	440b      	add	r3, r1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017a6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	440a      	add	r2, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017b0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	3304      	adds	r3, #4
 80017ba:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3304      	adds	r3, #4
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <FDCAN_CopyMessageToRAM+0xf8>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	461a      	mov	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d3d6      	bcc.n	8001780 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3724      	adds	r7, #36	@ 0x24
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	08004c24 	.word	0x08004c24

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017f2:	4b89      	ldr	r3, [pc, #548]	@ (8001a18 <HAL_GPIO_Init+0x234>)
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017f6:	e194      	b.n	8001b22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8186 	beq.w	8001b1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x44>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	69b9      	ldr	r1, [r7, #24]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80e0 	beq.w	8001b1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a1c <HAL_GPIO_Init+0x238>)
 800195e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001962:	4a2e      	ldr	r2, [pc, #184]	@ (8001a1c <HAL_GPIO_Init+0x238>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800196c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <HAL_GPIO_Init+0x238>)
 800196e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a29      	ldr	r2, [pc, #164]	@ (8001a20 <HAL_GPIO_Init+0x23c>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a20      	ldr	r2, [pc, #128]	@ (8001a24 <HAL_GPIO_Init+0x240>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d052      	beq.n	8001a4c <HAL_GPIO_Init+0x268>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <HAL_GPIO_Init+0x244>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d031      	beq.n	8001a12 <HAL_GPIO_Init+0x22e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <HAL_GPIO_Init+0x248>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02b      	beq.n	8001a0e <HAL_GPIO_Init+0x22a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_GPIO_Init+0x24c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <HAL_GPIO_Init+0x250>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x222>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a38 <HAL_GPIO_Init+0x254>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x21e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a3c <HAL_GPIO_Init+0x258>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x21a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <HAL_GPIO_Init+0x25c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x216>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a18      	ldr	r2, [pc, #96]	@ (8001a44 <HAL_GPIO_Init+0x260>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x212>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_GPIO_Init+0x264>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x20e>
 80019ee:	2309      	movs	r3, #9
 80019f0:	e02d      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 80019f2:	230a      	movs	r3, #10
 80019f4:	e02b      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 80019f6:	2308      	movs	r3, #8
 80019f8:	e029      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e027      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e025      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e023      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e021      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e01f      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e01d      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01b      	b.n	8001a4e <HAL_GPIO_Init+0x26a>
 8001a16:	bf00      	nop
 8001a18:	58000080 	.word	0x58000080
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	58000400 	.word	0x58000400
 8001a24:	58020000 	.word	0x58020000
 8001a28:	58020400 	.word	0x58020400
 8001a2c:	58020800 	.word	0x58020800
 8001a30:	58020c00 	.word	0x58020c00
 8001a34:	58021000 	.word	0x58021000
 8001a38:	58021400 	.word	0x58021400
 8001a3c:	58021800 	.word	0x58021800
 8001a40:	58021c00 	.word	0x58021c00
 8001a44:	58022000 	.word	0x58022000
 8001a48:	58022400 	.word	0x58022400
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5e:	4938      	ldr	r1, [pc, #224]	@ (8001b40 <HAL_GPIO_Init+0x35c>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ac0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f ae63 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3724      	adds	r7, #36	@ 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	58000400 	.word	0x58000400

08001b44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00a      	beq.n	8001b6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e01f      	b.n	8001baa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e01d      	b.n	8001baa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	490f      	ldr	r1, [pc, #60]	@ (8001bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b7e:	f7ff f82f 	bl	8000be0 <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b84:	e009      	b.n	8001b9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b86:	f7ff f82b 	bl	8000be0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b94:	d901      	bls.n	8001b9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e007      	b.n	8001baa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	58024800 	.word	0x58024800

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f000 bc48 	b.w	800245c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8088 	beq.w	8001cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bda:	4b99      	ldr	r3, [pc, #612]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001be4:	4b96      	ldr	r3, [pc, #600]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d007      	beq.n	8001c00 <HAL_RCC_OscConfig+0x48>
 8001bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf2:	2b18      	cmp	r3, #24
 8001bf4:	d111      	bne.n	8001c1a <HAL_RCC_OscConfig+0x62>
 8001bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	4b8f      	ldr	r3, [pc, #572]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d06d      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x130>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d169      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f000 bc21 	b.w	800245c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x7a>
 8001c24:	4b86      	ldr	r3, [pc, #536]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a85      	ldr	r2, [pc, #532]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x9c>
 8001c3a:	4b81      	ldr	r3, [pc, #516]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a80      	ldr	r2, [pc, #512]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b7e      	ldr	r3, [pc, #504]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xc0>
 8001c5e:	4b78      	ldr	r3, [pc, #480]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a77      	ldr	r2, [pc, #476]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b75      	ldr	r3, [pc, #468]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a74      	ldr	r2, [pc, #464]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd8>
 8001c78:	4b71      	ldr	r3, [pc, #452]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a70      	ldr	r2, [pc, #448]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b6e      	ldr	r3, [pc, #440]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6d      	ldr	r2, [pc, #436]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7fe ffa2 	bl	8000be0 <HAL_GetTick>
 8001c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7fe ff9e 	bl	8000be0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e3d4      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb2:	4b63      	ldr	r3, [pc, #396]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe8>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ff8e 	bl	8000be0 <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7fe ff8a 	bl	8000be0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e3c0      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cda:	4b59      	ldr	r3, [pc, #356]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x110>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80ca 	beq.w	8001e8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf8:	4b51      	ldr	r3, [pc, #324]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d02:	4b4f      	ldr	r3, [pc, #316]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_RCC_OscConfig+0x166>
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b18      	cmp	r3, #24
 8001d12:	d156      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x20a>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d151      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1e:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e392      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d36:	4b42      	ldr	r3, [pc, #264]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0219 	bic.w	r2, r3, #25
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	493f      	ldr	r1, [pc, #252]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7fe ff4a 	bl	8000be0 <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7fe ff46 	bl	8000be0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e37c      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	f7fe ff67 	bl	8000c40 <HAL_GetREVID>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d817      	bhi.n	8001dac <HAL_RCC_OscConfig+0x1f4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b40      	cmp	r3, #64	@ 0x40
 8001d82:	d108      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1de>
 8001d84:	4b2e      	ldr	r3, [pc, #184]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	e07a      	b.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	031b      	lsls	r3, r3, #12
 8001da4:	4926      	ldr	r1, [pc, #152]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001daa:	e06f      	b.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4921      	ldr	r1, [pc, #132]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc0:	e064      	b.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d047      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0219 	bic.w	r2, r3, #25
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	491a      	ldr	r1, [pc, #104]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ff00 	bl	8000be0 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de4:	f7fe fefc 	bl	8000be0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e332      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	f7fe ff1d 	bl	8000c40 <HAL_GetREVID>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d819      	bhi.n	8001e44 <HAL_RCC_OscConfig+0x28c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b40      	cmp	r3, #64	@ 0x40
 8001e16:	d108      	bne.n	8001e2a <HAL_RCC_OscConfig+0x272>
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e26:	6053      	str	r3, [r2, #4]
 8001e28:	e030      	b.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	4901      	ldr	r1, [pc, #4]	@ (8001e40 <HAL_RCC_OscConfig+0x288>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
 8001e3e:	e025      	b.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
 8001e40:	58024400 	.word	0x58024400
 8001e44:	4b9a      	ldr	r3, [pc, #616]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	4997      	ldr	r1, [pc, #604]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e018      	b.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b95      	ldr	r3, [pc, #596]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a94      	ldr	r2, [pc, #592]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe febb 	bl	8000be0 <HAL_GetTick>
 8001e6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe feb7 	bl	8000be0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e2ed      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e80:	4b8b      	ldr	r3, [pc, #556]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a9 	beq.w	8001fec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9a:	4b85      	ldr	r3, [pc, #532]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ea2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ea4:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d007      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x308>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b18      	cmp	r3, #24
 8001eb4:	d13a      	bne.n	8001f2c <HAL_RCC_OscConfig+0x374>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d135      	bne.n	8001f2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x320>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b80      	cmp	r3, #128	@ 0x80
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e2c1      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ed8:	f7fe feb2 	bl	8000c40 <HAL_GetREVID>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d817      	bhi.n	8001f16 <HAL_RCC_OscConfig+0x35e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_OscConfig+0x348>
 8001eee:	4b70      	ldr	r3, [pc, #448]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001efc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001efe:	e075      	b.n	8001fec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f00:	4b6b      	ldr	r3, [pc, #428]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	069b      	lsls	r3, r3, #26
 8001f0e:	4968      	ldr	r1, [pc, #416]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f14:	e06a      	b.n	8001fec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f16:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	4962      	ldr	r1, [pc, #392]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f2a:	e05f      	b.n	8001fec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d042      	beq.n	8001fba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f34:	4b5e      	ldr	r3, [pc, #376]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5d      	ldr	r2, [pc, #372]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe fe4e 	bl	8000be0 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f48:	f7fe fe4a 	bl	8000be0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e280      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f5a:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f66:	f7fe fe6b 	bl	8000c40 <HAL_GetREVID>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d817      	bhi.n	8001fa4 <HAL_RCC_OscConfig+0x3ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d108      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3d6>
 8001f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f84:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f8a:	6053      	str	r3, [r2, #4]
 8001f8c:	e02e      	b.n	8001fec <HAL_RCC_OscConfig+0x434>
 8001f8e:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	069b      	lsls	r3, r3, #26
 8001f9c:	4944      	ldr	r1, [pc, #272]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
 8001fa2:	e023      	b.n	8001fec <HAL_RCC_OscConfig+0x434>
 8001fa4:	4b42      	ldr	r3, [pc, #264]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	493f      	ldr	r1, [pc, #252]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
 8001fb8:	e018      	b.n	8001fec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fba:	4b3d      	ldr	r3, [pc, #244]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fe0b 	bl	8000be0 <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fce:	f7fe fe07 	bl	8000be0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e23d      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d036      	beq.n	8002066 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002000:	4b2b      	ldr	r3, [pc, #172]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8002002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002004:	4a2a      	ldr	r2, [pc, #168]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7fe fde8 	bl	8000be0 <HAL_GetTick>
 8002010:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe fde4 	bl	8000be0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e21a      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002026:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x45c>
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8002036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002038:	4a1d      	ldr	r2, [pc, #116]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe fdce 	bl	8000be0 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002048:	f7fe fdca 	bl	8000be0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e200      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d039      	beq.n	80020e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0c      	ldr	r2, [pc, #48]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002084:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002086:	f7fe fdab 	bl	8000be0 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208e:	f7fe fda7 	bl	8000be0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1dd      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x4d6>
 80020ac:	e01b      	b.n	80020e6 <HAL_RCC_OscConfig+0x52e>
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020b4:	4b9b      	ldr	r3, [pc, #620]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a9a      	ldr	r2, [pc, #616]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80020ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020c0:	f7fe fd8e 	bl	8000be0 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c8:	f7fe fd8a 	bl	8000be0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1c0      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020da:	4b92      	ldr	r3, [pc, #584]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8081 	beq.w	80021f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002328 <HAL_RCC_OscConfig+0x770>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a8b      	ldr	r2, [pc, #556]	@ (8002328 <HAL_RCC_OscConfig+0x770>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002100:	f7fe fd6e 	bl	8000be0 <HAL_GetTick>
 8002104:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7fe fd6a 	bl	8000be0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1a0      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800211a:	4b83      	ldr	r3, [pc, #524]	@ (8002328 <HAL_RCC_OscConfig+0x770>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x584>
 800212e:	4b7d      	ldr	r3, [pc, #500]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	4a7c      	ldr	r2, [pc, #496]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	@ 0x70
 800213a:	e02d      	b.n	8002198 <HAL_RCC_OscConfig+0x5e0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x5a6>
 8002144:	4b77      	ldr	r3, [pc, #476]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a76      	ldr	r2, [pc, #472]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002150:	4b74      	ldr	r3, [pc, #464]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	4a73      	ldr	r2, [pc, #460]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	6713      	str	r3, [r2, #112]	@ 0x70
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x5e0>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c8>
 8002166:	4b6f      	ldr	r3, [pc, #444]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	4a6e      	ldr	r2, [pc, #440]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6713      	str	r3, [r2, #112]	@ 0x70
 8002172:	4b6c      	ldr	r3, [pc, #432]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a6b      	ldr	r2, [pc, #428]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x5e0>
 8002180:	4b68      	ldr	r3, [pc, #416]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002184:	4a67      	ldr	r2, [pc, #412]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	@ 0x70
 800218c:	4b65      	ldr	r3, [pc, #404]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a64      	ldr	r2, [pc, #400]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002192:	f023 0304 	bic.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fd1e 	bl	8000be0 <HAL_GetTick>
 80021a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fd1a 	bl	8000be0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e14e      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021be:	4b59      	ldr	r3, [pc, #356]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ee      	beq.n	80021a8 <HAL_RCC_OscConfig+0x5f0>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe fd08 	bl	8000be0 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fd04 	bl	8000be0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e138      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ee      	bne.n	80021d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 812d 	beq.w	800245a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002200:	4b48      	ldr	r3, [pc, #288]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002208:	2b18      	cmp	r3, #24
 800220a:	f000 80bd 	beq.w	8002388 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	2b02      	cmp	r3, #2
 8002214:	f040 809e 	bne.w	8002354 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b42      	ldr	r3, [pc, #264]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a41      	ldr	r2, [pc, #260]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800221e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fcdc 	bl	8000be0 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fcd8 	bl	8000be0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e10e      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800223e:	4b39      	ldr	r3, [pc, #228]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224a:	4b36      	ldr	r3, [pc, #216]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800224c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <HAL_RCC_OscConfig+0x774>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	430a      	orrs	r2, r1
 800225e:	4931      	ldr	r1, [pc, #196]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	628b      	str	r3, [r1, #40]	@ 0x28
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	3b01      	subs	r3, #1
 800226a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002272:	3b01      	subs	r3, #1
 8002274:	025b      	lsls	r3, r3, #9
 8002276:	b29b      	uxth	r3, r3
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	3b01      	subs	r3, #1
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002294:	4923      	ldr	r1, [pc, #140]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002296:	4313      	orrs	r3, r2
 8002298:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800229a:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022aa:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <HAL_RCC_OscConfig+0x778>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022b2:	00d2      	lsls	r2, r2, #3
 80022b4:	491b      	ldr	r1, [pc, #108]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	f023 020c 	bic.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4917      	ldr	r1, [pc, #92]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022cc:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	f023 0202 	bic.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	4912      	ldr	r1, [pc, #72]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7fe fc61 	bl	8000be0 <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002320:	e011      	b.n	8002346 <HAL_RCC_OscConfig+0x78e>
 8002322:	bf00      	nop
 8002324:	58024400 	.word	0x58024400
 8002328:	58024800 	.word	0x58024800
 800232c:	fffffc0c 	.word	0xfffffc0c
 8002330:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fc54 	bl	8000be0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e08a      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x77c>
 8002352:	e082      	b.n	800245a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a42      	ldr	r2, [pc, #264]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fc3e 	bl	8000be0 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fc3a 	bl	8000be0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e070      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800237a:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x7b0>
 8002386:	e068      	b.n	800245a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002388:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800238e:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	2b01      	cmp	r3, #1
 800239a:	d031      	beq.n	8002400 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d12a      	bne.n	8002400 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d122      	bne.n	8002400 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d11a      	bne.n	8002400 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0a5b      	lsrs	r3, r3, #9
 80023ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d111      	bne.n	8002400 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0e1b      	lsrs	r3, r3, #24
 80023f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e02b      	b.n	800245c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002404:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800240e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	429a      	cmp	r2, r3
 8002418:	d01f      	beq.n	800245a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002426:	f7fe fbdb 	bl	8000be0 <HAL_GetTick>
 800242a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800242c:	bf00      	nop
 800242e:	f7fe fbd7 	bl	8000be0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	4293      	cmp	r3, r2
 8002438:	d0f9      	beq.n	800242e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800243a:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 800243c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_RCC_OscConfig+0x8b0>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002446:	00d2      	lsls	r2, r2, #3
 8002448:	4906      	ldr	r1, [pc, #24]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <HAL_RCC_OscConfig+0x8ac>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3730      	adds	r7, #48	@ 0x30
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	58024400 	.word	0x58024400
 8002468:	ffff0007 	.word	0xffff0007

0800246c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e19c      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b8a      	ldr	r3, [pc, #552]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b87      	ldr	r3, [pc, #540]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020f 	bic.w	r2, r3, #15
 8002496:	4985      	ldr	r1, [pc, #532]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b83      	ldr	r3, [pc, #524]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e184      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	4b7b      	ldr	r3, [pc, #492]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d908      	bls.n	80024de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024cc:	4b78      	ldr	r3, [pc, #480]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	4975      	ldr	r1, [pc, #468]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d010      	beq.n	800250c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	4b70      	ldr	r3, [pc, #448]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d908      	bls.n	800250c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024fa:	4b6d      	ldr	r3, [pc, #436]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	496a      	ldr	r1, [pc, #424]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	4b64      	ldr	r3, [pc, #400]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002524:	429a      	cmp	r2, r3
 8002526:	d908      	bls.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002528:	4b61      	ldr	r3, [pc, #388]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	495e      	ldr	r1, [pc, #376]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002536:	4313      	orrs	r3, r2
 8002538:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002552:	429a      	cmp	r2, r3
 8002554:	d908      	bls.n	8002568 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002556:	4b56      	ldr	r3, [pc, #344]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4953      	ldr	r1, [pc, #332]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002564:	4313      	orrs	r3, r2
 8002566:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	4b4d      	ldr	r3, [pc, #308]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	429a      	cmp	r2, r3
 8002582:	d908      	bls.n	8002596 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f023 020f 	bic.w	r2, r3, #15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4947      	ldr	r1, [pc, #284]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002592:	4313      	orrs	r3, r2
 8002594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d055      	beq.n	800264e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025a2:	4b43      	ldr	r3, [pc, #268]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4940      	ldr	r1, [pc, #256]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025bc:	4b3c      	ldr	r3, [pc, #240]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d121      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0f6      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d115      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0ea      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ec:	4b30      	ldr	r3, [pc, #192]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0de      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fc:	4b2c      	ldr	r3, [pc, #176]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d6      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800260c:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 0207 	bic.w	r2, r3, #7
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4925      	ldr	r1, [pc, #148]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800261a:	4313      	orrs	r3, r2
 800261c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fe fadf 	bl	8000be0 <HAL_GetTick>
 8002622:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002624:	e00a      	b.n	800263c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002626:	f7fe fadb 	bl	8000be0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0be      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263c:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	429a      	cmp	r2, r3
 800264c:	d1eb      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d010      	beq.n	800267c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	429a      	cmp	r2, r3
 8002668:	d208      	bcs.n	800267c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	490e      	ldr	r1, [pc, #56]	@ (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002678:	4313      	orrs	r3, r2
 800267a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d214      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4906      	ldr	r1, [pc, #24]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <HAL_RCC_ClockConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e086      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
 80026ac:	52002000 	.word	0x52002000
 80026b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d208      	bcs.n	80026e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026d0:	4b3c      	ldr	r3, [pc, #240]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4939      	ldr	r1, [pc, #228]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	4b34      	ldr	r3, [pc, #208]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d208      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026fe:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	492e      	ldr	r1, [pc, #184]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800270c:	4313      	orrs	r3, r2
 800270e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002728:	429a      	cmp	r2, r3
 800272a:	d208      	bcs.n	800273e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800272c:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800273a:	4313      	orrs	r3, r2
 800273c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002756:	429a      	cmp	r2, r3
 8002758:	d208      	bcs.n	800276c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4917      	ldr	r1, [pc, #92]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002768:	4313      	orrs	r3, r2
 800276a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800276c:	f000 f834 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	4912      	ldr	r1, [pc, #72]	@ (80027c8 <HAL_RCC_ClockConfig+0x35c>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <HAL_RCC_ClockConfig+0x35c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <HAL_RCC_ClockConfig+0x360>)
 80027a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a4:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <HAL_RCC_ClockConfig+0x364>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_RCC_ClockConfig+0x368>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe f9cc 	bl	8000b4c <HAL_InitTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	58024400 	.word	0x58024400
 80027c8:	08004c14 	.word	0x08004c14
 80027cc:	24000004 	.word	0x24000004
 80027d0:	24000000 	.word	0x24000000
 80027d4:	24000008 	.word	0x24000008

080027d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027de:	4bb3      	ldr	r3, [pc, #716]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e6:	2b18      	cmp	r3, #24
 80027e8:	f200 8155 	bhi.w	8002a96 <HAL_RCC_GetSysClockFreq+0x2be>
 80027ec:	a201      	add	r2, pc, #4	@ (adr r2, 80027f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002859 	.word	0x08002859
 80027f8:	08002a97 	.word	0x08002a97
 80027fc:	08002a97 	.word	0x08002a97
 8002800:	08002a97 	.word	0x08002a97
 8002804:	08002a97 	.word	0x08002a97
 8002808:	08002a97 	.word	0x08002a97
 800280c:	08002a97 	.word	0x08002a97
 8002810:	08002a97 	.word	0x08002a97
 8002814:	0800287f 	.word	0x0800287f
 8002818:	08002a97 	.word	0x08002a97
 800281c:	08002a97 	.word	0x08002a97
 8002820:	08002a97 	.word	0x08002a97
 8002824:	08002a97 	.word	0x08002a97
 8002828:	08002a97 	.word	0x08002a97
 800282c:	08002a97 	.word	0x08002a97
 8002830:	08002a97 	.word	0x08002a97
 8002834:	08002885 	.word	0x08002885
 8002838:	08002a97 	.word	0x08002a97
 800283c:	08002a97 	.word	0x08002a97
 8002840:	08002a97 	.word	0x08002a97
 8002844:	08002a97 	.word	0x08002a97
 8002848:	08002a97 	.word	0x08002a97
 800284c:	08002a97 	.word	0x08002a97
 8002850:	08002a97 	.word	0x08002a97
 8002854:	0800288b 	.word	0x0800288b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002858:	4b94      	ldr	r3, [pc, #592]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002864:	4b91      	ldr	r3, [pc, #580]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	4a90      	ldr	r2, [pc, #576]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002876:	e111      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002878:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800287a:	61bb      	str	r3, [r7, #24]
      break;
 800287c:	e10e      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800287e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002880:	61bb      	str	r3, [r7, #24]
      break;
 8002882:	e10b      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002884:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002886:	61bb      	str	r3, [r7, #24]
      break;
 8002888:	e108      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800288a:	4b88      	ldr	r3, [pc, #544]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002894:	4b85      	ldr	r3, [pc, #532]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800289e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028a0:	4b82      	ldr	r3, [pc, #520]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028aa:	4b80      	ldr	r3, [pc, #512]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80e1 	beq.w	8002a90 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	f000 8083 	beq.w	80029dc <HAL_RCC_GetSysClockFreq+0x204>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f200 80a1 	bhi.w	8002a20 <HAL_RCC_GetSysClockFreq+0x248>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x114>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d056      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028ea:	e099      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002922:	4b62      	ldr	r3, [pc, #392]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002932:	ed97 6a02 	vldr	s12, [r7, #8]
 8002936:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 800293a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800293e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002952:	e087      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002966:	4b51      	ldr	r3, [pc, #324]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002976:	ed97 6a02 	vldr	s12, [r7, #8]
 800297a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 800297e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800298a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002996:	e065      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029aa:	4b40      	ldr	r3, [pc, #256]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80029be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029da:	e043      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a1e:	e021      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	0a5b      	lsrs	r3, r3, #9
 8002a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a6e:	3301      	adds	r3, #1
 8002a70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a88:	ee17 3a90 	vmov	r3, s15
 8002a8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a96:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a98:	61bb      	str	r3, [r7, #24]
      break;
 8002a9a:	bf00      	nop
  }

  return sysclockfreq;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	@ 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	03d09000 	.word	0x03d09000
 8002ab4:	003d0900 	.word	0x003d0900
 8002ab8:	007a1200 	.word	0x007a1200
 8002abc:	46000000 	.word	0x46000000
 8002ac0:	4c742400 	.word	0x4c742400
 8002ac4:	4a742400 	.word	0x4a742400
 8002ac8:	4af42400 	.word	0x4af42400

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b0ca      	sub	sp, #296	@ 0x128
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002af0:	2500      	movs	r5, #0
 8002af2:	ea54 0305 	orrs.w	r3, r4, r5
 8002af6:	d049      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002afe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b02:	d02f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b08:	d828      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b0e:	d01a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b14:	d822      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b1e:	d007      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b20:	e01c      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b22:	4bb8      	ldr	r3, [pc, #736]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	4ab7      	ldr	r2, [pc, #732]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b2e:	e01a      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b34:	3308      	adds	r3, #8
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 f9d1 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b44:	e00f      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4a:	3328      	adds	r3, #40	@ 0x28
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 fa78 	bl	8004044 <RCCEx_PLL3_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b5a:	e004      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b62:	e000      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b6e:	4ba5      	ldr	r3, [pc, #660]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b7c:	4aa1      	ldr	r2, [pc, #644]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b82:	e003      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002b98:	f04f 0900 	mov.w	r9, #0
 8002b9c:	ea58 0309 	orrs.w	r3, r8, r9
 8002ba0:	d047      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d82a      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002bac:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002bd7 	.word	0x08002bd7
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002c0b 	.word	0x08002c0b
 8002bc4:	08002c0b 	.word	0x08002c0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	4a8d      	ldr	r2, [pc, #564]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bd4:	e01a      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bda:	3308      	adds	r3, #8
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f97e 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bea:	e00f      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	3328      	adds	r3, #40	@ 0x28
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fa25 	bl	8004044 <RCCEx_PLL3_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c00:	e004      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c08:	e000      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c14:	4b7b      	ldr	r3, [pc, #492]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c18:	f023 0107 	bic.w	r1, r3, #7
 8002c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	4a78      	ldr	r2, [pc, #480]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c28:	e003      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002c3e:	f04f 0b00 	mov.w	fp, #0
 8002c42:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c46:	d04c      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c52:	d030      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c58:	d829      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c5c:	d02d      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c60:	d825      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c62:	2b80      	cmp	r3, #128	@ 0x80
 8002c64:	d018      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c66:	2b80      	cmp	r3, #128	@ 0x80
 8002c68:	d821      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c6e:	2b40      	cmp	r3, #64	@ 0x40
 8002c70:	d007      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c72:	e01c      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c74:	4b63      	ldr	r3, [pc, #396]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	4a62      	ldr	r2, [pc, #392]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c80:	e01c      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c86:	3308      	adds	r3, #8
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f928 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c96:	e011      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9c:	3328      	adds	r3, #40	@ 0x28
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 f9cf 	bl	8004044 <RCCEx_PLL3_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cac:	e006      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cb4:	e002      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cd8:	e003      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002cee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002cf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	d053      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d0e:	d035      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d14:	d82e      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d1a:	d031      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d20:	d828      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d26:	d01a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d2c:	d822      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d36:	d007      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d38:	e01c      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3a:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	4a31      	ldr	r2, [pc, #196]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d46:	e01c      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4c:	3308      	adds	r3, #8
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 f8c5 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d5c:	e011      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d62:	3328      	adds	r3, #40	@ 0x28
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 f96c 	bl	8004044 <RCCEx_PLL3_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d72:	e006      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002db6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002dc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d056      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002dd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dd6:	d038      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ddc:	d831      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002de2:	d034      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002de4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002de8:	d82b      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dee:	d01d      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002df4:	d825      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002dfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e00:	e01f      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e08:	4ba2      	ldr	r3, [pc, #648]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	4aa1      	ldr	r2, [pc, #644]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e14:	e01c      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 f85e 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e2a:	e011      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e30:	3328      	adds	r3, #40	@ 0x28
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f905 	bl	8004044 <RCCEx_PLL3_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e40:	e006      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e58:	4b8e      	ldr	r3, [pc, #568]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e68:	4a8a      	ldr	r2, [pc, #552]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d03a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	2b30      	cmp	r3, #48	@ 0x30
 8002ea0:	d01f      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ea2:	2b30      	cmp	r3, #48	@ 0x30
 8002ea4:	d819      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d815      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d019      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d111      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb6:	4b77      	ldr	r3, [pc, #476]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4a76      	ldr	r2, [pc, #472]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ec2:	e011      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	3308      	adds	r3, #8
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f807 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ef0:	4b68      	ldr	r3, [pc, #416]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	4a65      	ldr	r2, [pc, #404]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f00:	430b      	orrs	r3, r1
 8002f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f04:	e003      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	d051      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f38:	d035      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f3e:	d82e      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f44:	d031      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f4a:	d828      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f50:	d01a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f56:	d822      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f60:	d007      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f62:	e01c      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f64:	4b4b      	ldr	r3, [pc, #300]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	4a4a      	ldr	r2, [pc, #296]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f70:	e01c      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f76:	3308      	adds	r3, #8
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ffb0 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f86:	e011      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8c:	3328      	adds	r3, #40	@ 0x28
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f857 	bl	8004044 <RCCEx_PLL3_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f9c:	e006      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fa4:	e002      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fb4:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	4a34      	ldr	r2, [pc, #208]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fc8:	e003      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002fe8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002fec:	460b      	mov	r3, r1
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	d056      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ffc:	d033      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ffe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003002:	d82c      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003008:	d02f      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800300a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800300e:	d826      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003014:	d02b      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003016:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800301a:	d820      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800301c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003020:	d012      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003026:	d81a      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d022      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003030:	d115      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003036:	3308      	adds	r3, #8
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f000 ff50 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003046:	e015      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304c:	3328      	adds	r3, #40	@ 0x28
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fff7 	bl	8004044 <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800305c:	e00a      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003064:	e006      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003066:	bf00      	nop
 8003068:	e004      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800308a:	4a02      	ldr	r2, [pc, #8]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308c:	430b      	orrs	r3, r1
 800308e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800309c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4313      	orrs	r3, r2
 80030be:	d055      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030cc:	d033      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030d2:	d82c      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d8:	d02f      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030de:	d826      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030e4:	d02b      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030ea:	d820      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f0:	d012      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f6:	d81a      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d022      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80030fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003100:	d115      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003106:	3308      	adds	r3, #8
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fee8 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003116:	e015      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311c:	3328      	adds	r3, #40	@ 0x28
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f000 ff8f 	bl	8004044 <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800312c:	e00a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003136:	bf00      	nop
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800314c:	4ba3      	ldr	r3, [pc, #652]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800315c:	4a9f      	ldr	r2, [pc, #636]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800315e:	430b      	orrs	r3, r1
 8003160:	6593      	str	r3, [r2, #88]	@ 0x58
 8003162:	e003      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800316c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003186:	460b      	mov	r3, r1
 8003188:	4313      	orrs	r3, r2
 800318a:	d037      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800318c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003196:	d00e      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319c:	d816      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a6:	d111      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a8:	4b8c      	ldr	r3, [pc, #560]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	4a8b      	ldr	r2, [pc, #556]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031b4:	e00f      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ba:	3308      	adds	r3, #8
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fe8e 	bl	8003ee0 <RCCEx_PLL2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031ca:	e004      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031de:	4b7f      	ldr	r3, [pc, #508]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	4a7b      	ldr	r2, [pc, #492]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80031f2:	e003      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003212:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003216:	460b      	mov	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	d039      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003222:	2b03      	cmp	r3, #3
 8003224:	d81c      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003269 	.word	0x08003269
 8003230:	0800323d 	.word	0x0800323d
 8003234:	0800324b 	.word	0x0800324b
 8003238:	08003269 	.word	0x08003269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b67      	ldr	r3, [pc, #412]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	4a66      	ldr	r2, [pc, #408]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003248:	e00f      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	3308      	adds	r3, #8
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fe44 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800325e:	e004      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003272:	4b5a      	ldr	r3, [pc, #360]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	f023 0103 	bic.w	r1, r3, #3
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003280:	4a56      	ldr	r2, [pc, #344]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003282:	430b      	orrs	r3, r1
 8003284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800329c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f000 809f 	beq.w	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b2:	4b4b      	ldr	r3, [pc, #300]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4a      	ldr	r2, [pc, #296]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032be:	f7fd fc8f 	bl	8000be0 <HAL_GetTick>
 80032c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c6:	e00b      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fc8a 	bl	8000be0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	d903      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032de:	e005      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e0:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ed      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80032ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d179      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032f4:	4b39      	ldr	r3, [pc, #228]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003300:	4053      	eors	r3, r2
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d015      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330a:	4b34      	ldr	r3, [pc, #208]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003312:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003316:	4b31      	ldr	r3, [pc, #196]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a30      	ldr	r2, [pc, #192]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4b2e      	ldr	r3, [pc, #184]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800332e:	4a2b      	ldr	r2, [pc, #172]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800333e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003342:	d118      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd fc4c 	bl	8000be0 <HAL_GetTick>
 8003348:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800334c:	e00d      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd fc47 	bl	8000be0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800335e:	429a      	cmp	r2, r3
 8003360:	d903      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003368:	e005      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800336a:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0eb      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337a:	2b00      	cmp	r3, #0
 800337c:	d129      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800338e:	d10e      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003390:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033a0:	091a      	lsrs	r2, r3, #4
 80033a2:	4b10      	ldr	r3, [pc, #64]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6113      	str	r3, [r2, #16]
 80033ac:	e005      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033b8:	6113      	str	r3, [r2, #16]
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d0:	e00e      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80033da:	e009      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033dc:	58024400 	.word	0x58024400
 80033e0:	58024800 	.word	0x58024800
 80033e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 0301 	and.w	r3, r2, #1
 80033fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003406:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	f000 8089 	beq.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003418:	2b28      	cmp	r3, #40	@ 0x28
 800341a:	d86b      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	080034fd 	.word	0x080034fd
 8003428:	080034f5 	.word	0x080034f5
 800342c:	080034f5 	.word	0x080034f5
 8003430:	080034f5 	.word	0x080034f5
 8003434:	080034f5 	.word	0x080034f5
 8003438:	080034f5 	.word	0x080034f5
 800343c:	080034f5 	.word	0x080034f5
 8003440:	080034f5 	.word	0x080034f5
 8003444:	080034c9 	.word	0x080034c9
 8003448:	080034f5 	.word	0x080034f5
 800344c:	080034f5 	.word	0x080034f5
 8003450:	080034f5 	.word	0x080034f5
 8003454:	080034f5 	.word	0x080034f5
 8003458:	080034f5 	.word	0x080034f5
 800345c:	080034f5 	.word	0x080034f5
 8003460:	080034f5 	.word	0x080034f5
 8003464:	080034df 	.word	0x080034df
 8003468:	080034f5 	.word	0x080034f5
 800346c:	080034f5 	.word	0x080034f5
 8003470:	080034f5 	.word	0x080034f5
 8003474:	080034f5 	.word	0x080034f5
 8003478:	080034f5 	.word	0x080034f5
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034f5 	.word	0x080034f5
 8003484:	080034fd 	.word	0x080034fd
 8003488:	080034f5 	.word	0x080034f5
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034f5 	.word	0x080034f5
 8003494:	080034f5 	.word	0x080034f5
 8003498:	080034f5 	.word	0x080034f5
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	080034f5 	.word	0x080034f5
 80034a4:	080034fd 	.word	0x080034fd
 80034a8:	080034f5 	.word	0x080034f5
 80034ac:	080034f5 	.word	0x080034f5
 80034b0:	080034f5 	.word	0x080034f5
 80034b4:	080034f5 	.word	0x080034f5
 80034b8:	080034f5 	.word	0x080034f5
 80034bc:	080034f5 	.word	0x080034f5
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080034fd 	.word	0x080034fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034cc:	3308      	adds	r3, #8
 80034ce:	2101      	movs	r1, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fd05 	bl	8003ee0 <RCCEx_PLL2_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034dc:	e00f      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	3328      	adds	r3, #40	@ 0x28
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fdac 	bl	8004044 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034f2:	e004      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80034fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003506:	4bbf      	ldr	r3, [pc, #764]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003514:	4abb      	ldr	r2, [pc, #748]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6553      	str	r3, [r2, #84]	@ 0x54
 800351a:	e003      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f002 0302 	and.w	r3, r2, #2
 8003530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800353a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800353e:	460b      	mov	r3, r1
 8003540:	4313      	orrs	r3, r2
 8003542:	d041      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354a:	2b05      	cmp	r3, #5
 800354c:	d824      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	080035a1 	.word	0x080035a1
 8003558:	0800356d 	.word	0x0800356d
 800355c:	08003583 	.word	0x08003583
 8003560:	080035a1 	.word	0x080035a1
 8003564:	080035a1 	.word	0x080035a1
 8003568:	080035a1 	.word	0x080035a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	3308      	adds	r3, #8
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fcb3 	bl	8003ee0 <RCCEx_PLL2_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003580:	e00f      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003586:	3328      	adds	r3, #40	@ 0x28
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fd5a 	bl	8004044 <RCCEx_PLL3_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003596:	e004      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035aa:	4b96      	ldr	r3, [pc, #600]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ae:	f023 0107 	bic.w	r1, r3, #7
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035b8:	4a92      	ldr	r2, [pc, #584]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f002 0304 	and.w	r3, r2, #4
 80035d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4313      	orrs	r3, r2
 80035e6:	d044      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d825      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80035f4:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003649 	.word	0x08003649
 8003600:	08003615 	.word	0x08003615
 8003604:	0800362b 	.word	0x0800362b
 8003608:	08003649 	.word	0x08003649
 800360c:	08003649 	.word	0x08003649
 8003610:	08003649 	.word	0x08003649
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	3308      	adds	r3, #8
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fc5f 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003628:	e00f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	3328      	adds	r3, #40	@ 0x28
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fd06 	bl	8004044 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003652:	4b6c      	ldr	r3, [pc, #432]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003656:	f023 0107 	bic.w	r1, r3, #7
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003662:	4a68      	ldr	r2, [pc, #416]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003664:	430b      	orrs	r3, r1
 8003666:	6593      	str	r3, [r2, #88]	@ 0x58
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f002 0320 	and.w	r3, r2, #32
 800367e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d055      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369e:	d033      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a4:	d82c      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036aa:	d02f      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d826      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036b6:	d02b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036bc:	d820      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036c2:	d012      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036c8:	d81a      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d022      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036d2:	d115      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	3308      	adds	r3, #8
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fbff 	bl	8003ee0 <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e015      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	3328      	adds	r3, #40	@ 0x28
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fca6 	bl	8004044 <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036fe:	e00a      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003706:	e006      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003708:	bf00      	nop
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800370c:	bf00      	nop
 800370e:	e002      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371e:	4b39      	ldr	r3, [pc, #228]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372e:	4a35      	ldr	r2, [pc, #212]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003730:	430b      	orrs	r3, r1
 8003732:	6553      	str	r3, [r2, #84]	@ 0x54
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800374a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003754:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d058      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003766:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800376a:	d033      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800376c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003770:	d82c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003776:	d02f      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377c:	d826      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800377e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003782:	d02b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003788:	d820      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378e:	d012      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003794:	d81a      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d022      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379e:	d115      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a4:	3308      	adds	r3, #8
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fb99 	bl	8003ee0 <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037b4:	e015      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	3328      	adds	r3, #40	@ 0x28
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fc40 	bl	8004044 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037ca:	e00a      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d2:	e006      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037d4:	bf00      	nop
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037d8:	bf00      	nop
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10e      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037fa:	4a02      	ldr	r2, [pc, #8]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	e006      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800381c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003826:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d055      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003838:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800383c:	d033      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800383e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003842:	d82c      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003848:	d02f      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384e:	d826      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003850:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003854:	d02b      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003856:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800385a:	d820      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800385c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003860:	d012      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003866:	d81a      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d022      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800386c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003870:	d115      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb30 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003886:	e015      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	3328      	adds	r3, #40	@ 0x28
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fbd7 	bl	8004044 <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800389c:	e00a      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038a6:	bf00      	nop
 80038a8:	e004      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038bc:	4ba1      	ldr	r3, [pc, #644]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038cc:	4a9d      	ldr	r2, [pc, #628]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d2:	e003      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f002 0308 	and.w	r3, r2, #8
 80038e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80038f6:	460b      	mov	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	d01e      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	3328      	adds	r3, #40	@ 0x28
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb96 	bl	8004044 <RCCEx_PLL3_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003924:	4b87      	ldr	r3, [pc, #540]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003934:	4a83      	ldr	r2, [pc, #524]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003936:	430b      	orrs	r3, r1
 8003938:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f002 0310 	and.w	r3, r2, #16
 8003946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003950:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d01e      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003966:	d10c      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	3328      	adds	r3, #40	@ 0x28
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fb67 	bl	8004044 <RCCEx_PLL3_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003982:	4b70      	ldr	r3, [pc, #448]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003992:	4a6c      	ldr	r2, [pc, #432]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003994:	430b      	orrs	r3, r1
 8003996:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d03e      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c4:	d022      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039ca:	d81b      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d4:	d00b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039d6:	e015      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	3308      	adds	r3, #8
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fa7d 	bl	8003ee0 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039ec:	e00f      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	3328      	adds	r3, #40	@ 0x28
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fb24 	bl	8004044 <RCCEx_PLL3_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a02:	e004      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a16:	4b4b      	ldr	r3, [pc, #300]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a26:	4a47      	ldr	r2, [pc, #284]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a44:	2300      	movs	r3, #0
 8003a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d03b      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a5e:	d01f      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a64:	d818      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a70:	d007      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b33      	ldr	r3, [pc, #204]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	3328      	adds	r3, #40	@ 0x28
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fada 	bl	8004044 <RCCEx_PLL3_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aaa:	4b26      	ldr	r3, [pc, #152]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aba:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ad8:	2300      	movs	r3, #0
 8003ada:	677b      	str	r3, [r7, #116]	@ 0x74
 8003adc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	d034      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af4:	d007      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003af6:	e011      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b04:	e00e      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f9e6 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3a:	4a02      	ldr	r2, [pc, #8]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b5e:	2300      	movs	r3, #0
 8003b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d00c      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	3328      	adds	r3, #40	@ 0x28
 8003b72:	2102      	movs	r1, #2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fa65 	bl	8004044 <RCCEx_PLL3_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b94:	2300      	movs	r3, #0
 8003b96:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	d038      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bae:	d018      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb4:	d811      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bba:	d014      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc0:	d80b      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bca:	d106      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4bc3      	ldr	r3, [pc, #780]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	4ac2      	ldr	r2, [pc, #776]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf4:	4bb9      	ldr	r3, [pc, #740]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c04:	4ab5      	ldr	r2, [pc, #724]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c06:	430b      	orrs	r3, r1
 8003c08:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c0a:	e003      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c22:	2300      	movs	r3, #0
 8003c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c30:	4baa      	ldr	r3, [pc, #680]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3e:	4aa7      	ldr	r2, [pc, #668]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c50:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c52:	2300      	movs	r3, #0
 8003c54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c60:	4b9e      	ldr	r3, [pc, #632]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c70:	4a9a      	ldr	r2, [pc, #616]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c84:	2300      	movs	r3, #0
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c92:	4b92      	ldr	r3, [pc, #584]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca0:	4a8e      	ldr	r2, [pc, #568]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cc2:	4b86      	ldr	r3, [pc, #536]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	4a85      	ldr	r2, [pc, #532]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ccc:	6113      	str	r3, [r2, #16]
 8003cce:	4b83      	ldr	r3, [pc, #524]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd0:	6919      	ldr	r1, [r3, #16]
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cda:	4a80      	ldr	r2, [pc, #512]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cee:	2300      	movs	r3, #0
 8003cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003cfc:	4b77      	ldr	r3, [pc, #476]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	4a74      	ldr	r2, [pc, #464]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d3c:	4a67      	ldr	r2, [pc, #412]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	d011      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	3308      	adds	r3, #8
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f8ba 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	6239      	str	r1, [r7, #32]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d011      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	3308      	adds	r3, #8
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f89a 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	61b9      	str	r1, [r7, #24]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	d011      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	3308      	adds	r3, #8
 8003de4:	2102      	movs	r1, #2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f87a 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6139      	str	r1, [r7, #16]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	d011      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	3328      	adds	r3, #40	@ 0x28
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f90c 	bl	8004044 <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d011      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	3328      	adds	r3, #40	@ 0x28
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f8ec 	bl	8004044 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d011      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	3328      	adds	r3, #40	@ 0x28
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f8cc 	bl	8004044 <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003ec2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003edc:	58024400 	.word	0x58024400

08003ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eee:	4b53      	ldr	r3, [pc, #332]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d101      	bne.n	8003efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e099      	b.n	8004032 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003efe:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fc fe69 	bl	8000be0 <HAL_GetTick>
 8003f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f12:	f7fc fe65 	bl	8000be0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e086      	b.n	8004032 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f24:	4b45      	ldr	r3, [pc, #276]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f30:	4b42      	ldr	r3, [pc, #264]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	031b      	lsls	r3, r3, #12
 8003f3e:	493f      	ldr	r1, [pc, #252]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	025b      	lsls	r3, r3, #9
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f74:	4931      	ldr	r1, [pc, #196]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f7a:	4b30      	ldr	r3, [pc, #192]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	492d      	ldr	r1, [pc, #180]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	f023 0220 	bic.w	r2, r3, #32
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4928      	ldr	r1, [pc, #160]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f9e:	4b27      	ldr	r3, [pc, #156]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	4a26      	ldr	r2, [pc, #152]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003faa:	4b24      	ldr	r3, [pc, #144]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fae:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <RCCEx_PLL2_Config+0x160>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	69d2      	ldr	r2, [r2, #28]
 8003fb6:	00d2      	lsls	r2, r2, #3
 8003fb8:	4920      	ldr	r1, [pc, #128]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	f043 0310 	orr.w	r3, r3, #16
 8003fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a19      	ldr	r2, [pc, #100]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fdc:	e00f      	b.n	8003ffe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003fe4:	4b15      	ldr	r3, [pc, #84]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ff0:	e005      	b.n	8003ffe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4a11      	ldr	r2, [pc, #68]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a0e      	ldr	r2, [pc, #56]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8004004:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400a:	f7fc fde9 	bl	8000be0 <HAL_GetTick>
 800400e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004010:	e008      	b.n	8004024 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004012:	f7fc fde5 	bl	8000be0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e006      	b.n	8004032 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	ffff0007 	.word	0xffff0007

08004044 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004052:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b03      	cmp	r3, #3
 800405c:	d101      	bne.n	8004062 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e099      	b.n	8004196 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004062:	4b4f      	ldr	r3, [pc, #316]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a4e      	ldr	r2, [pc, #312]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fc fdb7 	bl	8000be0 <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004074:	e008      	b.n	8004088 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004076:	f7fc fdb3 	bl	8000be0 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e086      	b.n	8004196 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004088:	4b45      	ldr	r3, [pc, #276]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004094:	4b42      	ldr	r3, [pc, #264]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	051b      	lsls	r3, r3, #20
 80040a2:	493f      	ldr	r1, [pc, #252]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040d8:	4931      	ldr	r1, [pc, #196]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040de:	4b30      	ldr	r3, [pc, #192]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	492d      	ldr	r1, [pc, #180]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040f0:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4928      	ldr	r1, [pc, #160]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004102:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800410c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800410e:	4b24      	ldr	r3, [pc, #144]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004112:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <RCCEx_PLL3_Config+0x160>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	69d2      	ldr	r2, [r2, #28]
 800411a:	00d2      	lsls	r2, r2, #3
 800411c:	4920      	ldr	r1, [pc, #128]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004122:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004134:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	4a19      	ldr	r2, [pc, #100]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800413a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800413e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004140:	e00f      	b.n	8004162 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004148:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800414e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004154:	e005      	b.n	8004162 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800415c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004160:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004162:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416e:	f7fc fd37 	bl	8000be0 <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004174:	e008      	b.n	8004188 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004176:	f7fc fd33 	bl	8000be0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
 80041a4:	ffff0007 	.word	0xffff0007

080041a8 <std>:
 80041a8:	2300      	movs	r3, #0
 80041aa:	b510      	push	{r4, lr}
 80041ac:	4604      	mov	r4, r0
 80041ae:	e9c0 3300 	strd	r3, r3, [r0]
 80041b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041b6:	6083      	str	r3, [r0, #8]
 80041b8:	8181      	strh	r1, [r0, #12]
 80041ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80041bc:	81c2      	strh	r2, [r0, #14]
 80041be:	6183      	str	r3, [r0, #24]
 80041c0:	4619      	mov	r1, r3
 80041c2:	2208      	movs	r2, #8
 80041c4:	305c      	adds	r0, #92	@ 0x5c
 80041c6:	f000 f9e7 	bl	8004598 <memset>
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <std+0x58>)
 80041cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <std+0x5c>)
 80041d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <std+0x60>)
 80041d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <std+0x64>)
 80041d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <std+0x68>)
 80041dc:	6224      	str	r4, [r4, #32]
 80041de:	429c      	cmp	r4, r3
 80041e0:	d006      	beq.n	80041f0 <std+0x48>
 80041e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041e6:	4294      	cmp	r4, r2
 80041e8:	d002      	beq.n	80041f0 <std+0x48>
 80041ea:	33d0      	adds	r3, #208	@ 0xd0
 80041ec:	429c      	cmp	r4, r3
 80041ee:	d105      	bne.n	80041fc <std+0x54>
 80041f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f8:	f000 ba46 	b.w	8004688 <__retarget_lock_init_recursive>
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	bf00      	nop
 8004200:	080043e9 	.word	0x080043e9
 8004204:	0800440b 	.word	0x0800440b
 8004208:	08004443 	.word	0x08004443
 800420c:	08004467 	.word	0x08004467
 8004210:	24000130 	.word	0x24000130

08004214 <stdio_exit_handler>:
 8004214:	4a02      	ldr	r2, [pc, #8]	@ (8004220 <stdio_exit_handler+0xc>)
 8004216:	4903      	ldr	r1, [pc, #12]	@ (8004224 <stdio_exit_handler+0x10>)
 8004218:	4803      	ldr	r0, [pc, #12]	@ (8004228 <stdio_exit_handler+0x14>)
 800421a:	f000 b869 	b.w	80042f0 <_fwalk_sglue>
 800421e:	bf00      	nop
 8004220:	24000010 	.word	0x24000010
 8004224:	080049a5 	.word	0x080049a5
 8004228:	24000020 	.word	0x24000020

0800422c <cleanup_stdio>:
 800422c:	6841      	ldr	r1, [r0, #4]
 800422e:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <cleanup_stdio+0x34>)
 8004230:	4299      	cmp	r1, r3
 8004232:	b510      	push	{r4, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	d001      	beq.n	800423c <cleanup_stdio+0x10>
 8004238:	f000 fbb4 	bl	80049a4 <_fflush_r>
 800423c:	68a1      	ldr	r1, [r4, #8]
 800423e:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <cleanup_stdio+0x38>)
 8004240:	4299      	cmp	r1, r3
 8004242:	d002      	beq.n	800424a <cleanup_stdio+0x1e>
 8004244:	4620      	mov	r0, r4
 8004246:	f000 fbad 	bl	80049a4 <_fflush_r>
 800424a:	68e1      	ldr	r1, [r4, #12]
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <cleanup_stdio+0x3c>)
 800424e:	4299      	cmp	r1, r3
 8004250:	d004      	beq.n	800425c <cleanup_stdio+0x30>
 8004252:	4620      	mov	r0, r4
 8004254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004258:	f000 bba4 	b.w	80049a4 <_fflush_r>
 800425c:	bd10      	pop	{r4, pc}
 800425e:	bf00      	nop
 8004260:	24000130 	.word	0x24000130
 8004264:	24000198 	.word	0x24000198
 8004268:	24000200 	.word	0x24000200

0800426c <global_stdio_init.part.0>:
 800426c:	b510      	push	{r4, lr}
 800426e:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <global_stdio_init.part.0+0x30>)
 8004270:	4c0b      	ldr	r4, [pc, #44]	@ (80042a0 <global_stdio_init.part.0+0x34>)
 8004272:	4a0c      	ldr	r2, [pc, #48]	@ (80042a4 <global_stdio_init.part.0+0x38>)
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	4620      	mov	r0, r4
 8004278:	2200      	movs	r2, #0
 800427a:	2104      	movs	r1, #4
 800427c:	f7ff ff94 	bl	80041a8 <std>
 8004280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004284:	2201      	movs	r2, #1
 8004286:	2109      	movs	r1, #9
 8004288:	f7ff ff8e 	bl	80041a8 <std>
 800428c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004290:	2202      	movs	r2, #2
 8004292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004296:	2112      	movs	r1, #18
 8004298:	f7ff bf86 	b.w	80041a8 <std>
 800429c:	24000268 	.word	0x24000268
 80042a0:	24000130 	.word	0x24000130
 80042a4:	08004215 	.word	0x08004215

080042a8 <__sfp_lock_acquire>:
 80042a8:	4801      	ldr	r0, [pc, #4]	@ (80042b0 <__sfp_lock_acquire+0x8>)
 80042aa:	f000 b9ee 	b.w	800468a <__retarget_lock_acquire_recursive>
 80042ae:	bf00      	nop
 80042b0:	24000271 	.word	0x24000271

080042b4 <__sfp_lock_release>:
 80042b4:	4801      	ldr	r0, [pc, #4]	@ (80042bc <__sfp_lock_release+0x8>)
 80042b6:	f000 b9e9 	b.w	800468c <__retarget_lock_release_recursive>
 80042ba:	bf00      	nop
 80042bc:	24000271 	.word	0x24000271

080042c0 <__sinit>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	f7ff fff0 	bl	80042a8 <__sfp_lock_acquire>
 80042c8:	6a23      	ldr	r3, [r4, #32]
 80042ca:	b11b      	cbz	r3, 80042d4 <__sinit+0x14>
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	f7ff bff0 	b.w	80042b4 <__sfp_lock_release>
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <__sinit+0x28>)
 80042d6:	6223      	str	r3, [r4, #32]
 80042d8:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <__sinit+0x2c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f5      	bne.n	80042cc <__sinit+0xc>
 80042e0:	f7ff ffc4 	bl	800426c <global_stdio_init.part.0>
 80042e4:	e7f2      	b.n	80042cc <__sinit+0xc>
 80042e6:	bf00      	nop
 80042e8:	0800422d 	.word	0x0800422d
 80042ec:	24000268 	.word	0x24000268

080042f0 <_fwalk_sglue>:
 80042f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f4:	4607      	mov	r7, r0
 80042f6:	4688      	mov	r8, r1
 80042f8:	4614      	mov	r4, r2
 80042fa:	2600      	movs	r6, #0
 80042fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004300:	f1b9 0901 	subs.w	r9, r9, #1
 8004304:	d505      	bpl.n	8004312 <_fwalk_sglue+0x22>
 8004306:	6824      	ldr	r4, [r4, #0]
 8004308:	2c00      	cmp	r4, #0
 800430a:	d1f7      	bne.n	80042fc <_fwalk_sglue+0xc>
 800430c:	4630      	mov	r0, r6
 800430e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d907      	bls.n	8004328 <_fwalk_sglue+0x38>
 8004318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800431c:	3301      	adds	r3, #1
 800431e:	d003      	beq.n	8004328 <_fwalk_sglue+0x38>
 8004320:	4629      	mov	r1, r5
 8004322:	4638      	mov	r0, r7
 8004324:	47c0      	blx	r8
 8004326:	4306      	orrs	r6, r0
 8004328:	3568      	adds	r5, #104	@ 0x68
 800432a:	e7e9      	b.n	8004300 <_fwalk_sglue+0x10>

0800432c <_puts_r>:
 800432c:	6a03      	ldr	r3, [r0, #32]
 800432e:	b570      	push	{r4, r5, r6, lr}
 8004330:	6884      	ldr	r4, [r0, #8]
 8004332:	4605      	mov	r5, r0
 8004334:	460e      	mov	r6, r1
 8004336:	b90b      	cbnz	r3, 800433c <_puts_r+0x10>
 8004338:	f7ff ffc2 	bl	80042c0 <__sinit>
 800433c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800433e:	07db      	lsls	r3, r3, #31
 8004340:	d405      	bmi.n	800434e <_puts_r+0x22>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	0598      	lsls	r0, r3, #22
 8004346:	d402      	bmi.n	800434e <_puts_r+0x22>
 8004348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800434a:	f000 f99e 	bl	800468a <__retarget_lock_acquire_recursive>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	0719      	lsls	r1, r3, #28
 8004352:	d502      	bpl.n	800435a <_puts_r+0x2e>
 8004354:	6923      	ldr	r3, [r4, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d135      	bne.n	80043c6 <_puts_r+0x9a>
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f000 f8c5 	bl	80044ec <__swsetup_r>
 8004362:	b380      	cbz	r0, 80043c6 <_puts_r+0x9a>
 8004364:	f04f 35ff 	mov.w	r5, #4294967295
 8004368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800436a:	07da      	lsls	r2, r3, #31
 800436c:	d405      	bmi.n	800437a <_puts_r+0x4e>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	059b      	lsls	r3, r3, #22
 8004372:	d402      	bmi.n	800437a <_puts_r+0x4e>
 8004374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004376:	f000 f989 	bl	800468c <__retarget_lock_release_recursive>
 800437a:	4628      	mov	r0, r5
 800437c:	bd70      	pop	{r4, r5, r6, pc}
 800437e:	2b00      	cmp	r3, #0
 8004380:	da04      	bge.n	800438c <_puts_r+0x60>
 8004382:	69a2      	ldr	r2, [r4, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	dc17      	bgt.n	80043b8 <_puts_r+0x8c>
 8004388:	290a      	cmp	r1, #10
 800438a:	d015      	beq.n	80043b8 <_puts_r+0x8c>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	6022      	str	r2, [r4, #0]
 8004392:	7019      	strb	r1, [r3, #0]
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800439a:	3b01      	subs	r3, #1
 800439c:	60a3      	str	r3, [r4, #8]
 800439e:	2900      	cmp	r1, #0
 80043a0:	d1ed      	bne.n	800437e <_puts_r+0x52>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da11      	bge.n	80043ca <_puts_r+0x9e>
 80043a6:	4622      	mov	r2, r4
 80043a8:	210a      	movs	r1, #10
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 f85f 	bl	800446e <__swbuf_r>
 80043b0:	3001      	adds	r0, #1
 80043b2:	d0d7      	beq.n	8004364 <_puts_r+0x38>
 80043b4:	250a      	movs	r5, #10
 80043b6:	e7d7      	b.n	8004368 <_puts_r+0x3c>
 80043b8:	4622      	mov	r2, r4
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 f857 	bl	800446e <__swbuf_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d1e7      	bne.n	8004394 <_puts_r+0x68>
 80043c4:	e7ce      	b.n	8004364 <_puts_r+0x38>
 80043c6:	3e01      	subs	r6, #1
 80043c8:	e7e4      	b.n	8004394 <_puts_r+0x68>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	6022      	str	r2, [r4, #0]
 80043d0:	220a      	movs	r2, #10
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e7ee      	b.n	80043b4 <_puts_r+0x88>
	...

080043d8 <puts>:
 80043d8:	4b02      	ldr	r3, [pc, #8]	@ (80043e4 <puts+0xc>)
 80043da:	4601      	mov	r1, r0
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	f7ff bfa5 	b.w	800432c <_puts_r>
 80043e2:	bf00      	nop
 80043e4:	2400001c 	.word	0x2400001c

080043e8 <__sread>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	460c      	mov	r4, r1
 80043ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f0:	f000 f8fc 	bl	80045ec <_read_r>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	bfab      	itete	ge
 80043f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043fa:	89a3      	ldrhlt	r3, [r4, #12]
 80043fc:	181b      	addge	r3, r3, r0
 80043fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004402:	bfac      	ite	ge
 8004404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004406:	81a3      	strhlt	r3, [r4, #12]
 8004408:	bd10      	pop	{r4, pc}

0800440a <__swrite>:
 800440a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440e:	461f      	mov	r7, r3
 8004410:	898b      	ldrh	r3, [r1, #12]
 8004412:	05db      	lsls	r3, r3, #23
 8004414:	4605      	mov	r5, r0
 8004416:	460c      	mov	r4, r1
 8004418:	4616      	mov	r6, r2
 800441a:	d505      	bpl.n	8004428 <__swrite+0x1e>
 800441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004420:	2302      	movs	r3, #2
 8004422:	2200      	movs	r2, #0
 8004424:	f000 f8d0 	bl	80045c8 <_lseek_r>
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800442e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004432:	81a3      	strh	r3, [r4, #12]
 8004434:	4632      	mov	r2, r6
 8004436:	463b      	mov	r3, r7
 8004438:	4628      	mov	r0, r5
 800443a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800443e:	f000 b8e7 	b.w	8004610 <_write_r>

08004442 <__sseek>:
 8004442:	b510      	push	{r4, lr}
 8004444:	460c      	mov	r4, r1
 8004446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444a:	f000 f8bd 	bl	80045c8 <_lseek_r>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	bf15      	itete	ne
 8004454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800445a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800445e:	81a3      	strheq	r3, [r4, #12]
 8004460:	bf18      	it	ne
 8004462:	81a3      	strhne	r3, [r4, #12]
 8004464:	bd10      	pop	{r4, pc}

08004466 <__sclose>:
 8004466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446a:	f000 b89d 	b.w	80045a8 <_close_r>

0800446e <__swbuf_r>:
 800446e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004470:	460e      	mov	r6, r1
 8004472:	4614      	mov	r4, r2
 8004474:	4605      	mov	r5, r0
 8004476:	b118      	cbz	r0, 8004480 <__swbuf_r+0x12>
 8004478:	6a03      	ldr	r3, [r0, #32]
 800447a:	b90b      	cbnz	r3, 8004480 <__swbuf_r+0x12>
 800447c:	f7ff ff20 	bl	80042c0 <__sinit>
 8004480:	69a3      	ldr	r3, [r4, #24]
 8004482:	60a3      	str	r3, [r4, #8]
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	071a      	lsls	r2, r3, #28
 8004488:	d501      	bpl.n	800448e <__swbuf_r+0x20>
 800448a:	6923      	ldr	r3, [r4, #16]
 800448c:	b943      	cbnz	r3, 80044a0 <__swbuf_r+0x32>
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f82b 	bl	80044ec <__swsetup_r>
 8004496:	b118      	cbz	r0, 80044a0 <__swbuf_r+0x32>
 8004498:	f04f 37ff 	mov.w	r7, #4294967295
 800449c:	4638      	mov	r0, r7
 800449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	6922      	ldr	r2, [r4, #16]
 80044a4:	1a98      	subs	r0, r3, r2
 80044a6:	6963      	ldr	r3, [r4, #20]
 80044a8:	b2f6      	uxtb	r6, r6
 80044aa:	4283      	cmp	r3, r0
 80044ac:	4637      	mov	r7, r6
 80044ae:	dc05      	bgt.n	80044bc <__swbuf_r+0x4e>
 80044b0:	4621      	mov	r1, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 fa76 	bl	80049a4 <_fflush_r>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d1ed      	bne.n	8004498 <__swbuf_r+0x2a>
 80044bc:	68a3      	ldr	r3, [r4, #8]
 80044be:	3b01      	subs	r3, #1
 80044c0:	60a3      	str	r3, [r4, #8]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	6022      	str	r2, [r4, #0]
 80044c8:	701e      	strb	r6, [r3, #0]
 80044ca:	6962      	ldr	r2, [r4, #20]
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d004      	beq.n	80044dc <__swbuf_r+0x6e>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	07db      	lsls	r3, r3, #31
 80044d6:	d5e1      	bpl.n	800449c <__swbuf_r+0x2e>
 80044d8:	2e0a      	cmp	r6, #10
 80044da:	d1df      	bne.n	800449c <__swbuf_r+0x2e>
 80044dc:	4621      	mov	r1, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fa60 	bl	80049a4 <_fflush_r>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d0d9      	beq.n	800449c <__swbuf_r+0x2e>
 80044e8:	e7d6      	b.n	8004498 <__swbuf_r+0x2a>
	...

080044ec <__swsetup_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <__swsetup_r+0xa8>)
 80044f0:	4605      	mov	r5, r0
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	460c      	mov	r4, r1
 80044f6:	b118      	cbz	r0, 8004500 <__swsetup_r+0x14>
 80044f8:	6a03      	ldr	r3, [r0, #32]
 80044fa:	b90b      	cbnz	r3, 8004500 <__swsetup_r+0x14>
 80044fc:	f7ff fee0 	bl	80042c0 <__sinit>
 8004500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004504:	0719      	lsls	r1, r3, #28
 8004506:	d422      	bmi.n	800454e <__swsetup_r+0x62>
 8004508:	06da      	lsls	r2, r3, #27
 800450a:	d407      	bmi.n	800451c <__swsetup_r+0x30>
 800450c:	2209      	movs	r2, #9
 800450e:	602a      	str	r2, [r5, #0]
 8004510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	f04f 30ff 	mov.w	r0, #4294967295
 800451a:	e033      	b.n	8004584 <__swsetup_r+0x98>
 800451c:	0758      	lsls	r0, r3, #29
 800451e:	d512      	bpl.n	8004546 <__swsetup_r+0x5a>
 8004520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004522:	b141      	cbz	r1, 8004536 <__swsetup_r+0x4a>
 8004524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004528:	4299      	cmp	r1, r3
 800452a:	d002      	beq.n	8004532 <__swsetup_r+0x46>
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f8bd 	bl	80046ac <_free_r>
 8004532:	2300      	movs	r3, #0
 8004534:	6363      	str	r3, [r4, #52]	@ 0x34
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	6063      	str	r3, [r4, #4]
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f043 0308 	orr.w	r3, r3, #8
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	b94b      	cbnz	r3, 8004566 <__swsetup_r+0x7a>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800455c:	d003      	beq.n	8004566 <__swsetup_r+0x7a>
 800455e:	4621      	mov	r1, r4
 8004560:	4628      	mov	r0, r5
 8004562:	f000 fa6d 	bl	8004a40 <__smakebuf_r>
 8004566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800456a:	f013 0201 	ands.w	r2, r3, #1
 800456e:	d00a      	beq.n	8004586 <__swsetup_r+0x9a>
 8004570:	2200      	movs	r2, #0
 8004572:	60a2      	str	r2, [r4, #8]
 8004574:	6962      	ldr	r2, [r4, #20]
 8004576:	4252      	negs	r2, r2
 8004578:	61a2      	str	r2, [r4, #24]
 800457a:	6922      	ldr	r2, [r4, #16]
 800457c:	b942      	cbnz	r2, 8004590 <__swsetup_r+0xa4>
 800457e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004582:	d1c5      	bne.n	8004510 <__swsetup_r+0x24>
 8004584:	bd38      	pop	{r3, r4, r5, pc}
 8004586:	0799      	lsls	r1, r3, #30
 8004588:	bf58      	it	pl
 800458a:	6962      	ldrpl	r2, [r4, #20]
 800458c:	60a2      	str	r2, [r4, #8]
 800458e:	e7f4      	b.n	800457a <__swsetup_r+0x8e>
 8004590:	2000      	movs	r0, #0
 8004592:	e7f7      	b.n	8004584 <__swsetup_r+0x98>
 8004594:	2400001c 	.word	0x2400001c

08004598 <memset>:
 8004598:	4402      	add	r2, r0
 800459a:	4603      	mov	r3, r0
 800459c:	4293      	cmp	r3, r2
 800459e:	d100      	bne.n	80045a2 <memset+0xa>
 80045a0:	4770      	bx	lr
 80045a2:	f803 1b01 	strb.w	r1, [r3], #1
 80045a6:	e7f9      	b.n	800459c <memset+0x4>

080045a8 <_close_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4d06      	ldr	r5, [pc, #24]	@ (80045c4 <_close_r+0x1c>)
 80045ac:	2300      	movs	r3, #0
 80045ae:	4604      	mov	r4, r0
 80045b0:	4608      	mov	r0, r1
 80045b2:	602b      	str	r3, [r5, #0]
 80045b4:	f7fc f8da 	bl	800076c <_close>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_close_r+0x1a>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_close_r+0x1a>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	2400026c 	.word	0x2400026c

080045c8 <_lseek_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	@ (80045e8 <_lseek_r+0x20>)
 80045cc:	4604      	mov	r4, r0
 80045ce:	4608      	mov	r0, r1
 80045d0:	4611      	mov	r1, r2
 80045d2:	2200      	movs	r2, #0
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fc f8ef 	bl	80007ba <_lseek>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_lseek_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_lseek_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	2400026c 	.word	0x2400026c

080045ec <_read_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d07      	ldr	r5, [pc, #28]	@ (800460c <_read_r+0x20>)
 80045f0:	4604      	mov	r4, r0
 80045f2:	4608      	mov	r0, r1
 80045f4:	4611      	mov	r1, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	602a      	str	r2, [r5, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f7fc f87d 	bl	80006fa <_read>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	d102      	bne.n	800460a <_read_r+0x1e>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	b103      	cbz	r3, 800460a <_read_r+0x1e>
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	bd38      	pop	{r3, r4, r5, pc}
 800460c:	2400026c 	.word	0x2400026c

08004610 <_write_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d07      	ldr	r5, [pc, #28]	@ (8004630 <_write_r+0x20>)
 8004614:	4604      	mov	r4, r0
 8004616:	4608      	mov	r0, r1
 8004618:	4611      	mov	r1, r2
 800461a:	2200      	movs	r2, #0
 800461c:	602a      	str	r2, [r5, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	f7fc f888 	bl	8000734 <_write>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_write_r+0x1e>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_write_r+0x1e>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	2400026c 	.word	0x2400026c

08004634 <__errno>:
 8004634:	4b01      	ldr	r3, [pc, #4]	@ (800463c <__errno+0x8>)
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	2400001c 	.word	0x2400001c

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	@ (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	@ (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	@ (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	@ (8004684 <__libc_init_array+0x44>)
 8004654:	f000 fa62 	bl	8004b1c <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	08004c34 	.word	0x08004c34
 800467c:	08004c34 	.word	0x08004c34
 8004680:	08004c34 	.word	0x08004c34
 8004684:	08004c38 	.word	0x08004c38

08004688 <__retarget_lock_init_recursive>:
 8004688:	4770      	bx	lr

0800468a <__retarget_lock_acquire_recursive>:
 800468a:	4770      	bx	lr

0800468c <__retarget_lock_release_recursive>:
 800468c:	4770      	bx	lr

0800468e <memcpy>:
 800468e:	440a      	add	r2, r1
 8004690:	4291      	cmp	r1, r2
 8004692:	f100 33ff 	add.w	r3, r0, #4294967295
 8004696:	d100      	bne.n	800469a <memcpy+0xc>
 8004698:	4770      	bx	lr
 800469a:	b510      	push	{r4, lr}
 800469c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a4:	4291      	cmp	r1, r2
 80046a6:	d1f9      	bne.n	800469c <memcpy+0xe>
 80046a8:	bd10      	pop	{r4, pc}
	...

080046ac <_free_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4605      	mov	r5, r0
 80046b0:	2900      	cmp	r1, #0
 80046b2:	d041      	beq.n	8004738 <_free_r+0x8c>
 80046b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b8:	1f0c      	subs	r4, r1, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bfb8      	it	lt
 80046be:	18e4      	addlt	r4, r4, r3
 80046c0:	f000 f8e0 	bl	8004884 <__malloc_lock>
 80046c4:	4a1d      	ldr	r2, [pc, #116]	@ (800473c <_free_r+0x90>)
 80046c6:	6813      	ldr	r3, [r2, #0]
 80046c8:	b933      	cbnz	r3, 80046d8 <_free_r+0x2c>
 80046ca:	6063      	str	r3, [r4, #4]
 80046cc:	6014      	str	r4, [r2, #0]
 80046ce:	4628      	mov	r0, r5
 80046d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046d4:	f000 b8dc 	b.w	8004890 <__malloc_unlock>
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d908      	bls.n	80046ee <_free_r+0x42>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	1821      	adds	r1, r4, r0
 80046e0:	428b      	cmp	r3, r1
 80046e2:	bf01      	itttt	eq
 80046e4:	6819      	ldreq	r1, [r3, #0]
 80046e6:	685b      	ldreq	r3, [r3, #4]
 80046e8:	1809      	addeq	r1, r1, r0
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	e7ed      	b.n	80046ca <_free_r+0x1e>
 80046ee:	461a      	mov	r2, r3
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	b10b      	cbz	r3, 80046f8 <_free_r+0x4c>
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	d9fa      	bls.n	80046ee <_free_r+0x42>
 80046f8:	6811      	ldr	r1, [r2, #0]
 80046fa:	1850      	adds	r0, r2, r1
 80046fc:	42a0      	cmp	r0, r4
 80046fe:	d10b      	bne.n	8004718 <_free_r+0x6c>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	4401      	add	r1, r0
 8004704:	1850      	adds	r0, r2, r1
 8004706:	4283      	cmp	r3, r0
 8004708:	6011      	str	r1, [r2, #0]
 800470a:	d1e0      	bne.n	80046ce <_free_r+0x22>
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	6053      	str	r3, [r2, #4]
 8004712:	4408      	add	r0, r1
 8004714:	6010      	str	r0, [r2, #0]
 8004716:	e7da      	b.n	80046ce <_free_r+0x22>
 8004718:	d902      	bls.n	8004720 <_free_r+0x74>
 800471a:	230c      	movs	r3, #12
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	e7d6      	b.n	80046ce <_free_r+0x22>
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	1821      	adds	r1, r4, r0
 8004724:	428b      	cmp	r3, r1
 8004726:	bf04      	itt	eq
 8004728:	6819      	ldreq	r1, [r3, #0]
 800472a:	685b      	ldreq	r3, [r3, #4]
 800472c:	6063      	str	r3, [r4, #4]
 800472e:	bf04      	itt	eq
 8004730:	1809      	addeq	r1, r1, r0
 8004732:	6021      	streq	r1, [r4, #0]
 8004734:	6054      	str	r4, [r2, #4]
 8004736:	e7ca      	b.n	80046ce <_free_r+0x22>
 8004738:	bd38      	pop	{r3, r4, r5, pc}
 800473a:	bf00      	nop
 800473c:	24000278 	.word	0x24000278

08004740 <sbrk_aligned>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4e0f      	ldr	r6, [pc, #60]	@ (8004780 <sbrk_aligned+0x40>)
 8004744:	460c      	mov	r4, r1
 8004746:	6831      	ldr	r1, [r6, #0]
 8004748:	4605      	mov	r5, r0
 800474a:	b911      	cbnz	r1, 8004752 <sbrk_aligned+0x12>
 800474c:	f000 f9d6 	bl	8004afc <_sbrk_r>
 8004750:	6030      	str	r0, [r6, #0]
 8004752:	4621      	mov	r1, r4
 8004754:	4628      	mov	r0, r5
 8004756:	f000 f9d1 	bl	8004afc <_sbrk_r>
 800475a:	1c43      	adds	r3, r0, #1
 800475c:	d103      	bne.n	8004766 <sbrk_aligned+0x26>
 800475e:	f04f 34ff 	mov.w	r4, #4294967295
 8004762:	4620      	mov	r0, r4
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	1cc4      	adds	r4, r0, #3
 8004768:	f024 0403 	bic.w	r4, r4, #3
 800476c:	42a0      	cmp	r0, r4
 800476e:	d0f8      	beq.n	8004762 <sbrk_aligned+0x22>
 8004770:	1a21      	subs	r1, r4, r0
 8004772:	4628      	mov	r0, r5
 8004774:	f000 f9c2 	bl	8004afc <_sbrk_r>
 8004778:	3001      	adds	r0, #1
 800477a:	d1f2      	bne.n	8004762 <sbrk_aligned+0x22>
 800477c:	e7ef      	b.n	800475e <sbrk_aligned+0x1e>
 800477e:	bf00      	nop
 8004780:	24000274 	.word	0x24000274

08004784 <_malloc_r>:
 8004784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004788:	1ccd      	adds	r5, r1, #3
 800478a:	f025 0503 	bic.w	r5, r5, #3
 800478e:	3508      	adds	r5, #8
 8004790:	2d0c      	cmp	r5, #12
 8004792:	bf38      	it	cc
 8004794:	250c      	movcc	r5, #12
 8004796:	2d00      	cmp	r5, #0
 8004798:	4606      	mov	r6, r0
 800479a:	db01      	blt.n	80047a0 <_malloc_r+0x1c>
 800479c:	42a9      	cmp	r1, r5
 800479e:	d904      	bls.n	80047aa <_malloc_r+0x26>
 80047a0:	230c      	movs	r3, #12
 80047a2:	6033      	str	r3, [r6, #0]
 80047a4:	2000      	movs	r0, #0
 80047a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004880 <_malloc_r+0xfc>
 80047ae:	f000 f869 	bl	8004884 <__malloc_lock>
 80047b2:	f8d8 3000 	ldr.w	r3, [r8]
 80047b6:	461c      	mov	r4, r3
 80047b8:	bb44      	cbnz	r4, 800480c <_malloc_r+0x88>
 80047ba:	4629      	mov	r1, r5
 80047bc:	4630      	mov	r0, r6
 80047be:	f7ff ffbf 	bl	8004740 <sbrk_aligned>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	4604      	mov	r4, r0
 80047c6:	d158      	bne.n	800487a <_malloc_r+0xf6>
 80047c8:	f8d8 4000 	ldr.w	r4, [r8]
 80047cc:	4627      	mov	r7, r4
 80047ce:	2f00      	cmp	r7, #0
 80047d0:	d143      	bne.n	800485a <_malloc_r+0xd6>
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	d04b      	beq.n	800486e <_malloc_r+0xea>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	4639      	mov	r1, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	eb04 0903 	add.w	r9, r4, r3
 80047e0:	f000 f98c 	bl	8004afc <_sbrk_r>
 80047e4:	4581      	cmp	r9, r0
 80047e6:	d142      	bne.n	800486e <_malloc_r+0xea>
 80047e8:	6821      	ldr	r1, [r4, #0]
 80047ea:	1a6d      	subs	r5, r5, r1
 80047ec:	4629      	mov	r1, r5
 80047ee:	4630      	mov	r0, r6
 80047f0:	f7ff ffa6 	bl	8004740 <sbrk_aligned>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d03a      	beq.n	800486e <_malloc_r+0xea>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	442b      	add	r3, r5
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	bb62      	cbnz	r2, 8004860 <_malloc_r+0xdc>
 8004806:	f8c8 7000 	str.w	r7, [r8]
 800480a:	e00f      	b.n	800482c <_malloc_r+0xa8>
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	1b52      	subs	r2, r2, r5
 8004810:	d420      	bmi.n	8004854 <_malloc_r+0xd0>
 8004812:	2a0b      	cmp	r2, #11
 8004814:	d917      	bls.n	8004846 <_malloc_r+0xc2>
 8004816:	1961      	adds	r1, r4, r5
 8004818:	42a3      	cmp	r3, r4
 800481a:	6025      	str	r5, [r4, #0]
 800481c:	bf18      	it	ne
 800481e:	6059      	strne	r1, [r3, #4]
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	bf08      	it	eq
 8004824:	f8c8 1000 	streq.w	r1, [r8]
 8004828:	5162      	str	r2, [r4, r5]
 800482a:	604b      	str	r3, [r1, #4]
 800482c:	4630      	mov	r0, r6
 800482e:	f000 f82f 	bl	8004890 <__malloc_unlock>
 8004832:	f104 000b 	add.w	r0, r4, #11
 8004836:	1d23      	adds	r3, r4, #4
 8004838:	f020 0007 	bic.w	r0, r0, #7
 800483c:	1ac2      	subs	r2, r0, r3
 800483e:	bf1c      	itt	ne
 8004840:	1a1b      	subne	r3, r3, r0
 8004842:	50a3      	strne	r3, [r4, r2]
 8004844:	e7af      	b.n	80047a6 <_malloc_r+0x22>
 8004846:	6862      	ldr	r2, [r4, #4]
 8004848:	42a3      	cmp	r3, r4
 800484a:	bf0c      	ite	eq
 800484c:	f8c8 2000 	streq.w	r2, [r8]
 8004850:	605a      	strne	r2, [r3, #4]
 8004852:	e7eb      	b.n	800482c <_malloc_r+0xa8>
 8004854:	4623      	mov	r3, r4
 8004856:	6864      	ldr	r4, [r4, #4]
 8004858:	e7ae      	b.n	80047b8 <_malloc_r+0x34>
 800485a:	463c      	mov	r4, r7
 800485c:	687f      	ldr	r7, [r7, #4]
 800485e:	e7b6      	b.n	80047ce <_malloc_r+0x4a>
 8004860:	461a      	mov	r2, r3
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	42a3      	cmp	r3, r4
 8004866:	d1fb      	bne.n	8004860 <_malloc_r+0xdc>
 8004868:	2300      	movs	r3, #0
 800486a:	6053      	str	r3, [r2, #4]
 800486c:	e7de      	b.n	800482c <_malloc_r+0xa8>
 800486e:	230c      	movs	r3, #12
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	4630      	mov	r0, r6
 8004874:	f000 f80c 	bl	8004890 <__malloc_unlock>
 8004878:	e794      	b.n	80047a4 <_malloc_r+0x20>
 800487a:	6005      	str	r5, [r0, #0]
 800487c:	e7d6      	b.n	800482c <_malloc_r+0xa8>
 800487e:	bf00      	nop
 8004880:	24000278 	.word	0x24000278

08004884 <__malloc_lock>:
 8004884:	4801      	ldr	r0, [pc, #4]	@ (800488c <__malloc_lock+0x8>)
 8004886:	f7ff bf00 	b.w	800468a <__retarget_lock_acquire_recursive>
 800488a:	bf00      	nop
 800488c:	24000270 	.word	0x24000270

08004890 <__malloc_unlock>:
 8004890:	4801      	ldr	r0, [pc, #4]	@ (8004898 <__malloc_unlock+0x8>)
 8004892:	f7ff befb 	b.w	800468c <__retarget_lock_release_recursive>
 8004896:	bf00      	nop
 8004898:	24000270 	.word	0x24000270

0800489c <__sflush_r>:
 800489c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	0716      	lsls	r6, r2, #28
 80048a6:	4605      	mov	r5, r0
 80048a8:	460c      	mov	r4, r1
 80048aa:	d454      	bmi.n	8004956 <__sflush_r+0xba>
 80048ac:	684b      	ldr	r3, [r1, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc02      	bgt.n	80048b8 <__sflush_r+0x1c>
 80048b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	dd48      	ble.n	800494a <__sflush_r+0xae>
 80048b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d045      	beq.n	800494a <__sflush_r+0xae>
 80048be:	2300      	movs	r3, #0
 80048c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048c4:	682f      	ldr	r7, [r5, #0]
 80048c6:	6a21      	ldr	r1, [r4, #32]
 80048c8:	602b      	str	r3, [r5, #0]
 80048ca:	d030      	beq.n	800492e <__sflush_r+0x92>
 80048cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	0759      	lsls	r1, r3, #29
 80048d2:	d505      	bpl.n	80048e0 <__sflush_r+0x44>
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	1ad2      	subs	r2, r2, r3
 80048d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048da:	b10b      	cbz	r3, 80048e0 <__sflush_r+0x44>
 80048dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b0      	blx	r6
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	d106      	bne.n	80048fe <__sflush_r+0x62>
 80048f0:	6829      	ldr	r1, [r5, #0]
 80048f2:	291d      	cmp	r1, #29
 80048f4:	d82b      	bhi.n	800494e <__sflush_r+0xb2>
 80048f6:	4a2a      	ldr	r2, [pc, #168]	@ (80049a0 <__sflush_r+0x104>)
 80048f8:	40ca      	lsrs	r2, r1
 80048fa:	07d6      	lsls	r6, r2, #31
 80048fc:	d527      	bpl.n	800494e <__sflush_r+0xb2>
 80048fe:	2200      	movs	r2, #0
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	d504      	bpl.n	8004914 <__sflush_r+0x78>
 800490a:	1c42      	adds	r2, r0, #1
 800490c:	d101      	bne.n	8004912 <__sflush_r+0x76>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b903      	cbnz	r3, 8004914 <__sflush_r+0x78>
 8004912:	6560      	str	r0, [r4, #84]	@ 0x54
 8004914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	b1b9      	cbz	r1, 800494a <__sflush_r+0xae>
 800491a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800491e:	4299      	cmp	r1, r3
 8004920:	d002      	beq.n	8004928 <__sflush_r+0x8c>
 8004922:	4628      	mov	r0, r5
 8004924:	f7ff fec2 	bl	80046ac <_free_r>
 8004928:	2300      	movs	r3, #0
 800492a:	6363      	str	r3, [r4, #52]	@ 0x34
 800492c:	e00d      	b.n	800494a <__sflush_r+0xae>
 800492e:	2301      	movs	r3, #1
 8004930:	4628      	mov	r0, r5
 8004932:	47b0      	blx	r6
 8004934:	4602      	mov	r2, r0
 8004936:	1c50      	adds	r0, r2, #1
 8004938:	d1c9      	bne.n	80048ce <__sflush_r+0x32>
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0c6      	beq.n	80048ce <__sflush_r+0x32>
 8004940:	2b1d      	cmp	r3, #29
 8004942:	d001      	beq.n	8004948 <__sflush_r+0xac>
 8004944:	2b16      	cmp	r3, #22
 8004946:	d11e      	bne.n	8004986 <__sflush_r+0xea>
 8004948:	602f      	str	r7, [r5, #0]
 800494a:	2000      	movs	r0, #0
 800494c:	e022      	b.n	8004994 <__sflush_r+0xf8>
 800494e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004952:	b21b      	sxth	r3, r3
 8004954:	e01b      	b.n	800498e <__sflush_r+0xf2>
 8004956:	690f      	ldr	r7, [r1, #16]
 8004958:	2f00      	cmp	r7, #0
 800495a:	d0f6      	beq.n	800494a <__sflush_r+0xae>
 800495c:	0793      	lsls	r3, r2, #30
 800495e:	680e      	ldr	r6, [r1, #0]
 8004960:	bf08      	it	eq
 8004962:	694b      	ldreq	r3, [r1, #20]
 8004964:	600f      	str	r7, [r1, #0]
 8004966:	bf18      	it	ne
 8004968:	2300      	movne	r3, #0
 800496a:	eba6 0807 	sub.w	r8, r6, r7
 800496e:	608b      	str	r3, [r1, #8]
 8004970:	f1b8 0f00 	cmp.w	r8, #0
 8004974:	dde9      	ble.n	800494a <__sflush_r+0xae>
 8004976:	6a21      	ldr	r1, [r4, #32]
 8004978:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800497a:	4643      	mov	r3, r8
 800497c:	463a      	mov	r2, r7
 800497e:	4628      	mov	r0, r5
 8004980:	47b0      	blx	r6
 8004982:	2800      	cmp	r0, #0
 8004984:	dc08      	bgt.n	8004998 <__sflush_r+0xfc>
 8004986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004998:	4407      	add	r7, r0
 800499a:	eba8 0800 	sub.w	r8, r8, r0
 800499e:	e7e7      	b.n	8004970 <__sflush_r+0xd4>
 80049a0:	20400001 	.word	0x20400001

080049a4 <_fflush_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b913      	cbnz	r3, 80049b4 <_fflush_r+0x10>
 80049ae:	2500      	movs	r5, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	b118      	cbz	r0, 80049be <_fflush_r+0x1a>
 80049b6:	6a03      	ldr	r3, [r0, #32]
 80049b8:	b90b      	cbnz	r3, 80049be <_fflush_r+0x1a>
 80049ba:	f7ff fc81 	bl	80042c0 <__sinit>
 80049be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f3      	beq.n	80049ae <_fflush_r+0xa>
 80049c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049c8:	07d0      	lsls	r0, r2, #31
 80049ca:	d404      	bmi.n	80049d6 <_fflush_r+0x32>
 80049cc:	0599      	lsls	r1, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_fflush_r+0x32>
 80049d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049d2:	f7ff fe5a 	bl	800468a <__retarget_lock_acquire_recursive>
 80049d6:	4628      	mov	r0, r5
 80049d8:	4621      	mov	r1, r4
 80049da:	f7ff ff5f 	bl	800489c <__sflush_r>
 80049de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049e0:	07da      	lsls	r2, r3, #31
 80049e2:	4605      	mov	r5, r0
 80049e4:	d4e4      	bmi.n	80049b0 <_fflush_r+0xc>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	059b      	lsls	r3, r3, #22
 80049ea:	d4e1      	bmi.n	80049b0 <_fflush_r+0xc>
 80049ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ee:	f7ff fe4d 	bl	800468c <__retarget_lock_release_recursive>
 80049f2:	e7dd      	b.n	80049b0 <_fflush_r+0xc>

080049f4 <__swhatbuf_r>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	460c      	mov	r4, r1
 80049f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fc:	2900      	cmp	r1, #0
 80049fe:	b096      	sub	sp, #88	@ 0x58
 8004a00:	4615      	mov	r5, r2
 8004a02:	461e      	mov	r6, r3
 8004a04:	da0d      	bge.n	8004a22 <__swhatbuf_r+0x2e>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2340      	movne	r3, #64	@ 0x40
 8004a14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a18:	2000      	movs	r0, #0
 8004a1a:	6031      	str	r1, [r6, #0]
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	b016      	add	sp, #88	@ 0x58
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
 8004a22:	466a      	mov	r2, sp
 8004a24:	f000 f848 	bl	8004ab8 <_fstat_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	dbec      	blt.n	8004a06 <__swhatbuf_r+0x12>
 8004a2c:	9901      	ldr	r1, [sp, #4]
 8004a2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a36:	4259      	negs	r1, r3
 8004a38:	4159      	adcs	r1, r3
 8004a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a3e:	e7eb      	b.n	8004a18 <__swhatbuf_r+0x24>

08004a40 <__smakebuf_r>:
 8004a40:	898b      	ldrh	r3, [r1, #12]
 8004a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a44:	079d      	lsls	r5, r3, #30
 8004a46:	4606      	mov	r6, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	d507      	bpl.n	8004a5c <__smakebuf_r+0x1c>
 8004a4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	2301      	movs	r3, #1
 8004a56:	6163      	str	r3, [r4, #20]
 8004a58:	b003      	add	sp, #12
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5c:	ab01      	add	r3, sp, #4
 8004a5e:	466a      	mov	r2, sp
 8004a60:	f7ff ffc8 	bl	80049f4 <__swhatbuf_r>
 8004a64:	9f00      	ldr	r7, [sp, #0]
 8004a66:	4605      	mov	r5, r0
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f7ff fe8a 	bl	8004784 <_malloc_r>
 8004a70:	b948      	cbnz	r0, 8004a86 <__smakebuf_r+0x46>
 8004a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a76:	059a      	lsls	r2, r3, #22
 8004a78:	d4ee      	bmi.n	8004a58 <__smakebuf_r+0x18>
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	e7e2      	b.n	8004a4c <__smakebuf_r+0xc>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	6020      	str	r0, [r4, #0]
 8004a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a96:	b15b      	cbz	r3, 8004ab0 <__smakebuf_r+0x70>
 8004a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f000 f81d 	bl	8004adc <_isatty_r>
 8004aa2:	b128      	cbz	r0, 8004ab0 <__smakebuf_r+0x70>
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	81a3      	strh	r3, [r4, #12]
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	431d      	orrs	r5, r3
 8004ab4:	81a5      	strh	r5, [r4, #12]
 8004ab6:	e7cf      	b.n	8004a58 <__smakebuf_r+0x18>

08004ab8 <_fstat_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d07      	ldr	r5, [pc, #28]	@ (8004ad8 <_fstat_r+0x20>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	f7fb fe5d 	bl	8000784 <_fstat>
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	d102      	bne.n	8004ad4 <_fstat_r+0x1c>
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	b103      	cbz	r3, 8004ad4 <_fstat_r+0x1c>
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2400026c 	.word	0x2400026c

08004adc <_isatty_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	4d06      	ldr	r5, [pc, #24]	@ (8004af8 <_isatty_r+0x1c>)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	f7fb fe5c 	bl	80007a4 <_isatty>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_isatty_r+0x1a>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_isatty_r+0x1a>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	2400026c 	.word	0x2400026c

08004afc <_sbrk_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d06      	ldr	r5, [pc, #24]	@ (8004b18 <_sbrk_r+0x1c>)
 8004b00:	2300      	movs	r3, #0
 8004b02:	4604      	mov	r4, r0
 8004b04:	4608      	mov	r0, r1
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	f7fb fe64 	bl	80007d4 <_sbrk>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_sbrk_r+0x1a>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_sbrk_r+0x1a>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	2400026c 	.word	0x2400026c

08004b1c <_init>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr

08004b28 <_fini>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr
